function mp4split(opts) {
  var isNode = typeof(exports) !== 'undefined';
  if (!isNode) {
    var Module = {}
    for (var i in opts) {
      Module[i] = opts[i];
    }
    if (!Module['outputDirectory']) {
      throw 'outputDirectory is required';
    }
    Module['preRun'] = function() {
      FS.createFolder('/', Module['outputDirectory'], true, true);
      if (Module['files']) {
        Module['files'].forEach(function(file) {
          var path = PATH.join2('/', file.name);
          var mode = FS.getMode(true, false);
          var node = FS.create(path, mode);
          node.timestamp = Date.now();
          node.file = file;
          node.usedBytes = file.size;
        });
      }
    };
    Module['postRun'] = function() {
      var handle = FS.analyzePath(Module['outputDirectory']);
      Module['return'] = getAllFiles(handle);
    };
    function getAllFiles(result) {
      var entries = [];
      if (result && result.object && result.object.contents) {
        for (var i in result.object.contents) {
          if (result.object.contents.hasOwnProperty(i)) {
            var node = result.object.contents[i];
            if (node.entry) {
              entries.push(node.entry.file());
            } 
          }
        }
      }
      return entries;
    }
  }

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 29536;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_Mp4Split_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4AtomFactory_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4Marlin_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4MetaData_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,80,52,32,70,114,97,103,109,101,110,116,32,83,112,108,105,116,116,101,114,32,45,32,86,101,114,115,105,111,110,32,49,46,49,10,40,66,101,110,116,111,52,32,86,101,114,115,105,111,110,32,49,46,52,46,51,46,48,41,10,40,99,41,32,50,48,48,50,45,50,48,49,51,32,65,120,105,111,109,97,116,105,99,32,83,121,115,116,101,109,115,44,32,76,76,67,10,10,117,115,97,103,101,58,32,109,112,52,115,112,108,105,116,32,91,111,112,116,105,111,110,115,93,32,60,105,110,112,117,116,62,10,79,112,116,105,111,110,115,58,10,32,32,45,45,118,101,114,98,111,115,101,32,58,32,112,114,105,110,116,32,118,101,114,98,111,115,101,32,105,110,102,111,114,109,97,116,105,111,110,32,119,104,101,110,32,114,117,110,110,105,110,103,10,32,32,45,45,105,110,105,116,45,115,101,103,109,101,110,116,32,60,102,105,108,101,110,97,109,101,62,32,58,32,110,97,109,101,32,111,102,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,100,101,102,97,117,108,116,58,32,105,110,105,116,46,109,112,52,41,10,32,32,45,45,105,110,105,116,45,111,110,108,121,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,116,104,101,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,110,111,32,109,101,100,105,97,32,115,101,103,109,101,110,116,115,41,10,32,32,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,32,60,102,105,108,101,110,97,109,101,45,112,97,116,116,101,114,110,62,32,40,100,101,102,97,117,108,116,58,32,115,101,103,109,101,110,116,45,37,37,108,108,117,46,37,37,48,52,108,108,117,46,109,52,102,41,10,32,32,32,32,78,79,84,69,58,32,97,108,108,32,112,97,114,97,109,101,116,101,114,115,32,97,114,101,32,54,52,45,98,105,116,32,105,110,116,101,103,101,114,115,44,32,117,115,101,32,37,37,108,108,117,32,105,110,32,116,104,101,32,112,97,116,116,101,114,110,10,32,32,45,45,115,116,97,114,116,45,110,117,109,98,101,114,32,60,110,62,32,58,32,115,116,97,114,116,32,110,117,109,98,101,114,105,110,103,32,115,101,103,109,101,110,116,115,32,97,116,32,60,110,62,32,40,100,101,102,97,117,108,116,61,49,41,10,32,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,101,116,101,114,115,32,60,112,97,114,97,109,115,62,32,58,32,111,110,101,32,111,114,32,109,111,114,101,32,115,101,108,101,99,116,111,114,32,108,101,116,116,101,114,32,40,100,101,102,97,117,108,116,58,32,73,78,41,10,32,32,32,32,32,73,58,32,116,114,97,99,107,32,73,68,10,32,32,32,32,32,78,58,32,115,101,103,109,101,110,116,32,110,117,109,98,101,114,10,32,32,45,45,116,114,97,99,107,45,105,100,32,60,116,114,97,99,107,45,105,100,62,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,115,101,103,109,101,110,116,115,32,119,105,116,104,32,116,104,105,115,32,116,114,97,99,107,32,73,68,10,32,32,45,45,97,117,100,105,111,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,97,117,100,105,111,32,115,101,103,109,101,110,116,115,10,32,32,45,45,118,105,100,101,111,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,118,105,100,101,111,32,115,101,103,109,101,110,116,115,10,0,0,0,0,0,105,110,105,116,46,109,112,52,0,0,0,0,0,0,0,0,115,101,103,109,101,110,116,45,37,108,108,117,46,37,48,52,108,108,117,46,109,52,102,0,73,78,0,0,0,0,0,0,45,45,118,101,114,98,111,115,101,0,0,0,0,0,0,0,45,45,105,110,105,116,45,115,101,103,109,101,110,116,0,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,105,110,105,116,45,115,101,103,109,101,110,116,32,111,112,116,105,111,110,10,0,0,0,0,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,32,111,112,116,105,111,110,10,0,0,0,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,101,116,101,114,115,0,0,0,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,111,112,116,105,111,110,10,0,0,45,45,116,114,97,99,107,45,105,100,0,0,0,0,0,0,45,45,115,116,97,114,116,45,110,117,109,98,101,114,0,0,45,45,105,110,105,116,45,111,110,108,121,0,0,0,0,0,45,45,97,117,100,105,111,0,45,45,118,105,100,101,111,0,69,82,82,79,82,58,32,117,110,101,120,112,101,99,116,101,100,32,97,114,103,117,109,101,110,116,10,0,0,0,0,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,105,110,112,117,116,32,102,105,108,101,32,110,97,109,101,10,0,69,82,82,79,82,58,32,45,45,97,117,100,105,111,44,32,45,45,118,105,100,101,111,32,97,110,100,32,45,45,116,114,97,99,107,45,105,100,32,111,112,116,105,111,110,115,32,97,114,101,32,109,117,116,117,97,108,121,32,101,120,99,108,117,115,105,118,101,10,0,0,0,69,82,82,79,82,58,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,97,114,103,117,109,101,110,116,32,105,115,32,116,111,111,32,115,104,111,114,116,10,0,0,69,82,82,79,82,58,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,97,114,103,117,109,101,110,116,32,105,115,32,116,111,111,32,108,111,110,103,10,0,0,0,69,82,82,79,82,58,32,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,112,97,114,97,109,101,116,101,114,32,39,37,99,39,10,0,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,111,112,101,110,32,105,110,112,117,116,32,40,37,100,41,10,0,0,110,111,32,109,111,118,105,101,32,102,111,117,110,100,32,105,110,32,102,105,108,101,10,0,45,45,97,117,100,105,111,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,97,117,100,105,111,32,116,114,97,99,107,32,102,111,117,110,100,10,0,0,0,0,0,45,45,118,105,100,101,111,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,118,105,100,101,111,32,116,114,97,99,107,32,102,111,117,110,100,10,0,0,0,0,0,45,45,116,114,97,99,107,45,105,100,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,115,117,99,104,32,116,114,97,99,107,32,102,111,117,110,100,10,0,0,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,40,37,100,41,10,0,0,0,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,119,114,105,116,101,32,102,116,121,112,32,115,101,103,109,101,110,116,32,40,37,100,41,10,0,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,119,114,105,116,101,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,37,100,41,10,0,0,80,114,111,99,101,115,115,32,116,104,101,32,110,101,120,116,32,97,116,111,109,10,0,0,82,101,115,117,108,116,58,32,37,100,10,0,0,0,0,0,65,80,52,95,70,65,73,76,69,68,10,0,0,0,0,0,65,80,52,95,65,84,79,77,95,84,89,80,69,95,77,79,79,70,10,0,0,0,0,0,69,82,82,79,82,58,32,105,110,118,97,108,105,100,32,109,101,100,105,97,32,102,111,114,109,97,116,10,0,0,0,0,69,82,82,79,82,58,32,45,45,97,117,100,105,111,32,111,112,116,105,111,110,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,109,117,108,116,105,45,116,114,97,99,107,32,102,114,97,103,109,101,110,116,115,0,0,0,69,82,82,79,82,58,32,45,45,118,105,100,101,111,32,111,112,116,105,111,110,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,109,117,108,116,105,45,116,114,97,99,107,32,102,114,97,103,109,101,110,116,115,0,0,0,87,114,105,116,101,32,115,101,103,109,101,110,116,32,37,115,10,0,0,0,0,0,0,0,65,80,52,95,65,84,79,77,95,84,89,80,69,95,77,70,82,65,10,0,0,0,0,0,0,0,0,0,112,8,0,0,1,0,0,0,2,0,0,0,240,106,0,0,120,8,0,0,57,65,80,52,95,65,114,114,97,121,73,106,69,0,0,0,0,0,0,0,32,9,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,220,255,255,255,32,9,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,49,55,65,80,52,95,67,111,110,116,97,105,110,101,114,65,116,111,109,0,0,0,0,0,120,107,0,0,8,9,0,0,0,0,0,0,2,0,0,0,208,43,0,0,2,0,0,0,136,44,0,0,2,36,0,0,0,0,0,0,0,10,0,0,31,0,0,0,32,0,0,0,0,0,0,0,216,9,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,128,9,0,0,33,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,24,107,0,0,144,9,0,0,168,9,0,0,0,0,0,0,49,55,65,80,52,95,65,116,111,109,83,105,122,101,65,100,100,101,114,0,0,0,0,0,240,106,0,0,176,9,0,0,78,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,52,73,116,101,109,56,79,112,101,114,97,116,111,114,69,0,0,0,0,24,107,0,0,232,9,0,0,168,9,0,0,0,0,0,0,50,49,65,80,52,95,65,116,111,109,76,105,115,116,73,110,115,112,101,99,116,111,114,0,240,106,0,0,8,10,0,0,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,0,0,0,0,0,0,0,0,104,10,0,0,38,0,0,0,39,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,56,65,80,52,95,70,105,108,101,0,0,0,0,0,0,0,24,107,0,0,88,10,0,0,136,44,0,0,0,0,0,0,0,0,0,0,200,10,0,0,44,0,0,0,45,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,46,0,0,0,9,0,0,0,10,0,0,0,47,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,114,101,120,65,116,111,109,0,0,24,107,0,0,184,10,0,0,208,43,0,0,0,0,0,0,116,114,97,99,107,32,105,100,0,0,0,0,0,0,0,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,100,101,115,99,114,105,112,116,105,111,110,32,105,110,100,101,120,0,0,0,0,0,0,0,0,0,0,0,0,184,11,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,224,11,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,49,52,65,80,52,95,66,121,116,101,83,116,114,101,97,109,0,0,0,0,0,0,0,0,24,107,0,0,128,11,0,0,96,12,0,0,0,0,0,0,49,51,65,80,52,95,83,117,98,83,116,114,101,97,109,0,24,107,0,0,168,11,0,0,152,11,0,0,0,0,0,0,50,48,65,80,52,95,77,101,109,111,114,121,66,121,116,101,83,116,114,101,97,109,0,0,24,107,0,0,200,11,0,0,152,11,0,0,0,0,0,0,98,121,116,101,115,95,114,101,97,100,32,60,61,32,98,121,116,101,115,95,116,111,95,114,101,97,100,0,0,0,0,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,66,121,116,101,83,116,114,101,97,109,46,99,112,112,0,0,0,0,0,0,0,82,101,97,100,0,0,0,0,98,121,116,101,115,95,119,114,105,116,116,101,110,32,60,61,32,98,121,116,101,115,95,116,111,95,119,114,105,116,101,0,240,106,0,0,104,12,0,0,49,55,65,80,52,95,82,101,102,101,114,101,110,99,101,97,98,108,101,0,0,0,0,0,0,0,0,0,216,12,0,0,69,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,0,0,0,0,0,0,0,240,106,0,0,192,12,0,0,0,0,0,0,56,13,0,0,72,0,0,0,73,0,0,0,0,0,0,0,8,13,0,0,69,0,0,0,74,0,0,0,71,0,0,0,0,0,0,0,24,107,0,0,24,13,0,0,216,12,0,0,0,0,0,0,50,50,65,80,52,95,68,101,102,97,117,108,116,65,116,111,109,70,97,99,116,111,114,121,0,0,0,0,0,0,0,0,240,106,0,0,64,13,0,0,56,65,80,52,95,76,105,115,116,73,78,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,49,49,84,121,112,101,72,97,110,100,108,101,114,69,69,0,0,0,0,0,0,0,0,0,192,13,0,0,75,0,0,0,76,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,77,0,0,0,9,0,0,0,10,0,0,0,78,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,97,105,122,65,116,111,109,0,0,24,107,0,0,176,13,0,0,208,43,0,0,0,0,0,0,0,0,0,0,0,14,0,0,79,0,0,0,80,0,0,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,105,110,102,111,32,115,105,122,101,0,0,0,0,0,0,0,0,240,106,0,0,8,14,0,0,57,65,80,52,95,65,114,114,97,121,73,104,69,0,0,0,0,0,0,0,104,14,0,0,81,0,0,0,82,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,83,0,0,0,9,0,0,0,10,0,0,0,84,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,49,65,80,52,95,85,114,108,65,116,111,109,0,0,0,24,107,0,0,88,14,0,0,208,43,0,0,0,0,0,0,108,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,91,108,111,99,97,108,32,116,111,32,102,105,108,101,93,0,0,0,0,0,232,14,0,0,85,0,0,0,86,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,87,0,0,0,9,0,0,0,10,0,0,0,88,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,99,104,109,65,116,111,109,0,0,24,107,0,0,216,14,0,0,208,43,0,0,0,0,0,0,115,99,104,101,109,101,95,116,121,112,101,0,0,0,0,0,115,99,104,101,109,101,95,118,101,114,115,105,111,110,32,40,115,104,111,114,116,41,0,0,115,99,104,101,109,101,95,118,101,114,115,105,111,110,0,0,115,99,104,101,109,101,95,117,114,105,0,0,0,0,0,0,0,0,0,0,144,15,0,0,89,0,0,0,90,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,91,0,0,0,9,0,0,0,10,0,0,0,92,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,69,115,100,115,65,116,111,109,0,0,24,107,0,0,128,15,0,0,208,43,0,0,0,0,0,0,0,0,0,0,240,15,0,0,93,0,0,0,94,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,95,0,0,0,9,0,0,0,10,0,0,0,96,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,114,117,110,65,116,111,109,0,0,24,107,0,0,224,15,0,0,208,43,0,0,0,0,0,0,0,0,0,0,8,17,0,0,97,0,0,0,98,0,0,0,115,97,109,112,108,101,32,99,111,117,110,116,0,0,0,0,100,97,116,97,32,111,102,102,115,101,116,0,0,0,0,0,102,105,114,115,116,32,115,97,109,112,108,101,32,102,108,97,103,115,0,0,0,0,0,0,37,48,52,100,0,0,0,0,100,58,37,117,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,37,115,115,58,37,117,0,0,37,115,102,58,37,120,0,0,37,115,99,58,37,117,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,115,97,109,112,108,101,95,100,117,114,97,116,105,111,110,58,37,117,0,0,0,0,0,0,44,32,0,0,0,0,0,0,37,115,115,97,109,112,108,101,95,115,105,122,101,58,37,117,0,0,0,0,0,0,0,0,37,115,115,97,109,112,108,101,95,102,108,97,103,115,58,37,120,0,0,0,0,0,0,0,37,115,115,97,109,112,108,101,95,99,111,109,112,111,115,105,116,105,111,110,95,116,105,109,101,95,111,102,102,115,101,116,58,37,117,0,0,0,0,0,240,106,0,0,16,17,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,84,114,117,110,65,116,111,109,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,0,0,0,200,17,0,0,99,0,0,0,100,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,101,0,0,0,102,0,0,0,220,255,255,255,200,17,0,0,103,0,0,0,104,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,105,0,0,0,106,0,0,0,49,50,65,80,52,95,77,111,111,118,65,116,111,109,0,0,24,107,0,0,184,17,0,0,32,9,0,0,0,0,0,0,0,0,0,0,72,18,0,0,107,0,0,0,108,0,0,0,0,0,0,0,32,18,0,0,33,0,0,0,109,0,0,0,110,0,0,0,0,0,0,0,24,107,0,0,16,18,0,0,32,9,0,0,0,0,0,0,49,50,65,80,52,95,84,114,97,107,65,116,111,109,0,0,24,107,0,0,48,18,0,0,168,9,0,0,0,0,0,0,50,49,65,80,52,95,84,114,97,107,65,116,111,109,67,111,108,108,101,99,116,111,114,0,240,106,0,0,80,18,0,0,56,65,80,52,95,76,105,115,116,73,49,50,65,80,52,95,84,114,97,107,65,116,111,109,69,0,0,0,0,0,0,0,0,0,0,0,192,18,0,0,44,0,0,0,111,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,112,0,0,0,9,0,0,0,10,0,0,0,113,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,109,104,100,65,116,111,109,0,0,24,107,0,0,176,18,0,0,208,43,0,0,0,0,0,0,98,97,108,97,110,99,101,0,0,0,0,0,64,19,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,112,19,0,0,114,0,0,0,121,0,0,0,116,0,0,0,122,0,0,0,123,0,0,0,119,0,0,0,120,0,0,0,0,0,0,0,50,48,65,80,52,95,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,0,24,107,0,0,40,19,0,0,128,42,0,0,0,0,0,0,50,55,65,80,52,95,73,110,105,116,105,97,108,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,0,0,24,107,0,0,80,19,0,0,64,19,0,0,0,0,0,0,0,0,0,0,168,21,0,0,124,0,0,0,125,0,0,0,0,0,0,0,72,21,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,24,21,0,0,129,0,0,0,130,0,0,0,131,0,0,0,0,0,0,0,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,0,0,0,0,0,0,0,117,114,108,0,0,0,0,0,0,0,0,0,176,20,0,0,129,0,0,0,132,0,0,0,133,0,0,0,0,0,0,0,73,110,105,116,105,97,108,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,105,110,99,108,117,100,101,32,105,110,108,105,110,101,32,112,114,111,102,105,108,101,32,108,101,118,101,108,32,102,108,97,103,0,0,0,0,0,0,0,79,68,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,0,0,0,0,0,0,0,115,99,101,110,101,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,0,0,0,0,97,117,100,105,111,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,0,0,0,0,118,105,115,117,97,108,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,0,0,0,103,114,97,112,104,105,99,115,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,0,24,107,0,0,192,20,0,0,224,20,0,0,0,0,0,0,50,55,65,80,52,95,68,101,115,99,114,105,112,116,111,114,76,105,115,116,73,110,115,112,101,99,116,111,114,0,0,0,240,106,0,0,232,20,0,0,78,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,52,73,116,101,109,56,79,112,101,114,97,116,111,114,69,0,0,0,0,0,24,107,0,0,40,21,0,0,224,20,0,0,0,0,0,0,50,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,76,105,115,116,87,114,105,116,101,114,0,0,0,0,0,0,24,107,0,0,88,21,0,0,112,21,0,0,0,0,0,0,50,48,65,80,52,95,68,101,115,99,114,105,112,116,111,114,70,105,110,100,101,114,0,0,240,106,0,0,120,21,0,0,78,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,0,0,0,0,0,0,240,106,0,0,176,21,0,0,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,22,0,0,134,0,0,0,135,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,136,0,0,0,9,0,0,0,10,0,0,0,137,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,49,65,80,52,95,83,100,112,65,116,111,109,0,0,0,24,107,0,0,24,22,0,0,208,43,0,0,0,0,0,0,0,0,0,0,136,22,0,0,44,0,0,0,138,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,139,0,0,0,9,0,0,0,10,0,0,0,140,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,77,102,114,111,65,116,111,109,0,0,24,107,0,0,120,22,0,0,208,43,0,0,0,0,0,0,109,102,114,97,95,115,105,122,101,0,0,0,0,0,0,0,0,0,0,0,224,22,0,0,141,0,0,0,142,0,0,0,116,0,0,0,143,0,0,0,144,0,0,0,0,0,0,0,49,52,65,80,52,95,69,120,112,97,110,100,97,98,108,101,0,0,0,0,0,0,0,0,240,106,0,0,200,22,0,0,104,101,97,100,101,114,95,115,105,122,101,32,62,61,32,49,43,49,0,0,0,0,0,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,69,120,112,97,110,100,97,98,108,101,46,99,112,112,0,0,0,0,0,0,0,65,80,52,95,69,120,112,97,110,100,97,98,108,101,0,0,104,101,97,100,101,114,95,115,105,122,101,32,60,61,32,49,43,52,0,0,0,0,0,0,109,95,72,101,97,100,101,114,83,105,122,101,45,49,32,60,61,32,56,0,0,0,0,0,87,114,105,116,101,0,0,0,109,95,72,101,97,100,101,114,83,105,122,101,32,62,61,32,50,0,0,0,0,0,0,0,35,58,37,48,50,120,0,0,0,0,0,0,224,23,0,0,145,0,0,0,146,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,147,0,0,0,9,0,0,0,10,0,0,0,148,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,67,116,116,115,65,116,111,109,0,0,24,107,0,0,208,23,0,0,208,43,0,0,0,0,0,0,0,0,0,0,24,24,0,0,149,0,0,0,150,0,0,0,99,111,117,110,116,61,37,100,44,32,111,102,102,115,101,116,61,37,100,0,0,0,0,0,240,106,0,0,32,24,0,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,67,116,116,115,84,97,98,108,101,69,110,116,114,121,69,0,0,0,0,0,0,0,0,0,0,0,0,104,24,0,0,151,0,0,0,152,0,0,0,57,65,80,52,95,77,111,118,105,101,0,0,0,0,0,0,240,106,0,0,88,24,0,0,0,0,0,0,48,25,0,0,153,0,0,0,154,0,0,0,0,0,0,0,8,25,0,0,155,0,0,0,156,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,176,24,0,0,155,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,24,107,0,0,192,24,0,0,216,24,0,0,0,0,0,0,50,49,65,80,52,95,84,114,97,99,107,70,105,110,100,101,114,66,121,84,121,112,101,0,240,106,0,0,224,24,0,0,78,56,65,80,52,95,76,105,115,116,73,57,65,80,52,95,84,114,97,99,107,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,0,0,0,0,24,107,0,0,24,25,0,0,216,24,0,0,0,0,0,0,49,57,65,80,52,95,84,114,97,99,107,70,105,110,100,101,114,66,121,73,100,0,0,0,240,106,0,0,56,25,0,0,56,65,80,52,95,76,105,115,116,73,57,65,80,52,95,84,114,97,99,107,69,0,0,0,0,0,0,0,160,25,0,0,160,0,0,0,161,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,162,0,0,0,9,0,0,0,10,0,0,0,163,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,164,0,0,0,0,0,0,0,49,50,65,80,52,95,73,107,109,115,65,116,111,109,0,0,24,107,0,0,144,25,0,0,208,43,0,0,0,0,0,0,107,109,115,95,105,100,0,0,107,109,115,95,118,101,114,115,105,111,110,0,0,0,0,0,107,109,115,95,117,114,105,0,0,0,0,0,64,27,0,0,165,0,0,0,166,0,0,0,5,0,0,0,167,0,0,0,7,0,0,0,168,0,0,0,169,0,0,0,10,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,220,255,255,255,64,27,0,0,178,0,0,0,179,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,104,27,0,0,181,0,0,0,182,0,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,185,0,0,0,174,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,220,255,255,255,104,27,0,0,189,0,0,0,190,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,152,27,0,0,191,0,0,0,192,0,0,0,0,0,0,0,200,27,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,49,57,65,80,52,95,69,110,99,97,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,40,27,0,0,232,89,0,0,0,0,0,0,49,57,65,80,52,95,69,110,99,118,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,80,27,0,0,64,90,0,0,0,0,0,0,50,52,65,80,52,95,80,114,111,116,101,99,116,105,111,110,83,99,104,101,109,101,73,110,102,111,0,0,0,0,0,0,240,106,0,0,120,27,0,0,51,48,65,80,52,95,80,114,111,116,101,99,116,101,100,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,24,107,0,0,160,27,0,0,8,102,0,0,0,0,0,0,115,105,110,102,47,102,114,109,97,0,0,0,0,0,0,0,115,105,110,102,47,115,99,104,105,0,0,0,0,0,0,0,115,105,110,102,47,115,99,104,109,0,0,0,0,0,0,0,0,0,0,0,152,29,0,0,197,0,0,0,198,0,0,0,0,0,0,0,112,29,0,0,165,0,0,0,199,0,0,0,5,0,0,0,167,0,0,0,7,0,0,0,168,0,0,0,169,0,0,0,10,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,220,255,255,255,112,29,0,0,200,0,0,0,201,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,72,29,0,0,181,0,0,0,202,0,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,185,0,0,0,174,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,220,255,255,255,72,29,0,0,203,0,0,0,204,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,24,107,0,0,88,29,0,0,104,27,0,0,0,0,0,0,49,57,65,80,52,95,68,114,109,105,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,128,29,0,0,64,27,0,0,0,0,0,0,49,57,65,80,52,95,68,114,109,115,83,97,109,112,108,101,69,110,116,114,121,0,0,0,240,106,0,0,160,29,0,0,50,54,65,80,52,95,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,16,30,0,0,205,0,0,0,206,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,207,0,0,0,9,0,0,0,10,0,0,0,208,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,98,103,112,65,116,111,109,0,0,24,107,0,0,0,30,0,0,208,43,0,0,0,0,0,0,0,0,0,0,88,30,0,0,209,0,0,0,210,0,0,0,103,114,111,117,112,105,110,103,95,116,121,112,101,95,112,97,114,97,109,101,116,101,114,0,99,58,37,117,44,103,58,37,117,0,0,0,0,0,0,0,240,106,0,0,96,30,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,83,98,103,112,65,116,111,109,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,0,0,0,216,30,0,0,44,0,0,0,211,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,212,0,0,0,9,0,0,0,10,0,0,0,213,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,77,118,104,100,65,116,111,109,0,0,24,107,0,0,200,30,0,0,208,43,0,0,0,0,0,0,0,0,0,0,72,31,0,0,214,0,0,0,215,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,216,0,0,0,9,0,0,0,10,0,0,0,217,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,0,0,0,0,49,50,65,80,52,95,83,116,115,122,65,116,111,109,0,0,24,107,0,0,56,31,0,0,208,43,0,0,0,0,0,0,0,0,0,0,168,31,0,0,44,0,0,0,222,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,223,0,0,0,9,0,0,0,10,0,0,0,224,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,66,108,111,99,65,116,111,109,0,0,24,107,0,0,152,31,0,0,208,43,0,0,0,0,0,0,98,97,115,101,95,108,111,99,97,116,105,111,110,0,0,0,112,117,114,99,104,97,115,101,95,108,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,64,32,0,0,225,0,0,0,226,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,227,0,0,0,9,0,0,0,10,0,0,0,228,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,220,255,255,255,64,32,0,0,229,0,0,0,230,0,0,0,0,0,0,0,49,50,65,80,52,95,83,101,110,99,65,116,111,109,0,0,120,107,0,0,48,32,0,0,0,0,0,0,2,0,0,0,208,43,0,0,2,0,0,0,96,32,0,0,2,36,0,0,240,106,0,0,104,32,0,0,50,52,65,80,52,95,67,101,110,99,83,97,109,112,108,101,69,110,99,114,121,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,96,32,0,0,231,0,0,0,232,0,0,0,0,0,0,0,232,32,0,0,233,0,0,0,234,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,235,0,0,0,9,0,0,0,10,0,0,0,236,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,237,0,0,0,49,50,65,80,52,95,83,116,115,115,65,116,111,109,0,0,24,107,0,0,216,32,0,0,208,43,0,0,0,0,0,0,0,0,0,0,72,33,0,0,238,0,0,0,239,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,240,0,0,0,9,0,0,0,10,0,0,0,241,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,80,100,105,110,65,116,111,109,0,0,24,107,0,0,56,33,0,0,208,43,0,0,0,0,0,0,0,0,0,0,144,33,0,0,242,0,0,0,243,0,0,0,114,97,116,101,40,37,100,41,0,0,0,0,0,0,0,0,105,110,105,116,105,97,108,95,100,101,108,97,121,40,37,100,41,0,0,0,0,0,0,0,240,106,0,0,152,33,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,80,100,105,110,65,116,111,109,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,0,0,0,24,34,0,0,244,0,0,0,245,0,0,0,116,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,0,0,0,0,50,55,65,80,52,95,68,101,99,111,100,101,114,67,111,110,102,105,103,68,101,115,99,114,105,112,116,111,114,0,0,0,24,107,0,0,248,33,0,0,128,42,0,0,0,0,0,0,68,101,99,111,100,101,114,67,111,110,102,105,103,0,0,0,115,116,114,101,97,109,95,116,121,112,101,0,0,0,0,0,111,98,106,101,99,116,95,116,121,112,101,0,0,0,0,0,117,112,95,115,116,114,101,97,109,0,0,0,0,0,0,0,98,117,102,102,101,114,95,115,105,122,101,0,0,0,0,0,0,0,0,0,8,35,0,0,254,0,0,0,255,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,1,0,0,9,0,0,0,10,0,0,0,1,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,2,1,0,0,18,0,0,0,19,0,0,0,220,255,255,255,8,35,0,0,3,1,0,0,4,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,5,1,0,0,29,0,0,0,30,0,0,0,49,50,65,80,52,95,79,100,104,101,65,116,111,109,0,0,24,107,0,0,248,34,0,0,32,9,0,0,0,0,0,0,99,111,110,116,101,110,116,95,116,121,112,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,6,1,0,0,7,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,1,0,0,9,0,0,0,10,0,0,0,9,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,200,35,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,0,0,0,50,57,65,80,52,95,77,97,114,108,105,110,73,112,109,112,65,116,111,109,84,121,112,101,72,97,110,100,108,101,114,0,24,107,0,0,168,35,0,0,8,36,0,0,0,0,0,0,49,50,65,80,52,95,77,107,105,100,65,116,111,109,0,0,24,107,0,0,216,35,0,0,208,43,0,0,0,0,0,0,0,0,0,0,56,36,0,0,13,1,0,0,14,1,0,0,240,106,0,0,16,36,0,0,78,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,49,49,84,121,112,101,72,97,110,100,108,101,114,69,0,0,0,0,0,0,0,0,240,106,0,0,64,36,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,77,107,105,100,65,116,111,109,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,0,0,0,128,36,0,0,69,0,0,0,15,1,0,0,71,0,0,0,0,0,0,0,24,107,0,0,144,36,0,0,8,13,0,0,0,0,0,0,50,53,65,80,52,95,77,97,114,108,105,110,73,112,109,112,65,116,111,109,70,97,99,116,111,114,121,0,0,0,0,0,0,0,0,0,0,37,0,0,44,0,0,0,16,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,17,1,0,0,9,0,0,0,10,0,0,0,18,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,79,100,97,102,65,116,111,109,0,0,24,107,0,0,240,36,0,0,208,43,0,0,0,0,0,0,0,0,0,0,96,37,0,0,19,1,0,0,20,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,21,1,0,0,9,0,0,0,10,0,0,0,22,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,70,116,121,112,65,116,111,109,0,0,24,107,0,0,80,37,0,0,208,43,0,0,0,0,0,0,109,97,106,111,114,95,98,114,97,110,100,0,0,0,0,0,109,105,110,111,114,95,118,101,114,115,105,111,110,0,0,0,99,111,109,112,97,116,105,98,108,101,95,98,114,97,110,100,0,0,0,0,0,0,0,0,0,0,0,0,208,37,0,0,23,1,0,0,24,1,0,0,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,0,0,0,0,0,0,0,0,240,106,0,0,184,37,0,0,75,73,68,0,0,0,0,0,240,106,0,0,208,38,0,0,0,0,0,0,224,37,0,0,25,1,0,0,26,1,0,0,100,101,102,97,117,108,116,95,65,108,103,111,114,105,116,104,109,73,68,0,0,0,0,0,100,101,102,97,117,108,116,95,73,86,95,115,105,122,101,0,100,101,102,97,117,108,116,95,75,73,68,0,0,0,0,0,65,108,103,111,114,105,116,104,109,73,68,0,0,0,0,0,73,86,95,115,105,122,101,0,115,97,109,112,108,101,32,105,110,102,111,32,99,111,117,110,116,0,0,0,0,0,0,0,73,86,32,83,105,122,101,32,40,105,110,102,101,114,114,101,100,41,0,0,0,0,0,0,115,117,98,45,101,110,116,114,121,32,37,48,52,100,46,37,100,32,98,121,116,101,115,32,111,102,32,99,108,101,97,114,32,100,97,116,97,0,0,0,115,117,98,45,101,110,116,114,121,32,37,48,52,100,46,37,100,32,98,121,116,101,115,32,111,102,32,101,110,99,114,121,112,116,101,100,32,100,97,116,97,0,0,0,0,0,0,0,50,51,65,80,52,95,67,101,110,99,84,114,97,99,107,69,110,99,114,121,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,64,39,0,0,27,1,0,0,28,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,29,1,0,0,9,0,0,0,10,0,0,0,30,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,80,115,115,104,65,116,111,109,0,0,24,107,0,0,48,39,0,0,208,43,0,0,0,0,0,0,115,121,115,116,101,109,95,105,100,0,0,0,0,0,0,0,100,97,116,97,95,115,105,122,101,0,0,0,0,0,0,0,107,105,100,32,37,100,0,0,105,249,8,175,72,22,70,234,145,12,205,93,204,203,10,58,100,97,116,97,0,0,0,0,0,0,0,0,224,39,0,0,31,1,0,0,32,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,33,1,0,0,9,0,0,0,10,0,0,0,34,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,105,100,120,65,116,111,109,0,0,24,107,0,0,208,39,0,0,208,43,0,0,0,0,0,0,0,0,0,0,184,40,0,0,35,1,0,0,36,1,0,0,114,101,102,101,114,101,110,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([101,95,73,68,0,0,0,0,101,97,114,108,105,101,115,116,95,112,114,101,115,101,110,116,97,116,105,111,110,95,116,105,109,101,0,0,0,0,0,0,102,105,114,115,116,95,111,102,102,115,101,116,0,0,0,0,114,101,102,101,114,101,110,99,101,95,116,121,112,101,61,37,100,44,32,114,101,102,101,114,101,110,99,101,100,95,115,105,122,101,61,37,117,44,32,115,117,98,115,101,103,109,101,110,116,95,100,117,114,97,116,105,111,110,61,37,117,44,32,115,116,97,114,116,115,95,119,105,116,104,95,83,65,80,61,37,100,44,32,83,65,80,95,116,121,112,101,61,37,100,44,32,83,65,80,95,100,101,108,116,97,95,116,105,109,101,61,37,100,0,0,0,0,0,0,0,240,106,0,0,192,40,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,83,105,100,120,65,116,111,109,57,82,101,102,101,114,101,110,99,101,69,69,0,0,0,0,0,0,72,41,0,0,141,0,0,0,37,1,0,0,116,0,0,0,38,1,0,0,39,1,0,0,0,0,0,0,0,0,0,0,112,41,0,0,40,1,0,0,41,1,0,0,116,0,0,0,42,1,0,0,43,1,0,0,0,0,0,0,50,53,65,80,52,95,73,112,109,112,68,101,115,99,114,105,112,116,111,114,80,111,105,110,116,101,114,0,0,0,0,0,24,107,0,0,40,41,0,0,128,42,0,0,0,0,0,0,49,56,65,80,52,95,73,112,109,112,68,101,115,99,114,105,112,116,111,114,0,0,0,0,24,107,0,0,88,41,0,0,128,42,0,0,0,0,0,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,80,111,105,110,116,101,114,0,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,73,68,0,0,0,0,0,0,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,73,68,69,120,0,0,0,0,0,73,80,77,80,95,69,83,95,73,68,0,0,0,0,0,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,0,73,80,77,80,83,95,84,121,112,101,0,0,0,0,0,0,73,80,77,80,95,84,111,111,108,73,68,0,0,0,0,0,99,111,110,116,114,111,108,80,111,105,110,116,67,111,100,101,0,0,0,0,0,0,0,0,115,101,113,117,101,110,99,101,67,111,100,101,0,0,0,0,85,82,76,0,0,0,0,0,100,97,116,97,32,115,105,122,101,0,0,0,0,0,0,0,0,0,0,0,168,42,0,0,44,1,0,0,45,1,0,0,116,0,0,0,46,1,0,0,47,1,0,0,0,0,0,0,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,0,0,0,0,0,0,0,0,24,107,0,0,104,42,0,0,224,22,0,0,0,0,0,0,50,49,65,80,52,95,85,110,107,110,111,119,110,68,101,115,99,114,105,112,116,111,114,0,24,107,0,0,144,42,0,0,128,42,0,0,0,0,0,0,68,101,115,99,114,105,112,116,111,114,58,37,48,50,120,0,0,0,0,0,208,43,0,0,44,0,0,0,48,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,143,0,0,0,9,0,0,0,10,0,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,48,44,0,0,50,1,0,0,51,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,52,1,0,0,9,0,0,0,10,0,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,53,1,0,0,0,0,0,0,0,0,0,0,96,44,0,0,54,1,0,0,55,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,56,1,0,0,9,0,0,0,10,0,0,0,57,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,136,44,0,0,58,1,0,0,59,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,0,0,0,0,56,65,80,52,95,65,116,111,109,0,0,0,0,0,0,0,240,106,0,0,192,43,0,0,0,0,0,0,8,44,0,0,33,0,0,0,60,1,0,0,61,1,0,0,0,0,0,0,49,56,65,80,52,95,65,116,111,109,76,105,115,116,87,114,105,116,101,114,0,0,0,0,24,107,0,0,240,43,0,0,168,9,0,0,0,0,0,0,49,53,65,80,52,95,85,110,107,110,111,119,110,65,116,111,109,0,0,0,0,0,0,0,24,107,0,0,24,44,0,0,208,43,0,0,0,0,0,0,50,56,65,80,52,95,78,117,108,108,84,101,114,109,105,110,97,116,101,100,83,116,114,105,110,103,65,116,111,109,0,0,24,107,0,0,64,44,0,0,208,43,0,0,0,0,0,0,49,52,65,80,52,95,65,116,111,109,80,97,114,101,110,116,0,0,0,0,0,0,0,0,240,106,0,0,112,44,0,0,115,105,122,101,32,60,61,32,48,120,70,70,70,70,70,70,70,70,0,0,0,0,0,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,65,116,111,109,46,99,112,112,0,0,0,0,0,65,80,52,95,85,110,107,110,111,119,110,65,116,111,109,0,115,116,114,105,110,103,32,118,97,108,117,101,0,0,0,0,0,0,0,0,152,45,0,0,62,1,0,0,63,1,0,0,64,1,0,0,0,0,0,0,98,121,116,101,115,95,119,114,105,116,116,101,110,32,60,61,32,97,116,111,109,45,62,71,101,116,83,105,122,101,40,41,0,0,0,0,0,0,0,0,65,99,116,105,111,110,0,0,87,65,82,78,73,78,71,58,32,97,116,111,109,32,115,101,114,105,97,108,105,122,101,100,32,116,111,32,102,101,119,101,114,32,98,121,116,101,115,32,116,104,97,110,32,100,101,99,108,97,114,101,100,32,115,105,122,101,10,0,0,0,0,0,87,65,82,78,73,78,71,58,32,112,97,100,100,105,110,103,32,119,111,117,108,100,32,98,101,32,116,111,111,32,108,97,114,103,101,10,0,0,0,0,24,107,0,0,168,45,0,0,192,45,0,0,0,0,0,0,49,52,65,80,52,95,65,116,111,109,70,105,110,100,101,114,0,0,0,0,0,0,0,0,240,106,0,0,200,45,0,0,78,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,0,0,0,0,0,0,0,0,0,16,46,0,0,65,1,0,0,66,1,0,0,57,65,80,52,95,84,114,97,99,107,0,0,0,0,0,0,240,106,0,0,0,46,0,0,109,100,105,97,47,104,100,108,114,0,0,0,0,0,0,0,109,100,105,97,47,109,105,110,102,47,115,116,98,108,0,0,0,0,0,0,136,46,0,0,44,0,0,0,67,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,68,1,0,0,9,0,0,0,10,0,0,0,69,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,77,101,104,100,65,116,111,109,0,0,24,107,0,0,120,46,0,0,208,43,0,0,0,0,0,0,0,0,0,0,232,46,0,0,44,0,0,0,70,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,71,1,0,0,9,0,0,0,10,0,0,0,72,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,107,104,100,65,116,111,109,0,0,24,107,0,0,216,46,0,0,208,43,0,0,0,0,0,0,101,110,97,98,108,101,100,0,105,100,0,0,0,0,0,0,118,111,108,117,109,101,0,0,108,97,121,101,114,0,0,0,97,108,116,101,114,110,97,116,101,95,103,114,111,117,112,0,109,97,116,114,105,120,95,48,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,49,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,50,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,51,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,52,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,53,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,54,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,55,0,0,0,0,0,0,0,0,109,97,116,114,105,120,95,56,0,0,0,0,0,0,0,0,0,0,0,0,8,48,0,0,44,0,0,0,73,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,74,1,0,0,9,0,0,0,10,0,0,0,75,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,102,104,100,65,116,111,109,0,0,24,107,0,0,248,47,0,0,208,43,0,0,0,0,0,0,116,114,97,99,107,32,73,68,0,0,0,0,0,0,0,0,98,97,115,101,32,100,97,116,97,32,111,102,102,115,101,116,0,0,0,0,0,0,0,0,115,97,109,112,108,101,32,100,101,115,99,114,105,112,116,105,111,110,32,105,110,100,101,120,0,0,0,0,0,0,0,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,100,117,114,97,116,105,111,110,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,115,105,122,101,0,0,0,0,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,102,108,97,103,115,0,0,0,0,0,0,0,0,248,48,0,0,44,0,0,0,76,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,77,1,0,0,9,0,0,0,10,0,0,0,78,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,73,115,108,116,65,116,111,109,0,0,24,107,0,0,232,48,0,0,208,43,0,0,0,0,0,0,115,97,108,116,0,0,0,0,0,0,0,0,96,49,0,0,44,0,0,0,79,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,80,1,0,0,9,0,0,0,10,0,0,0,81,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,77,102,104,100,65,116,111,109,0,0,24,107,0,0,80,49,0,0,208,43,0,0,0,0,0,0,115,101,113,117,101,110,99,101,32,110,117,109,98,101,114,0,0,0,0,0,224,49,0,0,82,1,0,0,83,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,84,1,0,0,9,0,0,0,10,0,0,0,85,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,220,255,255,255,224,49,0,0,86,1,0,0,87,1,0,0,0,0,0,0,49,50,65,80,52,95,84,101,110,99,65,116,111,109,0,0,120,107,0,0,208,49,0,0,0,0,0,0,2,0,0,0,208,43,0,0,2,0,0,0,224,37,0,0,2,36,0,0,0,0,0,0,80,50,0,0,44,0,0,0,88,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,89,1,0,0,9,0,0,0,10,0,0,0,90,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,102,100,116,65,116,111,109,0,0,24,107,0,0,64,50,0,0,208,43,0,0,0,0,0,0,98,97,115,101,32,109,101,100,105,97,32,100,101,99,111,100,101,32,116,105,109,101,0,0,0,0,0,0,200,50,0,0,91,1,0,0,92,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,93,1,0,0,9,0,0,0,10,0,0,0,94,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,116,99,111,65,116,111,109,0,0,24,107,0,0,184,50,0,0,208,43,0,0,0,0,0,0,0,0,0,0,40,51,0,0,44,0,0,0,95,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,96,1,0,0,9,0,0,0,10,0,0,0,97,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,70,114,109,97,65,116,111,109,0,0,24,107,0,0,24,51,0,0,208,43,0,0,0,0,0,0,111,114,105,103,105,110,97,108,95,102,111,114,109,97,116,0,0,0,0,0,152,51,0,0,98,1,0,0,99,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,100,1,0,0,9,0,0,0,10,0,0,0,101,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,102,1,0,0,0,0,0,0,49,50,65,80,52,95,71,114,112,105,65,116,111,109,0,0,24,107,0,0,136,51,0,0,208,43,0,0,0,0,0,0,107,101,121,32,101,110,99,114,121,112,116,105,111,110,32,109,101,116,104,111,100,0,0,0,103,114,111,117,112,32,105,100,0,0,0,0,0,0,0,0,103,114,111,117,112,32,107,101,121,0,0,0,0,0,0,0,0,0,0,0,48,52,0,0,103,1,0,0,104,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,105,1,0,0,9,0,0,0,10,0,0,0,106,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,72,118,99,99,65,116,111,109,0,0,24,107,0,0,32,52,0,0,208,43,0,0,0,0,0,0,82,101,120,116,0,0,0,0,77,97,105,110,32,83,116,105,108,108,32,80,105,99,116,117,114,101,0,0,0,0,0,0,77,97,105,110,32,49,48,0,0,0,0,0,168,53,0,0,107,1,0,0,108,1,0,0,0,0,0,0,128,53,0,0,109,1,0,0,110,1,0,0,80,114,111,102,105,108,101,32,83,112,97,99,101,0,0,0,84,105,101,114,0,0,0,0,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,77,105,110,32,83,112,97,116,105,97,108,32,83,101,103,109,101,110,116,97,116,105,111,110,0,0,0,0,0,0,0,0,80,97,114,97,108,108,101,108,105,115,109,32,84,121,112,101,0,0,0,0,0,0,0,0,67,104,114,111,109,97,32,70,111,114,109,97,116,0,0,0,67,104,114,111,109,97,32,68,101,112,116,104,0,0,0,0,76,117,109,97,32,68,101,112,116,104,0,0,0,0,0,0,65,118,101,114,97,103,101,32,70,114,97,109,101,32,82,97,116,101,0,0,0,0,0,0,67,111,110,115,116,97,110,116,32,70,114,97,109,101,32,82,97,116,101,0,0,0,0,0,78,117,109,98,101,114,32,79,102,32,84,101,109,112,111,114,97,108,32,76,97,121,101,114,115,0,0,0,0,0,0,0,84,101,109,112,111,114,97,108,32,73,100,32,78,101,115,116,101,100,0,0,0,0,0,0,240,106,0,0,136,53,0,0,57,65,80,52,95,65,114,114,97,121,73,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,69,0,0,0,0,240,106,0,0,176,53,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,72,118,99,99,65,116,111,109,56,83,101,113,117,101,110,99,101,69,69,0,0,0,0,0,0,0,48,54,0,0,111,1,0,0,112,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,113,1,0,0,9,0,0,0,10,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,54,65,80,52,95,84,114,101,102,84,121,112,101,65,116,111,109,0,0,0,0,0,0,24,107,0,0,24,54,0,0,208,43,0,0,0,0,0,0,116,114,97,99,107,95,105,100,95,99,111,117,110,116,0,0,116,114,97,99,107,32,105,100,32,0,0,0,0,0,0,0,0,0,0,0,184,54,0,0,115,1,0,0,116,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,117,1,0,0,9,0,0,0,10,0,0,0,118,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,119,1,0,0,120,1,0,0,121,1,0,0,49,50,65,80,52,95,83,116,116,115,65,116,111,109,0,0,24,107,0,0,168,54,0,0,208,43,0,0,0,0,0,0,0,0,0,0,0,55,0,0,122,1,0,0,123,1,0,0,115,97,109,112,108,101,95,99,111,117,110,116,61,37,100,44,32,115,97,109,112,108,101,95,100,117,114,97,116,105,111,110,61,37,100,0,0,0,0,0,240,106,0,0,8,55,0,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,83,116,116,115,84,97,98,108,101,69,110,116,114,121,69,0,0,0,0,0,0,0,0,0,0,0,0,128,55,0,0,44,0,0,0,124,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,125,1,0,0,9,0,0,0,10,0,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,116,104,100,65,116,111,109,0,0,24,107,0,0,112,55,0,0,208,43,0,0,0,0,0,0,0,0,0,0,224,55,0,0,126,1,0,0,127,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,128,1,0,0,9,0,0,0,10,0,0,0,129,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,56,98,100,108,65,116,111,109,0,0,24,107,0,0,208,55,0,0,208,43,0,0,0,0,0,0,101,110,99,111,100,105,110,103,0,0,0,0,0,0,0,0,101,110,99,111,100,105,110,103,95,118,101,114,115,105,111,110,0,0,0,0,0,0,0,0,98,117,110,100,108,101,95,100,97,116,97,0,0,0,0,0,0,0,0,0,120,56,0,0,130,1,0,0,131,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,132,1,0,0,9,0,0,0,10,0,0,0,133,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,103,112,100,65,116,111,109,0,0,24,107,0,0,104,56,0,0,208,43,0,0,0,0,0,0,0,0,0,0,200,56,0,0,134,1,0,0,135,1,0,0,103,114,111,117,112,105,110,103,95,116,121,112,101,0,0,0,100,101,102,97,117,108,116,95,108,101,110,103,116,104,0,0,101,110,116,114,121,32,37,48,50,100,0,0,0,0,0,0,240,106,0,0,208,56,0,0,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,109,97,110,169,84,82,65,169,109,111,99,169,116,114,119,169,98,108,97,169,110,101,103,169,112,114,103,169,121,97,100,169,111,111,116,169,116,109,99,169,116,114,112,99,110,107,114,116,107,115,105,100,114,118,111,99,99,115,101,100,101,114,110,103,108,105,112,99,111,112,109,116,103,110,116,114,68,73,112,97,68,73,110,99,68,73,109,99,68,73,116,97,68,73,108,112,68,73,101,103,68,73,102,115,68,73,107,97,84,82,65,97,110,110,118,116,104,115,118,116,110,101,118,116,110,115,118,116,115,101,118,116,107,105,116,115,112,97,103,112,116,115,99,112,100,114,117,112,108,114,117,112,100,105,103,101,109,110,111,115,108,97,111,115,114,97,111,115,97,97,111,115,111,99,111,115,110,115,111,115,0,0,0,0,80,59,0,0,136,1,0,0,137,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,138,1,0,0,9,0,0,0,10,0,0,0,139,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,128,59,0,0,140,1,0,0,141,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,142,1,0,0,9,0,0,0,10,0,0,0,143,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,176,59,0,0,144,1,0,0,145,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,146,1,0,0,9,0,0,0,10,0,0,0,147,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,216,59,0,0,148,1,0,0,149,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,150,1,0,0,9,0,0,0,10,0,0,0,151,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,248,59,0,0,44,0,0,0,152,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,153,1,0,0,9,0,0,0,10,0,0,0,154,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,48,59,0,0,10,1,0,0,155,1,0,0,156,1,0,0,0,0,0,0,50,55,65,80,52,95,77,101,116,97,68,97,116,97,65,116,111,109,84,121,112,101,72,97,110,100,108,101,114,0,0,0,24,107,0,0,16,59,0,0,8,36,0,0,0,0,0,0,49,50,65,80,52,95,68,97,116,97,65,116,111,109,0,0,24,107,0,0,64,59,0,0,208,43,0,0,0,0,0,0,50,50,65,80,52,95,77,101,116,97,68,97,116,97,83,116,114,105,110,103,65,116,111,109,0,0,0,0,0,0,0,0,24,107,0,0,96,59,0,0,208,43,0,0,0,0,0,0,50,55,65,80,52,95,51,71,112,112,76,111,99,97,108,105,122,101,100,83,116,114,105,110,103,65,116,111,109,0,0,0,24,107,0,0,144,59,0,0,208,43,0,0,0,0,0,0,49,55,65,80,52,95,68,99,102,83,116,114,105,110,103,65,116,111,109,0,0,0,0,0,24,107,0,0,192,59,0,0,208,43,0,0,0,0,0,0,49,50,65,80,52,95,68,99,102,100,65,116,111,109,0,0,24,107,0,0,232,59,0,0,208,43,0,0,0,0,0,0,32,63,0,0,32,63,0,0,109,97,110,169,1,0,0,0,40,63,0,0,40,63,0,0,84,82,65,169,1,0,0,0,48,63,0,0,64,63,0,0,84,82,65,97,1,0,0,0,80,63,0,0,80,63,0,0,109,111,99,169,1,0,0,0,96,63,0,0,96,63,0,0,116,114,119,169,1,0,0,0,104,63,0,0,104,63,0,0,98,108,97,169,1,0,0,0,112,63,0,0,128,63,0,0,101,114,110,103,0,0,0,0,136,63,0,0,128,63,0,0,110,101,103,169,1,0,0,0,152,63,0,0,152,63,0,0,112,114,103,169,1,0,0,0,168,63,0,0,168,63,0,0,121,97,100,169,1,0,0,0,176,63,0,0,184,63,0,0,111,111,116,169,1,0,0,0,200,63,0,0,200,63,0,0,116,109,99,169,1,0,0,0,208,63,0,0,208,63,0,0,114,121,108,169,1,0,0,0,216,63,0,0,216,63,0,0,116,114,112,99,1,0,0,0,232,63,0,0,240,63,0,0,110,107,114,116,0,0,0,0,0,64,0,0,8,64,0,0,107,115,105,100,0,0,0,0,24,64,0,0,32,64,0,0,114,118,111,99,0,0,0,0,48,64,0,0,48,64,0,0,99,115,101,100,1,0,0,0,64,64,0,0,64,64,0,0,103,110,116,114,6,0,0,0,72,64,0,0,72,64,0,0,111,112,109,116,7,0,0,0,80,64,0,0,80,64,0,0,108,105,112,99,6,0,0,0,96,64,0,0,112,64,0,0,112,97,103,112,6,0,0,0,128,64,0,0,128,64,0,0,108,116,105,116,1,0,0,0,48,64,0,0,48,64,0,0,112,99,115,100,1,0,0,0,136,64,0,0,152,64,0,0,68,73,102,115,8,0,0,0,168,64,0,0,184,64,0,0,107,105,116,115,6,0,0,0,200,64,0,0,216,64,0,0,104,115,118,116,1,0,0,0,232,64,0,0,248,64,0,0,110,115,118,116,8,0,0,0,16,65,0,0,40,65,0,0,115,101,118,116,8,0,0,0,64,65,0,0,80,65,0,0,110,101,118,116,1,0,0,0,104,65,0,0,120,65,0,0,110,110,118,116,1,0,0,0,136,65,0,0,152,65,0,0,116,115,99,112,6,0,0,0,168,65,0,0,184,65,0,0,108,114,117,112,0,0,0,0,200,65,0,0,216,65,0,0,100,105,103,101,0,0,0,0,232,65,0,0,248,65,0,0,103,116,97,99,1,0,0,0,16,66,0,0,16,66,0,0,119,121,101,107,1,0,0,0,32,66,0,0,48,66,0,0,100,114,117,112,1,0,0,0,64,66,0,0,72,66,0,0,117,110,99,105,1,0,0,0,88,66,0,0,96,66,0,0,117,102,110,105,1,0,0,0,112,66,0,0,128,66,0,0,117,114,118,99,1,0,0,0,144,66,0,0,160,66,0,0,117,99,114,108,1,0,0,0,176,66,0,0,176,66,0,0,68,102,99,100,8,0,0,0,192,66,0,0,192,66,0,0,102,114,101,112,1,0,0,0,208,66,0,0,208,66,0,0,104,116,117,97,1,0,0,0,0,0,0,0,240,62,0,0,157,1,0,0,158,1,0,0,116,121,112,101,0,0,0,0,108,97,110,103,0,0,0,0,118,97,108,117,101,0,0,0,240,106,0,0,248,62,0,0,56,65,80,52,95,76,105,115,116,73,78,49,50,65,80,52,95,77,101,116,97,68,97,116,97,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,78,97,109,101,0,0,0,0,65,114,116,105,115,116,0,0,65,108,98,117,109,65,114,116,105,115,116,0,0,0,0,0,65,108,98,117,109,32,65,114,116,105,115,116,0,0,0,0,67,111,109,112,111,115,101,114,0,0,0,0,0,0,0,0,87,114,105,116,101,114,0,0,65,108,98,117,109,0,0,0,71,101,110,114,101,67,111,100,101,0,0,0,0,0,0,0,71,101,110,114,101,0,0,0,71,101,110,114,101,78,97,109,101,0,0,0,0,0,0,0,71,114,111,117,112,105,110,103,0,0,0,0,0,0,0,0,68,97,116,101,0,0,0,0,84,111,111,108,0,0,0,0,69,110,99,111,100,105,110,103,32,84,111,111,108,0,0,0,67,111,109,109,101,110,116,0,76,121,114,105,99,115,0,0,67,111,112,121,114,105,103,104,116,0,0,0,0,0,0,0,84,114,97,99,107,0,0,0,84,114,97,99,107,32,78,117,109,98,101,114,0,0,0,0,68,105,115,99,0,0,0,0,68,105,115,99,32,78,117,109,98,101,114,0,0,0,0,0,67,111,118,101,114,0,0,0,67,111,118,101,114,32,65,114,116,0,0,0,0,0,0,0,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,82,97,116,105,110,103,0,0,84,101,109,112,111,0,0,0,67,111,109,112,105,108,97,116,105,111,110,0,0,0,0,0,73,115,71,97,112,108,101,115,115,0,0,0,0,0,0,0,73,115,32,71,97,112,108,101,115,115,0,0,0,0,0,0,84,105,116,108,101,0,0,0,83,116,111,114,101,70,114,111,110,116,73,68,0,0,0,0,83,116,111,114,101,32,70,114,111,110,116,32,73,68,0,0,70,105,108,101,75,105,110,100,0,0,0,0,0,0,0,0,70,105,108,101,32,75,105,110,100,0,0,0,0,0,0,0,83,104,111,119,78,97,109,101,0,0,0,0,0,0,0,0,83,104,111,119,32,78,97,109,101,0,0,0,0,0,0,0,83,104,111,119,83,101,97,115,111,110,0,0,0,0,0,0,83,104,111,119,32,83,101,97,115,111,110,32,78,117,109,98,101,114,0,0,0,0,0,0,83,104,111,119,69,112,105,115,111,100,101,78,117,109,98,101,114,0,0,0,0,0,0,0,83,104,111,119,32,69,112,105,115,111,100,101,32,78,117,109,98,101,114,0,0,0,0,0,83,104,111,119,69,112,105,115,111,100,101,78,97,109,101,0,83,104,111,119,32,69,112,105,115,111,100,101,32,78,97,109,101,0,0,0,0,0,0,0,84,86,78,101,116,119,111,114,107,78,97,109,101,0,0,0,84,86,32,78,101,116,119,111,114,107,32,78,97,109,101,0,73,115,80,111,100,99,97,115,116,0,0,0,0,0,0,0,73,115,32,97,32,80,111,100,99,97,115,116,0,0,0,0,80,111,100,99,97,115,116,85,114,108,0,0,0,0,0,0,80,111,100,99,97,115,116,32,85,82,76,0,0,0,0,0,80,111,100,99,97,115,116,71,117,105,100,0,0,0,0,0,80,111,100,99,97,115,116,32,71,85,73,68,0,0,0,0,80,111,100,99,97,115,116,67,97,116,101,103,111,114,121,0,80,111,100,99,97,115,116,32,67,97,116,101,103,111,114,121,0,0,0,0,0,0,0,0,75,101,121,119,111,114,100,115,0,0,0,0,0,0,0,0,80,117,114,99,104,97,115,101,68,97,116,101,0,0,0,0,80,117,114,99,104,97,115,101,32,68,97,116,101,0,0,0,73,99,111,110,85,114,105,0,73,99,111,110,32,85,82,73,0,0,0,0,0,0,0,0,73,110,102,111,85,114,108,0,73,110,102,111,32,85,82,76,0,0,0,0,0,0,0,0,67,111,118,101,114,85,114,105,0,0,0,0,0,0,0,0,67,111,118,101,114,32,65,114,116,32,85,82,73,0,0,0,76,121,114,105,99,115,85,114,105,0,0,0,0,0,0,0,76,121,114,105,99,115,32,85,82,73,0,0,0,0,0,0,68,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,80,101,114,102,111,114,109,101,114,0,0,0,0,0,0,0,65,117,116,104,111,114,0,0,0,0,0,0,232,66,0,0,159,1,0,0,160,1,0,0,240,106,0,0,240,66,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,77,101,116,97,68,97,116,97,55,75,101,121,73,110,102,111,69,69,0,0,0,0,0,0,0,0,112,67,0,0,161,1,0,0,162,1,0,0,163,1,0,0,164,1,0,0,165,1,0,0,166,1,0,0,167,1,0,0,168,1,0,0,169,1,0,0,58,0,0,0,170,1,0,0,0,0,0,0,50,50,65,80,52,95,83,116,100,99,70,105,108,101,66,121,116,101,83,116,114,101,97,109,0,0,0,0,0,0,0,0,24,107,0,0,80,67,0,0,152,11,0,0,0,0,0,0,45,115,116,100,105,110,0,0,45,115,116,100,111,117,116,0,45,115,116,100,101,114,114,0,114,98,0,0,0,0,0,0,119,98,43,0,0,0,0,0,114,43,98,0,0,0,0,0,0,0,0,0,0,68,0,0,171,1,0,0,172,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,173,1,0,0,9,0,0,0,10,0,0,0,174,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,69,108,115,116,65,116,111,109,0,0,24,107,0,0,240,67,0,0,208,43,0,0,0,0,0,0,0,0,0,0,104,68,0,0,175,1,0,0,176,1,0,0,101,110,116,114,121,47,115,101,103,109,101,110,116,32,100,117,114,97,116,105,111,110,0,0,101,110,116,114,121,47,109,101,100,105,97,32,116,105,109,101,0,0,0,0,0,0,0,0,101,110,116,114,121,47,109,101,100,105,97,32,114,97,116,101,0,0,0,0,0,0,0,0,240,106,0,0,112,68,0,0,57,65,80,52,95,65,114,114,97,121,73,49,51,65,80,52,95,69,108,115,116,69,110,116,114,121,69,0,0,0,0,0,0,0,0,0,216,68,0,0,177,1,0,0,178,1,0,0,116,0,0,0,179,1,0,0,180,1,0,0,181,1,0,0,51,51,65,80,52,95,68,101,99,111,100,101,114,83,112,101,99,105,102,105,99,73,110,102,111,68,101,115,99,114,105,112,116,111,114,0,0,0,0,0,24,107,0,0,176,68,0,0,128,42,0,0,0,0,0,0,37,48,50,120,32,0,0,0,68,101,99,111,100,101,114,83,112,101,99,105,102,105,99,73,110,102,111,0,0,0,0,0,0,0,0,0,88,69,0,0,182,1,0,0,183,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,184,1,0,0,9,0,0,0,10,0,0,0,185,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,77,100,104,100,65,116,111,109,0,0,24,107,0,0,72,69,0,0,208,43,0,0,0,0,0,0,96,96,96,0,0,0,0,0,100,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,100,117,114,97,116,105,111,110,40,109,115,41,0,0,0,0,108,97,110,103,117,97,103,101,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,3,0,0,0,186,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,220,255,255,255,0,18,0,0,187,1,0,0,188,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,116,107,104,100,0,0,0,0,109,100,105,97,47,109,100,104,100,0,0,0,0,0,0,0,0,0,0,0,200,70,0,0,44,0,0,0,189,1,0,0,190,1,0,0,6,0,0,0,191,1,0,0,143,0,0,0,9,0,0,0,192,1,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,240,70,0,0,193,1,0,0,194,1,0,0,190,1,0,0,6,0,0,0,191,1,0,0,195,1,0,0,9,0,0,0,192,1,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,85,117,105,100,65,116,111,109,0,0,24,107,0,0,184,70,0,0,208,43,0,0,0,0,0,0,49,57,65,80,52,95,85,110,107,110,111,119,110,85,117,105,100,65,116,111,109,0,0,0,24,107,0,0,216,70,0,0,200,70,0,0,0,0,0,0,0,0,0,0,96,71,0,0,196,1,0,0,197,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,198,1,0,0,9,0,0,0,10,0,0,0,199,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,200,1,0,0,201,1,0,0,202,1,0,0,203,1,0,0,0,0,0,0,49,50,65,80,52,95,83,116,122,50,65,116,111,109,0,0,24,107,0,0,80,71,0,0,208,43,0,0,0,0,0,0,102,105,101,108,100,95,115,105,122,101,0,0,0,0,0,0,115,97,109,112,108,101,95,99,111,117,110,116,0,0,0,0,0,0,0,0,224,71,0,0,44,0,0,0,204,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,205,1,0,0,9,0,0,0,10,0,0,0,206,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,86,109,104,100,65,116,111,109,0,0,24,107,0,0,208,71,0,0,208,43,0,0,0,0,0,0,103,114,97,112,104,105,99,115,95,109,111,100,101,0,0,0,37,48,52,120,44,37,48,52,120,44,37,48,52,120,0,0,111,112,95,99,111,108,111,114,0,0,0,0,0,0,0,0,0,0,0,0,112,72,0,0,207,1,0,0,208,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,209,1,0,0,9,0,0,0,10,0,0,0,210,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,84,102,114,97,65,116,111,109,0,0,24,107,0,0,96,72,0,0,208,43,0,0,0,0,0,0,0,0,0,0,80,73,0,0,211,1,0,0,212,1,0,0,116,114,97,99,107,95,73,68,0,0,0,0,0,0,0,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,116,114,97,102,95,110,117,109,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,116,114,117,110,95,110,117,109,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,115,97,109,112,108,101,95,110,117,109,0,0,0,0,0,0,0,101,110,116,114,121,32,37,48,52,100,0,0,0,0,0,0,116,105,109,101,61,37,108,108,100,44,32,109,111,111,102,95,111,102,102,115,101,116,61,37,108,108,100,44,32,116,114,97,102,95,110,117,109,98,101,114,61,37,100,44,32,116,114,117,110,95,110,117,109,98,101,114,61,37,100,44,32,115,97,109,112,108,101,95,110,117,109,98,101,114,61,37,100,0,0,0,240,106,0,0,88,73,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,84,102,114,97,65,116,111,109,53,69,110,116,114,121,69,69,0,0,0,0,0,0,0,0,0,0,208,73,0,0,213,1,0,0,214,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,215,1,0,0,9,0,0,0,10,0,0,0,216,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,65,118,99,99,65,116,111,109,0,0,24,107,0,0,192,73,0,0,208,43,0,0,0,0,0,0,72,105,103,104,32,52,58,52,58,52,0,0,0,0,0,0,72,105,103,104,32,52,58,50,58,50,0,0,0,0,0,0,72,105,103,104,32,49,48,0,72,105,103,104,0,0,0,0,69,120,116,101,110,100,101,100,0,0,0,0,0,0,0,0,77,97,105,110,0,0,0,0,66,97,115,101,108,105,110,101,0,0,0,0,0,0,0,0,67,111,110,102,105,103,117,114,97,116,105,111,110,32,86,101,114,115,105,111,110,0,0,0,80,114,111,102,105,108,101,0,80,114,111,102,105,108,101,32,67,111,109,112,97,116,105,98,105,108,105,116,121,0,0,0,76,101,118,101,108,0,0,0,78,65,76,85,32,76,101,110,103,116,104,32,83,105,122,101,0,0,0,0,0,0,0,0,83,101,113,117,101,110,99,101,32,80,97,114,97,109,101,116,101,114,0,0,0,0,0,0,80,105,99,116,117,114,101,32,80,97,114,97,109,101,116,101,114,0,0,0,0,0,0,0,0,0,0,0,16,75,0,0,44,0,0,0,217,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,218,1,0,0,9,0,0,0,10,0,0,0,219,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,72,109,104,100,65,116,111,109,0,0,24,107,0,0,0,75,0,0,208,43,0,0,0,0,0,0,109,97,120,95,112,100,117,95,115,105,122,101,0,0,0,0,97,118,103,95,112,100,117,95,115,105,122,101,0,0,0,0,109,97,120,95,98,105,116,114,97,116,101,0,0,0,0,0,97,118,103,95,98,105,116,114,97,116,101,0,0,0,0,0,0,0,0,0,176,75,0,0,220,1,0,0,221,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,222,1,0,0,9,0,0,0,10,0,0,0,223,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,79,100,100,97,65,116,111,109,0,0,24,107,0,0,160,75,0,0,208,43,0,0,0,0,0,0,101,110,99,114,121,112,116,101,100,95,100,97,116,97,95,108,101,110,103,116,104,0,0,0,0,0,0,0,40,76,0,0,224,1,0,0,225,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,226,1,0,0,9,0,0,0,10,0,0,0,227,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,73,111,100,115,65,116,111,109,0,0,24,107,0,0,24,76,0,0,208,43,0,0,0,0,0,0,0,0,0,0,216,76,0,0,228,1,0,0,229,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,230,1,0,0,9,0,0,0,10,0,0,0,231,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,232,1,0,0,18,0,0,0,19,0,0,0,233,1,0,0,234,1,0,0,235,1,0,0,220,255,255,255,216,76,0,0,236,1,0,0,237,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,238,1,0,0,29,0,0,0,30,0,0,0,0,0,0,0,49,50,65,80,52,95,83,116,115,100,65,116,111,109,0,0,24,107,0,0,200,76,0,0,32,9,0,0,0,0,0,0,0,0,0,0,248,76,0,0,239,1,0,0,240,1,0,0,240,106,0,0,0,77,0,0,57,65,80,52,95,65,114,114,97,121,73,80,50,49,65,80,52,95,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,69,0,0,0,0,0,0,0,0,120,77,0,0,241,1,0,0,242,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,243,1,0,0,9,0,0,0,10,0,0,0,244,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,245,1,0,0,0,0,0,0,49,50,65,80,52,95,68,101,99,51,65,116,111,109,0,0,24,107,0,0,104,77,0,0,208,43,0,0,0,0,0,0,0,0,0,0,0,78,0,0,246,1,0,0,247,1,0,0,100,97,116,97,95,114,97,116,101,0,0,0,0,0,0,0,91,37,48,50,100,93,0,0,102,115,99,111,100,61,37,100,44,32,98,115,105,100,61,37,100,44,32,98,115,109,111,100,61,37,100,44,32,97,99,109,111,100,61,37,100,44,32,108,102,101,111,110,61,37,100,44,32,110,117,109,95,100,101,112,95,115,117,98,61,37,100,44,32,99,104,97,110,95,108,111,99,61,37,100,0,0,0,0,240,106,0,0,8,78,0,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,68,101,99,51,65,116,111,109,57,83,117,98,83,116,114,101,97,109,69,69,0,0,0,0,0,0,128,78,0,0,44,0,0,0,248,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,249,1,0,0,9,0,0,0,10,0,0,0,49,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,78,109,104,100,65,116,111,109,0,0,24,107,0,0,112,78,0,0,208,43,0,0,0,0,0,0,0,0,0,0,224,78,0,0,250,1,0,0,251,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,252,1,0,0,9,0,0,0,10,0,0,0,253,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,65,105,110,102,65,116,111,109,0,0,24,107,0,0,208,78,0,0,208,43,0,0,0,0,0,0,112,114,111,102,105,108,101,95,118,101,114,115,105,111,110,0,65,80,73,68,0,0,0,0,0,0,0,0,96,79,0,0,254,1,0,0,255,1,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,2,0,0,9,0,0,0,10,0,0,0,1,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,2,2,0,0,3,2,0,0,0,0,0,0,49,50,65,80,52,95,83,116,115,99,65,116,111,109,0,0,24,107,0,0,80,79,0,0,208,43,0,0,0,0,0,0,0,0,0,0,40,80,0,0,4,2,0,0,5,2,0,0,115,97,109,112,108,101,32,62,32,48,0,0,0,0,0,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,83,116,115,99,65,116,111,109,46,99,112,112,0,71,101,116,67,104,117,110,107,70,111,114,83,97,109,112,108,101,0,0,0,0,0,0,0,102,105,114,115,116,95,99,104,117,110,107,61,37,100,44,32,102,105,114,115,116,95,115,97,109,112,108,101,61,37,100,44,32,99,104,117,110,107,95,99,111,117,110,116,61,37,100,44,32,115,97,109,112,108,101,115,95,112,101,114,95,99,104,117], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([110,107,61,37,100,44,32,115,97,109,112,108,101,95,100,101,115,99,95,105,110,100,101,120,61,37,100,0,0,0,0,0,240,106,0,0,48,80,0,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,83,116,115,99,84,97,98,108,101,69,110,116,114,121,69,0,0,0,0,0,0,0,0,0,0,0,0,216,80,0,0,6,2,0,0,7,2,0,0,116,0,0,0,8,2,0,0,9,2,0,0,10,2,0,0,11,2,0,0,0,0,0,0,0,0,0,0,0,81,0,0,141,0,0,0,12,2,0,0,116,0,0,0,13,2,0,0,14,2,0,0,0,0,0,0,0,0,0,0,40,81,0,0,141,0,0,0,15,2,0,0,116,0,0,0,16,2,0,0,17,2,0,0,0,0,0,0,49,54,65,80,52,95,69,115,68,101,115,99,114,105,112,116,111,114,0,0,0,0,0,0,24,107,0,0,192,80,0,0,128,42,0,0,0,0,0,0,50,49,65,80,52,95,69,115,73,100,73,110,99,68,101,115,99,114,105,112,116,111,114,0,24,107,0,0,232,80,0,0,128,42,0,0,0,0,0,0,50,49,65,80,52,95,69,115,73,100,82,101,102,68,101,115,99,114,105,112,116,111,114,0,24,107,0,0,16,81,0,0,128,42,0,0,0,0,0,0,69,83,68,101,115,99,114,105,112,116,111,114,0,0,0,0,101,115,95,105,100,0,0,0,115,116,114,101,97,109,95,112,114,105,111,114,105,116,121,0,69,83,95,73,68,95,73,110,99,0,0,0,0,0,0,0,116,114,97,99,107,95,105,100,0,0,0,0,0,0,0,0,69,83,95,73,68,95,82,101,102,0,0,0,0,0,0,0,114,101,102,95,105,110,100,101,120,0,0,0,0,0,0,0,0,0,0,0,240,81,0,0,18,2,0,0,19,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,20,2,0,0,9,0,0,0,10,0,0,0,21,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,83,97,105,111,65,116,111,109,0,0,24,107,0,0,224,81,0,0,208,43,0,0,0,0,0,0,0,0,0,0,72,82,0,0,22,2,0,0,23,2,0,0,97,117,120,32,105,110,102,111,32,116,121,112,101,0,0,0,97,117,120,32,105,110,102,111,32,116,121,112,101,32,112,97,114,97,109,101,116,101,114,0,101,110,116,114,121,32,99,111,117,110,116,0,0,0,0,0,240,106,0,0,80,82,0,0,57,65,80,52,95,65,114,114,97,121,73,121,69,0,0,0,0,0,0,0,56,89,0,0,3,0,0,0,24,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,25,2,0,0,169,0,0,0,10,0,0,0,26,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,27,2,0,0,174,0,0,0,28,2,0,0,29,2,0,0,220,255,255,255,56,89,0,0,30,2,0,0,31,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,104,89,0,0,32,2,0,0,33,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,34,2,0,0,169,0,0,0,10,0,0,0,26,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,35,2,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,36,2,0,0,174,0,0,0,37,2,0,0,38,2,0,0,220,255,255,255,104,89,0,0,39,2,0,0,40,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,152,89,0,0,3,0,0,0,41,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,25,2,0,0,169,0,0,0,10,0,0,0,26,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,42,2,0,0,174,0,0,0,28,2,0,0,29,2,0,0,220,255,255,255,152,89,0,0,43,2,0,0,44,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,192,89,0,0,3,0,0,0,45,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,25,2,0,0,169,0,0,0,10,0,0,0,26,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,46,2,0,0,174,0,0,0,28,2,0,0,29,2,0,0,220,255,255,255,192,89,0,0,47,2,0,0,48,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,232,89,0,0,165,0,0,0,49,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,168,0,0,0,169,0,0,0,10,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,50,2,0,0,174,0,0,0,175,0,0,0,176,0,0,0,220,255,255,255,232,89,0,0,51,2,0,0,52,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,24,90,0,0,165,0,0,0,53,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,168,0,0,0,169,0,0,0,10,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,54,2,0,0,174,0,0,0,175,0,0,0,176,0,0,0,220,255,255,255,24,90,0,0,55,2,0,0,56,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,64,90,0,0,181,0,0,0,57,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,58,2,0,0,174,0,0,0,186,0,0,0,187,0,0,0,220,255,255,255,64,90,0,0,59,2,0,0,60,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,112,90,0,0,181,0,0,0,61,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,62,2,0,0,174,0,0,0,186,0,0,0,187,0,0,0,220,255,255,255,112,90,0,0,63,2,0,0,64,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,152,90,0,0,181,0,0,0,65,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,66,2,0,0,174,0,0,0,186,0,0,0,187,0,0,0,220,255,255,255,152,90,0,0,67,2,0,0,68,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,192,90,0,0,181,0,0,0,69,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,70,2,0,0,174,0,0,0,186,0,0,0,187,0,0,0,220,255,255,255,192,90,0,0,71,2,0,0,72,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,240,90,0,0,3,0,0,0,73,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,74,2,0,0,169,0,0,0,10,0,0,0,75,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,27,2,0,0,174,0,0,0,76,2,0,0,77,2,0,0,220,255,255,255,240,90,0,0,78,2,0,0,79,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,32,91,0,0,80,2,0,0,81,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,82,2,0,0,169,0,0,0,10,0,0,0,83,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,84,2,0,0,174,0,0,0,85,2,0,0,86,2,0,0,220,255,255,255,32,91,0,0,87,2,0,0,88,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,49,53,65,80,52,95,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,0,24,107,0,0,32,89,0,0,32,9,0,0,0,0,0,0,50,50,65,80,52,95,85,110,107,110,111,119,110,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,0,0,24,107,0,0,72,89,0,0,56,89,0,0,0,0,0,0,50,53,65,80,52,95,77,112,101,103,83,121,115,116,101,109,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,24,107,0,0,120,89,0,0,56,89,0,0,0,0,0,0,49,57,65,80,52,95,77,112,52,115,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,168,89,0,0,152,89,0,0,0,0,0,0,50,48,65,80,52,95,65,117,100,105,111,83,97,109,112,108,101,69,110,116,114,121,0,0,24,107,0,0,208,89,0,0,56,89,0,0,0,0,0,0,50,52,65,80,52,95,77,112,101,103,65,117,100,105,111,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,24,107,0,0,248,89,0,0,232,89,0,0,0,0,0,0,50,49,65,80,52,95,86,105,115,117,97,108,83,97,109,112,108,101,69,110,116,114,121,0,24,107,0,0,40,90,0,0,56,89,0,0,0,0,0,0,50,52,65,80,52,95,77,112,101,103,86,105,100,101,111,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,24,107,0,0,80,90,0,0,64,90,0,0,0,0,0,0,49,56,65,80,52,95,65,118,99,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,24,107,0,0,128,90,0,0,64,90,0,0,0,0,0,0,49,57,65,80,52,95,72,101,118,99,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,168,90,0,0,64,90,0,0,0,0,0,0,50,50,65,80,52,95,82,116,112,72,105,110,116,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,0,0,24,107,0,0,208,90,0,0,56,89,0,0,0,0,0,0,50,51,65,80,52,95,83,117,98,116,105,116,108,101,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,0,24,107,0,0,0,91,0,0,56,89,0,0,0,0,0,0,100,97,116,97,95,114,101,102,101,114,101,110,99,101,95,105,110,100,101,120,0,0,0,0,99,104,97,110,110,101,108,95,99,111,117,110,116,0,0,0,115,97,109,112,108,101,95,115,105,122,101,0,0,0,0,0,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,113,116,95,118,101,114,115,105,111,110,0,0,0,0,0,0,119,97,118,101,47,101,115,100,115,0,0,0,0,0,0,0,0,0,0,0,120,93,0,0,165,0,0,0,89,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,168,0,0,0,169,0,0,0,10,0,0,0,170,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,54,2,0,0,174,0,0,0,175,0,0,0,176,0,0,0,220,255,255,255,120,93,0,0,90,2,0,0,91,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,119,105,100,116,104,0,0,0,104,101,105,103,104,116,0,0,99,111,109,112,114,101,115,115,111,114,0,0,0,0,0,0,0,0,0,0,80,93,0,0,181,0,0,0,92,2,0,0,5,0,0,0,167,0,0,0,7,0,0,0,183,0,0,0,169,0,0,0,10,0,0,0,184,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,171,0,0,0,16,0,0,0,172,0,0,0,18,0,0,0,19,0,0,0,62,2,0,0,174,0,0,0,186,0,0,0,187,0,0,0,220,255,255,255,80,93,0,0,93,2,0,0,94,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,180,0,0,0,29,0,0,0,30,0,0,0,104,105,110,116,95,116,114,97,99,107,95,118,101,114,115,105,111,110,0,0,0,0,0,0,104,105,103,104,101,115,116,95,99,111,109,112,97,116,105,98,108,101,95,118,101,114,115,105,111,110,0,0,0,0,0,0,109,97,120,95,112,97,99,107,101,116,95,115,105,122,101,0,110,97,109,101,115,112,97,99,101,0,0,0,0,0,0,0,115,99,104,101,109,97,95,108,111,99,97,116,105,111,110,0,105,109,97,103,101,95,109,105,109,101,95,116,121,112,101,0,24,107,0,0,96,93,0,0,112,90,0,0,0,0,0,0,49,57,65,80,52,95,77,112,52,118,83,97,109,112,108,101,69,110,116,114,121,0,0,0,24,107,0,0,136,93,0,0,24,90,0,0,0,0,0,0,49,57,65,80,52,95,77,112,52,97,83,97,109,112,108,101,69,110,116,114,121,0,0,0,0,0,0,0,88,94,0,0,95,2,0,0,96,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,97,2,0,0,9,0,0,0,10,0,0,0,98,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,99,2,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,100,2,0,0,101,2,0,0,102,2,0,0,220,255,255,255,88,94,0,0,103,2,0,0,104,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,200,255,255,255,88,94,0,0,105,2,0,0,106,2,0,0,107,2,0,0,108,2,0,0,109,2,0,0,49,50,65,80,52,95,79,104,100,114,65,116,111,109,0,0,120,107,0,0,72,94,0,0,0,0,0,0,2,0,0,0,32,9,0,0,2,0,0,0,240,94,0,0,2,56,0,0,101,110,99,114,121,112,116,105,111,110,95,109,101,116,104,111,100,0,0,0,0,0,0,0,112,97,100,100,105,110,103,95,115,99,104,101,109,101,0,0,112,108,97,105,110,116,101,120,116,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,99,111,110,116,101,110,116,95,105,100,0,0,0,0,0,0,114,105,103,104,116,115,95,105,115,115,117,101,114,95,117,114,108,0,0,0,0,0,0,0,116,101,120,116,117,97,108,95,104,101,97,100,101,114,115,0,240,106,0,0,248,94,0,0,49,52,65,80,52,95,79,109,97,68,114,109,73,110,102,111,0,0,0,0,0,0,0,0,0,0,0,0,96,95,0,0,44,0,0,0,110,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,111,2,0,0,9,0,0,0,10,0,0,0,112,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,113,2,0,0,0,0,0,0,49,50,65,80,52,95,73,115,102,109,65,116,111,109,0,0,24,107,0,0,80,95,0,0,208,43,0,0,0,0,0,0,115,101,108,101,99,116,105,118,101,95,101,110,99,114,121,112,116,105,111,110,0,0,0,0,107,101,121,95,105,110,100,105,99,97,116,111,114,95,108,101,110,103,116,104,0,0,0,0,73,86,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,114,2,0,0,115,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,116,2,0,0,9,0,0,0,10,0,0,0,117,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,67,111,54,52,65,116,111,109,0,0,24,107,0,0,240,95,0,0,208,43,0,0,0,0,0,0,101,110,116,114,121,95,99,111,117,110,116,0,0,0,0,0,101,110,116,114,121,32,37,56,100,0,0,0,0,0,0,0,0,0,0,0,128,96,0,0,44,0,0,0,118,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,119,2,0,0,9,0,0,0,10,0,0,0,120,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,121,2,0,0,49,50,65,80,52,95,84,105,109,115,65,116,111,109,0,0,24,107,0,0,112,96,0,0,208,43,0,0,0,0,0,0,116,105,109,101,115,99,97,108,101,0,0,0,0,0,0,0,0,0,0,0,240,96,0,0,122,2,0,0,123,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,124,2,0,0,9,0,0,0,10,0,0,0,125,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,50,65,80,52,95,72,100,108,114,65,116,111,109,0,0,24,107,0,0,224,96,0,0,208,43,0,0,0,0,0,0,104,97,110,100,108,101,114,95,116,121,112,101,0,0,0,0,104,97,110,100,108,101,114,95,110,97,109,101,0,0,0,0,0,0,0,0,176,97,0,0,3,0,0,0,126,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,127,2,0,0,9,0,0,0,10,0,0,0,128,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,220,255,255,255,176,97,0,0,129,2,0,0,130,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,49,50,65,80,52,95,73,112,114,111,65,116,111,109,0,0,24,107,0,0,160,97,0,0,32,9,0,0,0,0,0,0,101,110,116,114,121,45,99,111,117,110,116,0,0,0,0,0,0,0,0,0,96,98,0,0,3,0,0,0,131,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,132,2,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,220,255,255,255,96,98,0,0,133,2,0,0,134,2,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,49,50,65,80,52,95,68,114,101,102,65,116,111,109,0,0,24,107,0,0,80,98,0,0,32,9,0,0,0,0,0,0,137,116,219,206,123,231,76,81,132,249,113,72,249,136,37,84,162,57,79,82,90,155,79,20,162,68,108,66,124,100,141,244,0,0,0,0,80,99,0,0,135,2,0,0,136,2,0,0,190,1,0,0,6,0,0,0,191,1,0,0,137,2,0,0,9,0,0,0,192,1,0,0,138,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,204,255,255,255,80,99,0,0,139,2,0,0,140,2,0,0,0,0,0,0,0,0,0,0,144,99,0,0,141,2,0,0,142,2,0,0,190,1,0,0,6,0,0,0,191,1,0,0,143,2,0,0,9,0,0,0,192,1,0,0,144,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,204,255,255,255,144,99,0,0,145,2,0,0,146,2,0,0,0,0,0,0,50,55,65,80,52,95,80,105,102,102,84,114,97,99,107,69,110,99,114,121,112,116,105,111,110,65,116,111,109,0,0,0,120,107,0,0,48,99,0,0,0,0,0,0,2,0,0,0,200,70,0,0,2,0,0,0,224,37,0,0,2,52,0,0,50,56,65,80,52,95,80,105,102,102,83,97,109,112,108,101,69,110,99,114,121,112,116,105,111,110,65,116,111,109,0,0,120,107,0,0,112,99,0,0,0,0,0,0,2,0,0,0,200,70,0,0,2,0,0,0,96,32,0,0,2,52,0,0,0,0,0,0,0,100,0,0,147,2,0,0,148,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,149,2,0,0,9,0,0,0,10,0,0,0,150,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,48,0,0,0,0,0,0,0,49,49,65,80,52,95,82,116,112,65,116,111,109,0,0,0,24,107,0,0,240,99,0,0,208,43,0,0,0,0,0,0,100,101,115,99,114,105,112,116,105,111,110,95,102,111,114,109,97,116,0,0,0,0,0,0,115,100,112,95,116,101,120,116,0,0,0,0,0,0,0,0,0,0,0,0,144,100,0,0,151,2,0,0,152,2,0,0,153,2,0,0,154,2,0,0,155,2,0,0,156,2,0,0,157,2,0,0,158,2,0,0,159,2,0,0,160,2,0,0,161,2,0,0,162,2,0,0,163,2,0,0,164,2,0,0,49,57,65,80,52,95,65,116,111,109,83,97,109,112,108,101,84,97,98,108,101,0,0,0,24,107,0,0,120,100,0,0,40,105,0,0,0,0,0,0,0,0,0,0,224,100,0,0,141,0,0,0,165,2,0,0,116,0,0,0,166,2,0,0,47,1,0,0,0,0,0,0,50,50,65,80,52,95,83,76,67,111,110,102,105,103,68,101,115,99,114,105,112,116,111,114,0,0,0,0,0,0,0,0,24,107,0,0,192,100,0,0,128,42,0,0,0,0,0,0,0,0,0,0,8,102,0,0,167,2,0,0,168,2,0,0,195,0,0,0,169,2,0,0,0,0,0,0,16,103,0,0,170,2,0,0,171,2,0,0,172,2,0,0,173,2,0,0,0,0,0,0,64,103,0,0,174,2,0,0,175,2,0,0,195,0,0,0,176,2,0,0,224,255,255,255,64,103,0,0,177,2,0,0,178,2,0,0,0,0,0,0,128,103,0,0,179,2,0,0,180,2,0,0,195,0,0,0,181,2,0,0,224,255,255,255,128,103,0,0,182,2,0,0,183,2,0,0,0,0,0,0,200,103,0,0,184,2,0,0,185,2,0,0,195,0,0,0,186,2,0,0,0,0,0,0,0,104,0,0,187,2,0,0,188,2,0,0,195,0,0,0,189,2,0,0,184,255,255,255,0,104,0,0,190,2,0,0,191,2,0,0,0,0,0,0,72,104,0,0,192,2,0,0,193,2,0,0,195,0,0,0,194,2,0,0,184,255,255,255,72,104,0,0,195,2,0,0,196,2,0,0,0,0,0,0,136,104,0,0,197,2,0,0,198,2,0,0,199,2,0,0,200,2,0,0,50,49,65,80,52,95,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,240,106,0,0,240,101,0,0,0,0,0,0,96,102,0,0,201,2,0,0,202,2,0,0,195,0,0,0,203,2,0,0,224,255,255,255,96,102,0,0,204,2,0,0,205,2,0,0,51,51,65,80,52,95,71,101,110,101,114,105,99,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,120,107,0,0,56,102,0,0,0,0,0,0,2,0,0,0,8,102,0,0,2,0,0,0,176,104,0,0,2,32,0,0,0,0,0,0,208,102,0,0,206,2,0,0,207,2,0,0,195,0,0,0,208,2,0,0,224,255,255,255,208,102,0,0,209,2,0,0,210,2,0,0,51,51,65,80,52,95,71,101,110,101,114,105,99,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,120,107,0,0,168,102,0,0,0,0,0,0,2,0,0,0,8,102,0,0,2,0,0,0,152,29,0,0,2,32,0,0,50,56,65,80,52,95,85,110,107,110,111,119,110,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,24,107,0,0,240,102,0,0,8,102,0,0,0,0,0,0,50,52,65,80,52,95,65,118,99,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,120,107,0,0,32,103,0,0,0,0,0,0,2,0,0,0,8,102,0,0,2,0,0,0,152,29,0,0,2,32,0,0,50,53,65,80,52,95,72,101,118,99,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,120,107,0,0,96,103,0,0,0,0,0,0,2,0,0,0,8,102,0,0,2,0,0,0,152,29,0,0,2,32,0,0,51,49,65,80,52,95,77,112,101,103,83,121,115,116,101,109,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,24,107,0,0,160,103,0,0,184,104,0,0,0,0,0,0,51,48,65,80,52,95,77,112,101,103,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,120,107,0,0,216,103,0,0,0,0,0,0,2,0,0,0,184,104,0,0,2,0,0,0,176,104,0,0,2,72,0,0,51,48,65,80,52,95,77,112,101,103,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,0,0,0,120,107,0,0,32,104,0,0,0,0,0,0,2,0,0,0,184,104,0,0,2,0,0,0,152,29,0,0,2,72,0,0,50,57,65,80,52,95,83,117,98,116,105,116,108,101,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,24,107,0,0,104,104,0,0,8,102,0,0,0,0,0,0,0,0,0,0,184,104,0,0,184,2,0,0,211,2,0,0,195,0,0,0,169,2,0,0,240,106,0,0,232,104,0,0,24,107,0,0,200,104,0,0,8,102,0,0,0,0,0,0,50,53,65,80,52,95,77,112,101,103,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,0,50,54,65,80,52,95,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,0,0,0,37,115,0,0,0,0,0,0,49,53,65,80,52,95,83,97,109,112,108,101,84,97,98,108,101,0,0,0,0,0,0,0,240,106,0,0,16,105,0,0,99,117,114,114,101,110,116,95,99,116,115,95,100,101,108,116,97,95,114,117,110,32,33,61,32,48,0,0,0,0,0,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,83,97,109,112,108,101,84,97,98,108,101,46,99,112,112,0,0,0,0,0,0,71,101,110,101,114,97,116,101,83,116,98,108,65,116,111,109,0,0,0,0,0,0,0,0,212,2,0,0,0,0,0,0,0,0,0,0,192,105,0,0,213,2,0,0,214,2,0,0,215,2,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,24,107,0,0,176,105,0,0,232,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,240,106,0,0,216,105,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,240,106,0,0,240,105,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,107,0,0,8,106,0,0,0,106,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,107,0,0,64,106,0,0,48,106,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,107,0,0,160,106,0,0,48,106,0,0,0,0,0,0,24,107,0,0,120,106,0,0,200,106,0,0,0,0,0,0,0,0,0,0,104,106,0,0,216,2,0,0,217,2,0,0,218,2,0,0,219,2,0,0,220,2,0,0,221,2,0,0,222,2,0,0,223,2,0,0,0,0,0,0,96,107,0,0,216,2,0,0,224,2,0,0,218,2,0,0,219,2,0,0,220,2,0,0,225,2,0,0,226,2,0,0,227,2,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,24,107,0,0,56,107,0,0,104,106,0,0,0,0,0,0,0,0,0,0,192,107,0,0,216,2,0,0,228,2,0,0,218,2,0,0,219,2,0,0,220,2,0,0,229,2,0,0,230,2,0,0,231,2,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,24,107,0,0,152,107,0,0,104,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,152,109,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (stream.node.file) {
            var slice = new Uint8Array(new FileReaderSync().readAsArrayBuffer(stream.node.file.slice(position, position + length)));
            for (var i = 0; i < slice.length; i++) {
              buffer[offset + i] = slice[i];
            }
            return slice.length;
          } else {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
              buffer.set(contents.subarray(position, position + size), offset);
            } else {
              for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
            }
            return size;
          }
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (node.entry) {
            var writer = node.entry.createWriter();
            writer.seek(position);
            writer.write(new Blob([buffer.subarray(offset, offset+length)]));
            node.usedBytes = node.entry.file.size;
            node.contents = { length: node.usedBytes };
          } else {
            if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
              if (canOwn) { // Can we just reuse the buffer we are given?
                assert(position === 0, 'canOwn must imply no weird position inside the file');
                node.contents = buffer.subarray(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                node.usedBytes = length;
                return length;
              } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                node.contents.set(buffer.subarray(offset, offset + length), position);
                return length;
              }
            }
    
            // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
            MEMFS.expandFileStorage(node, position+length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
            else {
              for (var i = 0; i < length; i++) {
               node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
              }
            }
            node.usedBytes = Math.max(node.usedBytes, position+length);
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={entry:Module['fs'],root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
        if (parent && parent.entry) {
          if (FS.isFile(node.mode)) {
            node.entry = parent.entry.getFile(name, { create: true });
          } else if (FS.isDir(node.mode)) {
            node.entry = parent.entry.getDirectory(name, { create: true });
          }
        }
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        var node = FS.mknod(path, mode, 0);
        if (FS.entry) {
          node.entry = FS.entry.root.getDirectory(path, { create: true });
        }
        return node;
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          data = new Uint8Array(new FileReaderSync().readAsArrayBuffer(data));
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

  var _emscripten_resume=true;

  var _BItoD=true;

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _UItoD=true;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  var _BDtoIHigh=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _BDtoILow=true;

   
  Module["_i64Add"] = _i64Add;

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _DtoIHigh=true;

  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidi(x) { Module["printErr"]("Invalid function pointer called with signature 'viidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viidi": nullFunc_viidi, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viidi": invoke_viidi, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_send": _send, "_vfprintf": _vfprintf, "_fread": _fread, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_pthread_getspecific": _pthread_getspecific, "_fseeko": _fseeko, "_fseek": _fseek, "___cxa_end_catch": ___cxa_end_catch, "_pthread_once": _pthread_once, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "_pthread_key_create": _pthread_key_create, "_feof": _feof, "_ftell": _ftell, "___errno_location": ___errno_location, "_write": _write, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_ftello": _ftello, "___cxa_atexit": ___cxa_atexit, "_printf": _printf, "___cxa_throw": ___cxa_throw, "__exit": __exit, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "_fopen": _fopen, "_exit": _exit, "_close": _close, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viidi=env.nullFunc_viidi;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viidi=env.invoke_viidi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _send=env._send;
  var _vfprintf=env._vfprintf;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _pthread_getspecific=env._pthread_getspecific;
  var _fseeko=env._fseeko;
  var _fseek=env._fseek;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _pthread_key_create=env._pthread_key_create;
  var _feof=env._feof;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _write=env._write;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _ftello=env._ftello;
  var ___cxa_atexit=env.___cxa_atexit;
  var _printf=env._printf;
  var ___cxa_throw=env.___cxa_throw;
  var __exit=env.__exit;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _close=env._close;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$$i$i = 0, $$$i1$i = 0, $$3 = 0, $$lcssa = 0, $$lcssa76 = 0, $$pr15 = 0, $$pr9 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i8$i = 0, $$pre$pre$i$i = 0, $$pre$pre$i6$i = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$pre61 = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args$0$be = 0, $args$044 = 0;
 var $atom4 = 0, $child$040 = 0, $child$137 = 0, $cursor$0 = 0, $exitcond = 0, $exitcond$i$i = 0, $exitcond$i4$i = 0, $i$01$i$i$i = 0, $i$01$i$i3$i = 0, $i$014$i = 0, $i$014$i$lcssa = 0, $i$031 = 0, $input = 0, $new_count$0$i$i = 0, $new_count$0$i2$i = 0, $or$cond = 0, $or$cond16 = 0, $or$cond3 = 0, $or$cond7 = 0, $output = 0;
 var $p = 0, $segment_name = 0, $strlenfirst = 0, $track_id$034 = 0, $track_id$1$lcssa = 0, $track_id$125 = 0, $track_id$3 = 0, $track_id$4 = 0, $track_index$1$i = 0, $traf_count$0$lcssa = 0, $traf_count$026 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $input = sp + 116|0;
 $output = sp + 112|0;
 $atom4 = sp + 108|0;
 $segment_name = sp + 120|0;
 $p = sp;
 $0 = ($argc|0)<(2);
 if ($0) {
  $1 = HEAP32[_stderr>>2]|0;
  (_fprintf(($1|0),(80|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 HEAP8[8>>0] = 0;
 HEAP32[(12)>>2] = 0;
 HEAP32[(16)>>2] = 888;
 HEAP32[(20)>>2] = 904;
 HEAP32[(24)>>2] = 928;
 HEAP32[(28)>>2] = 1;
 HEAP32[(40)>>2] = 0;
 $2 = ((($argv)) + 4|0);
 ;HEAP32[(32)>>2]=0|0;HEAP16[(32)+4>>1]=0|0;HEAP8[(32)+6>>0]=0|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($argv)) + 8|0);
   $12 = $5;$6 = $3;$args$044 = $2;
   L6: while(1) {
    $7 = (_strcmp($6,936)|0);
    $8 = ($7|0)==(0);
    do {
     if ($8) {
      HEAP8[8>>0] = 1;
      $args$0$be = $12;
     } else {
      $9 = (_strcmp($6,952)|0);
      $10 = ($9|0)==(0);
      if ($10) {
       $11 = HEAP32[$12>>2]|0;
       $13 = ($11|0)==(0|0);
       if ($13) {
        label = 9;
        break L6;
       }
       $15 = ((($args$044)) + 8|0);
       HEAP32[(16)>>2] = $11;
       $args$0$be = $15;
       break;
      }
      $19 = (_strcmp($6,1024)|0);
      $20 = ($19|0)==(0);
      if ($20) {
       $21 = HEAP32[$12>>2]|0;
       $22 = ($21|0)==(0|0);
       if ($22) {
        label = 14;
        break L6;
       }
       $24 = ((($args$044)) + 8|0);
       HEAP32[(20)>>2] = $21;
       $args$0$be = $24;
       break;
      }
      $25 = (_strcmp($6,1096)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = HEAP32[$12>>2]|0;
       $28 = ($27|0)==(0|0);
       if ($28) {
        label = 18;
        break L6;
       }
       $30 = ((($args$044)) + 8|0);
       HEAP32[(24)>>2] = $27;
       $args$0$be = $30;
       break;
      }
      $31 = (_strcmp($6,1176)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = ((($args$044)) + 8|0);
       $34 = HEAP32[$12>>2]|0;
       $35 = (_strtoul($34,0,10)|0);
       HEAP32[(32)>>2] = $35;
       $args$0$be = $33;
       break;
      }
      $36 = (_strcmp($6,1192)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $38 = ((($args$044)) + 8|0);
       $39 = HEAP32[$12>>2]|0;
       $40 = (_strtoul($39,0,10)|0);
       HEAP32[(28)>>2] = $40;
       $args$0$be = $38;
       break;
      }
      $41 = (_strcmp($6,1208)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       HEAP8[(38)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $43 = (_strcmp($6,1224)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       HEAP8[(36)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $45 = (_strcmp($6,1232)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       HEAP8[(37)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $47 = HEAP32[(12)>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       label = 32;
       break L6;
      }
      HEAP32[(12)>>2] = $6;
      $args$0$be = $12;
     }
    } while(0);
    $16 = ((($args$0$be)) + 4|0);
    $17 = HEAP32[$args$0$be>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     label = 33;
     break;
    } else {
     $12 = $16;$6 = $17;$args$044 = $args$0$be;
    }
   }
   if ((label|0) == 9) {
    $14 = HEAP32[_stderr>>2]|0;
    (_fwrite((968|0),52,1,($14|0))|0);
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   }
   else if ((label|0) == 14) {
    $23 = HEAP32[_stderr>>2]|0;
    (_fwrite((1040|0),53,1,($23|0))|0);
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   }
   else if ((label|0) == 18) {
    $29 = HEAP32[_stderr>>2]|0;
    (_fwrite((1120|0),54,1,($29|0))|0);
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   }
   else if ((label|0) == 32) {
    $49 = HEAP32[_stderr>>2]|0;
    (_fwrite((1240|0),27,1,($49|0))|0);
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   }
   else if ((label|0) == 33) {
    $$pre = HEAP32[(12)>>2]|0;
    $50 = ($$pre|0)==(0|0);
    if ($50) {
     break;
    }
    $52 = HEAP16[(36)>>1]|0;
    $53 = $52&255;
    $54 = ($53<<24>>24)==(0);
    $55 = ($52&65535) >>> 8;
    $56 = $55&255;
    if ($54) {
     label = 37;
    } else {
     $57 = ($56<<24>>24)!=(0);
     $58 = HEAP32[(32)>>2]|0;
     $59 = ($58|0)!=(0);
     $or$cond = $57 | $59;
     if (!($or$cond)) {
      label = 37;
     }
    }
    do {
     if ((label|0) == 37) {
      $60 = ($56<<24>>24)==(0);
      if ($60) {
       $$pr9 = HEAP32[(32)>>2]|0;
       $64 = ($$pr9|0)==(0);
       if (!($64)) {
        $65 = $55 | $52;
        $66 = $65&255;
        $67 = ($66<<24>>24)==(0);
        if (!($67)) {
         break;
        }
       }
      } else {
       $61 = ($53<<24>>24)!=(0);
       $62 = HEAP32[(32)>>2]|0;
       $63 = ($62|0)!=(0);
       $or$cond3 = $61 | $63;
       if ($or$cond3) {
        break;
       }
      }
      $69 = HEAP32[(24)>>2]|0;
      $strlenfirst = HEAP8[$69>>0]|0;
      $70 = ($strlenfirst<<24>>24)==(0);
      if ($70) {
       $71 = HEAP32[_stderr>>2]|0;
       (_fwrite((1376|0),46,1,($71|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      $72 = (_strlen(($69|0))|0);
      $73 = ($72>>>0)>(2);
      if ($73) {
       $74 = HEAP32[_stderr>>2]|0;
       (_fwrite((1424|0),45,1,($74|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      } else {
       $399 = $strlenfirst;$cursor$0 = $69;
      }
      while(1) {
       if ((($399<<24>>24) == 0)) {
        break;
       } else if (!((($399<<24>>24) == 78) | (($399<<24>>24) == 73))) {
        $$lcssa76 = $399;
        label = 47;
        break;
       }
       $77 = ((($cursor$0)) + 1|0);
       $$pre57 = HEAP8[$77>>0]|0;
       $399 = $$pre57;$cursor$0 = $77;
      }
      if ((label|0) == 47) {
       $75 = $$lcssa76 << 24 >> 24;
       $76 = HEAP32[_stderr>>2]|0;
       HEAP32[$vararg_buffer1>>2] = $75;
       (_fprintf(($76|0),(1472|0),($vararg_buffer1|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      HEAP32[$input>>2] = 0;
      $78 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($$pre,0,$input)|0);
      $79 = ($78|0)==(0);
      if (!($79)) {
       $80 = HEAP32[_stderr>>2]|0;
       HEAP32[$vararg_buffer3>>2] = $78;
       (_fprintf(($80|0),(1512|0),($vararg_buffer3|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      $81 = (__Znwj(36)|0);
      $82 = HEAP32[$input>>2]|0;
      __THREW__ = 0;
      invoke_viiii(745,($81|0),($82|0),(3224|0),1);
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if ($84) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       __ZdlPv($81);
       ___resumeException($89|0);
       // unreachable;
      }
      $85 = ((($81)) + 20|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)==(0|0);
      if ($87) {
       $88 = HEAP32[_stderr>>2]|0;
       (_fwrite((1544|0),23,1,($88|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      $91 = HEAP16[(36)>>1]|0;
      $92 = $91&255;
      $93 = ($92<<24>>24)==(0);
      do {
       if ($93) {
        $98 = ($91&65535)<(256);
        if (!($98)) {
         $99 = (__ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($86,2,0)|0);
         $100 = ($99|0)==(0|0);
         if (!($100)) {
          $102 = (__ZNK9AP4_Track5GetIdEv($99)|0);
          HEAP32[(40)>>2] = $102;
          break;
         }
         $101 = HEAP32[_stderr>>2]|0;
         (_fwrite((1624|0),51,1,($101|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
        $103 = HEAP32[(32)>>2]|0;
        $104 = ($103|0)==(0);
        if (!($104)) {
         $105 = (__ZN9AP4_Movie8GetTrackEj($86,$103)|0);
         $106 = ($105|0)==(0|0);
         if (!($106)) {
          $108 = (__ZNK9AP4_Track5GetIdEv($105)|0);
          HEAP32[(40)>>2] = $108;
          break;
         }
         $107 = HEAP32[_stderr>>2]|0;
         (_fwrite((1680|0),53,1,($107|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
       } else {
        $94 = (__ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($86,1,0)|0);
        $95 = ($94|0)==(0|0);
        if (!($95)) {
         $97 = (__ZNK9AP4_Track5GetIdEv($94)|0);
         HEAP32[(40)>>2] = $97;
         break;
        }
        $96 = HEAP32[_stderr>>2]|0;
        (_fwrite((1568|0),51,1,($96|0))|0);
        $$3 = 1;
        STACKTOP = sp;return ($$3|0);
       }
      } while(0);
      HEAP32[$output>>2] = 0;
      $109 = HEAP32[(16)>>2]|0;
      $110 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($109,1,$output)|0);
      $111 = ($110|0)==(0);
      if (!($111)) {
       $112 = HEAP32[_stderr>>2]|0;
       HEAP32[$vararg_buffer6>>2] = $110;
       (_fprintf(($112|0),(1736|0),($vararg_buffer6|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      $113 = ((($81)) + 24|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($114|0)==(0|0);
      if (!($115)) {
       $116 = HEAP32[$114>>2]|0;
       $117 = ((($116)) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = HEAP32[$output>>2]|0;
       $120 = (FUNCTION_TABLE_iii[$118 & 1023]($114,$119)|0);
       $121 = ($120|0)==(0);
       if (!($121)) {
        $122 = HEAP32[_stderr>>2]|0;
        HEAP32[$vararg_buffer9>>2] = $120;
        (_fprintf(($122|0),(1776|0),($vararg_buffer9|0))|0);
        $$3 = 1;
        STACKTOP = sp;return ($$3|0);
       }
      }
      $123 = HEAP32[(40)>>2]|0;
      $124 = ($123|0)==(0);
      $$pre63 = ((($86)) + 4|0);
      do {
       if (!($124)) {
        $125 = HEAP32[$$pre63>>2]|0;
        $126 = ((($125)) + 48|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = ($127|0)==(0|0);
        if (!($128)) {
         $child$040 = $127;
         while(1) {
          $129 = HEAP32[$child$040>>2]|0;
          $130 = ((($child$040)) + 4|0);
          $131 = HEAP32[$130>>2]|0;
          $132 = ((($129)) + 4|0);
          $133 = HEAP32[$132>>2]|0;
          $134 = ($133|0)==(1953653099);
          do {
           if ($134) {
            $135 = ((($129)) + 36|0);
            $136 = HEAP32[$135>>2]|0;
            $137 = ((($136)) + 20|0);
            $138 = HEAP32[$137>>2]|0;
            $139 = (FUNCTION_TABLE_iiii[$138 & 1023]($135,1953196132,0)|0);
            $140 = ($139|0)==(0|0);
            if ($140) {
             break;
            }
            $141 = ((($139)) + 56|0);
            $142 = HEAP32[$141>>2]|0;
            $143 = HEAP32[(40)>>2]|0;
            $144 = ($142|0)==($143|0);
            if ($144) {
             break;
            }
            $145 = HEAP32[$129>>2]|0;
            $146 = ((($145)) + 44|0);
            $147 = HEAP32[$146>>2]|0;
            (FUNCTION_TABLE_ii[$147 & 1023]($129)|0);
            $148 = HEAP32[$129>>2]|0;
            $149 = ((($148)) + 4|0);
            $150 = HEAP32[$149>>2]|0;
            FUNCTION_TABLE_vi[$150 & 1023]($129);
           }
          } while(0);
          $151 = ($131|0)==(0|0);
          if ($151) {
           break;
          } else {
           $child$040 = $131;
          }
         }
        }
        $152 = ((($125)) + 36|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 20|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (FUNCTION_TABLE_iiii[$155 & 1023]($152,1836475768,0)|0);
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = (___dynamic_cast($156,11216,2336,0)|0);
         $159 = ($158|0)==(0|0);
         if ($159) {
          break;
         }
         $160 = ((($158)) + 48|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = ($161|0)==(0|0);
         if ($162) {
          break;
         } else {
          $child$137 = $161;
         }
         while(1) {
          $163 = HEAP32[$child$137>>2]|0;
          $164 = ((($child$137)) + 4|0);
          $165 = HEAP32[$164>>2]|0;
          $166 = ((($163)) + 4|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)!=(1953654136);
          $169 = ($163|0)==(0|0);
          $or$cond16 = $169 | $168;
          do {
           if (!($or$cond16)) {
            $170 = (___dynamic_cast($163,11216,2760,0)|0);
            $171 = ($170|0)==(0|0);
            if ($171) {
             break;
            }
            $172 = ((($170)) + 36|0);
            $173 = HEAP32[$172>>2]|0;
            $174 = HEAP32[(40)>>2]|0;
            $175 = ($173|0)==($174|0);
            if ($175) {
             break;
            }
            $176 = HEAP32[$163>>2]|0;
            $177 = ((($176)) + 44|0);
            $178 = HEAP32[$177>>2]|0;
            (FUNCTION_TABLE_ii[$178 & 1023]($163)|0);
            $179 = HEAP32[$163>>2]|0;
            $180 = ((($179)) + 4|0);
            $181 = HEAP32[$180>>2]|0;
            FUNCTION_TABLE_vi[$181 & 1023]($163);
           }
          } while(0);
          $182 = ($165|0)==(0|0);
          if ($182) {
           break;
          } else {
           $child$137 = $165;
          }
         }
        }
       }
      } while(0);
      $183 = HEAP32[$$pre63>>2]|0;
      $184 = HEAP32[$183>>2]|0;
      $185 = ((($184)) + 12|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = HEAP32[$output>>2]|0;
      $188 = (FUNCTION_TABLE_iii[$186 & 1023]($183,$187)|0);
      $189 = ($188|0)==(0);
      if (!($189)) {
       $190 = HEAP32[_stderr>>2]|0;
       HEAP32[$vararg_buffer12>>2] = $188;
       (_fprintf(($190|0),(1816|0),($vararg_buffer12|0))|0);
       $$3 = 1;
       STACKTOP = sp;return ($$3|0);
      }
      HEAP32[$atom4>>2] = 0;
      $191 = HEAP8[(38)>>0]|0;
      $192 = ($191<<24>>24)==(0);
      L139: do {
       if ($192) {
        $193 = HEAP32[_stderr>>2]|0;
        $194 = ((($p)) + 8|0);
        $track_id$034 = 0;
        L141: while(1) {
         $195 = HEAP8[8>>0]|0;
         $196 = ($195<<24>>24)==(0);
         if (!($196)) {
          (_fwrite((1856|0),22,1,($193|0))|0);
         }
         $197 = HEAP32[$input>>2]|0;
         $198 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(3224,$197,$atom4)|0);
         $199 = HEAP8[8>>0]|0;
         $200 = ($199<<24>>24)==(0);
         if (!($200)) {
          HEAP32[$vararg_buffer15>>2] = $198;
          (_fprintf(($193|0),(1880|0),($vararg_buffer15|0))|0);
         }
         $201 = ($198|0)==(0);
         if (!($201)) {
          label = 96;
          break;
         }
         $204 = HEAP32[$atom4>>2]|0;
         $205 = ((($204)) + 4|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = ($206|0)==(1836019558);
         if ($207) {
          $208 = HEAP8[8>>0]|0;
          $209 = ($208<<24>>24)==(0);
          if ($209) {
           $210 = $204;
          } else {
           (_fwrite((1912|0),19,1,($193|0))|0);
           $$pre58 = HEAP32[$atom4>>2]|0;
           $210 = $$pre58;
          }
          $211 = ($210|0)==(0|0);
          if ($211) {
           $214 = 0;
          } else {
           $212 = (___dynamic_cast($210,11216,2336,0)|0);
           $214 = $212;
          }
          $213 = ((($214)) + 36|0);
          $215 = HEAP32[$213>>2]|0;
          $216 = ((($215)) + 20|0);
          $217 = HEAP32[$216>>2]|0;
          $218 = (FUNCTION_TABLE_iiii[$217 & 1023]($213,1953653094,0)|0);
          $219 = ($218|0)==(0|0);
          do {
           if ($219) {
            $track_id$3 = $track_id$034;
           } else {
            $220 = $218;$track_id$125 = $track_id$034;$traf_count$026 = 0;
            while(1) {
             $221 = (___dynamic_cast($220,11216,2336,0)|0);
             $222 = ($221|0)==(0|0);
             if ($222) {
              $track_id$1$lcssa = $track_id$125;$traf_count$0$lcssa = $traf_count$026;
              break;
             }
             $223 = ((($221)) + 36|0);
             $224 = HEAP32[$223>>2]|0;
             $225 = ((($224)) + 20|0);
             $226 = HEAP32[$225>>2]|0;
             $227 = (FUNCTION_TABLE_iiii[$226 & 1023]($223,1952868452,0)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              label = 107;
              break L141;
             }
             $229 = (___dynamic_cast($227,11216,12296,0)|0);
             $230 = ($229|0)==(0|0);
             if ($230) {
              label = 107;
              break L141;
             }
             $231 = ((($229)) + 36|0);
             $232 = HEAP32[$231>>2]|0;
             $233 = (($traf_count$026) + 1)|0;
             $234 = HEAP32[$213>>2]|0;
             $235 = ((($234)) + 20|0);
             $236 = HEAP32[$235>>2]|0;
             $237 = (FUNCTION_TABLE_iiii[$236 & 1023]($213,1953653094,$233)|0);
             $238 = ($237|0)==(0|0);
             if ($238) {
              $track_id$1$lcssa = $232;$traf_count$0$lcssa = $233;
              break;
             } else {
              $220 = $237;$track_id$125 = $232;$traf_count$026 = $233;
             }
            }
            $239 = ($traf_count$0$lcssa>>>0)>(1);
            if (!($239)) {
             $track_id$3 = $track_id$1$lcssa;
             break;
            }
            $240 = HEAP16[(36)>>1]|0;
            $241 = $240&255;
            $242 = ($241<<24>>24)==(0);
            if (!($242)) {
             label = 111;
             break L141;
            }
            $243 = ($240&65535)<(256);
            if ($243) {
             $track_id$3 = 0;
            } else {
             label = 113;
             break L141;
            }
           }
          } while(0);
          $244 = HEAP32[$output>>2]|0;
          $245 = ($244|0)==(0|0);
          if (!($245)) {
           $246 = HEAP32[$244>>2]|0;
           $247 = ((($246)) + 12|0);
           $248 = HEAP32[$247>>2]|0;
           FUNCTION_TABLE_vi[$248 & 1023]($244);
           HEAP32[$output>>2] = 0;
          }
          $249 = HEAP32[(40)>>2]|0;
          $250 = ($249|0)==(0);
          $251 = ($249|0)==($track_id$3|0);
          $or$cond7 = $250 | $251;
          if ($or$cond7) {
           ;HEAP32[$p>>2]=0|0;HEAP32[$p+4>>2]=0|0;HEAP32[$p+8>>2]=0|0;HEAP32[$p+12>>2]=0|0;
           $252 = HEAP32[(24)>>2]|0;
           $253 = (_strlen(($252|0))|0);
           $254 = ($253|0)==(0);
           do {
            if ($254) {
             label = 150;
            } else {
             $256 = $252;$i$031 = 0;
             while(1) {
              $255 = (($256) + ($i$031)|0);
              $257 = HEAP8[$255>>0]|0;
              if ((($257<<24>>24) == 73)) {
               $258 = (($p) + ($i$031<<3)|0);
               $259 = $258;
               $260 = $259;
               HEAP32[$260>>2] = $track_id$3;
               $261 = (($259) + 4)|0;
               $262 = $261;
               HEAP32[$262>>2] = 0;
              } else if ((($257<<24>>24) == 78)) {
               $263 = HEAP32[(56)>>2]|0;
               $264 = ($263|0)==(0);
               L180: do {
                if ($264) {
                 label = 126;
                } else {
                 $265 = HEAP32[(60)>>2]|0;
                 $i$014$i = 0;
                 while(1) {
                  $266 = (($265) + ($i$014$i<<2)|0);
                  $267 = HEAP32[$266>>2]|0;
                  $268 = ($267|0)==($track_id$3|0);
                  if ($268) {
                   $i$014$i$lcssa = $i$014$i;
                   break;
                  }
                  $269 = (($i$014$i) + 1)|0;
                  $270 = ($269>>>0)<($263>>>0);
                  if ($270) {
                   $i$014$i = $269;
                  } else {
                   label = 126;
                   break L180;
                  }
                 }
                 $271 = ($i$014$i$lcssa|0)==(-1);
                 if ($271) {
                  label = 126;
                 } else {
                  $track_index$1$i = $i$014$i$lcssa;
                 }
                }
               } while(0);
               L186: do {
                if ((label|0) == 126) {
                 label = 0;
                 $272 = HEAP32[(72)>>2]|0;
                 $273 = HEAP32[(52)>>2]|0;
                 $274 = (($263) + 1)|0;
                 $275 = ($273>>>0)<($274>>>0);
                 do {
                  if ($275) {
                   $276 = ($273|0)==(0);
                   $277 = $273 << 1;
                   $$$i1$i = $276 ? 64 : $277;
                   $278 = ($$$i1$i>>>0)<($274>>>0);
                   $new_count$0$i2$i = $278 ? $274 : $$$i1$i;
                   $279 = ($273>>>0)<($new_count$0$i2$i>>>0);
                   if (!($279)) {
                    $292 = $263;
                    label = 134;
                    break;
                   }
                   $280 = $new_count$0$i2$i << 2;
                   $281 = (__Znwj($280)|0);
                   $282 = ($281|0)==(0|0);
                   if ($282) {
                    break;
                   }
                   $283 = HEAP32[(56)>>2]|0;
                   $284 = ($283|0)==(0);
                   do {
                    if ($284) {
                     $$pre$i8$i = 0;
                    } else {
                     $285 = HEAP32[(60)>>2]|0;
                     $286 = ($285|0)==(0|0);
                     if ($286) {
                      $$pre$i8$i = $283;
                      break;
                     } else {
                      $i$01$i$i3$i = 0;
                     }
                     while(1) {
                      $287 = (($281) + ($i$01$i$i3$i<<2)|0);
                      $288 = (($285) + ($i$01$i$i3$i<<2)|0);
                      $289 = HEAP32[$288>>2]|0;
                      HEAP32[$287>>2] = $289;
                      $290 = (($i$01$i$i3$i) + 1)|0;
                      $exitcond$i4$i = ($290|0)==($283|0);
                      if ($exitcond$i4$i) {
                       break;
                      } else {
                       $i$01$i$i3$i = $290;
                      }
                     }
                     __ZdlPv($285);
                     $$pre$pre$i6$i = HEAP32[(56)>>2]|0;
                     $$pre$i8$i = $$pre$pre$i6$i;
                    }
                   } while(0);
                   HEAP32[(60)>>2] = $281;
                   HEAP32[(52)>>2] = $new_count$0$i2$i;
                   $292 = $$pre$i8$i;
                   label = 134;
                  } else {
                   $292 = $263;
                   label = 134;
                  }
                 } while(0);
                 if ((label|0) == 134) {
                  label = 0;
                  $291 = (($292) + 1)|0;
                  HEAP32[(56)>>2] = $291;
                  $293 = HEAP32[(60)>>2]|0;
                  $294 = (($293) + ($292<<2)|0);
                  HEAP32[$294>>2] = $track_id$3;
                 }
                 $295 = HEAP32[(68)>>2]|0;
                 $296 = HEAP32[(72)>>2]|0;
                 $297 = (($296) + 1)|0;
                 $298 = ($295>>>0)<($297>>>0);
                 do {
                  if ($298) {
                   $299 = ($295|0)==(0);
                   $300 = $295 << 1;
                   $$$i$i = $299 ? 64 : $300;
                   $301 = ($$$i$i>>>0)<($297>>>0);
                   $new_count$0$i$i = $301 ? $297 : $$$i$i;
                   $302 = ($295>>>0)<($new_count$0$i$i>>>0);
                   if (!($302)) {
                    $315 = $296;
                    break;
                   }
                   $303 = $new_count$0$i$i << 2;
                   $304 = (__Znwj($303)|0);
                   $305 = ($304|0)==(0|0);
                   if ($305) {
                    $track_index$1$i = $272;
                    break L186;
                   }
                   $306 = HEAP32[(72)>>2]|0;
                   $307 = ($306|0)==(0);
                   do {
                    if ($307) {
                     $$pre$i$i = 0;
                    } else {
                     $308 = HEAP32[(76)>>2]|0;
                     $309 = ($308|0)==(0|0);
                     if ($309) {
                      $$pre$i$i = $306;
                      break;
                     } else {
                      $i$01$i$i$i = 0;
                     }
                     while(1) {
                      $310 = (($304) + ($i$01$i$i$i<<2)|0);
                      $311 = (($308) + ($i$01$i$i$i<<2)|0);
                      $312 = HEAP32[$311>>2]|0;
                      HEAP32[$310>>2] = $312;
                      $313 = (($i$01$i$i$i) + 1)|0;
                      $exitcond$i$i = ($313|0)==($306|0);
                      if ($exitcond$i$i) {
                       break;
                      } else {
                       $i$01$i$i$i = $313;
                      }
                     }
                     __ZdlPv($308);
                     $$pre$pre$i$i = HEAP32[(72)>>2]|0;
                     $$pre$i$i = $$pre$pre$i$i;
                    }
                   } while(0);
                   HEAP32[(76)>>2] = $304;
                   HEAP32[(68)>>2] = $new_count$0$i$i;
                   $315 = $$pre$i$i;
                  } else {
                   $315 = $296;
                  }
                 } while(0);
                 $314 = (($315) + 1)|0;
                 HEAP32[(72)>>2] = $314;
                 $316 = HEAP32[(76)>>2]|0;
                 $317 = (($316) + ($315<<2)|0);
                 HEAP32[$317>>2] = 0;
                 $track_index$1$i = $272;
                }
               } while(0);
               $318 = HEAP32[(76)>>2]|0;
               $319 = (($318) + ($track_index$1$i<<2)|0);
               $320 = HEAP32[$319>>2]|0;
               $321 = (($320) + 1)|0;
               HEAP32[$319>>2] = $321;
               $322 = HEAP32[(28)>>2]|0;
               $323 = (($322) + ($320))|0;
               $324 = (($p) + ($i$031<<3)|0);
               $325 = $324;
               $326 = $325;
               HEAP32[$326>>2] = $323;
               $327 = (($325) + 4)|0;
               $328 = $327;
               HEAP32[$328>>2] = 0;
              }
              $329 = (($i$031) + 1)|0;
              $exitcond = ($329|0)==($253|0);
              if ($exitcond) {
               break;
              }
              $$pre60 = HEAP32[(24)>>2]|0;
              $256 = $$pre60;$i$031 = $329;
             }
             if ((($253|0) == 2)) {
              $341 = HEAP32[(20)>>2]|0;
              $342 = $p;
              $343 = $342;
              $344 = HEAP32[$343>>2]|0;
              $345 = (($342) + 4)|0;
              $346 = $345;
              $347 = HEAP32[$346>>2]|0;
              $348 = $194;
              $349 = $348;
              $350 = HEAP32[$349>>2]|0;
              $351 = (($348) + 4)|0;
              $352 = $351;
              $353 = HEAP32[$352>>2]|0;
              $354 = $vararg_buffer21;
              $355 = $354;
              HEAP32[$355>>2] = $344;
              $356 = (($354) + 4)|0;
              $357 = $356;
              HEAP32[$357>>2] = $347;
              $vararg_ptr24 = ((($vararg_buffer21)) + 8|0);
              $358 = $vararg_ptr24;
              $359 = $358;
              HEAP32[$359>>2] = $350;
              $360 = (($358) + 4)|0;
              $361 = $360;
              HEAP32[$361>>2] = $353;
              (_sprintf($segment_name,$341,$vararg_buffer21)|0);
              break;
             } else if ((($253|0) == 1)) {
              $330 = HEAP32[(20)>>2]|0;
              $331 = $p;
              $332 = $331;
              $333 = HEAP32[$332>>2]|0;
              $334 = (($331) + 4)|0;
              $335 = $334;
              $336 = HEAP32[$335>>2]|0;
              $337 = $vararg_buffer18;
              $338 = $337;
              HEAP32[$338>>2] = $333;
              $339 = (($337) + 4)|0;
              $340 = $339;
              HEAP32[$340>>2] = $336;
              (_sprintf($segment_name,$330,$vararg_buffer18)|0);
              break;
             } else {
              label = 150;
              break;
             }
            }
           } while(0);
           if ((label|0) == 150) {
            label = 0;
            HEAP8[$segment_name>>0] = 0;
           }
           $362 = HEAP8[8>>0]|0;
           $363 = ($362<<24>>24)==(0);
           if (!($363)) {
            HEAP32[$vararg_buffer25>>2] = $segment_name;
            (_fprintf(($193|0),(2096|0),($vararg_buffer25|0))|0);
           }
           $364 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($segment_name,1,$output)|0);
           $365 = ($364|0)==(0);
           if (!($365)) {
            $$lcssa = $364;
            label = 155;
            break;
           }
          }
          $track_id$4 = $track_id$3;
         } else {
          $track_id$4 = $track_id$034;
         }
         $366 = HEAP32[$output>>2]|0;
         $367 = ($366|0)==(0|0);
         do {
          if ($367) {
           label = 161;
          } else {
           $368 = HEAP32[$atom4>>2]|0;
           $369 = ((($368)) + 4|0);
           $370 = HEAP32[$369>>2]|0;
           $371 = ($370|0)==(1835430497);
           if ($371) {
            $379 = $368;
            break;
           }
           $372 = HEAP8[8>>0]|0;
           $373 = ($372<<24>>24)==(0);
           if ($373) {
            $375 = $368;$378 = $366;
           } else {
            (_fwrite((2120|0),19,1,($193|0))|0);
            $$pre61 = HEAP32[$atom4>>2]|0;
            $$pre62 = HEAP32[$output>>2]|0;
            $375 = $$pre61;$378 = $$pre62;
           }
           $374 = HEAP32[$375>>2]|0;
           $376 = ((($374)) + 12|0);
           $377 = HEAP32[$376>>2]|0;
           (FUNCTION_TABLE_iii[$377 & 1023]($375,$378)|0);
           label = 161;
          }
         } while(0);
         if ((label|0) == 161) {
          label = 0;
          $$pr15 = HEAP32[$atom4>>2]|0;
          $379 = $$pr15;
         }
         $380 = ($379|0)==(0|0);
         if (!($380)) {
          $381 = HEAP32[$379>>2]|0;
          $382 = ((($381)) + 4|0);
          $383 = HEAP32[$382>>2]|0;
          FUNCTION_TABLE_vi[$383 & 1023]($379);
         }
         $384 = HEAP8[(38)>>0]|0;
         $385 = ($384<<24>>24)==(0);
         if ($385) {
          $track_id$034 = $track_id$4;
         } else {
          break L139;
         }
        }
        if ((label|0) == 96) {
         $202 = HEAP8[8>>0]|0;
         $203 = ($202<<24>>24)==(0);
         if ($203) {
          break;
         }
         (_fwrite((1896|0),11,1,($193|0))|0);
         break;
        }
        else if ((label|0) == 107) {
         (_fwrite((1936|0),28,1,($193|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
        else if ((label|0) == 111) {
         (_fwrite((1968|0),61,1,($193|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
        else if ((label|0) == 113) {
         (_fwrite((2032|0),61,1,($193|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
        else if ((label|0) == 155) {
         HEAP32[$vararg_buffer28>>2] = $$lcssa;
         (_fprintf(($193|0),(1736|0),($vararg_buffer28|0))|0);
         $$3 = 1;
         STACKTOP = sp;return ($$3|0);
        }
       }
      } while(0);
      $386 = HEAP32[$81>>2]|0;
      $387 = ((($386)) + 4|0);
      $388 = HEAP32[$387>>2]|0;
      FUNCTION_TABLE_vi[$388 & 1023]($81);
      $389 = HEAP32[$input>>2]|0;
      $390 = ($389|0)==(0|0);
      if (!($390)) {
       $391 = HEAP32[$389>>2]|0;
       $392 = ((($391)) + 12|0);
       $393 = HEAP32[$392>>2]|0;
       FUNCTION_TABLE_vi[$393 & 1023]($389);
      }
      $394 = HEAP32[$output>>2]|0;
      $395 = ($394|0)==(0|0);
      if ($395) {
       $$3 = 0;
       STACKTOP = sp;return ($$3|0);
      }
      $396 = HEAP32[$394>>2]|0;
      $397 = ((($396)) + 12|0);
      $398 = HEAP32[$397>>2]|0;
      FUNCTION_TABLE_vi[$398 & 1023]($394);
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     }
    } while(0);
    $68 = HEAP32[_stderr>>2]|0;
    (_fwrite((1304|0),69,1,($68|0))|0);
    $$3 = 1;
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 $51 = HEAP32[_stderr>>2]|0;
 (_fwrite((1272|0),31,1,($51|0))|0);
 $$3 = 1;
 STACKTOP = sp;return ($$3|0);
}
function __GLOBAL__sub_I_Mp4Split_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[48>>2] = (2152);
 HEAP32[(52)>>2] = 0;
 HEAP32[(56)>>2] = 0;
 HEAP32[(60)>>2] = 0;
 (___cxa_atexit((1|0),(48|0),(___dso_handle|0))|0);
 HEAP32[64>>2] = (2152);
 HEAP32[(68)>>2] = 0;
 HEAP32[(72)>>2] = 0;
 HEAP32[(76)>>2] = 0;
 (___cxa_atexit((1|0),(64|0),(___dso_handle|0))|0);
 return;
}
function __ZN9AP4_ArrayIjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2152);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIjED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2152);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($type,$0,$1,$is_full,$force_64,$stream,$atom_factory) {
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $is_full = $is_full|0;
 $force_64 = $force_64|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body6$index7Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $eh$lpad$body9$index12Z2D = 0, $eh$lpad$body9$indexZ2D = 0, $flags = 0, $or$cond = 0, $peek = 0, $position = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 16|0;
 $flags = sp + 12|0;
 $peek = sp + 8|0;
 $position = sp;
 if (!($is_full)) {
  $82 = (__Znwj(56)|0);
  __THREW__ = 0;
  invoke_viiiii(746,($82|0),($type|0),($0|0),($1|0),($force_64|0));
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $103 = ___cxa_find_matching_catch()|0;
   $104 = tempRet0;
   $eh$lpad$body9$index12Z2D = $104;$eh$lpad$body9$indexZ2D = $103;
  } else {
   $85 = ((($82)) + 36|0);
   $86 = ((($82)) + 40|0);
   HEAP32[$86>>2] = (2376);
   $87 = ((($82)) + 44|0);
   HEAP32[$87>>2] = 0;
   $88 = ((($82)) + 48|0);
   HEAP32[$88>>2] = 0;
   $89 = ((($82)) + 52|0);
   HEAP32[$89>>2] = 0;
   HEAP32[$82>>2] = (2192);
   HEAP32[$85>>2] = (2268);
   __THREW__ = 0;
   $90 = (invoke_ii(5,($82|0))|0);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if (!($92)) {
    $93 = (_i64Subtract(($0|0),($1|0),($90|0),0)|0);
    $94 = tempRet0;
    __THREW__ = 0;
    invoke_viiiii(747,($82|0),($atom_factory|0),($stream|0),($93|0),($94|0));
    $95 = __THREW__; __THREW__ = 0;
    $96 = $95&1;
    if (!($96)) {
     $$03 = $82;
     STACKTOP = sp;return ($$03|0);
    }
   }
   $97 = ___cxa_find_matching_catch()|0;
   $98 = tempRet0;
   __THREW__ = 0;
   invoke_vi(314,($85|0));
   $99 = __THREW__; __THREW__ = 0;
   $100 = $99&1;
   if ($100) {
    $101 = ___cxa_find_matching_catch(0|0)|0;
    $102 = tempRet0;
    ___clang_call_terminate($101);
    // unreachable;
   } else {
    $eh$lpad$body9$index12Z2D = $98;$eh$lpad$body9$indexZ2D = $97;
   }
  }
  __ZdlPv($82);
  $$0 = $eh$lpad$body9$index12Z2D;$$02 = $eh$lpad$body9$indexZ2D;
  ___resumeException($$02|0);
  // unreachable;
 }
 $2 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $4 = ($type|0)==(1835365473);
 if ($4) {
  $5 = HEAP8[$version>>0]|0;
  $6 = $5&255;
  $7 = $6 << 24;
  $8 = HEAP32[$flags>>2]|0;
  $9 = $7 | $8;
  $10 = ($9>>>0)>(7);
  $11 = ($1>>>0)>(0);
  $12 = ($0>>>0)>(15);
  $13 = ($1|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  $or$cond = $15 & $10;
  if ($or$cond) {
   $16 = (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$peek)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    $$03 = 0;
    STACKTOP = sp;return ($$03|0);
   }
   $18 = HEAP32[$peek>>2]|0;
   $19 = ($18|0)==(1751411826);
   if ($19) {
    $20 = HEAP32[$stream>>2]|0;
    $21 = ((($20)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    (FUNCTION_TABLE_iii[$22 & 1023]($stream,$position)|0);
    $23 = HEAP32[$stream>>2]|0;
    $24 = ((($23)) + 24|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $position;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + 4)|0;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (_i64Add(($28|0),($31|0),-8,-1)|0);
    $33 = tempRet0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($stream,$32,$33)|0);
    $34 = (__Znwj(56)|0);
    __THREW__ = 0;
    invoke_viiiii(746,($34|0),1835365473,($0|0),($1|0),($force_64|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     $eh$lpad$body$index2Z2D = $56;$eh$lpad$body$indexZ2D = $55;
    } else {
     $37 = ((($34)) + 36|0);
     $38 = ((($34)) + 40|0);
     HEAP32[$38>>2] = (2376);
     $39 = ((($34)) + 44|0);
     HEAP32[$39>>2] = 0;
     $40 = ((($34)) + 48|0);
     HEAP32[$40>>2] = 0;
     $41 = ((($34)) + 52|0);
     HEAP32[$41>>2] = 0;
     HEAP32[$34>>2] = (2192);
     HEAP32[$37>>2] = (2268);
     __THREW__ = 0;
     $42 = (invoke_ii(5,($34|0))|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if (!($44)) {
      $45 = (_i64Subtract(($0|0),($1|0),($42|0),0)|0);
      $46 = tempRet0;
      __THREW__ = 0;
      invoke_viiiii(747,($34|0),($atom_factory|0),($stream|0),($45|0),($46|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if (!($48)) {
       $$03 = $34;
       STACKTOP = sp;return ($$03|0);
      }
     }
     $49 = ___cxa_find_matching_catch()|0;
     $50 = tempRet0;
     __THREW__ = 0;
     invoke_vi(314,($37|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $53 = ___cxa_find_matching_catch(0|0)|0;
      $54 = tempRet0;
      ___clang_call_terminate($53);
      // unreachable;
     } else {
      $eh$lpad$body$index2Z2D = $50;$eh$lpad$body$indexZ2D = $49;
     }
    }
    __ZdlPv($34);
    $$0 = $eh$lpad$body$index2Z2D;$$02 = $eh$lpad$body$indexZ2D;
    ___resumeException($$02|0);
    // unreachable;
   }
  }
 }
 $57 = (__Znwj(56)|0);
 $58 = HEAP8[$version>>0]|0;
 $59 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(748,($57|0),($type|0),($0|0),($1|0),($force_64|0),($58|0),($59|0));
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $80 = ___cxa_find_matching_catch()|0;
  $81 = tempRet0;
  $eh$lpad$body6$index7Z2D = $81;$eh$lpad$body6$indexZ2D = $80;
 } else {
  $62 = ((($57)) + 36|0);
  $63 = ((($57)) + 40|0);
  HEAP32[$63>>2] = (2376);
  $64 = ((($57)) + 44|0);
  HEAP32[$64>>2] = 0;
  $65 = ((($57)) + 48|0);
  HEAP32[$65>>2] = 0;
  $66 = ((($57)) + 52|0);
  HEAP32[$66>>2] = 0;
  HEAP32[$57>>2] = (2192);
  HEAP32[$62>>2] = (2268);
  __THREW__ = 0;
  $67 = (invoke_ii(5,($57|0))|0);
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if (!($69)) {
   $70 = (_i64Subtract(($0|0),($1|0),($67|0),0)|0);
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_viiiii(747,($57|0),($atom_factory|0),($stream|0),($70|0),($71|0));
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if (!($73)) {
    $$03 = $57;
    STACKTOP = sp;return ($$03|0);
   }
  }
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($62|0));
  $76 = __THREW__; __THREW__ = 0;
  $77 = $76&1;
  if ($77) {
   $78 = ___cxa_find_matching_catch(0|0)|0;
   $79 = tempRet0;
   ___clang_call_terminate($78);
   // unreachable;
  } else {
   $eh$lpad$body6$index7Z2D = $75;$eh$lpad$body6$indexZ2D = $74;
  }
 }
 __ZdlPv($57);
 $$0 = $eh$lpad$body6$index7Z2D;$$02 = $eh$lpad$body6$indexZ2D;
 ___resumeException($$02|0);
 // unreachable;
 return (0)|0;
}
function __ZN17AP4_ContainerAtomC2Ej($this,$type) {
 $this = $this|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,$type,8);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = (2376);
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$this>>2] = (2192);
 HEAP32[$0>>2] = (2268);
 return;
}
function __ZN17AP4_ContainerAtomC2Ejhj($this,$type,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $version = $version|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,$type,12,$version,$flags);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = (2376);
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$this>>2] = (2192);
 HEAP32[$0>>2] = (2268);
 return;
}
function __ZN17AP4_ContainerAtomC2Ejyb($this,$type,$0,$1,$force_64) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejyb($this,$type,$0,$1,$force_64);
 $2 = ((($this)) + 36|0);
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 52|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$this>>2] = (2192);
 HEAP32[$2>>2] = (2268);
 return;
}
function __ZN17AP4_ContainerAtomC2Ejybhj($this,$type,$0,$1,$force_64,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $version = $version|0;
 $flags = $flags|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejybhj($this,$type,$0,$1,$force_64,$version,$flags);
 $2 = ((($this)) + 36|0);
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 52|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$this>>2] = (2192);
 HEAP32[$2>>2] = (2268);
 return;
}
function __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$0,$1,$force_64,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejyb($this,$type,$0,$1,$force_64);
 $2 = ((($this)) + 36|0);
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 52|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$this>>2] = (2192);
 $7 = ((($this)) + 36|0);
 HEAP32[$7>>2] = (2268);
 __THREW__ = 0;
 $8 = (invoke_ii(5,($this|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = (_i64Subtract(($0|0),($1|0),($8|0),0)|0);
  $12 = tempRet0;
  __THREW__ = 0;
  invoke_viiiii(747,($this|0),($atom_factory|0),($stream|0),($11|0),($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   return;
  }
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($15|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy($this,$atom_factory,$stream,$0,$1) {
 $this = $this|0;
 $atom_factory = $atom_factory|0;
 $stream = $stream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom = sp + 8|0;
 $bytes_available = sp;
 $2 = $bytes_available;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = ((($this)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN15AP4_AtomFactory11PushContextEj($atom_factory,$7);
 $8 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($atom_factory,$stream,$bytes_available,$atom)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  __ZN15AP4_AtomFactory10PopContextEv($atom_factory);
  STACKTOP = sp;return;
 }
 $10 = ((($this)) + 36|0);
 $11 = ((($this)) + 52|0);
 $12 = ((($this)) + 48|0);
 $13 = ((($this)) + 44|0);
 while(1) {
  $14 = HEAP32[$atom>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  (FUNCTION_TABLE_iii[$17 & 1023]($14,$10)|0);
  $18 = HEAP32[$atom>>2]|0;
  $19 = (__Znwj(12)|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($19)) + 8|0);
  HEAP32[$21>>2] = 0;
  $22 = HEAP32[$11>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   HEAP32[$12>>2] = $19;
   HEAP32[$11>>2] = $19;
   HEAP32[$20>>2] = 0;
   $$sink$i$i = 0;
  } else {
   HEAP32[$20>>2] = 0;
   $24 = ((($22)) + 4|0);
   HEAP32[$24>>2] = $19;
   HEAP32[$11>>2] = $19;
   $$sink$i$i = $22;
  }
  HEAP32[$21>>2] = $$sink$i$i;
  $25 = HEAP32[$13>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$13>>2] = $26;
  $27 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($atom_factory,$stream,$bytes_available,$atom)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   break;
  }
 }
 __ZN15AP4_AtomFactory10PopContextEv($atom_factory);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtom5CloneEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $child_item$0 = 0, $child_item$02 = 0, $child_item$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (__Znwj(56)|0);
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 do {
  if ($2) {
   __THREW__ = 0;
   invoke_viii(750,($3|0),($5|0),8);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $21 = ((($3)) + 36|0);
    $22 = ((($3)) + 40|0);
    HEAP32[$22>>2] = (2376);
    $23 = ((($3)) + 44|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($3)) + 48|0);
    HEAP32[$24>>2] = 0;
    $25 = ((($3)) + 52|0);
    HEAP32[$25>>2] = 0;
    HEAP32[$3>>2] = (2192);
    HEAP32[$21>>2] = (2268);
    break;
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   __ZdlPv($3);
   $$0 = $27;$$01 = $26;
   ___resumeException($$01|0);
   // unreachable;
  } else {
   $6 = ((($this)) + 25|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ((($this)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   invoke_viiiii(749,($3|0),($5|0),12,($7|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = ((($3)) + 36|0);
    $13 = ((($3)) + 40|0);
    HEAP32[$13>>2] = (2376);
    $14 = ((($3)) + 44|0);
    HEAP32[$14>>2] = 0;
    $15 = ((($3)) + 48|0);
    HEAP32[$15>>2] = 0;
    $16 = ((($3)) + 52|0);
    HEAP32[$16>>2] = 0;
    HEAP32[$3>>2] = (2192);
    HEAP32[$12>>2] = (2268);
    break;
   }
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   __ZdlPv($3);
   $$0 = $18;$$01 = $17;
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $28 = ((($this)) + 48|0);
 $child_item$02 = HEAP32[$28>>2]|0;
 $29 = ($child_item$02|0)==(0|0);
 if ($29) {
  return ($3|0);
 }
 $30 = ((($3)) + 36|0);
 $child_item$03 = $child_item$02;
 while(1) {
  $31 = HEAP32[$child_item$03>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
  $36 = ($35|0)==(0|0);
  if (!($36)) {
   $37 = HEAP32[$30>>2]|0;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   (FUNCTION_TABLE_iiii[$39 & 1023]($30,$35,-1)|0);
  }
  $40 = ((($child_item$03)) + 4|0);
  $child_item$0 = HEAP32[$40>>2]|0;
  $41 = ($child_item$0|0)==(0|0);
  if ($41) {
   break;
  } else {
   $child_item$03 = $child_item$0;
  }
 }
 return ($3|0);
}
function __ZN17AP4_ContainerAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 1023]($this,$inspector)|0);
 return ($3|0);
}
function __ZN17AP4_ContainerAtom15InspectChildrenER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (2392);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $inspector;
 $2 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP32[$item$01$i>>2]|0;
 (__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($0,$4)|0);
 $5 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$5>>2]|0;
 $6 = ($item$0$i1|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $7 = ((($$pre)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$8 & 1023]($0,$9)|0);
  $10 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$10>>2]|0;
  $11 = ($item$0$i|0)==(0|0);
  if ($11) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN17AP4_ContainerAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (11232);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $stream;
 $2 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP32[(11240)>>2]|0;
 $5 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$4 & 1023]($0,$5)|0);
 $6 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$6>>2]|0;
 $7 = ($item$0$i1|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $8 = ((($$pre)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$9 & 1023]($0,$10)|0);
  $11 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$11>>2]|0;
  $12 = ($item$0$i|0)==(0|0);
  if ($12) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i2 = 0, $item$0$i3 = 0, $item$01$i = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($this)|0);
 $6 = $size;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $10 = ((($1)) + 4|0);
 HEAP32[$10>>2] = $size;
 $11 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$11>>2]|0;
 $12 = ($item$01$i|0)==(0|0);
 if ($12) {
  $27 = $5;$28 = 0;
 } else {
  $13 = HEAP32[$item$01$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$13)|0);
  $14 = ((($item$01$i)) + 4|0);
  $item$0$i2 = HEAP32[$14>>2]|0;
  $15 = ($item$0$i2|0)==(0|0);
  if (!($15)) {
   $item$0$i3 = $item$0$i2;
   while(1) {
    $$pre = HEAP32[$1>>2]|0;
    $16 = ((($$pre)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$item$0$i3>>2]|0;
    (FUNCTION_TABLE_iii[$17 & 1023]($1,$18)|0);
    $19 = ((($item$0$i3)) + 4|0);
    $item$0$i = HEAP32[$19>>2]|0;
    $20 = ($item$0$i|0)==(0|0);
    if ($20) {
     break;
    } else {
     $item$0$i3 = $item$0$i;
    }
   }
  }
  $21 = $size;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $23;$28 = $26;
 }
 __ZN8AP4_Atom7SetSizeEyb($this,$27,$28,0);
 $29 = ((($this)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$30>>2]|0;
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vii[$34 & 1023]($30,$this);
 STACKTOP = sp;return;
}
function __ZThn36_N17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i$i = 0, $item$0$i$i1 = 0, $item$0$i$i2 = 0, $item$01$i$i = 0;
 var $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $1 = sp + 8|0;
 $2 = ((($this)) + -36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = $size$i;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $11 = ((($1)) + 4|0);
 HEAP32[$11>>2] = $size$i;
 $12 = ((($this)) + 12|0);
 $item$01$i$i = HEAP32[$12>>2]|0;
 $13 = ($item$01$i$i|0)==(0|0);
 if ($13) {
  $28 = $6;$29 = 0;
 } else {
  $14 = HEAP32[$item$01$i$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$14)|0);
  $15 = ((($item$01$i$i)) + 4|0);
  $item$0$i$i1 = HEAP32[$15>>2]|0;
  $16 = ($item$0$i$i1|0)==(0|0);
  if (!($16)) {
   $item$0$i$i2 = $item$0$i$i1;
   while(1) {
    $$pre$i = HEAP32[$1>>2]|0;
    $17 = ((($$pre$i)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$item$0$i$i2>>2]|0;
    (FUNCTION_TABLE_iii[$18 & 1023]($1,$19)|0);
    $20 = ((($item$0$i$i2)) + 4|0);
    $item$0$i$i = HEAP32[$20>>2]|0;
    $21 = ($item$0$i$i|0)==(0|0);
    if ($21) {
     break;
    } else {
     $item$0$i$i2 = $item$0$i$i;
    }
   }
  }
  $22 = $size$i;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $24;$29 = $27;
 }
 __ZN8AP4_Atom7SetSizeEyb($2,$28,$29,0);
 $30 = ((($this)) + -4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$31>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_vii[$35 & 1023]($31,$2);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($this)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $22 = $6;$23 = $9;
 } else {
  $22 = $1;$23 = 0;
 }
 $10 = ((($child)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = ((($child)) + 16|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $16;$21 = $19;
 } else {
  $20 = $11;$21 = 0;
 }
 $24 = (_i64Add(($20|0),($21|0),($22|0),($23|0))|0);
 $25 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($this,$24,$25,0);
 $26 = ((($this)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  return;
 }
 $29 = HEAP32[$27>>2]|0;
 $30 = ((($29)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_vii[$31 & 1023]($27,$this);
 return;
}
function __ZThn36_N17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($this)) + -28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($this)) + -20|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $23 = $7;$24 = $10;
 } else {
  $23 = $2;$24 = 0;
 }
 $11 = ((($child)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = ((($child)) + 16|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;$22 = $20;
 } else {
  $21 = $12;$22 = 0;
 }
 $25 = (_i64Add(($21|0),($22|0),($23|0),($24|0))|0);
 $26 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($0,$25,$26,0);
 $27 = ((($this)) + -4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  return;
 }
 $30 = HEAP32[$28>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vii[$32 & 1023]($28,$0);
 return;
}
function __ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($this)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $20 = $6;$21 = $9;
 } else {
  $20 = $1;$21 = 0;
 }
 $10 = ((($child)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = ((($child)) + 16|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $22 = $16;$23 = $19;
 } else {
  $22 = $11;$23 = 0;
 }
 $24 = (_i64Subtract(($20|0),($21|0),($22|0),($23|0))|0);
 $25 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($this,$24,$25,0);
 $26 = ((($this)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  return;
 }
 $29 = HEAP32[$27>>2]|0;
 $30 = ((($29)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_vii[$31 & 1023]($27,$this);
 return;
}
function __ZThn36_N17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($this)) + -28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($this)) + -20|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $21 = $7;$22 = $10;
 } else {
  $21 = $2;$22 = 0;
 }
 $11 = ((($child)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = ((($child)) + 16|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $23 = $17;$24 = $20;
 } else {
  $23 = $12;$24 = 0;
 }
 $25 = (_i64Subtract(($21|0),($22|0),($23|0),($24|0))|0);
 $26 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($0,$25,$26,0);
 $27 = ((($this)) + -4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  return;
 }
 $30 = HEAP32[$28>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vii[$32 & 1023]($28,$0);
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$atom>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 1023]($atom,$4)|0);
 return 0;
}
function __ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($atom)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $18 = $6;$19 = $9;
 } else {
  $18 = $1;$19 = 0;
 }
 $10 = ((($this)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $20 = (_i64Add(($14|0),($17|0),($18|0),($19|0))|0);
 $21 = tempRet0;
 $22 = $11;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 return 0;
}
function __ZN17AP4_ContainerAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($0);
 return;
}
function __ZN17AP4_ContainerAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN8AP4_Atom9SetParentEP14AP4_AtomParent($this,$parent) {
 $this = $this|0;
 $parent = $parent|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = $parent;
 return 0;
}
function __ZN8AP4_Atom9GetParentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZThn36_N17AP4_ContainerAtomD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_AtomParentD2Ev($this);
 return;
}
function __ZThn36_N17AP4_ContainerAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(314,($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN17AP4_AtomSizeAdderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN21AP4_AtomListInspectorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListI8AP4_AtomED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2376);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListI8AP4_AtomED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2376);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN8AP4_FileC2ER14AP4_ByteStreamR15AP4_AtomFactoryb($this,$stream,$atom_factory,$moov_only) {
 $this = $this|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 $moov_only = $moov_only|0;
 var $$0 = 0, $$02 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $stream_position = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom = sp + 8|0;
 $stream_position = sp;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = (2376);
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$this>>2] = (2600);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 32|0);
 HEAP8[$7>>0] = 1;
 while(1) {
  $8 = HEAP32[$stream>>2]|0;
  $9 = ((($8)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  $11 = (invoke_iii($10|0,($stream|0),($stream_position|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 11;
   break;
  }
  $14 = ($11|0)==(0);
  if (!($14)) {
   label = 22;
   break;
  }
  __THREW__ = 0;
  $15 = (invoke_iiii(751,($atom_factory|0),($stream|0),($atom|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   label = 11;
   break;
  }
  $18 = ($15|0)==(0);
  if (!($18)) {
   label = 22;
   break;
  }
  $19 = HEAP32[$this>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$atom>>2]|0;
  __THREW__ = 0;
  (invoke_iiii($21|0,($this|0),($22|0),-1)|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 11;
   break;
  }
  $25 = HEAP32[$atom>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  if ((($27|0) == 1836019574)) {
   __THREW__ = 0;
   $35 = (invoke_ii(752,32)|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 12;
    break;
   }
   $38 = ($25|0)==(0|0);
   if ($38) {
    $40 = 0;
   } else {
    $39 = (___dynamic_cast($25,11216,4552,0)|0);
    $40 = $39;
   }
   __THREW__ = 0;
   invoke_viiii(753,($35|0),($40|0),($stream|0),0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $$lcssa = $35;
    label = 18;
    break;
   }
   HEAP32[$4>>2] = $35;
   if ($moov_only) {
    label = 22;
    break;
   } else {
    continue;
   }
  } else if ((($27|0) == 1835295092)) {
   $$pre = HEAP32[$4>>2]|0;
   $45 = ($$pre|0)==(0|0);
   if (!($45)) {
    continue;
   }
   HEAP8[$7>>0] = 0;
   continue;
  } else if ((($27|0) == 1718909296)) {
   $28 = ($25|0)==(0|0);
   if ($28) {
    $30 = 0;
   } else {
    $29 = (___dynamic_cast($25,11216,9568,0)|0);
    $30 = $29;
   }
   HEAP32[$5>>2] = $30;
   continue;
  } else {
   continue;
  }
 }
 if ((label|0) == 11) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $lpad$phi$index = $31;$lpad$phi$index2 = $32;
  label = 13;
 }
 else if ((label|0) == 12) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $lpad$phi$index = $33;$lpad$phi$index2 = $34;
  label = 13;
 }
 else if ((label|0) == 18) {
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  __ZdlPv($$lcssa);
  $$0 = $44;$$02 = $43;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 if ((label|0) == 13) {
  $$0 = $lpad$phi$index2;$$02 = $lpad$phi$index;
 }
 __THREW__ = 0;
 invoke_vi(314,($this|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $48 = ___cxa_find_matching_catch(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN8AP4_FileD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2600);
 $0 = ((($this)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $$0 = $14;$$01 = $13;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($this)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    __ZN14AP4_AtomParentD2Ev($this);
    return;
   }
   __THREW__ = 0;
   invoke_vi(754,($9|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    __ZdlPv($9);
    $$0 = $16;$$01 = $15;
    break;
   }
   __ZdlPv($9);
   __ZN14AP4_AtomParentD2Ev($this);
   return;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(314,($this|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN8AP4_FileD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(38,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN8AP4_File7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  (__ZN9AP4_Movie7InspectER17AP4_AtomInspector($2,$inspector)|0);
 }
 HEAP32[$0>>2] = (2392);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $inspector;
 $5 = ((($this)) + 12|0);
 $item$01$i = HEAP32[$5>>2]|0;
 $6 = ($item$01$i|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return 0;
 }
 $7 = HEAP32[$item$01$i>>2]|0;
 (__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($0,$7)|0);
 $8 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$8>>2]|0;
 $9 = ($item$0$i1|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $10 = ((($$pre)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$11 & 1023]($0,$12)|0);
  $13 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$13>>2]|0;
  $14 = ($item$0$i|0)==(0|0);
  if ($14) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN14AP4_AtomParent14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14AP4_AtomParent12OnChildAddedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14AP4_AtomParent14OnChildRemovedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12AP4_TrexAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1953654136,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (2688);
  $8 = ((($4)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($8|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = ((($4)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($11|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = ((($4)) + 44|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($14|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     $17 = ((($4)) + 48|0);
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($17|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      $20 = ((($4)) + 52|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($20|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $$0 = $4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 __ZdlPv($4);
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_TrexAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$3)|0);
 $4 = ((($this)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $6 = ((($this)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$7)|0);
 $8 = ((($this)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
 return 0;
}
function __ZN12AP4_TrexAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,2776,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,2792,$9,0,0);
 $10 = HEAP32[$inspector>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($this)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 1023]($inspector,12384,$14,0,0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,12408,$19,0,0);
 $20 = HEAP32[$inspector>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viiiii[$22 & 1023]($inspector,12432,$24,0,1);
 return 0;
}
function __ZN8AP4_AtomD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12AP4_TrexAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN14AP4_ByteStream4ReadEPvj($this,$buffer,$bytes_to_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read = sp;
 $0 = ($bytes_to_read|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$014 = $bytes_to_read;$$023 = $buffer;
 while(1) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (FUNCTION_TABLE_iiiii[$3 & 1023]($this,$$023,$$014,$bytes_read)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   label = 8;
   break;
  }
  $6 = HEAP32[$bytes_read>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = -13;
   label = 8;
   break;
  }
  $8 = ($$014>>>0)<($6>>>0);
  if ($8) {
   label = 6;
   break;
  }
  $9 = (($$014) - ($6))|0;
  $10 = (($$023) + ($6)|0);
  $11 = ($$014|0)==($6|0);
  if ($11) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$014 = $9;$$023 = $10;
  }
 }
 if ((label|0) == 6) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream5WriteEPKvj($this,$buffer,$bytes_to_write) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_written = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written = sp;
 $0 = ($bytes_to_write|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$014 = $bytes_to_write;$$023 = $buffer;
 while(1) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (FUNCTION_TABLE_iiiii[$3 & 1023]($this,$$023,$$014,$bytes_written)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   label = 8;
   break;
  }
  $6 = HEAP32[$bytes_written>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = -13;
   label = 8;
   break;
  }
  $8 = ($$014>>>0)<($6>>>0);
  if ($8) {
   label = 6;
   break;
  }
  $9 = (($$014) - ($6))|0;
  $10 = (($$023) + ($6)|0);
  $11 = ($$014|0)==($6|0);
  if ($11) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$014 = $9;$$023 = $10;
  }
 }
 if ((label|0) == 6) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream11WriteStringEPKc($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_written$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $0 = ($buffer|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_strlen(($buffer|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$014$i = $1;$$023$i = $buffer;
 while(1) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiiii[$5 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0$i = $6;
   break;
  }
  $8 = HEAP32[$bytes_written$i>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $$0$i = -13;
   break;
  }
  $10 = ($$014$i>>>0)<($8>>>0);
  if ($10) {
   label = 7;
   break;
  }
  $11 = (($$014$i) - ($8))|0;
  $12 = (($$023$i) + ($8)|0);
  $13 = ($$014$i|0)==($8|0);
  if ($13) {
   $$0$i = 0;
   break;
  } else {
   $$014$i = $11;$$023$i = $12;
  }
 }
 if ((label|0) == 7) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZN14AP4_ByteStream11WriteDoubleEd($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $buffer = sp + 8|0;
 __Z21AP4_BytesFromDoubleBEPhd($buffer,$value);
 $$014$i = 8;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_written$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream9WriteUI64Ey($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $buffer = sp + 8|0;
 __Z21AP4_BytesFromUInt64BEPhy($buffer,$0,$1);
 $$014$i = 8;$$023$i = $buffer;
 while(1) {
  $2 = HEAP32[$this>>2]|0;
  $3 = ((($2)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (FUNCTION_TABLE_iiiii[$4 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0$i = $5;
   label = 7;
   break;
  }
  $7 = HEAP32[$bytes_written$i>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $9 = ($$014$i>>>0)<($7>>>0);
  if ($9) {
   label = 5;
   break;
  }
  $10 = (($$014$i) - ($7))|0;
  $11 = (($$023$i) + ($7)|0);
  $12 = ($$014$i|0)==($7|0);
  if ($12) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $10;$$023$i = $11;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream9WriteUI32Ej($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $buffer = sp + 4|0;
 $0 = $value >>> 24;
 $1 = $0&255;
 HEAP8[$buffer>>0] = $1;
 $2 = $value >>> 16;
 $3 = $2&255;
 $4 = ((($buffer)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $value >>> 8;
 $6 = $5&255;
 $7 = ((($buffer)) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $value&255;
 $9 = ((($buffer)) + 3|0);
 HEAP8[$9>>0] = $8;
 $$014$i = 4;$$023$i = $buffer;
 while(1) {
  $10 = HEAP32[$this>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiii[$12 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$0$i = $13;
   label = 7;
   break;
  }
  $15 = HEAP32[$bytes_written$i>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $17 = ($$014$i>>>0)<($15>>>0);
  if ($17) {
   label = 5;
   break;
  }
  $18 = (($$014$i) - ($15))|0;
  $19 = (($$023$i) + ($15)|0);
  $20 = ($$014$i|0)==($15|0);
  if ($20) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $18;$$023$i = $19;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream9WriteUI24Ej($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $buffer = sp + 4|0;
 $0 = $value >>> 16;
 $1 = $0&255;
 HEAP8[$buffer>>0] = $1;
 $2 = $value >>> 8;
 $3 = $2&255;
 $4 = ((($buffer)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $value&255;
 $6 = ((($buffer)) + 2|0);
 HEAP8[$6>>0] = $5;
 $$014$i = 3;$$023$i = $buffer;
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiii[$9 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0$i = $10;
   label = 7;
   break;
  }
  $12 = HEAP32[$bytes_written$i>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $14 = ($$014$i>>>0)<($12>>>0);
  if ($14) {
   label = 5;
   break;
  }
  $15 = (($$014$i) - ($12))|0;
  $16 = (($$023$i) + ($12)|0);
  $17 = ($$014$i|0)==($12|0);
  if ($17) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $15;$$023$i = $16;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream9WriteUI16Et($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_written$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $buffer = sp + 4|0;
 $0 = ($value&65535) >>> 8;
 $1 = $0&255;
 HEAP8[$buffer>>0] = $1;
 $2 = $value&255;
 $3 = ((($buffer)) + 1|0);
 HEAP8[$3>>0] = $2;
 $$014$i = 2;$$023$i = $buffer;
 while(1) {
  $4 = HEAP32[$this>>2]|0;
  $5 = ((($4)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiiii[$6 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $$0$i = $7;
   label = 7;
   break;
  }
  $9 = HEAP32[$bytes_written$i>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $11 = ($$014$i>>>0)<($9>>>0);
  if ($11) {
   label = 5;
   break;
  }
  $12 = (($$014$i) - ($9))|0;
  $13 = (($$023$i) + ($9)|0);
  $14 = ($$014$i|0)==($9|0);
  if ($14) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $12;$$023$i = $13;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream9WriteUI08Eh($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp;
 $0 = sp + 4|0;
 HEAP8[$0>>0] = $value;
 $$014$i = 1;$$023$i = $0;
 while(1) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (FUNCTION_TABLE_iiiii[$3 & 1023]($this,$$023$i,$$014$i,$bytes_written$i)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0$i = $4;
   label = 7;
   break;
  }
  $6 = HEAP32[$bytes_written$i>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $8 = ($$014$i>>>0)<($6>>>0);
  if ($8) {
   label = 5;
   break;
  }
  $9 = (($$014$i) - ($6))|0;
  $10 = (($$023$i) + ($6)|0);
  $11 = ($$014$i|0)==($6|0);
  if ($11) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $9;$$023$i = $10;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI64ERy($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $$0$i$ph = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 8|0;
 $$014$i = 8;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i$ph = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i$ph = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   label = 8;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = $$0$i$ph;$15 = 0;$18 = 0;
 }
 else if ((label|0) == 8) {
  $11 = (__Z19AP4_BytesToUInt64BEPKh($buffer)|0);
  $12 = tempRet0;
  $$0 = 0;$15 = $11;$18 = $12;
 }
 $13 = $value;
 $14 = $13;
 HEAP32[$14>>2] = $15;
 $16 = (($13) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $18;
 STACKTOP = sp;return ($$0|0);
}
function __ZN14AP4_ByteStream10ReadDoubleERd($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $$0$i$ph = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, $storemerge = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 8|0;
 $$014$i = 8;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i$ph = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i$ph = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   label = 8;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = $$0$i$ph;$storemerge = 0.0;
  HEAPF64[$value>>3] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  $11 = (+__Z19AP4_BytesToDoubleBEPKh($buffer));
  $$0 = 0;$storemerge = $11;
  HEAPF64[$value>>3] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI32ERj($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $$0$i$ph = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 4|0;
 $$014$i = 4;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i$ph = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i$ph = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   label = 8;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = $$0$i$ph;$storemerge = 0;
  HEAP32[$value>>2] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  $11 = HEAP8[$buffer>>0]|0;
  $12 = $11&255;
  $13 = $12 << 24;
  $14 = ((($buffer)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 16;
  $18 = $17 | $13;
  $19 = ((($buffer)) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = $18 | $22;
  $24 = ((($buffer)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  $$0 = 0;$storemerge = $27;
  HEAP32[$value>>2] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI24ERj($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $$0$i$ph = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 4|0;
 $$014$i = 3;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i$ph = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i$ph = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   label = 8;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = $$0$i$ph;$storemerge = 0;
  HEAP32[$value>>2] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  $11 = HEAP8[$buffer>>0]|0;
  $12 = $11&255;
  $13 = $12 << 16;
  $14 = ((($buffer)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = $17 | $13;
  $19 = ((($buffer)) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $18 | $21;
  $$0 = 0;$storemerge = $22;
  HEAP32[$value>>2] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI16ERt($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $$0$i$ph = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 4|0;
 $$014$i = 2;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i$ph = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i$ph = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   label = 8;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = $$0$i$ph;$storemerge = 0;
  HEAP16[$value>>1] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  $11 = HEAP8[$buffer>>0]|0;
  $12 = $11&255;
  $13 = $12 << 8;
  $14 = ((($buffer)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $13 | $16;
  $18 = $17&65535;
  $$0 = 0;$storemerge = $18;
  HEAP16[$value>>1] = $storemerge;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI08ERh($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0$i = 0, $$014$i = 0, $$023$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read$i = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i = sp;
 $buffer = sp + 4|0;
 $$014$i = 1;$$023$i = $buffer;
 while(1) {
  $0 = HEAP32[$this>>2]|0;
  $1 = ((($0)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iiiii[$2 & 1023]($this,$$023$i,$$014$i,$bytes_read$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0$i = $3;
   label = 7;
   break;
  }
  $5 = HEAP32[$bytes_read$i>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0$i = -13;
   label = 7;
   break;
  }
  $7 = ($$014$i>>>0)<($5>>>0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($$014$i) - ($5))|0;
  $9 = (($$023$i) + ($5)|0);
  $10 = ($$014$i|0)==($5|0);
  if ($10) {
   $$0$i = 0;
   label = 7;
   break;
  } else {
   $$014$i = $8;$$023$i = $9;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((3056|0),(3088|0),58,(3128|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $11 = ($$0$i|0)==(0);
  $12 = HEAP8[$buffer>>0]|0;
  $storemerge = $11 ? $12 : 0;
  HEAP8[$value>>0] = $storemerge;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($this,$string) {
 $this = $this|0;
 $string = $string|0;
 var $$0 = 0, $$0$i$i = 0, $$014$i$i = 0, $$023$i$i = 0, $$lcssa23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $buffer$i = 0, $bytes_read$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $size$0 = 0, $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read$i$i = sp + 20|0;
 $buffer$i = sp + 24|0;
 $buffer = sp;
 __ZN14AP4_DataBufferC2Ev($buffer);
 $0 = ((($buffer)) + 8|0);
 $size$0 = 0;
 L1: while(1) {
  $$014$i$i = 1;$$023$i$i = $buffer$i;
  while(1) {
   $1 = HEAP32[$this>>2]|0;
   $2 = ((($1)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   __THREW__ = 0;
   $4 = (invoke_iiiii($3|0,($this|0),($$023$i$i|0),($$014$i$i|0),($bytes_read$i$i|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    label = 10;
    break L1;
   }
   $7 = ($4|0)==(0);
   if (!($7)) {
    $$0$i$i = $4;
    break;
   }
   $8 = HEAP32[$bytes_read$i$i>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0$i$i = -13;
    break;
   }
   $10 = ($$014$i$i>>>0)<($8>>>0);
   if ($10) {
    label = 7;
    break L1;
   }
   $12 = (($$014$i$i) - ($8))|0;
   $13 = (($$023$i$i) + ($8)|0);
   $14 = ($$014$i$i|0)==($8|0);
   if ($14) {
    $$0$i$i = 0;
    break;
   } else {
    $$014$i$i = $12;$$023$i$i = $13;
   }
  }
  $15 = ($$0$i$i|0)==(0);
  $16 = HEAP8[$buffer$i>>0]|0;
  $storemerge$i = $15 ? $16 : 0;
  if (!($15)) {
   $$0 = $$0$i$i;
   label = 17;
   break;
  }
  $25 = (($size$0) + 1)|0;
  __THREW__ = 0;
  (invoke_iii(757,($buffer|0),($25|0))|0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 11;
   break;
  }
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + ($size$0)|0);
  HEAP8[$29>>0] = $storemerge$i;
  $30 = ($storemerge$i<<24>>24)==(0);
  if ($30) {
   $$lcssa23 = $25;
   label = 16;
   break;
  } else {
   $size$0 = $25;
  }
 }
 if ((label|0) == 7) {
  __THREW__ = 0;
  invoke_viiii(756,(3056|0),(3088|0),58,(3128|0));
  $11 = __THREW__; __THREW__ = 0;
  label = 12;
 }
 else if ((label|0) == 10) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $lpad$phi$index = $17;$lpad$phi$index3 = $18;
 }
 else if ((label|0) == 11) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $lpad$phi$index = $19;$lpad$phi$index3 = $20;
 }
 else if ((label|0) == 16) {
  $31 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_viii(758,($string|0),($31|0),($$lcssa23|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   label = 12;
  } else {
   $$0 = 0;
   __ZN14AP4_DataBufferD2Ev($buffer);
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 17) {
  __ZN14AP4_DataBufferD2Ev($buffer);
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 12) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $lpad$phi$index = $21;$lpad$phi$index3 = $22;
 }
 __THREW__ = 0;
 invoke_vi(279,($buffer|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream6CopyToERS_y($this,$stream,$0,$1) {
 $this = $this|0;
 $stream = $stream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$ph = 0, $$01 = 0, $$014$i = 0, $$023$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0;
 var $bytes_read = 0, $bytes_to_read$0 = 0, $bytes_written$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65552|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written$i = sp + 4|0;
 $buffer = sp + 8|0;
 $bytes_read = sp;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $5 = $1;$7 = $0;
 L4: while(1) {
  $6 = ($5>>>0)>(0);
  $8 = ($7>>>0)>(65535);
  $9 = ($5|0)==(0);
  $10 = $9 & $8;
  $11 = $6 | $10;
  $bytes_to_read$0 = $11 ? 65536 : $7;
  $12 = HEAP32[$this>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiiii[$14 & 1023]($this,$buffer,$bytes_to_read$0,$bytes_read)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$01 = $15;
   label = 14;
   break;
  }
  $17 = HEAP32[$bytes_read>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $30 = 0;
  } else {
   $$014$i = $17;$$023$i = $buffer;
   while(1) {
    $19 = HEAP32[$stream>>2]|0;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (FUNCTION_TABLE_iiiii[$21 & 1023]($stream,$$023$i,$$014$i,$bytes_written$i)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$0$i$ph = $22;
     label = 12;
     break L4;
    }
    $24 = HEAP32[$bytes_written$i>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $$0$i$ph = -13;
     label = 12;
     break L4;
    }
    $26 = ($$014$i>>>0)<($24>>>0);
    if ($26) {
     label = 9;
     break L4;
    }
    $27 = (($$014$i) - ($24))|0;
    $28 = (($$023$i) + ($24)|0);
    $29 = ($$014$i|0)==($24|0);
    if ($29) {
     break;
    } else {
     $$014$i = $27;$$023$i = $28;
    }
   }
   $$pre = HEAP32[$bytes_read>>2]|0;
   $30 = $$pre;
  }
  $31 = (_i64Subtract(($7|0),($5|0),($30|0),0)|0);
  $32 = tempRet0;
  $33 = ($7|0)==($30|0);
  $34 = ($5|0)==(0);
  $35 = $33 & $34;
  if ($35) {
   $$01 = 0;
   label = 14;
   break;
  } else {
   $5 = $32;$7 = $31;
  }
 }
 if ((label|0) == 9) {
  ___assert_fail((3136|0),(3088|0),81,(5992|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  $$01 = $$0$i$ph;
  STACKTOP = sp;return ($$01|0);
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($$01|0);
 }
 return (0)|0;
}
function __ZN13AP4_SubStreamC2ER14AP4_ByteStreamyy($this,$container,$0,$1,$2,$3) {
 $this = $this|0;
 $container = $container|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2840);
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = $container;
 $5 = ((($this)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = ((($this)) + 16|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $3;
 $15 = ((($this)) + 24|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((($this)) + 32|0);
 HEAP32[$20>>2] = 1;
 $21 = HEAP32[$container>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($container);
 return;
}
function __ZN13AP4_SubStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2840);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($1);
 return;
}
function __ZN13AP4_SubStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2840);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __ZdlPv($this);
  ___resumeException($7|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN13AP4_SubStream11ReadPartialEPvjRj($this,$buffer,$bytes_to_read,$bytes_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 $bytes_read = $bytes_read|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bytes_read>>2] = 0;
 $0 = ($bytes_to_read|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 24|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_i64Add(($4|0),($7|0),($bytes_to_read|0),0)|0);
 $9 = tempRet0;
 $10 = ((($this)) + 16|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($9>>>0)>($16>>>0);
 $18 = ($8>>>0)>($13>>>0);
 $19 = ($9|0)==($16|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = (_i64Subtract(($13|0),($16|0),($4|0),($7|0))|0);
 $23 = tempRet0;
 $$01 = $21 ? $22 : $bytes_to_read;
 $24 = ($$01|0)==(0);
 if ($24) {
  $$0 = -7;
  return ($$0|0);
 }
 $25 = ((($this)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($this)) + 8|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_i64Add(($33|0),($36|0),($4|0),($7|0))|0);
 $38 = tempRet0;
 $39 = (FUNCTION_TABLE_iiii[$29 & 1023]($26,$37,$38)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  $$0 = $39;
  return ($$0|0);
 }
 $41 = HEAP32[$25>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_iiiii[$44 & 1023]($41,$buffer,$$01,$bytes_read)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  $$0 = $45;
  return ($$0|0);
 }
 $47 = HEAP32[$bytes_read>>2]|0;
 $48 = $1;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_i64Add(($50|0),($53|0),($47|0),0)|0);
 $55 = tempRet0;
 $56 = $1;
 $57 = $56;
 HEAP32[$57>>2] = $54;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = $55;
 $$0 = 0;
 return ($$0|0);
}
function __ZN13AP4_SubStream12WritePartialEPKvjRj($this,$buffer,$bytes_to_write,$bytes_written) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 $bytes_written = $bytes_written|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bytes_written>>2] = 0;
 $0 = ($bytes_to_write|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 24|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_i64Add(($4|0),($7|0),($bytes_to_write|0),0)|0);
 $9 = tempRet0;
 $10 = ((($this)) + 16|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($9>>>0)>($16>>>0);
 $18 = ($8>>>0)>($13>>>0);
 $19 = ($9|0)==($16|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = (_i64Subtract(($13|0),($16|0),($4|0),($7|0))|0);
 $23 = tempRet0;
 $$01 = $21 ? $22 : $bytes_to_write;
 $24 = ($$01|0)==(0);
 if ($24) {
  $$0 = -7;
  return ($$0|0);
 }
 $25 = ((($this)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($this)) + 8|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_i64Add(($33|0),($36|0),($4|0),($7|0))|0);
 $38 = tempRet0;
 $39 = (FUNCTION_TABLE_iiii[$29 & 1023]($26,$37,$38)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  $$0 = $39;
  return ($$0|0);
 }
 $41 = HEAP32[$25>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_iiiii[$44 & 1023]($41,$buffer,$$01,$bytes_written)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  $$0 = $45;
  return ($$0|0);
 }
 $47 = HEAP32[$bytes_written>>2]|0;
 $48 = $1;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_i64Add(($50|0),($53|0),($47|0),0)|0);
 $55 = tempRet0;
 $56 = $1;
 $57 = $56;
 HEAP32[$57>>2] = $54;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = $55;
 $$0 = 0;
 return ($$0|0);
}
function __ZN13AP4_SubStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 24|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($0|0);
 $10 = ($8|0)==($1|0);
 $11 = $9 & $10;
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($this)) + 16|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)<($1>>>0);
 $20 = ($15>>>0)<($0>>>0);
 $21 = ($18|0)==($1|0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 if ($23) {
  $$0 = -1;
  return ($$0|0);
 }
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function __ZN13AP4_SubStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZN13AP4_SubStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)!=(0);
 $4 = ($this|0)==(0|0);
 $or$cond = $4 | $3;
 if ($or$cond) {
  return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($this);
 return;
}
function __ZN20AP4_MemoryByteStreamC2Ej($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2896);
 $0 = ((($this)) + 8|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 16|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 24|0);
 HEAP32[$6>>2] = 1;
 __THREW__ = 0;
 $7 = (invoke_ii(752,20)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(759,($7|0),($size|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZdlPv($7);
    $$0 = $21;$$01 = $20;
    ___resumeException($$01|0);
    // unreachable;
   } else {
    $12 = ((($this)) + 4|0);
    HEAP32[$12>>2] = $7;
    $13 = ((($7)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    _memset(($14|0),0,($size|0))|0;
    $15 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    (invoke_iii(757,($15|0),($size|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break;
    }
    return;
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $$0 = $19;$$01 = $18;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN20AP4_MemoryByteStreamC2ER14AP4_DataBuffer($this,$data_buffer) {
 $this = $this|0;
 $data_buffer = $data_buffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2896);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $data_buffer;
 $1 = ((($this)) + 8|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 24|0);
 HEAP32[$7>>2] = 1;
 return;
}
function __ZN20AP4_MemoryByteStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2896);
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 1023]($4);
 return;
}
function __ZN20AP4_MemoryByteStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (2896);
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZdlPv($this);
  return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi($8|0,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($this);
  ___resumeException($11|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN20AP4_MemoryByteStream11ReadPartialEPvjRj($this,$buffer,$bytes_to_read,$bytes_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 $bytes_read = $bytes_read|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$bytes_read>>2] = 0;
 $0 = ($bytes_to_read|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 16|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_i64Add(($4|0),($7|0),($bytes_to_read|0),0)|0);
 $9 = tempRet0;
 $10 = ((($this)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($9>>>0)>(0);
 $15 = ($8>>>0)>($13>>>0);
 $16 = ($9|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $19 = (_i64Subtract(($13|0),0,($4|0),($7|0))|0);
  $20 = tempRet0;
  $21 = ($19|0)==(0);
  if ($21) {
   $$0 = -7;
   return ($$0|0);
  } else {
   $$012 = $19;
  }
 } else {
  $$012 = $bytes_to_read;
 }
 $22 = ((($11)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($4)|0);
 _memcpy(($buffer|0),($24|0),($$012|0))|0;
 $25 = $1;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_i64Add(($27|0),($30|0),($$012|0),0)|0);
 $32 = tempRet0;
 $33 = $1;
 $34 = $33;
 HEAP32[$34>>2] = $31;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 HEAP32[$bytes_read>>2] = $$012;
 $$0 = 0;
 return ($$0|0);
}
function __ZN20AP4_MemoryByteStream12WritePartialEPKvjRj($this,$buffer,$bytes_to_write,$bytes_written) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 $bytes_written = $bytes_written|0;
 var $$0 = 0, $$012 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bytes_written>>2] = 0;
 $0 = ($bytes_to_write|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 16|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_i64Add(($4|0),($7|0),($bytes_to_write|0),0)|0);
 $9 = tempRet0;
 $10 = ($9>>>0)>(0);
 $11 = ($8>>>0)>(67108864);
 $12 = ($9|0)==(0);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  $$0 = -12;
  return ($$0|0);
 }
 $15 = ((($this)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN14AP4_DataBuffer7ReserveEj($16,$8)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP32[$15>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($8>>>0)>($21>>>0);
  if ($22) {
   (__ZN14AP4_DataBuffer11SetDataSizeEj($19,$8)|0);
   $$pre = HEAP32[$15>>2]|0;
   $$012 = $bytes_to_write;$43 = $$pre;
  } else {
   $$012 = $bytes_to_write;$43 = $19;
  }
 } else {
  $23 = $1;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (_i64Add(($25|0),($28|0),($bytes_to_write|0),0)|0);
  $30 = tempRet0;
  $31 = HEAP32[$15>>2]|0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30>>>0)>(0);
  $35 = ($29>>>0)>($33>>>0);
  $36 = ($30|0)==(0);
  $37 = $36 & $35;
  $38 = $34 | $37;
  if ($38) {
   $39 = (_i64Subtract(($33|0),0,($25|0),($28|0))|0);
   $40 = tempRet0;
   $41 = ($39|0)==(0);
   if ($41) {
    $$0 = -7;
    return ($$0|0);
   } else {
    $$012 = $39;$43 = $31;
   }
  } else {
   $$012 = $bytes_to_write;$43 = $31;
  }
 }
 $42 = ((($43)) + 8|0);
 $44 = HEAP32[$42>>2]|0;
 $45 = $1;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($44) + ($47)|0);
 _memcpy(($51|0),($buffer|0),($$012|0))|0;
 $52 = $1;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (_i64Add(($54|0),($57|0),($$012|0),0)|0);
 $59 = tempRet0;
 $60 = $1;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 HEAP32[$bytes_written>>2] = $$012;
 $$0 = 0;
 return ($$0|0);
}
function __ZN20AP4_MemoryByteStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (0)<($1>>>0);
 $7 = ($5>>>0)<($0>>>0);
 $8 = (0)==($1|0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($this)) + 16|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function __ZN20AP4_MemoryByteStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZN20AP4_MemoryByteStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)!=(0);
 $4 = ($this|0)==(0|0);
 $or$cond = $4 | $3;
 if ($or$cond) {
  return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($this);
 return;
}
function __ZN13AP4_SubStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $position;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return 0;
}
function __ZN13AP4_SubStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $size;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return 0;
}
function __ZN14AP4_ByteStream5FlushEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN20AP4_MemoryByteStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $position;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return 0;
}
function __ZN20AP4_MemoryByteStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $size;
 $5 = $4;
 HEAP32[$5>>2] = $3;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 return 0;
}
function __ZN15AP4_AtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(69,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN15AP4_AtomFactory14AddTypeHandlerEPNS_11TypeHandlerE($this,$handler) {
 $this = $this|0;
 $handler = $handler|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 HEAP32[$0>>2] = $handler;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = ((($this)) + 28|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$3>>2] = $0;
  HEAP32[$1>>2] = 0;
  $$sink$i$i = 0;
 } else {
  HEAP32[$1>>2] = 0;
  $6 = ((($4)) + 4|0);
  HEAP32[$6>>2] = $0;
  HEAP32[$3>>2] = $0;
  $$sink$i$i = $4;
 }
 HEAP32[$2>>2] = $$sink$i$i;
 $8 = ((($this)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 return 0;
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom($this,$stream,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_available = 0, $or$cond = 0, $stream_position = 0, $stream_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stream_size = sp + 16|0;
 $stream_position = sp + 8|0;
 $bytes_available = sp;
 $0 = $stream_size;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $stream_position;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $bytes_available;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 $12 = HEAP32[$stream>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iii[$14 & 1023]($stream,$stream_size)|0);
 $16 = ($15|0)==(0);
 $17 = $stream_size;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)!=(0);
 $24 = ($22|0)!=(0);
 $25 = $23 | $24;
 $or$cond = $16 & $25;
 if ($or$cond) {
  $26 = HEAP32[$stream>>2]|0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iii[$28 & 1023]($stream,$stream_position)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $stream_position;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = $stream_size;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42>>>0)<($36>>>0);
   $44 = ($39>>>0)<($33>>>0);
   $45 = ($42|0)==($36|0);
   $46 = $45 & $44;
   $47 = $43 | $46;
   if (!($47)) {
    $48 = (_i64Subtract(($39|0),($42|0),($33|0),($36|0))|0);
    $49 = tempRet0;
    $50 = $bytes_available;
    $51 = $50;
    HEAP32[$51>>2] = $48;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $49;
   }
  }
 }
 $54 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($this,$stream,$bytes_available,$atom)|0);
 STACKTOP = sp;return ($54|0);
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($this,$stream,$bytes_available,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $bytes_available = $bytes_available|0;
 $atom = $atom|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $force_64$0$off0 = 0, $or$cond = 0, $size = 0, $size_32 = 0, $start = 0, $stream_size = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 16|0;
 $size_32 = sp + 28|0;
 $size = sp + 8|0;
 $type = sp + 24|0;
 $stream_size = sp;
 HEAP32[$atom>>2] = 0;
 $0 = $bytes_available;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(0);
 $7 = ($2>>>0)<(8);
 $8 = ($5|0)==(0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $$0 = -7;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$stream>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 (FUNCTION_TABLE_iii[$13 & 1023]($stream,$start)|0);
 $14 = (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$size_32)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = HEAP32[$stream>>2]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $start;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  (FUNCTION_TABLE_iiii[$18 & 1023]($stream,$21,$24)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$size_32>>2]|0;
 $26 = $size;
 $27 = $26;
 HEAP32[$27>>2] = $25;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $30 = (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$type)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = HEAP32[$stream>>2]|0;
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $start;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  (FUNCTION_TABLE_iiii[$34 & 1023]($stream,$37,$40)|0);
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ((($25|0) == 0)) {
   $41 = $stream_size;
   $42 = $41;
   HEAP32[$42>>2] = 0;
   $43 = (($41) + 4)|0;
   $44 = $43;
   HEAP32[$44>>2] = 0;
   $45 = HEAP32[$stream>>2]|0;
   $46 = ((($45)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   (FUNCTION_TABLE_iii[$47 & 1023]($stream,$stream_size)|0);
   $48 = $stream_size;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = $start;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = ($53>>>0)<($59>>>0);
   $61 = ($50>>>0)<($56>>>0);
   $62 = ($53|0)==($59|0);
   $63 = $62 & $61;
   $64 = $60 | $63;
   if ($64) {
    $65 = $size;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $108 = $67;$109 = $70;$155 = 8;$156 = 0;$force_64$0$off0 = 0;
    break;
   } else {
    $71 = (_i64Subtract(($50|0),($53|0),($56|0),($59|0))|0);
    $72 = tempRet0;
    $73 = $size;
    $74 = $73;
    HEAP32[$74>>2] = $71;
    $75 = (($73) + 4)|0;
    $76 = $75;
    HEAP32[$76>>2] = $72;
    $108 = $71;$109 = $72;$155 = 8;$156 = 0;$force_64$0$off0 = 0;
    break;
   }
  } else if ((($25|0) == 1)) {
   $77 = $bytes_available;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82>>>0)<(0);
   $84 = ($79>>>0)<(16);
   $85 = ($82|0)==(0);
   $86 = $85 & $84;
   $87 = $83 | $86;
   if (!($87)) {
    (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$size)|0);
    $97 = $size;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = (($97) + 4)|0;
    $101 = $100;
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102>>>0)<(1);
    $104 = ($99>>>0)<(0);
    $105 = ($102|0)==(1);
    $106 = $105 & $104;
    $107 = $103 | $106;
    $108 = $99;$109 = $102;$155 = 16;$156 = 0;$force_64$0$off0 = $107;
    break;
   }
   $88 = HEAP32[$stream>>2]|0;
   $89 = ((($88)) + 24|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $start;
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($91) + 4)|0;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_iiii[$90 & 1023]($stream,$93,$96)|0);
   $$0 = -10;
   STACKTOP = sp;return ($$0|0);
  } else {
   $108 = $25;$109 = 0;$155 = 8;$156 = 0;$force_64$0$off0 = 0;
  }
 } while(0);
 $110 = (_i64Add(($108|0),($109|0),-1,-1)|0);
 $111 = tempRet0;
 $112 = ($111>>>0)<(0);
 $113 = ($110>>>0)<(7);
 $114 = ($111|0)==(0);
 $115 = $114 & $113;
 $116 = $112 | $115;
 $117 = $bytes_available;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($117) + 4)|0;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = ($109>>>0)>($122>>>0);
 $124 = ($108>>>0)>($119>>>0);
 $125 = ($109|0)==($122|0);
 $126 = $125 & $124;
 $127 = $123 | $126;
 $or$cond = $116 | $127;
 if ($or$cond) {
  $128 = HEAP32[$stream>>2]|0;
  $129 = ((($128)) + 24|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $start;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($131) + 4)|0;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  (FUNCTION_TABLE_iiii[$130 & 1023]($stream,$133,$136)|0);
  $$0 = -10;
  STACKTOP = sp;return ($$0|0);
 }
 $137 = HEAP32[$this>>2]|0;
 $138 = ((($137)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = HEAP32[$type>>2]|0;
 $141 = HEAP32[$size_32>>2]|0;
 $142 = (FUNCTION_TABLE_iiiiiiii[$139 & 127]($this,$stream,$140,$141,$108,$109,$atom)|0);
 $143 = ($142|0)==(0);
 if (!($143)) {
  $$0 = $142;
  STACKTOP = sp;return ($$0|0);
 }
 $144 = HEAP32[$atom>>2]|0;
 $145 = ($144|0)==(0|0);
 do {
  if ($145) {
   $146 = HEAP32[$stream>>2]|0;
   $147 = ((($146)) + 24|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $start;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $157 = (_i64Add(($151|0),($154|0),($155|0),($156|0))|0);
   $158 = tempRet0;
   (FUNCTION_TABLE_iiii[$148 & 1023]($stream,$157,$158)|0);
   $159 = (__Znwj(72)|0);
   $160 = HEAP32[$type>>2]|0;
   $161 = $size;
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($161) + 4)|0;
   $165 = $164;
   $166 = HEAP32[$165>>2]|0;
   __THREW__ = 0;
   invoke_viiiii(760,($159|0),($160|0),($163|0),($166|0),($stream|0));
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   if ($168) {
    $169 = ___cxa_find_matching_catch()|0;
    $170 = tempRet0;
    __ZdlPv($159);
    ___resumeException($169|0);
    // unreachable;
   } else {
    HEAP32[$atom>>2] = $159;
    $172 = $159;
    break;
   }
  } else {
   $172 = $144;
  }
 } while(0);
 if ($force_64$0$off0) {
  $171 = ((($172)) + 8|0);
  HEAP32[$171>>2] = 1;
  $173 = $size;
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + 4)|0;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($172)) + 16|0);
  $180 = $179;
  $181 = $180;
  HEAP32[$181>>2] = $175;
  $182 = (($180) + 4)|0;
  $183 = $182;
  HEAP32[$183>>2] = $178;
 }
 $184 = $size;
 $185 = $184;
 $186 = HEAP32[$185>>2]|0;
 $187 = (($184) + 4)|0;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = $bytes_available;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $193 = (($190) + 4)|0;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = (_i64Subtract(($192|0),($195|0),($186|0),($189|0))|0);
 $197 = tempRet0;
 $198 = $bytes_available;
 $199 = $198;
 HEAP32[$199>>2] = $196;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = $197;
 $202 = HEAP32[$stream>>2]|0;
 $203 = ((($202)) + 24|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $start;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = (($205) + 4)|0;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $211 = (_i64Add(($186|0),($189|0),($207|0),($210|0))|0);
 $212 = tempRet0;
 $213 = (FUNCTION_TABLE_iiii[$204 & 1023]($stream,$211,$212)|0);
 $214 = ($213|0)==(0);
 if ($214) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $215 = HEAP32[$atom>>2]|0;
 $216 = ($215|0)==(0|0);
 if (!($216)) {
  $217 = HEAP32[$215>>2]|0;
  $218 = ((($217)) + 4|0);
  $219 = HEAP32[$218>>2]|0;
  FUNCTION_TABLE_vi[$219 & 1023]($215);
 }
 HEAP32[$atom>>2] = 0;
 $$0 = $213;
 STACKTOP = sp;return ($$0|0);
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamjjyRP8AP4_Atom($this,$stream,$type,$size_32,$0,$1,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $type = $type|0;
 $size_32 = $size_32|0;
 $0 = $0|0;
 $1 = $1|0;
 $atom = $atom|0;
 var $$ = 0, $$0 = 0, $$0$i15 = 0, $$0$i3 = 0, $$0$i7 = 0, $$01 = 0, $$02 = 0, $$mux = 0, $$mux28 = 0, $$mux30 = 0, $$not = 0, $$pre = 0, $$pre26 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge27 = 0, $brmerge29 = 0, $handler_item$0 = 0, $handler_item$021 = 0;
 var $handler_item$022 = 0, $handler_item1$0 = 0, $handler_item1$019 = 0, $handler_item1$020 = 0, $uuid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uuid = sp;
 $2 = ($size_32|0)==(1);
 $3 = ($1>>>0)<(1);
 $4 = ($0>>>0)<(0);
 $5 = ($1|0)==(1);
 $6 = $5 & $4;
 $7 = $3 | $6;
 $$ = $2 & $7;
 $8 = ((($this)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 L1: do {
  if ($10) {
   label = 51;
  } else {
   $11 = (($9) + -1)|0;
   $12 = ((($this)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($11<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(1937011556);
   if ($16) {
    if ($2) {
     $$0 = -10;
    } else {
     do {
      if ((($type|0) == 1685220723)) {
       $42 = (__Znwj(160)|0);
       __THREW__ = 0;
       invoke_viiii(766,($42|0),($size_32|0),($stream|0),($this|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if (!($44)) {
        HEAP32[$atom>>2] = $42;
        $$0 = 0;
        break L1;
       }
       $45 = ___cxa_find_matching_catch()|0;
       $46 = tempRet0;
       __ZdlPv($42);
       $$01 = $45;$$02 = $46;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1701733238)) {
       $37 = (__Znwj(112)|0);
       __THREW__ = 0;
       invoke_viiii(765,($37|0),($size_32|0),($stream|0),($this|0));
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if (!($39)) {
        HEAP32[$atom>>2] = $37;
        $$0 = 0;
        break L1;
       }
       $40 = ___cxa_find_matching_catch()|0;
       $41 = tempRet0;
       __ZdlPv($37);
       $$01 = $40;$$02 = $41;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1836070003)) {
       $27 = (__Znwj(64)|0);
       __THREW__ = 0;
       invoke_viiii(763,($27|0),($size_32|0),($stream|0),($this|0));
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        HEAP32[$atom>>2] = $27;
        $$0 = 0;
        break L1;
       }
       $30 = ___cxa_find_matching_catch()|0;
       $31 = tempRet0;
       __ZdlPv($27);
       $$01 = $30;$$02 = $31;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1635148596) | (($type|0) == 1635148595) | (($type|0) == 1635148594) | (($type|0) == 1635148593)) {
       $52 = (__Znwj(112)|0);
       __THREW__ = 0;
       invoke_viiiii(768,($52|0),($type|0),($size_32|0),($stream|0),($this|0));
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if (!($54)) {
        HEAP32[$atom>>2] = $52;
        $$0 = 0;
        break L1;
       }
       $55 = ___cxa_find_matching_catch()|0;
       $56 = tempRet0;
       __ZdlPv($52);
       $$01 = $55;$$02 = $56;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1752589105) | (($type|0) == 1751479857)) {
       $57 = (__Znwj(112)|0);
       __THREW__ = 0;
       invoke_viiiii(769,($57|0),($type|0),($size_32|0),($stream|0),($this|0));
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if (!($59)) {
        HEAP32[$atom>>2] = $57;
        $$0 = 0;
        break L1;
       }
       $60 = ___cxa_find_matching_catch()|0;
       $61 = tempRet0;
       __ZdlPv($57);
       $$01 = $60;$$02 = $61;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1685353317) | (($type|0) == 1685353324) | (($type|0) == 1685353320) | (($type|0) == 1685353315) | (($type|0) == 1700998451) | (($type|0) == 1633889587) | (($type|0) == 1634492771)) {
       $62 = (__Znwj(160)|0);
       __THREW__ = 0;
       invoke_viiiii(770,($62|0),($type|0),($size_32|0),($stream|0),($this|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if (!($64)) {
        HEAP32[$atom>>2] = $62;
        $$0 = 0;
        break L1;
       }
       $65 = ___cxa_find_matching_catch()|0;
       $66 = tempRet0;
       __ZdlPv($62);
       $$01 = $65;$$02 = $66;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1920233504)) {
       $67 = (__Znwj(72)|0);
       __THREW__ = 0;
       invoke_viiii(771,($67|0),($size_32|0),($stream|0),($this|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if (!($69)) {
        HEAP32[$atom>>2] = $67;
        $$0 = 0;
        break L1;
       }
       $70 = ___cxa_find_matching_catch()|0;
       $71 = tempRet0;
       __ZdlPv($67);
       $$01 = $70;$$02 = $71;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1836069985)) {
       $17 = (__Znwj(160)|0);
       __THREW__ = 0;
       invoke_viiii(761,($17|0),($size_32|0),($stream|0),($this|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        HEAP32[$atom>>2] = $17;
        $$0 = 0;
        break L1;
       }
       $20 = ___cxa_find_matching_catch()|0;
       $21 = tempRet0;
       __ZdlPv($17);
       $$01 = $20;$$02 = $21;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1701733217)) {
       $32 = (__Znwj(160)|0);
       __THREW__ = 0;
       invoke_viiii(764,($32|0),($size_32|0),($stream|0),($this|0));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if (!($34)) {
        HEAP32[$atom>>2] = $32;
        $$0 = 0;
        break L1;
       }
       $35 = ___cxa_find_matching_catch()|0;
       $36 = tempRet0;
       __ZdlPv($32);
       $$01 = $35;$$02 = $36;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1937010800)) {
       $72 = (__Znwj(88)|0);
       __THREW__ = 0;
       invoke_viiiii(772,($72|0),1937010800,($size_32|0),($stream|0),($this|0));
       $73 = __THREW__; __THREW__ = 0;
       $74 = $73&1;
       if (!($74)) {
        HEAP32[$atom>>2] = $72;
        $$0 = 0;
        break L1;
       }
       $75 = ___cxa_find_matching_catch()|0;
       $76 = tempRet0;
       __ZdlPv($72);
       $$01 = $75;$$02 = $76;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1685220713)) {
       $47 = (__Znwj(112)|0);
       __THREW__ = 0;
       invoke_viiii(767,($47|0),($size_32|0),($stream|0),($this|0));
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if (!($49)) {
        HEAP32[$atom>>2] = $47;
        $$0 = 0;
        break L1;
       }
       $50 = ___cxa_find_matching_catch()|0;
       $51 = tempRet0;
       __ZdlPv($47);
       $$01 = $50;$$02 = $51;
       ___resumeException($$01|0);
       // unreachable;
      } else if ((($type|0) == 1836070006)) {
       $22 = (__Znwj(112)|0);
       __THREW__ = 0;
       invoke_viiii(762,($22|0),($size_32|0),($stream|0),($this|0));
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if (!($24)) {
        HEAP32[$atom>>2] = $22;
        $$0 = 0;
        break L1;
       }
       $25 = ___cxa_find_matching_catch()|0;
       $26 = tempRet0;
       __ZdlPv($22);
       $$01 = $25;$$02 = $26;
       ___resumeException($$01|0);
       // unreachable;
      } else {
       $77 = ((($this)) + 28|0);
       $handler_item$021 = HEAP32[$77>>2]|0;
       $78 = ($handler_item$021|0)==(0|0);
       L57: do {
        if (!($78)) {
         $85 = $9;$handler_item$022 = $handler_item$021;
         while(1) {
          $81 = HEAP32[$handler_item$022>>2]|0;
          $82 = HEAP32[$81>>2]|0;
          $83 = ((($82)) + 8|0);
          $84 = HEAP32[$83>>2]|0;
          $86 = ($85|0)==(0);
          if ($86) {
           $$0$i7 = 0;
          } else {
           $87 = (($85) + -1)|0;
           $88 = HEAP32[$12>>2]|0;
           $89 = (($88) + ($87<<2)|0);
           $90 = HEAP32[$89>>2]|0;
           $$0$i7 = $90;
          }
          $91 = (FUNCTION_TABLE_iiiiiii[$84 & 511]($81,$type,$size_32,$stream,$$0$i7,$atom)|0);
          $92 = ($91|0)==(0);
          if ($92) {
           break L57;
          }
          $79 = ((($handler_item$022)) + 4|0);
          $handler_item$0 = HEAP32[$79>>2]|0;
          $80 = ($handler_item$0|0)==(0|0);
          if ($80) {
           break L57;
          }
          $$pre = HEAP32[$8>>2]|0;
          $85 = $$pre;$handler_item$022 = $handler_item$0;
         }
        }
       } while(0);
       $93 = HEAP32[$atom>>2]|0;
       $94 = ($93|0)==(0|0);
       if (!($94)) {
        $$0 = 0;
        break L1;
       }
       $95 = (__Znwj(88)|0);
       __THREW__ = 0;
       invoke_viiii(773,($95|0),($type|0),($0|0),($stream|0));
       $96 = __THREW__; __THREW__ = 0;
       $97 = $96&1;
       if (!($97)) {
        HEAP32[$atom>>2] = $95;
        $$0 = 0;
        break L1;
       }
       $98 = ___cxa_find_matching_catch()|0;
       $99 = tempRet0;
       __ZdlPv($95);
       $$01 = $98;$$02 = $99;
       ___resumeException($$01|0);
       // unreachable;
      }
     } while(0);
    }
   } else {
    label = 51;
   }
  }
 } while(0);
 L81: do {
  if ((label|0) == 51) {
   do {
    if ((($type|0) == 1752589123)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $133 = (__ZN12AP4_HvccAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $133;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1970628964)) {
     $134 = (__ZN14AP4_ByteStream4ReadEPvj($stream,$uuid,16)|0);
     $135 = ($134|0)==(0);
     if (!($135)) {
      $$0 = $134;
      break L81;
     }
     $136 = (_memcmp($uuid,25200,16)|0);
     $137 = ($136|0)==(0);
     if ($137) {
      $138 = (__ZN27AP4_PiffTrackEncryptionAtom6CreateEjR14AP4_ByteStream($0,$stream)|0);
      HEAP32[$atom>>2] = $138;
      $$0 = 0;
      break L81;
     }
     $139 = (_memcmp($uuid,25216,16)|0);
     $140 = ($139|0)==(0);
     if ($140) {
      $141 = (__ZN28AP4_PiffSampleEncryptionAtom6CreateEjR14AP4_ByteStream($0,$stream)|0);
      HEAP32[$atom>>2] = $141;
      $$0 = 0;
      break L81;
     }
     $142 = (__Znwj(72)|0);
     __THREW__ = 0;
     invoke_viiiii(776,($142|0),($0|0),($1|0),($uuid|0),($stream|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      HEAP32[$atom>>2] = $142;
      $$0 = 0;
      break L81;
     }
     $145 = ___cxa_find_matching_catch()|0;
     $146 = tempRet0;
     __ZdlPv($142);
     $$01 = $145;$$02 = $146;
     ___resumeException($$01|0);
     // unreachable;
    } else if ((($type|0) == 1937011556)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $121 = (__ZN12AP4_StsdAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size_32,$stream,$this)|0);
     HEAP32[$atom>>2] = $121;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937011555)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $122 = (__ZN12AP4_StscAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $122;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937007471)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $123 = (__ZN12AP4_StcoAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $123;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1668232756)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $124 = (__ZN12AP4_Co64Atom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $124;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937011578)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $125 = (__ZN12AP4_StszAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $125;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937013298)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $126 = (__ZN12AP4_Stz2Atom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $126;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1751411826)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $114 = (__ZN12AP4_HdlrAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $114;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1953196132)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $115 = (__ZN12AP4_TkhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $115;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1952868452)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $116 = (__ZN12AP4_TfhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $116;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1953658222)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $117 = (__ZN12AP4_TrunAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $117;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1952871009)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $118 = (__ZN12AP4_TfraAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $118;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835430511)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $119 = (__ZN12AP4_MfroAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $119;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835296868)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $120 = (__ZN12AP4_MdhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $120;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937011827)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $127 = (__ZN12AP4_SttsAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $127;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1668576371)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $128 = (__ZN12AP4_CttsAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $128;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937011571)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $129 = (__ZN12AP4_StssAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $129;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1768907891)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $130 = (__ZN12AP4_IodsAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $130;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1702061171)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $131 = (__ZN12AP4_EsdsAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $131;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1635148611)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $132 = (__ZN12AP4_AvccAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $132;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1836019574)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $100 = (__Znwj(80)|0);
     __THREW__ = 0;
     invoke_viiii(774,($100|0),($size_32|0),($stream|0),($this|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      $103 = ___cxa_find_matching_catch()|0;
      $104 = tempRet0;
      __ZdlPv($100);
      ___resumeException($103|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $100;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1836476516)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $105 = (__ZN12AP4_MvhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $105;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835362404)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $106 = (__ZN12AP4_MehdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $106;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835427940)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $107 = (__ZN12AP4_MfhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $107;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1953653099)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $108 = (__Znwj(64)|0);
     __THREW__ = 0;
     invoke_viiii(775,($108|0),($size_32|0),($stream|0),($this|0));
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      $111 = ___cxa_find_matching_catch()|0;
      $112 = tempRet0;
      __ZdlPv($108);
      ___resumeException($111|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $108;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1953654136)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $113 = (__ZN12AP4_TrexAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $113;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 945972332)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $152 = (__ZN12AP4_8bdlAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $152;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1685218662)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $153 = (__ZN12AP4_DrefAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size_32,$stream,$this)|0);
     HEAP32[$atom>>2] = $153;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1970433056)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $154 = (__ZN11AP4_UrlAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $154;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1701606260)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $155 = (__ZN12AP4_ElstAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $155;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1986881636)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $156 = (__ZN12AP4_VmhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $156;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1936549988)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $157 = (__ZN12AP4_SmhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $157;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 946431008)) {
     $147 = (__Znwj(48)|0);
     __THREW__ = 0;
     invoke_viiiii(777,($147|0),946431008,($0|0),($1|0),($stream|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if (!($149)) {
      HEAP32[$atom>>2] = $147;
      $$0 = 0;
      break L81;
     }
     $150 = ___cxa_find_matching_catch()|0;
     $151 = tempRet0;
     __ZdlPv($147);
     $$01 = $150;$$02 = $151;
     ___resumeException($$01|0);
     // unreachable;
    } else if ((($type|0) == 1852663908)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $158 = (__ZN12AP4_NmhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $158;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1937008740)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $159 = (__ZN12AP4_SthdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $159;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1752000612)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $160 = (__ZN12AP4_HmhdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $160;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1718775137)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $161 = (__Znwj(40)|0);
     __THREW__ = 0;
     invoke_viii(778,($161|0),($size_32|0),($stream|0));
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if ($163) {
      $164 = ___cxa_find_matching_catch()|0;
      $165 = tempRet0;
      __ZdlPv($161);
      ___resumeException($164|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $161;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1935894637)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $166 = ((($this)) + 4|0);
     $167 = (__ZN12AP4_SchmAtom6CreateEjP9AP4_ArrayIjER14AP4_ByteStream($size_32,$166,$stream)|0);
     HEAP32[$atom>>2] = $167;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1718909296)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $168 = (__Znwj(64)|0);
     __THREW__ = 0;
     invoke_viii(779,($168|0),($size_32|0),($stream|0));
     $169 = __THREW__; __THREW__ = 0;
     $170 = $169&1;
     if ($170) {
      $171 = ___cxa_find_matching_catch()|0;
      $172 = tempRet0;
      __ZdlPv($168);
      ___resumeException($171|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $168;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1953066355)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $173 = (__Znwj(40)|0);
     __THREW__ = 0;
     invoke_viii(780,($173|0),($size_32|0),($stream|0));
     $174 = __THREW__; __THREW__ = 0;
     $175 = $174&1;
     if ($175) {
      $176 = ___cxa_find_matching_catch()|0;
      $177 = tempRet0;
      __ZdlPv($173);
      ___resumeException($176|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $173;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1935962144)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $178 = (__Znwj(48)|0);
     __THREW__ = 0;
     invoke_viii(781,($178|0),($size_32|0),($stream|0));
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if ($180) {
      $181 = ___cxa_find_matching_catch()|0;
      $182 = tempRet0;
      __ZdlPv($178);
      ___resumeException($181|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $178;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1766542675)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $183 = (__ZN12AP4_IkmsAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $183;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1767065165)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $184 = (__ZN12AP4_IsfmAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $184;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1767066708)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $185 = ($size_32|0)==(16);
     if ($185) {
      $186 = (__Znwj(48)|0);
      __THREW__ = 0;
      invoke_viii(782,($186|0),16,($stream|0));
      $187 = __THREW__; __THREW__ = 0;
      $188 = $187&1;
      if ($188) {
       $189 = ___cxa_find_matching_catch()|0;
       $190 = tempRet0;
       __ZdlPv($186);
       ___resumeException($189|0);
       // unreachable;
      } else {
       $$0$i15 = $186;
      }
     } else {
      $$0$i15 = 0;
     }
     HEAP32[$atom>>2] = $$0$i15;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1868851301)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $191 = (__ZN12AP4_OdheAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size_32,$stream,$this)|0);
     HEAP32[$atom>>2] = $191;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1869112434)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $192 = (__ZN12AP4_OhdrAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size_32,$stream,$this)|0);
     HEAP32[$atom>>2] = $192;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1868850273)) {
     $193 = (__ZN12AP4_OddaAtom6CreateEyR14AP4_ByteStream($0,$1,$stream)|0);
     HEAP32[$atom>>2] = $193;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1868849510)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $194 = (__ZN12AP4_OdafAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $194;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1735553129)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $195 = (__ZN12AP4_GrpiAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $195;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1768977007)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $196 = (__ZN12AP4_IproAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size_32,$stream,$this)|0);
     HEAP32[$atom>>2] = $196;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1920233504)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $197 = (__Znwj(48)|0);
     __THREW__ = 0;
     invoke_viii(783,($197|0),($size_32|0),($stream|0));
     $198 = __THREW__; __THREW__ = 0;
     $199 = $198&1;
     if ($199) {
      $200 = ___cxa_find_matching_catch()|0;
      $201 = tempRet0;
      __ZdlPv($197);
      ___resumeException($200|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $197;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1952867444)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $202 = (__ZN12AP4_TfdtAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $202;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1952804451)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $203 = (__ZN12AP4_TencAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $203;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1936027235)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $204 = (__ZN12AP4_SencAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $204;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1935763834)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $205 = (__ZN12AP4_SaizAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $205;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1935763823)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $206 = (__ZN12AP4_SaioAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $206;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1885628782)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $207 = (__ZN12AP4_PdinAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $207;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1651273571)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $208 = (__ZN12AP4_BlocAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $208;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1634299494)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $209 = (__ZN12AP4_AinfAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $209;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1886614376)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $210 = (__ZN12AP4_PsshAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $210;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1936286840)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $211 = (__ZN12AP4_SidxAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $211;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1935828848)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $212 = (__ZN12AP4_SbgpAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $212;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1936158820)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $213 = (__ZN12AP4_SgpdAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $213;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1684366131)) {
     $brmerge29 = $2 | $10;
     $$mux30 = $2 ? -10 : 0;
     if ($brmerge29) {
      $$0 = $$mux30;
      break L81;
     }
     $221 = (($9) + -1)|0;
     $222 = ((($this)) + 16|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + ($221<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)==(1700998451);
     if (!($226)) {
      $$0 = 0;
      break L81;
     }
     $227 = (__ZN12AP4_Dec3Atom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $227;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1667785072) | (($type|0) == 1634494835) | (($type|0) == 1768974706) | (($type|0) == 1685089892) | (($type|0) == 1836085092) | (($type|0) == 1937337955) | (($type|0) == 1667527523) | (($type|0) == 1751740020)) {
     if ($10) {
      $$0 = 0;
      break L81;
     }
     $228 = (($9) + -1)|0;
     $229 = ((($this)) + 16|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + ($228<<2)|0);
     $232 = HEAP32[$231>>2]|0;
     $$not = ($232|0)!=(1953654118);
     $brmerge = $2 | $$not;
     $$mux = $$not ? 0 : -10;
     if ($brmerge) {
      $$0 = $$mux;
      break L81;
     }
     $233 = (__Znwj(56)|0);
     __THREW__ = 0;
     invoke_viiii(784,($233|0),($type|0),($size_32|0),($stream|0));
     $234 = __THREW__; __THREW__ = 0;
     $235 = $234&1;
     if ($235) {
      $236 = ___cxa_find_matching_catch()|0;
      $237 = tempRet0;
      __ZdlPv($233);
      ___resumeException($236|0);
      // unreachable;
     } else {
      HEAP32[$atom>>2] = $233;
      $$0 = 0;
      break L81;
     }
    } else if ((($type|0) == 1835755876)) {
     $brmerge27 = $2 | $10;
     $$mux28 = $2 ? -10 : 0;
     if ($brmerge27) {
      $$0 = $$mux28;
      break L81;
     }
     $214 = (($9) + -1)|0;
     $215 = ((($this)) + 16|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = (($216) + ($214<<2)|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(1835102828);
     if (!($219)) {
      $$0 = 0;
      break L81;
     }
     $220 = (__ZN12AP4_MkidAtom6CreateEjR14AP4_ByteStream($size_32,$stream)|0);
     HEAP32[$atom>>2] = $220;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 2002876005) | (($type|0) == 1835299433) | (($type|0) == 1701082227) | (($type|0) == 1768715124) | (($type|0) == 1969517665) | (($type|0) == 1936289382) | (($type|0) == 1935894633) | (($type|0) == 1835626086) | (($type|0) == 1684631142) | (($type|0) == 1835297121) | (($type|0) == 1937007212) | (($type|0) == 1752069225) | (($type|0) == 1835430497) | (($type|0) == 1953654118) | (($type|0) == 1953653094) | (($type|0) == 1836475768) | (($type|0) == 1836019558)) {
     if ($2) {
      $$0 = -10;
      break L81;
     }
     $238 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($type,$0,$1,0,$$,$stream,$this)|0);
     HEAP32[$atom>>2] = $238;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835102828)) {
     if (!($10)) {
      $239 = (($9) + -1)|0;
      $240 = ((($this)) + 16|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + ($239<<2)|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = ($243|0)==(0);
      if (!($244)) {
       $$0 = 0;
       break L81;
      }
     }
     $245 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory(1835102828,$0,$1,0,$$,$stream,$this)|0);
     HEAP32[$atom>>2] = $245;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1868852077) | (($type|0) == 1868853869) | (($type|0) == 1835365473)) {
     $246 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($type,$0,$1,1,$$,$stream,$this)|0);
     HEAP32[$atom>>2] = $246;
     $$0 = 0;
     break L81;
    } else if ((($type|0) == 1835295092) | (($type|0) == 2003395685) | (($type|0) == 1718773093)) {
     $$0 = 0;
     break L81;
    } else {
     $247 = ((($this)) + 28|0);
     $handler_item1$019 = HEAP32[$247>>2]|0;
     $248 = ($handler_item1$019|0)==(0|0);
     if ($248) {
      $$0 = 0;
      break L81;
     }
     $249 = ((($this)) + 16|0);
     $256 = $9;$handler_item1$020 = $handler_item1$019;
     while(1) {
      $252 = HEAP32[$handler_item1$020>>2]|0;
      $253 = HEAP32[$252>>2]|0;
      $254 = ((($253)) + 8|0);
      $255 = HEAP32[$254>>2]|0;
      $257 = ($256|0)==(0);
      if ($257) {
       $$0$i3 = 0;
      } else {
       $258 = (($256) + -1)|0;
       $259 = HEAP32[$249>>2]|0;
       $260 = (($259) + ($258<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $$0$i3 = $261;
      }
      $262 = (FUNCTION_TABLE_iiiiiii[$255 & 511]($252,$type,$size_32,$stream,$$0$i3,$atom)|0);
      $263 = ($262|0)==(0);
      if ($263) {
       $$0 = 0;
       break L81;
      }
      $250 = ((($handler_item1$020)) + 4|0);
      $handler_item1$0 = HEAP32[$250>>2]|0;
      $251 = ($handler_item1$0|0)==(0|0);
      if ($251) {
       $$0 = 0;
       break L81;
      }
      $$pre26 = HEAP32[$8>>2]|0;
      $256 = $$pre26;$handler_item1$020 = $handler_item1$0;
     }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN15AP4_AtomFactory11PushContextEj($this,$context) {
 $this = $this|0;
 $context = $context|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 2;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    return;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre$i$i = ((($this)) + 16|0);
   if ($14) {
    $$pre$i = 0;
   } else {
    $15 = HEAP32[$$pre$i$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre$i = $13;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $17 = (($11) + ($i$01$i$i<<2)|0);
      $18 = (($15) + ($i$01$i$i<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      HEAP32[$17>>2] = $19;
      $20 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($20|0)==($13|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $20;
      }
     }
     __ZdlPv($15);
     $$pre$pre$i = HEAP32[$2>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0$i;
   $22 = $$pre$i;
  } else {
   $22 = $3;
  }
 } else {
  $22 = $3;
 }
 $21 = (($22) + 1)|0;
 HEAP32[$2>>2] = $21;
 $23 = ((($this)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<2)|0);
 HEAP32[$25>>2] = $context;
 return;
}
function __ZN15AP4_AtomFactory10PopContextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (($1) + -1)|0;
 HEAP32[$0>>2] = $3;
 return;
}
function __ZN15AP4_AtomFactoryD2Ev($this) {
 $this = $this|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3208);
 $0 = ((($this)) + 20|0);
 $1 = ((($this)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if (!($3)) {
   $item$01$i = $2;
   while(1) {
    $4 = ((($item$01$i)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$item$01$i>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $8 = HEAP32[$6>>2]|0;
     $9 = ((($8)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_vi($10|0,($6|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break;
     }
    }
    __ZdlPv($item$01$i);
    $13 = ($5|0)==(0|0);
    if ($13) {
     break L1;
    } else {
     $item$01$i = $5;
    }
   }
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   HEAP32[$0>>2] = (3304);
   $20 = HEAP32[$1>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $item$01$i$i2 = $20;
    while(1) {
     $22 = ((($item$01$i$i2)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     __ZdlPv($item$01$i$i2);
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     } else {
      $item$01$i$i2 = $23;
     }
    }
   }
   $25 = ((($this)) + 24|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($this)) + 32|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$1>>2] = 0;
   $27 = ((($this)) + 4|0);
   HEAP32[$27>>2] = (2152);
   $28 = ((($this)) + 12|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($this)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   __ZdlPv($30);
   ___resumeException($18|0);
   // unreachable;
  }
 } while(0);
 $14 = ((($this)) + 32|0);
 $15 = ((($this)) + 24|0);
 HEAP32[$0>>2] = (3304);
 $$phi$trans$insert = ((($this)) + 16|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 HEAP32[$15>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$1>>2] = 0;
 $16 = ((($this)) + 4|0);
 HEAP32[$16>>2] = (2152);
 $17 = ((($this)) + 12|0);
 HEAP32[$17>>2] = 0;
 __ZdlPv($$pre);
 return;
}
function __ZN22AP4_DefaultAtomFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = (3304);
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 32|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$this>>2] = (3320);
 __THREW__ = 0;
 $8 = (invoke_ii(752,8)|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  HEAP32[$8>>2] = (15104);
  $11 = ((($8)) + 4|0);
  HEAP32[$11>>2] = $this;
  __THREW__ = 0;
  $12 = (invoke_ii(752,12)|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   HEAP32[$12>>2] = $8;
   $15 = ((($12)) + 4|0);
   $16 = ((($12)) + 8|0);
   HEAP32[$6>>2] = $12;
   HEAP32[$7>>2] = $12;
   HEAP32[$15>>2] = 0;
   HEAP32[$16>>2] = 0;
   HEAP32[$5>>2] = 1;
   $17 = ((($this)) + 36|0);
   HEAP8[$17>>0] = 1;
   return;
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 __THREW__ = 0;
 invoke_vi(69,($this|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($18|0);
  // unreachable;
 }
}
function __GLOBAL__sub_I_Ap4AtomFactory_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(3228)>>2] = (2152);
 HEAP32[(3232)>>2] = 0;
 HEAP32[(3236)>>2] = 0;
 HEAP32[(3240)>>2] = 0;
 HEAP32[(3244)>>2] = (3304);
 HEAP32[(3248)>>2] = 0;
 HEAP32[(3252)>>2] = 0;
 HEAP32[(3256)>>2] = 0;
 HEAP32[3224>>2] = (3320);
 __THREW__ = 0;
 $0 = (invoke_ii(752,8)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  HEAP32[$0>>2] = (15104);
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = 3224;
  __THREW__ = 0;
  $4 = (invoke_ii(752,12)|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   HEAP32[$4>>2] = $0;
   $13 = ((($4)) + 4|0);
   $14 = ((($4)) + 8|0);
   HEAP32[(3252)>>2] = $4;
   HEAP32[(3256)>>2] = $4;
   HEAP32[$13>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[(3248)>>2] = 1;
   HEAP8[(3260)>>0] = 1;
   (___cxa_atexit((69|0),(3224|0),(___dso_handle|0))|0);
   return;
  }
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_vi(69,(3224|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___resumeException($7|0);
  // unreachable;
 }
}
function __ZN22AP4_DefaultAtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(69,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3304);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3304);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN12AP4_SaizAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(72)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(785,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SaizAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01 = 0, $i$01$i$i = 0, $i1$02$i = 0, $remains$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1935763834,$size,$version,$flags);
 HEAP32[$this>>2] = (3448);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = (3544);
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 60|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 64|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 $6 = (invoke_ii(5,($this|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $9 = (($size) - ($6))|0;
   $10 = $flags & 1;
   $11 = ($10|0)==(0);
   if ($11) {
    $remains$0 = $9;
   } else {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($0|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($1|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
    $16 = (($9) + -8)|0;
    $remains$0 = $16;
   }
   $17 = ((($this)) + 44|0);
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($17|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = ((($this)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = (($remains$0) + -5)|0;
     $24 = HEAP8[$17>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      return;
     }
     $26 = HEAP32[$20>>2]|0;
     $27 = ($26>>>0)>($23>>>0);
     if ($27) {
      HEAP32[$20>>2] = $23;
      $30 = $23;
     } else {
      $30 = $26;
     }
     $28 = HEAP32[$4>>2]|0;
     $29 = ($28|0)==($30|0);
     do {
      if (!($29)) {
       $31 = ($28>>>0)>($30>>>0);
       if ($31) {
        HEAP32[$4>>2] = $30;
        break;
       }
       $32 = HEAP32[$3>>2]|0;
       $33 = ($32>>>0)<($30>>>0);
       if ($33) {
        __THREW__ = 0;
        $34 = (invoke_ii(752,($30|0))|0);
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if ($36) {
         break L1;
        }
        $37 = ($34|0)==(0|0);
        if ($37) {
         break;
        }
        $38 = HEAP32[$4>>2]|0;
        $39 = ($38|0)==(0);
        if ($39) {
         $$pre$i = 0;
        } else {
         $40 = HEAP32[$5>>2]|0;
         $41 = ($40|0)==(0|0);
         if ($41) {
          $$pre$i = $38;
         } else {
          $i$01$i$i = 0;
          while(1) {
           $42 = (($34) + ($i$01$i$i)|0);
           $43 = (($40) + ($i$01$i$i)|0);
           $44 = HEAP8[$43>>0]|0;
           HEAP8[$42>>0] = $44;
           $45 = (($i$01$i$i) + 1)|0;
           $exitcond3$i = ($45|0)==($38|0);
           if ($exitcond3$i) {
            break;
           } else {
            $i$01$i$i = $45;
           }
          }
          __ZdlPv($40);
          $$pre$pre$i = HEAP32[$4>>2]|0;
          $$pre$i = $$pre$pre$i;
         }
        }
        HEAP32[$5>>2] = $34;
        HEAP32[$3>>2] = $30;
        $46 = $$pre$i;
       } else {
        $46 = $28;
       }
       $47 = ($46>>>0)<($30>>>0);
       if ($47) {
        $i1$02$i = $46;
        while(1) {
         $48 = HEAP32[$5>>2]|0;
         $49 = (($48) + ($i1$02$i)|0);
         HEAP8[$49>>0] = 0;
         $50 = (($i1$02$i) + 1)|0;
         $exitcond$i = ($50|0)==($30|0);
         if ($exitcond$i) {
          break;
         } else {
          $i1$02$i = $50;
         }
        }
       }
       HEAP32[$4>>2] = $30;
      }
     } while(0);
     __THREW__ = 0;
     $51 = (invoke_ii(787,($30|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if (!($53)) {
      __THREW__ = 0;
      $54 = (invoke_iiii(788,($stream|0),($51|0),($30|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if (!($56)) {
       $57 = ($54|0)==(0);
       if (!($57)) {
        __ZdaPv($51);
        return;
       }
       $58 = ($30|0)==(0);
       if (!($58)) {
        $i$01 = 0;
        while(1) {
         $59 = (($51) + ($i$01)|0);
         $60 = HEAP8[$59>>0]|0;
         $61 = HEAP32[$5>>2]|0;
         $62 = (($61) + ($i$01)|0);
         HEAP8[$62>>0] = $60;
         $63 = (($i$01) + 1)|0;
         $exitcond = ($63|0)==($30|0);
         if ($exitcond) {
          break;
         } else {
          $i$01 = $63;
         }
        }
       }
       __ZdaPv($51);
       return;
      }
     }
    }
   }
  }
 } while(0);
 $64 = ___cxa_find_matching_catch()|0;
 $65 = tempRet0;
 HEAP32[$2>>2] = (3544);
 HEAP32[$4>>2] = 0;
 $66 = HEAP32[$5>>2]|0;
 __ZdlPv($66);
 ___resumeException($64|0);
 // unreachable;
}
function __ZN12AP4_SaizAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = $6;
   return ($$0|0);
  }
  $8 = ((($this)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
 }
 $12 = ((($this)) + 44|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  return ($$0|0);
 }
 $16 = ((($this)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = $18;
  return ($$0|0);
 }
 $20 = HEAP8[$12>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = ((($this)) + 64|0);
 $23 = HEAP32[$16>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $28 = HEAP32[$22>>2]|0;
  $29 = (($28) + ($i$01)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$30)|0);
  $32 = ($31|0)==(0);
  $26 = (($i$01) + 1)|0;
  if (!($32)) {
   $$0 = $31;
   label = 10;
   break;
  }
  $25 = HEAP32[$16>>2]|0;
  $27 = ($26>>>0)<($25>>>0);
  if ($27) {
   $i$01 = $26;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SaizAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$inspector>>2]|0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($this)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_viiiii[$6 & 1023]($inspector,21008,$8,0,1);
  $9 = HEAP32[$inspector>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($this)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,21024,$13,0,1);
 }
 $14 = HEAP32[$inspector>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($this)) + 44|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 FUNCTION_TABLE_viiiii[$16 & 1023]($inspector,3552,$19,0,0);
 $20 = HEAP32[$inspector>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viiiii[$22 & 1023]($inspector,4112,$24,0,0);
 $25 = ((($inspector)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)>(1);
 if (!($27)) {
  STACKTOP = sp;return 0;
 }
 $28 = ((($this)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  STACKTOP = sp;return 0;
 }
 $31 = ((($this)) + 64|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $32 = HEAP32[$inspector>>2]|0;
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$31>>2]|0;
  $36 = (($35) + ($i$01)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  FUNCTION_TABLE_viiiii[$34 & 1023]($inspector,$header,$38,0,0);
  $39 = (($i$01) + 1)|0;
  $40 = HEAP32[$28>>2]|0;
  $41 = ($39>>>0)<($40>>>0);
  if ($41) {
   $i$01 = $39;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SaizAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3448);
 $0 = ((($this)) + 52|0);
 HEAP32[$0>>2] = (3544);
 $1 = ((($this)) + 60|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_SaizAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3448);
 $0 = ((($this)) + 52|0);
 HEAP32[$0>>2] = (3544);
 $1 = ((($this)) + 60|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIhED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3544);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIhED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3544);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN11AP4_UrlAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(789,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN11AP4_UrlAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1970433056,$size,$version,$flags);
 HEAP32[$this>>2] = (3616);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $18;$$01 = $19;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = ((($this)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = (($size) + -12)|0;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 }
 __THREW__ = 0;
 $9 = (invoke_ii(787,($7|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($9|0),($7|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $14 = (($size) + -13)|0;
   $15 = (($9) + ($14)|0);
   HEAP8[$15>>0] = 0;
   __THREW__ = 0;
   (invoke_iii(791,($0|0),($9|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __ZdaPv($9);
    return;
   }
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $$0 = $20;$$01 = $21;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN11AP4_UrlAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $padding$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>(12);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($this)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$8,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$9>>2]|0;
 $$neg1 = (($14) + -13)|0;
 $16 = ($$neg1|0)==($15|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (($$neg1) - ($15))|0;
 $padding$02 = $17;
 while(1) {
  $18 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $18;
  }
 }
 return ($$0|0);
}
function __ZN11AP4_UrlAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 $4 = HEAP32[$inspector>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 if ($3) {
  $7 = ((($this)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_viiii[$6 & 1023]($inspector,3704,$8,0);
  return 0;
 } else {
  FUNCTION_TABLE_viiii[$6 & 1023]($inspector,3704,3720,0);
  return 0;
 }
 return (0)|0;
}
function __ZN11AP4_UrlAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3616);
 $0 = ((($this)) + 36|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN11AP4_UrlAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3616);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_SchmAtom6CreateEjP9AP4_ArrayIjER14AP4_ByteStream($size,$context,$stream) {
 $size = $size|0;
 $context = $context|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $short_form$0$off0 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = HEAP8[$version>>0]|0;
 $notlhs = ($0|0)!=(0);
 $notrhs = ($1<<24>>24)!=(0);
 $or$cond$not = $notlhs | $notrhs;
 $2 = ($size>>>0)<(18);
 $or$cond4 = $2 | $or$cond$not;
 if ($or$cond4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($size>>>0)<(20);
 $4 = ($context|0)==(0|0);
 if ($4) {
  $short_form$0$off0 = $3;
 } else {
  $5 = ((($context)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)>(1);
  if ($7) {
   $8 = (($6) + -2)|0;
   $9 = ((($context)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($8<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(1836215406);
   $$ = $3 | $13;
   $short_form$0$off0 = $$;
  } else {
   $short_form$0$off0 = $3;
  }
 }
 $14 = (__Znwj(56)|0);
 $15 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(793,($14|0),($size|0),0,($15|0),($short_form$0$off0|0),($stream|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZdlPv($14);
  ___resumeException($18|0);
  // unreachable;
 } else {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SchmAtomC2EjjPKcb($this,$scheme_type,$scheme_version,$scheme_uri,$short_form) {
 $this = $this|0;
 $scheme_type = $scheme_type|0;
 $scheme_version = $scheme_version|0;
 $scheme_uri = $scheme_uri|0;
 $short_form = $short_form|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $short_form ? 18 : 20;
 __ZN8AP4_AtomC2Ejjhj($this,1935894637,$0,0,0);
 HEAP32[$this>>2] = (3744);
 $1 = ((($this)) + 36|0);
 $2 = $short_form&1;
 HEAP8[$1>>0] = $2;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $scheme_type;
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = $scheme_version;
 $5 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(790,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $19;$$01 = $18;
  ___resumeException($$01|0);
  // unreachable;
 }
 $8 = ($scheme_uri|0)==(0|0);
 if ($8) {
  return;
 }
 __THREW__ = 0;
 (invoke_iii(791,($5|0),($scheme_uri|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = ((($this)) + 28|0);
  HEAP32[$11>>2] = 1;
  $12 = ((($this)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  $15 = ((($this)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16))|0;
  HEAP32[$15>>2] = $17;
  return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($5|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $$0 = $21;$$01 = $20;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN12AP4_SchmAtomC2EjhjbR14AP4_ByteStream($this,$size,$version,$flags,$short_form,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $short_form = $short_form|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $short_version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $short_version = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1935894637,$size,$version,$flags);
 HEAP32[$this>>2] = (3744);
 $0 = ((($this)) + 36|0);
 $1 = $short_form&1;
 HEAP8[$0>>0] = $1;
 $2 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(790,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$0 = $13;$$01 = $14;
  ___resumeException($$0|0);
  // unreachable;
 }
 $5 = ((($this)) + 40|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   if ($short_form) {
    __THREW__ = 0;
    (invoke_iii(794,($stream|0),($short_version|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
    $10 = HEAP16[$short_version>>1]|0;
    $11 = $10&65535;
    $12 = ((($this)) + 44|0);
    HEAP32[$12>>2] = $11;
   } else {
    $19 = ((($this)) + 44|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($19|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
   }
   $22 = ((($this)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & 1;
   $25 = ($24|0)==(0);
   if ($25) {
    STACKTOP = sp;return;
   }
   $26 = (($size) + -20)|0;
   $27 = ($26|0)>(0);
   if (!($27)) {
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   $28 = (invoke_ii(787,($26|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    __THREW__ = 0;
    (invoke_iiii(788,($stream|0),($28|0),($26|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = (($size) + -21)|0;
     $34 = (($28) + ($33)|0);
     HEAP8[$34>>0] = 0;
     __THREW__ = 0;
     (invoke_iii(791,($2|0),($28|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      __ZdaPv($28);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $$0 = $15;$$01 = $16;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN12AP4_SchmAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$neg = 0, $$neg2 = 0, $$neg3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding$04 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = ((($this)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $12 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$8)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$0 = $12;
   return ($$0|0);
  }
 } else {
  $9 = $8&65535;
  $10 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
 }
 $14 = ((($this)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($this)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 1)|0;
 $23 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$19,$22)|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  $$0 = $23;
  return ($$0|0);
 }
 $25 = HEAP8[$4>>0]|0;
 $26 = ($25<<24>>24)!=(0);
 $27 = ((($this)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$20>>2]|0;
 $$neg = $26 ? -18 : -20;
 $$neg2 = (($28) + -1)|0;
 $$neg3 = (($$neg2) - ($29))|0;
 $30 = (($$neg3) + ($$neg))|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $padding$04 = $30;
 }
 while(1) {
  $32 = (($padding$04) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $$0 = 0;
   break;
  } else {
   $padding$04 = $32;
  }
 }
 return ($$0|0);
}
function __ZN12AP4_SchmAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($st,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,3832,$st,0);
 $5 = ((($this)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 $8 = HEAP32[$inspector>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 if ($7) {
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,3872,$12,0,0);
 } else {
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,3848,$12,0,0);
 }
 $13 = ((($this)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return 0;
 }
 $17 = HEAP32[$inspector>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viiii[$19 & 1023]($inspector,3888,$21,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SchmAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3744);
 $0 = ((($this)) + 48|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN12AP4_SchmAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3744);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_EsdsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $descriptor$i = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor$i = sp + 4|0;
 $version = sp + 8|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1702061171,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZdlPv($4);
  ___resumeException($18|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (3912);
 HEAP32[$descriptor$i>>2] = 0;
 __THREW__ = 0;
 $8 = (invoke_iii(795,($stream|0),($descriptor$i|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZdlPv($4);
  ___resumeException($18|0);
  // unreachable;
 }
 $11 = ($8|0)==(0);
 if ($11) {
  $12 = HEAP32[$descriptor$i>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $16 = 0;
  } else {
   $14 = (___dynamic_cast($12,10880,20696,0)|0);
   $16 = $14;
  }
  $15 = ((($4)) + 36|0);
  HEAP32[$15>>2] = $16;
 } else {
  $17 = ((($4)) + 36|0);
  HEAP32[$17>>2] = 0;
 }
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_EsdsAtomC2EP16AP4_EsDescriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1702061171,12,0,0);
 HEAP32[$this>>2] = (3912);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = $descriptor;
 $1 = ($descriptor|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($descriptor)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($descriptor)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = ((($this)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8))|0;
 HEAP32[$7>>2] = $9;
 return;
}
function __ZN12AP4_EsdsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3912);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($1);
 return;
}
function __ZN12AP4_EsdsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3912);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_EsdsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 1023]($1,$stream)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN12AP4_EsdsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 (FUNCTION_TABLE_iii[$5 & 1023]($1,$inspector)|0);
 return 0;
}
function __ZN12AP4_TrunAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(796,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TrunAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$lobit$i = 0, $$lobit$i1 = 0, $$lobit3$i = 0, $$lobit3$i2 = 0, $$lobit4$i = 0, $$lobit4$i4 = 0, $$lobit5$i = 0, $$lobit5$i6 = 0, $$lobit6$i = 0, $$lobit6$i8 = 0, $$lobit7$i = 0, $$lobit7$i10 = 0, $$lobit8$i = 0, $$lobit8$i12 = 0, $$lobit9$i = 0, $$pr = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count$0$$1$i = 0, $count$0$$1$i3 = 0, $count$0$$2$i = 0, $count$0$$2$i5 = 0, $count$0$$3$i = 0, $count$0$$3$i7 = 0, $count$0$$4$i = 0, $count$0$$4$i9 = 0, $count$0$$5$i = 0, $count$0$$5$i11 = 0, $count$0$$6$i = 0, $count$0$$6$i13 = 0, $count$0$$7$i = 0, $count$0$$7$i14 = 0, $discard = 0, $discard2 = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01$i$i = 0, $i$037 = 0;
 var $i1$02$i = 0, $i1$022 = 0, $i1$022$us = 0, $i1$022$us26 = 0, $j$020 = 0, $j$020$us = 0, $j$020$us33 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $offset = 0, $optional_fields_count$0 = 0, $optional_fields_count$1 = 0, $record_fields_count$021 = 0, $record_fields_count$021$us = 0, $record_fields_count$021$us27 = 0, $record_fields_count$2$us = 0, $record_fields_count$3 = 0, $record_fields_count$3$us = 0, $record_fields_count$3$us30 = 0, $record_fields_count$4 = 0;
 var $record_fields_count$4$us = 0, $record_fields_count$4$us31 = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample_count = sp + 12|0;
 $offset = sp + 8|0;
 $discard = sp + 4|0;
 $discard2 = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1953658222,$size,$version,$flags);
 HEAP32[$this>>2] = (4008);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (4104);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$sample_count>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($sample_count|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   $6 = $flags & 1;
   $7 = $flags >>> 1;
   $$lobit$i = $7 & 1;
   $count$0$$1$i = (($$lobit$i) + ($6))|0;
   $8 = $flags >>> 2;
   $$lobit3$i = $8 & 1;
   $count$0$$2$i = (($count$0$$1$i) + ($$lobit3$i))|0;
   $9 = $flags >>> 3;
   $$lobit4$i = $9 & 1;
   $count$0$$3$i = (($count$0$$2$i) + ($$lobit4$i))|0;
   $10 = $flags >>> 4;
   $$lobit5$i = $10 & 1;
   $count$0$$4$i = (($count$0$$3$i) + ($$lobit5$i))|0;
   $11 = $flags >>> 5;
   $$lobit6$i = $11 & 1;
   $count$0$$5$i = (($count$0$$4$i) + ($$lobit6$i))|0;
   $12 = $flags >>> 6;
   $$lobit7$i = $12 & 1;
   $count$0$$6$i = (($count$0$$5$i) + ($$lobit7$i))|0;
   $13 = $flags >>> 7;
   $$lobit8$i = $13 & 1;
   $count$0$$7$i = (($count$0$$6$i) + ($$lobit8$i))|0;
   $14 = ($6|0)==(0);
   if ($14) {
    $optional_fields_count$0 = $count$0$$7$i;
   } else {
    HEAP32[$offset>>2] = 0;
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($offset|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    $17 = HEAP32[$offset>>2]|0;
    $18 = ((($this)) + 36|0);
    HEAP32[$18>>2] = $17;
    $19 = (($count$0$$7$i) + -1)|0;
    $optional_fields_count$0 = $19;
   }
   $20 = $flags & 4;
   $21 = ($20|0)==(0);
   if ($21) {
    $optional_fields_count$1 = $optional_fields_count$0;
   } else {
    $22 = ((($this)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($22|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     break;
    }
    $25 = (($optional_fields_count$0) + -1)|0;
    $optional_fields_count$1 = $25;
   }
   $26 = ($optional_fields_count$1|0)>(0);
   L11: do {
    if ($26) {
     $i$037 = 0;
     while(1) {
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($discard|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break;
      }
      $29 = (($i$037) + 1)|0;
      $30 = ($29|0)<($optional_fields_count$1|0);
      if ($30) {
       $i$037 = $29;
      } else {
       break L11;
      }
     }
     $157 = ___cxa_find_matching_catch()|0;
     $158 = tempRet0;
     $lpad$phi$index = $157;$lpad$phi$index8 = $158;
     HEAP32[$0>>2] = (4104);
     HEAP32[$2>>2] = 0;
     $161 = HEAP32[$3>>2]|0;
     __ZdlPv($161);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
   } while(0);
   $31 = $flags >>> 8;
   $$lobit$i1 = $31 & 1;
   $32 = $flags >>> 9;
   $$lobit3$i2 = $32 & 1;
   $count$0$$1$i3 = (($$lobit3$i2) + ($$lobit$i1))|0;
   $33 = $flags >>> 10;
   $$lobit4$i4 = $33 & 1;
   $count$0$$2$i5 = (($count$0$$1$i3) + ($$lobit4$i4))|0;
   $34 = $flags >>> 11;
   $$lobit5$i6 = $34 & 1;
   $count$0$$3$i7 = (($count$0$$2$i5) + ($$lobit5$i6))|0;
   $35 = $flags >>> 12;
   $$lobit6$i8 = $35 & 1;
   $count$0$$4$i9 = (($count$0$$3$i7) + ($$lobit6$i8))|0;
   $36 = $flags >>> 13;
   $$lobit7$i10 = $36 & 1;
   $count$0$$5$i11 = (($count$0$$4$i9) + ($$lobit7$i10))|0;
   $37 = $flags >>> 14;
   $$lobit8$i12 = $37 & 1;
   $count$0$$6$i13 = (($count$0$$5$i11) + ($$lobit8$i12))|0;
   $38 = $flags >>> 15;
   $$lobit9$i = $38 & 1;
   $count$0$$7$i14 = (($count$0$$6$i13) + ($$lobit9$i))|0;
   $39 = HEAP32[$sample_count>>2]|0;
   $40 = HEAP32[$2>>2]|0;
   $41 = ($40|0)==($39|0);
   if ($41) {
    $62 = $39;
   } else {
    $42 = ($40>>>0)>($39>>>0);
    do {
     if ($42) {
      HEAP32[$2>>2] = $39;
     } else {
      $43 = HEAP32[$1>>2]|0;
      $44 = ($43>>>0)<($39>>>0);
      if ($44) {
       $45 = $39 << 4;
       __THREW__ = 0;
       $46 = (invoke_ii(752,($45|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        break L1;
       }
       $49 = ($46|0)==(0|0);
       if ($49) {
        break;
       }
       $50 = HEAP32[$2>>2]|0;
       $51 = ($50|0)==(0);
       if ($51) {
        $$pre$i = 0;
       } else {
        $52 = HEAP32[$3>>2]|0;
        $53 = ($52|0)==(0|0);
        if ($53) {
         $$pre$i = $50;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $54 = (($46) + ($i$01$i$i<<4)|0);
          $55 = (($52) + ($i$01$i$i<<4)|0);
          ;HEAP32[$54>>2]=HEAP32[$55>>2]|0;HEAP32[$54+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$55+12>>2]|0;
          $56 = (($i$01$i$i) + 1)|0;
          $exitcond3$i = ($56|0)==($50|0);
          if ($exitcond3$i) {
           break;
          } else {
           $i$01$i$i = $56;
          }
         }
         __ZdlPv($52);
         $$pre$pre$i = HEAP32[$2>>2]|0;
         $$pre$i = $$pre$pre$i;
        }
       }
       HEAP32[$3>>2] = $46;
       HEAP32[$1>>2] = $39;
       $57 = $$pre$i;
      } else {
       $57 = $40;
      }
      $58 = ($57>>>0)<($39>>>0);
      if ($58) {
       $i1$02$i = $57;
       while(1) {
        $59 = HEAP32[$3>>2]|0;
        $60 = (($59) + ($i1$02$i<<4)|0);
        ;HEAP32[$60>>2]=0|0;HEAP32[$60+4>>2]=0|0;HEAP32[$60+8>>2]=0|0;HEAP32[$60+12>>2]=0|0;
        $61 = (($i1$02$i) + 1)|0;
        $exitcond$i = ($61|0)==($39|0);
        if ($exitcond$i) {
         break;
        } else {
         $i1$02$i = $61;
        }
       }
      }
      HEAP32[$2>>2] = $39;
     }
    } while(0);
    $$pr = HEAP32[$sample_count>>2]|0;
    $62 = $$pr;
   }
   $63 = ($62|0)==(0);
   if ($63) {
    STACKTOP = sp;return;
   }
   $64 = $flags & 256;
   $65 = ($64|0)==(0);
   $66 = $flags & 512;
   $67 = ($66|0)==(0);
   $68 = $flags & 1024;
   $69 = ($68|0)==(0);
   $70 = $flags & 2048;
   $71 = ($70|0)==(0);
   if ($65) {
    $i1$022$us = 0;$record_fields_count$021$us = $count$0$$7$i14;
    L44: while(1) {
     if ($67) {
      $record_fields_count$2$us = $record_fields_count$021$us;
     } else {
      $72 = HEAP32[$3>>2]|0;
      $73 = (((($72) + ($i1$022$us<<4)|0)) + 4|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($73|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       label = 42;
       break;
      }
      $76 = (($record_fields_count$021$us) + -1)|0;
      $record_fields_count$2$us = $76;
     }
     if ($69) {
      $record_fields_count$3$us = $record_fields_count$2$us;
     } else {
      $77 = HEAP32[$3>>2]|0;
      $78 = (((($77) + ($i1$022$us<<4)|0)) + 8|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($78|0))|0);
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       label = 42;
       break;
      }
      $81 = (($record_fields_count$2$us) + -1)|0;
      $record_fields_count$3$us = $81;
     }
     if ($71) {
      $record_fields_count$4$us = $record_fields_count$3$us;
     } else {
      $82 = HEAP32[$3>>2]|0;
      $83 = (((($82) + ($i1$022$us<<4)|0)) + 12|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($83|0))|0);
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       label = 42;
       break;
      }
      $86 = (($record_fields_count$3$us) + -1)|0;
      $record_fields_count$4$us = $86;
     }
     $87 = ($record_fields_count$4$us|0)>(0);
     if ($87) {
      $j$020$us = 0;
      while(1) {
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($discard2|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        label = 43;
        break L44;
       }
       $93 = (($j$020$us) + 1)|0;
       $94 = ($93|0)<($record_fields_count$4$us|0);
       if ($94) {
        $j$020$us = $93;
       } else {
        break;
       }
      }
     }
     $88 = (($i1$022$us) + 1)|0;
     $89 = HEAP32[$sample_count>>2]|0;
     $90 = ($88>>>0)<($89>>>0);
     if ($90) {
      $i1$022$us = $88;$record_fields_count$021$us = $record_fields_count$4$us;
     } else {
      label = 69;
      break;
     }
    }
    if ((label|0) == 42) {
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $lpad$phi$index = $95;$lpad$phi$index8 = $96;
     HEAP32[$0>>2] = (4104);
     HEAP32[$2>>2] = 0;
     $161 = HEAP32[$3>>2]|0;
     __ZdlPv($161);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    else if ((label|0) == 43) {
     $97 = ___cxa_find_matching_catch()|0;
     $98 = tempRet0;
     $lpad$phi$index = $97;$lpad$phi$index8 = $98;
     HEAP32[$0>>2] = (4104);
     HEAP32[$2>>2] = 0;
     $161 = HEAP32[$3>>2]|0;
     __ZdlPv($161);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    else if ((label|0) == 69) {
     STACKTOP = sp;return;
    }
   }
   if ($67) {
    $i1$022$us26 = 0;$record_fields_count$021$us27 = $count$0$$7$i14;
    L71: while(1) {
     $99 = HEAP32[$3>>2]|0;
     $100 = (($99) + ($i1$022$us26<<4)|0);
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($100|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 55;
      break;
     }
     $103 = (($record_fields_count$021$us27) + -1)|0;
     if ($69) {
      $record_fields_count$3$us30 = $103;
     } else {
      $104 = HEAP32[$3>>2]|0;
      $105 = (((($104) + ($i1$022$us26<<4)|0)) + 8|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($105|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 55;
       break;
      }
      $108 = (($record_fields_count$021$us27) + -2)|0;
      $record_fields_count$3$us30 = $108;
     }
     if ($71) {
      $record_fields_count$4$us31 = $record_fields_count$3$us30;
     } else {
      $109 = HEAP32[$3>>2]|0;
      $110 = (((($109) + ($i1$022$us26<<4)|0)) + 12|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($110|0))|0);
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       label = 55;
       break;
      }
      $113 = (($record_fields_count$3$us30) + -1)|0;
      $record_fields_count$4$us31 = $113;
     }
     $114 = ($record_fields_count$4$us31|0)>(0);
     if ($114) {
      $j$020$us33 = 0;
      while(1) {
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($discard2|0))|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        label = 56;
        break L71;
       }
       $120 = (($j$020$us33) + 1)|0;
       $121 = ($120|0)<($record_fields_count$4$us31|0);
       if ($121) {
        $j$020$us33 = $120;
       } else {
        break;
       }
      }
     }
     $115 = (($i1$022$us26) + 1)|0;
     $116 = HEAP32[$sample_count>>2]|0;
     $117 = ($115>>>0)<($116>>>0);
     if ($117) {
      $i1$022$us26 = $115;$record_fields_count$021$us27 = $record_fields_count$4$us31;
     } else {
      label = 69;
      break;
     }
    }
    if ((label|0) == 55) {
     $122 = ___cxa_find_matching_catch()|0;
     $123 = tempRet0;
     $lpad$phi$index = $122;$lpad$phi$index8 = $123;
     HEAP32[$0>>2] = (4104);
     HEAP32[$2>>2] = 0;
     $161 = HEAP32[$3>>2]|0;
     __ZdlPv($161);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    else if ((label|0) == 56) {
     $124 = ___cxa_find_matching_catch()|0;
     $125 = tempRet0;
     $lpad$phi$index = $124;$lpad$phi$index8 = $125;
     HEAP32[$0>>2] = (4104);
     HEAP32[$2>>2] = 0;
     $161 = HEAP32[$3>>2]|0;
     __ZdlPv($161);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
    else if ((label|0) == 69) {
     STACKTOP = sp;return;
    }
   } else {
    $i1$022 = 0;$record_fields_count$021 = $count$0$$7$i14;
   }
   L93: while(1) {
    $126 = HEAP32[$3>>2]|0;
    $127 = (($126) + ($i1$022<<4)|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($127|0))|0);
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     label = 71;
     break;
    }
    $130 = HEAP32[$3>>2]|0;
    $131 = (((($130) + ($i1$022<<4)|0)) + 4|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($131|0))|0);
    $132 = __THREW__; __THREW__ = 0;
    $133 = $132&1;
    if ($133) {
     label = 71;
     break;
    }
    $134 = (($record_fields_count$021) + -2)|0;
    if ($69) {
     $record_fields_count$3 = $134;
    } else {
     $135 = HEAP32[$3>>2]|0;
     $136 = (((($135) + ($i1$022<<4)|0)) + 8|0);
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($136|0))|0);
     $137 = __THREW__; __THREW__ = 0;
     $138 = $137&1;
     if ($138) {
      label = 71;
      break;
     }
     $139 = (($record_fields_count$021) + -3)|0;
     $record_fields_count$3 = $139;
    }
    if ($71) {
     $record_fields_count$4 = $record_fields_count$3;
    } else {
     $140 = HEAP32[$3>>2]|0;
     $141 = (((($140) + ($i1$022<<4)|0)) + 12|0);
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($141|0))|0);
     $142 = __THREW__; __THREW__ = 0;
     $143 = $142&1;
     if ($143) {
      label = 71;
      break;
     }
     $144 = (($record_fields_count$3) + -1)|0;
     $record_fields_count$4 = $144;
    }
    $145 = ($record_fields_count$4|0)>(0);
    if ($145) {
     $j$020 = 0;
     while(1) {
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($discard2|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 70;
       break L93;
      }
      $148 = (($j$020) + 1)|0;
      $149 = ($148|0)<($record_fields_count$4|0);
      if ($149) {
       $j$020 = $148;
      } else {
       break;
      }
     }
    }
    $150 = (($i1$022) + 1)|0;
    $151 = HEAP32[$sample_count>>2]|0;
    $152 = ($150>>>0)<($151>>>0);
    if ($152) {
     $i1$022 = $150;$record_fields_count$021 = $record_fields_count$4;
    } else {
     label = 69;
     break;
    }
   }
   if ((label|0) == 69) {
    STACKTOP = sp;return;
   }
   else if ((label|0) == 70) {
    $153 = ___cxa_find_matching_catch()|0;
    $154 = tempRet0;
    $lpad$phi$index = $153;$lpad$phi$index8 = $154;
    HEAP32[$0>>2] = (4104);
    HEAP32[$2>>2] = 0;
    $161 = HEAP32[$3>>2]|0;
    __ZdlPv($161);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   else if ((label|0) == 71) {
    $155 = ___cxa_find_matching_catch()|0;
    $156 = tempRet0;
    $lpad$phi$index = $155;$lpad$phi$index8 = $156;
    HEAP32[$0>>2] = (4104);
    HEAP32[$2>>2] = 0;
    $161 = HEAP32[$3>>2]|0;
    __ZdlPv($161);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
  }
 } while(0);
 $159 = ___cxa_find_matching_catch()|0;
 $160 = tempRet0;
 $lpad$phi$index = $159;$lpad$phi$index8 = $160;
 HEAP32[$0>>2] = (4104);
 HEAP32[$2>>2] = 0;
 $161 = HEAP32[$3>>2]|0;
 __ZdlPv($161);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_TrunAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $13 = $5;
  } else {
   $8 = ((($this)) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$pre = HEAP32[$4>>2]|0;
    $13 = $$pre;
    break;
   } else {
    $$0 = $10;
    return ($$0|0);
   }
  }
 } while(0);
 $12 = $13 & 4;
 $14 = ($12|0)==(0);
 if (!($14)) {
  $15 = ((($this)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$16)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $$0 = $17;
   return ($$0|0);
  }
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($this)) + 56|0);
 $21 = ($19|0)==(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $22 = HEAP32[$4>>2]|0;
  $23 = $22 & 256;
  $24 = ($23|0)==(0);
  if ($24) {
   $31 = $22;
  } else {
   $25 = HEAP32[$20>>2]|0;
   $26 = (($25) + ($i$01<<4)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$27)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $$0 = $28;
    label = 20;
    break;
   }
   $$pre11 = HEAP32[$4>>2]|0;
   $31 = $$pre11;
  }
  $30 = $31 & 512;
  $32 = ($30|0)==(0);
  if ($32) {
   $39 = $31;
  } else {
   $33 = HEAP32[$20>>2]|0;
   $34 = (((($33) + ($i$01<<4)|0)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$35)|0);
   $37 = ($36|0)==(0);
   if (!($37)) {
    $$0 = $36;
    label = 20;
    break;
   }
   $$pre13 = HEAP32[$4>>2]|0;
   $39 = $$pre13;
  }
  $38 = $39 & 1024;
  $40 = ($38|0)==(0);
  if ($40) {
   $47 = $39;
  } else {
   $41 = HEAP32[$20>>2]|0;
   $42 = (((($41) + ($i$01<<4)|0)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$43)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $$0 = $44;
    label = 20;
    break;
   }
   $$pre15 = HEAP32[$4>>2]|0;
   $47 = $$pre15;
  }
  $46 = $47 & 2048;
  $48 = ($46|0)==(0);
  if (!($48)) {
   $49 = HEAP32[$20>>2]|0;
   $50 = (((($49) + ($i$01<<4)|0)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$51)|0);
  }
  $52 = (($i$01) + 1)|0;
  $53 = ($52>>>0)<($19>>>0);
  if ($53) {
   $i$01 = $52;
  } else {
   $$0 = 0;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TrunAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $header = 0;
 var $header3 = 0, $i$02 = 0, $i2$03 = 0, $s0$0 = 0, $s08$0 = 0, $s1$0 = 0, $s19$0 = 0, $s2$0 = 0, $s210$0 = 0, $s3$0 = 0, $s311$0 = 0, $sep$0 = 0, $sep$1 = 0, $sep$2 = 0, $sep12$0 = 0, $sep12$1 = 0, $sep12$2 = 0, $v0 = 0, $v04 = 0, $v1 = 0;
 var $v15 = 0, $v2 = 0, $v26 = 0, $v3 = 0, $v37 = 0, $value = 0, $value13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 96|0;
 $vararg_buffer36 = sp + 88|0;
 $vararg_buffer32 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 720|0;
 $v0 = sp + 688|0;
 $v1 = sp + 656|0;
 $v2 = sp + 624|0;
 $v3 = sp + 560|0;
 $value = sp + 432|0;
 $header3 = sp + 400|0;
 $v04 = sp + 368|0;
 $v15 = sp + 336|0;
 $v26 = sp + 304|0;
 $v37 = sp + 240|0;
 $value13 = sp + 112|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,4112,$4,0,0);
 $5 = ((($this)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $17 = $6;
 } else {
  $9 = HEAP32[$inspector>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($this)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,4128,$13,$15,0);
  $$pre = HEAP32[$5>>2]|0;
  $17 = $$pre;
 }
 $16 = $17 & 4;
 $18 = ($16|0)==(0);
 if (!($18)) {
  $19 = HEAP32[$inspector>>2]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($this)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_viiiii[$21 & 1023]($inspector,4144,$23,0,1);
 }
 $24 = ((($inspector)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = HEAP32[$3>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   STACKTOP = sp;return 0;
  }
  $29 = ((($this)) + 56|0);
  $i$02 = 0;
  while(1) {
   HEAP32[$vararg_buffer>>2] = $i$02;
   (_snprintf($header,32,4168,$vararg_buffer)|0);
   $30 = HEAP32[$5>>2]|0;
   $31 = $30 & 256;
   $32 = ($31|0)==(0);
   if ($32) {
    $37 = $30;$s0$0 = 4184;$sep$0 = 4184;
   } else {
    $33 = HEAP32[$29>>2]|0;
    $34 = (($33) + ($i$02<<4)|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $35;
    (_snprintf($v0,32,4176,$vararg_buffer1)|0);
    $$pre9 = HEAP32[$5>>2]|0;
    $37 = $$pre9;$s0$0 = $v0;$sep$0 = 4192;
   }
   $36 = $37 & 512;
   $38 = ($36|0)==(0);
   if ($38) {
    $43 = $37;$s1$0 = 4184;$sep$1 = $sep$0;
   } else {
    $39 = HEAP32[$29>>2]|0;
    $40 = (((($39) + ($i$02<<4)|0)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $sep$0;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $41;
    (_snprintf($v1,32,4200,$vararg_buffer4)|0);
    $$pre10 = HEAP32[$5>>2]|0;
    $43 = $$pre10;$s1$0 = $v1;$sep$1 = 4192;
   }
   $42 = $43 & 1024;
   $44 = ($42|0)==(0);
   if ($44) {
    $49 = $43;$s2$0 = 4184;$sep$2 = $sep$1;
   } else {
    $45 = HEAP32[$29>>2]|0;
    $46 = (((($45) + ($i$02<<4)|0)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $sep$1;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $47;
    (_snprintf($v2,32,4208,$vararg_buffer8)|0);
    $$pre11 = HEAP32[$5>>2]|0;
    $49 = $$pre11;$s2$0 = $v2;$sep$2 = 4192;
   }
   $48 = $49 & 2048;
   $50 = ($48|0)==(0);
   if ($50) {
    $s3$0 = 4184;
   } else {
    $51 = HEAP32[$29>>2]|0;
    $52 = (((($51) + ($i$02<<4)|0)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $sep$2;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $53;
    (_snprintf($v3,64,4216,$vararg_buffer12)|0);
    $s3$0 = $v3;
   }
   HEAP32[$vararg_buffer16>>2] = $s0$0;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $s1$0;
   $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
   HEAP32[$vararg_ptr20>>2] = $s2$0;
   $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
   HEAP32[$vararg_ptr21>>2] = $s3$0;
   (_snprintf($value,128,4224,$vararg_buffer16)|0);
   $54 = HEAP32[$inspector>>2]|0;
   $55 = ((($54)) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_viiii[$56 & 1023]($inspector,$header,$value,0);
   $57 = (($i$02) + 1)|0;
   $exitcond = ($57|0)==($27|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $57;
   }
  }
  STACKTOP = sp;return 0;
 }
 $58 = ($25>>>0)>(1);
 if (!($58)) {
  STACKTOP = sp;return 0;
 }
 $59 = HEAP32[$3>>2]|0;
 $60 = ($59|0)==(0);
 if ($60) {
  STACKTOP = sp;return 0;
 }
 $61 = ((($this)) + 56|0);
 $i2$03 = 0;
 while(1) {
  HEAP32[$vararg_buffer22>>2] = $i2$03;
  (_snprintf($header3,32,18672,$vararg_buffer22)|0);
  $62 = HEAP32[$5>>2]|0;
  $63 = $62 & 256;
  $64 = ($63|0)==(0);
  if ($64) {
   $69 = $62;$s08$0 = 4184;$sep12$0 = 4184;
  } else {
   $65 = HEAP32[$61>>2]|0;
   $66 = (($65) + ($i2$03<<4)|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $67;
   (_snprintf($v04,32,4240,$vararg_buffer25)|0);
   $$pre6 = HEAP32[$5>>2]|0;
   $69 = $$pre6;$s08$0 = $v04;$sep12$0 = 4264;
  }
  $68 = $69 & 512;
  $70 = ($68|0)==(0);
  if ($70) {
   $75 = $69;$s19$0 = 4184;$sep12$1 = $sep12$0;
  } else {
   $71 = HEAP32[$61>>2]|0;
   $72 = (((($71) + ($i2$03<<4)|0)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   HEAP32[$vararg_buffer28>>2] = $sep12$0;
   $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
   HEAP32[$vararg_ptr31>>2] = $73;
   (_snprintf($v15,32,4272,$vararg_buffer28)|0);
   $$pre7 = HEAP32[$5>>2]|0;
   $75 = $$pre7;$s19$0 = $v15;$sep12$1 = 4264;
  }
  $74 = $75 & 1024;
  $76 = ($74|0)==(0);
  if ($76) {
   $81 = $75;$s210$0 = 4184;$sep12$2 = $sep12$1;
  } else {
   $77 = HEAP32[$61>>2]|0;
   $78 = (((($77) + ($i2$03<<4)|0)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   HEAP32[$vararg_buffer32>>2] = $sep12$1;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $79;
   (_snprintf($v26,32,4296,$vararg_buffer32)|0);
   $$pre8 = HEAP32[$5>>2]|0;
   $81 = $$pre8;$s210$0 = $v26;$sep12$2 = 4264;
  }
  $80 = $81 & 2048;
  $82 = ($80|0)==(0);
  if ($82) {
   $s311$0 = 4184;
  } else {
   $83 = HEAP32[$61>>2]|0;
   $84 = (((($83) + ($i2$03<<4)|0)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   HEAP32[$vararg_buffer36>>2] = $sep12$2;
   $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
   HEAP32[$vararg_ptr39>>2] = $85;
   (_snprintf($v37,64,4320,$vararg_buffer36)|0);
   $s311$0 = $v37;
  }
  HEAP32[$vararg_buffer40>>2] = $s08$0;
  $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
  HEAP32[$vararg_ptr43>>2] = $s19$0;
  $vararg_ptr44 = ((($vararg_buffer40)) + 8|0);
  HEAP32[$vararg_ptr44>>2] = $s210$0;
  $vararg_ptr45 = ((($vararg_buffer40)) + 12|0);
  HEAP32[$vararg_ptr45>>2] = $s311$0;
  (_snprintf($value13,128,4224,$vararg_buffer40)|0);
  $86 = HEAP32[$inspector>>2]|0;
  $87 = ((($86)) + 32|0);
  $88 = HEAP32[$87>>2]|0;
  FUNCTION_TABLE_viiii[$88 & 1023]($inspector,$header3,$value13,0);
  $89 = (($i2$03) + 1)|0;
  $exitcond5 = ($89|0)==($59|0);
  if ($exitcond5) {
   break;
  } else {
   $i2$03 = $89;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TrunAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4008);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (4104);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_TrunAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4008);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (4104);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4104);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4104);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_MoovAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i = 0, $item$01$i$i = 0, $item$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($this,1836019574,$size,0,0,$stream,$atom_factory);
 HEAP32[$this>>2] = (4416);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = (4492);
 $2 = ((($this)) + 56|0);
 HEAP32[$2>>2] = (4576);
 $3 = ((($this)) + 60|0);
 $4 = ((($this)) + 64|0);
 $5 = ((($this)) + 68|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 HEAP32[$0>>2] = (4592);
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$7>>2]|0;
 $8 = ($item$01$i|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $10 = (4592);$item$02$i = $item$01$i;
 while(1) {
  $9 = ((($10)) + 8|0);
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$item$02$i>>2]|0;
  __THREW__ = 0;
  (invoke_iii($11|0,($0|0),($12|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   break;
  }
  $15 = ((($item$02$i)) + 4|0);
  $item$0$i = HEAP32[$15>>2]|0;
  $16 = ($item$0$i|0)==(0|0);
  if ($16) {
   label = 6;
   break;
  }
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;$item$02$i = $item$0$i;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 HEAP32[$2>>2] = (4576);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $item$01$i$i = $19;
  while(1) {
   $21 = ((($item$01$i$i)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   __ZdlPv($item$01$i$i);
   $23 = ($22|0)==(0|0);
   if ($23) {
    break;
   } else {
    $item$01$i$i = $22;
   }
  }
 }
 HEAP32[$3>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$4>>2] = 0;
 $24 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_MoovAtom12OnChildAddedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1953653099);
 if ($2) {
  $3 = (___dynamic_cast($atom,11216,4608,0)|0);
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (__Znwj(12)|0);
   HEAP32[$5>>2] = $3;
   $6 = ((($5)) + 4|0);
   HEAP32[$6>>2] = 0;
   $7 = ((($5)) + 8|0);
   HEAP32[$7>>2] = 0;
   $8 = ((($this)) + 68|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $12 = ((($this)) + 64|0);
    HEAP32[$12>>2] = $5;
    HEAP32[$8>>2] = $5;
    HEAP32[$6>>2] = 0;
    $$sink$i$i = 0;
   } else {
    HEAP32[$6>>2] = 0;
    $11 = ((($9)) + 4|0);
    HEAP32[$11>>2] = $5;
    HEAP32[$8>>2] = $5;
    $$sink$i$i = $9;
   }
   HEAP32[$7>>2] = $$sink$i$i;
   $13 = ((($this)) + 60|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
  }
 }
 __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($this,$atom);
 return;
}
function __ZThn36_N12AP4_MoovAtom12OnChildAddedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($atom)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1953653099);
 if (!($3)) {
  __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($0,$atom);
  return;
 }
 $4 = (___dynamic_cast($atom,11216,4608,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($0,$atom);
  return;
 }
 $6 = (__Znwj(12)|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $13 = ((($0)) + 64|0);
  HEAP32[$13>>2] = $6;
  HEAP32[$9>>2] = $6;
  HEAP32[$7>>2] = 0;
  $$sink$i$i$i = 0;
 } else {
  HEAP32[$7>>2] = 0;
  $12 = ((($10)) + 4|0);
  HEAP32[$12>>2] = $6;
  HEAP32[$9>>2] = $6;
  $$sink$i$i$i = $10;
 }
 HEAP32[$8>>2] = $$sink$i$i$i;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($0,$atom);
 return;
}
function __ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$02$i = 0, $item$03$i = 0, $item$03$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1953653099);
 L1: do {
  if ($2) {
   $3 = (___dynamic_cast($atom,11216,4608,0)|0);
   $4 = ($3|0)==(0|0);
   if (!($4)) {
    $5 = ((($this)) + 64|0);
    $item$02$i = HEAP32[$5>>2]|0;
    $6 = ($item$02$i|0)==(0|0);
    if (!($6)) {
     $item$03$i = $item$02$i;
     while(1) {
      $7 = HEAP32[$item$03$i>>2]|0;
      $8 = ($7|0)==($3|0);
      if ($8) {
       $item$03$i$lcssa = $item$03$i;
       break;
      }
      $27 = ((($item$03$i)) + 4|0);
      $item$0$i = HEAP32[$27>>2]|0;
      $28 = ($item$0$i|0)==(0|0);
      if ($28) {
       break L1;
      } else {
       $item$03$i = $item$0$i;
      }
     }
     $9 = ((($item$03$i$lcssa)) + 8|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0|0);
     $12 = ((($item$03$i$lcssa)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $13;
     do {
      if ($11) {
       HEAP32[$5>>2] = $13;
       $21 = ($13|0)==(0|0);
       if ($21) {
        $23 = ((($this)) + 68|0);
        HEAP32[$23>>2] = 0;
        break;
       } else {
        $22 = ((($13)) + 8|0);
        HEAP32[$22>>2] = 0;
        break;
       }
      } else {
       $15 = ($13|0)==(0|0);
       if ($15) {
        $19 = ((($this)) + 68|0);
        HEAP32[$19>>2] = $10;
        $20 = ((($10)) + 4|0);
        HEAP32[$20>>2] = 0;
        break;
       } else {
        $16 = ((($13)) + 8|0);
        HEAP32[$16>>2] = $10;
        $17 = HEAP32[$9>>2]|0;
        $18 = ((($17)) + 4|0);
        HEAP32[$18>>2] = $14;
        break;
       }
      }
     } while(0);
     __ZdlPv($item$03$i$lcssa);
     $24 = ((($this)) + 60|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + -1)|0;
     HEAP32[$24>>2] = $26;
    }
   }
  }
 } while(0);
 __ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($this,$atom);
 return;
}
function __ZThn36_N12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($0,$atom);
 return;
}
function __ZN12AP4_MoovAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4416);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (4492);
 $1 = ((($this)) + 56|0);
 HEAP32[$1>>2] = (4576);
 $2 = ((($this)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $item$01$i$i = $3;
  while(1) {
   $5 = ((($item$01$i$i)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   __ZdlPv($item$01$i$i);
   $7 = ($6|0)==(0|0);
   if ($7) {
    break;
   } else {
    $item$01$i$i = $6;
   }
  }
 }
 $8 = ((($this)) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 68|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$2>>2] = 0;
 $10 = ((($this)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($10);
 return;
}
function __ZN12AP4_MoovAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4416);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (4492);
 $1 = ((($this)) + 56|0);
 HEAP32[$1>>2] = (4576);
 $2 = ((($this)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $item$01$i$i$i = $3;
  while(1) {
   $5 = ((($item$01$i$i$i)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   __ZdlPv($item$01$i$i$i);
   $7 = ($6|0)==(0|0);
   if ($7) {
    break;
   } else {
    $item$01$i$i$i = $6;
   }
  }
 }
 $8 = ((($this)) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 68|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$2>>2] = 0;
 $10 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __ZdlPv($this);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_MoovAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (4416);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (4492);
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = (4576);
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $item$01$i$i$i = $4;
  while(1) {
   $6 = ((($item$01$i$i$i)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   __ZdlPv($item$01$i$i$i);
   $8 = ($7|0)==(0|0);
   if ($8) {
    break;
   } else {
    $item$01$i$i$i = $7;
   }
  }
 }
 $9 = ((($0)) + 60|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 68|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$3>>2] = 0;
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N12AP4_MoovAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (4416);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (4492);
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = (4576);
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $item$01$i$i$i$i = $4;
  while(1) {
   $6 = ((($item$01$i$i$i$i)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   __ZdlPv($item$01$i$i$i$i);
   $8 = ($7|0)==(0|0);
   if ($8) {
    break;
   } else {
    $item$01$i$i$i$i = $7;
   }
  }
 }
 $9 = ((($0)) + 60|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 68|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$3>>2] = 0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __ZdlPv($0);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN21AP4_TrakAtomCollectorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK21AP4_TrakAtomCollector6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1953653099);
 if (!($2)) {
  return 0;
 }
 $3 = (___dynamic_cast($atom,11216,4608,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return 0;
 }
 $5 = ((($this)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__Znwj(12)|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($7)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($6)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $14 = ((($6)) + 8|0);
  HEAP32[$14>>2] = $7;
  HEAP32[$10>>2] = $7;
  HEAP32[$8>>2] = 0;
  $$sink$i$i = 0;
 } else {
  HEAP32[$8>>2] = 0;
  $13 = ((($11)) + 4|0);
  HEAP32[$13>>2] = $7;
  HEAP32[$10>>2] = $7;
  $$sink$i$i = $11;
 }
 HEAP32[$9>>2] = $$sink$i$i;
 $15 = ((($6)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 return 0;
}
function __ZN8AP4_ListI12AP4_TrakAtomED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4576);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListI12AP4_TrakAtomED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4576);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN21AP4_DescriptorFactory26CreateDescriptorFromStreamER14AP4_ByteStreamRP14AP4_Descriptor($stream,$descriptor) {
 $stream = $stream|0;
 $descriptor = $descriptor|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$lcssa19 = 0, $$lcssa21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ext = 0, $header_size$0 = 0, $max$0 = 0, $offset = 0, $or$cond = 0, $payload_size$0 = 0, $tag = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp;
 $tag = sp + 9|0;
 $ext = sp + 8|0;
 HEAP32[$descriptor>>2] = 0;
 $0 = HEAP32[$stream>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 1023]($stream,$offset)|0);
 $3 = (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$tag)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$stream>>2]|0;
  $6 = ((($5)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $offset;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 1023]($stream,$10,$13)|0);
  $$02 = $3;
  STACKTOP = sp;return ($$02|0);
 }
 HEAP8[$ext>>0] = 0;
 $header_size$0 = 1;$max$0 = 4;$payload_size$0 = 0;
 while(1) {
  $14 = (($header_size$0) + 1)|0;
  $15 = (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$ext)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$lcssa = $15;
   label = 5;
   break;
  }
  $26 = $payload_size$0 << 7;
  $27 = HEAP8[$ext>>0]|0;
  $28 = $27&255;
  $29 = $28 & 127;
  $30 = $29 | $26;
  $31 = (($max$0) + -1)|0;
  $32 = ($31|0)==(0);
  $33 = $28 & 128;
  $34 = ($33|0)==(0);
  $or$cond = $32 | $34;
  if ($or$cond) {
   $$lcssa19 = $14;$$lcssa21 = $30;
   break;
  } else {
   $header_size$0 = $14;$max$0 = $31;$payload_size$0 = $30;
  }
 }
 if ((label|0) == 5) {
  $17 = HEAP32[$stream>>2]|0;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $offset;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiii[$19 & 1023]($stream,$22,$25)|0);
  $$02 = $$lcssa;
  STACKTOP = sp;return ($$02|0);
 }
 $35 = HEAP8[$tag>>0]|0;
 $36 = $35&255;
 L12: do {
  switch ($36|0) {
  case 11:  {
   $83 = (__Znwj(72)|0);
   __THREW__ = 0;
   invoke_viiii(806,($83|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $84 = __THREW__; __THREW__ = 0;
   $85 = $84&1;
   if (!($85)) {
    HEAP32[$descriptor>>2] = $83;
    break L12;
   }
   $86 = ___cxa_find_matching_catch()|0;
   $87 = tempRet0;
   __ZdlPv($83);
   $$0 = $87;$$01 = $86;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 17: case 1:  {
   $37 = (__Znwj(48)|0);
   __THREW__ = 0;
   invoke_viiiii(797,($37|0),($stream|0),($35|0),($$lcssa19|0),($$lcssa21|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if (!($39)) {
    HEAP32[$descriptor>>2] = $37;
    break L12;
   }
   $40 = ___cxa_find_matching_catch()|0;
   $41 = tempRet0;
   __ZdlPv($37);
   $$0 = $41;$$01 = $40;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 4:  {
   $62 = (__Znwj(52)|0);
   __THREW__ = 0;
   invoke_viiii(802,($62|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if (!($64)) {
    HEAP32[$descriptor>>2] = $62;
    break L12;
   }
   $65 = ___cxa_find_matching_catch()|0;
   $66 = tempRet0;
   __ZdlPv($62);
   $$0 = $66;$$01 = $65;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 14:  {
   $47 = (__Znwj(24)|0);
   __THREW__ = 0;
   invoke_viiii(799,($47|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if (!($49)) {
    HEAP32[$descriptor>>2] = $47;
    break L12;
   }
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   __ZdlPv($47);
   $$0 = $51;$$01 = $50;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 10:  {
   $78 = (__Znwj(28)|0);
   __THREW__ = 0;
   invoke_viiii(805,($78|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if (!($80)) {
    HEAP32[$descriptor>>2] = $78;
    break L12;
   }
   $81 = ___cxa_find_matching_catch()|0;
   $82 = tempRet0;
   __ZdlPv($78);
   $$0 = $82;$$01 = $81;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 3:  {
   $57 = (__Znwj(56)|0);
   __THREW__ = 0;
   invoke_viiii(801,($57|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $58 = __THREW__; __THREW__ = 0;
   $59 = $58&1;
   if (!($59)) {
    HEAP32[$descriptor>>2] = $57;
    break L12;
   }
   $60 = ___cxa_find_matching_catch()|0;
   $61 = tempRet0;
   __ZdlPv($57);
   $$0 = $61;$$01 = $60;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 15:  {
   $52 = (__Znwj(24)|0);
   __THREW__ = 0;
   invoke_viiii(800,($52|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if (!($54)) {
    HEAP32[$descriptor>>2] = $52;
    break L12;
   }
   $55 = ___cxa_find_matching_catch()|0;
   $56 = tempRet0;
   __ZdlPv($52);
   $$0 = $56;$$01 = $55;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 16: case 2:  {
   $42 = (__Znwj(56)|0);
   __THREW__ = 0;
   invoke_viiiii(798,($42|0),($stream|0),($35|0),($$lcssa19|0),($$lcssa21|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    HEAP32[$descriptor>>2] = $42;
    break L12;
   }
   $45 = ___cxa_find_matching_catch()|0;
   $46 = tempRet0;
   __ZdlPv($42);
   $$0 = $46;$$01 = $45;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 5:  {
   $67 = (__Znwj(40)|0);
   __THREW__ = 0;
   invoke_viiii(803,($67|0),($stream|0),($$lcssa19|0),($$lcssa21|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    HEAP32[$descriptor>>2] = $67;
    break L12;
   }
   $70 = ___cxa_find_matching_catch()|0;
   $71 = tempRet0;
   __ZdlPv($67);
   $$0 = $71;$$01 = $70;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  case 6:  {
   $72 = ($$lcssa21|0)==(1);
   if (!($72)) {
    $$02 = -10;
    STACKTOP = sp;return ($$02|0);
   }
   $73 = (__Znwj(24)|0);
   __THREW__ = 0;
   invoke_vii(804,($73|0),($$lcssa19|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if (!($75)) {
    HEAP32[$descriptor>>2] = $73;
    break L12;
   }
   $76 = ___cxa_find_matching_catch()|0;
   $77 = tempRet0;
   __ZdlPv($73);
   $$0 = $77;$$01 = $76;
   ___resumeException($$01|0);
   // unreachable;
   break;
  }
  default: {
   $88 = (__Znwj(40)|0);
   __THREW__ = 0;
   invoke_viiiii(807,($88|0),($stream|0),($35|0),($$lcssa19|0),($$lcssa21|0));
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if (!($90)) {
    HEAP32[$descriptor>>2] = $88;
    break L12;
   }
   $91 = ___cxa_find_matching_catch()|0;
   $92 = tempRet0;
   __ZdlPv($88);
   $$0 = $92;$$01 = $91;
   ___resumeException($$01|0);
   // unreachable;
  }
  }
 } while(0);
 $93 = HEAP32[$stream>>2]|0;
 $94 = ((($93)) + 24|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $offset;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (_i64Add(($$lcssa21|0),0,($$lcssa19|0),0)|0);
 $103 = tempRet0;
 $104 = (_i64Add(($102|0),($103|0),($98|0),($101|0))|0);
 $105 = tempRet0;
 (FUNCTION_TABLE_iiii[$95 & 1023]($stream,$104,$105)|0);
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZN12AP4_SmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1936549988,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (4728);
  $8 = ((($4)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(794,($stream|0),($8|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = ((($4)) + 38|0);
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($11|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __ZdlPv($4);
 ___resumeException($14|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_SmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 38|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN12AP4_SmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,4816,$5,0,0);
 return 0;
}
function __ZN12AP4_SmhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN20AP4_ObjectDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$sink$i$i = 0, $$tr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $bits = 0, $descriptor = 0, $item$01$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $offset = 0, $start = 0, $url = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 20|0;
 $url_length = sp + 280|0;
 $url = sp + 24|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 $0 = $tag&255;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,$0,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (4832);
 $1 = ((($this)) + 24|0);
 __THREW__ = 0;
 invoke_vi(790,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $$1 = $34;$$12 = $35;
  ___resumeException($$1|0);
  // unreachable;
 }
 $4 = ((($this)) + 32|0);
 HEAP32[$4>>2] = (5000);
 $5 = ((($this)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$stream>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 (invoke_iii($10|0,($stream|0),($start|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 11;
  } else {
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($bits|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 11;
   } else {
    $15 = HEAP16[$bits>>1]|0;
    $16 = ($15&65535) >>> 6;
    $17 = ((($this)) + 20|0);
    HEAP16[$17>>1] = $16;
    $18 = ((($this)) + 22|0);
    $19 = ($15&65535) >>> 5;
    $$tr = $19&255;
    $20 = $$tr & 1;
    HEAP8[$18>>0] = $20;
    $21 = $19 & 1;
    $22 = ($21<<16>>16)==(0);
    if (!($22)) {
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($url_length|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 11;
      break;
     }
     $25 = HEAP8[$url_length>>0]|0;
     $26 = $25&255;
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($url|0),($26|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = HEAP8[$url_length>>0]|0;
     $30 = $29&255;
     $31 = (($url) + ($30)|0);
     HEAP8[$31>>0] = 0;
     __THREW__ = 0;
     (invoke_iii(791,($1|0),($url|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 11;
      break;
     }
    }
    $40 = HEAP32[$stream>>2]|0;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    __THREW__ = 0;
    (invoke_iii($42|0,($stream|0),($offset|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if ($44) {
     label = 11;
    } else {
     __THREW__ = 0;
     $45 = (invoke_ii(752,40)|0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      label = 11;
     } else {
      $48 = $offset;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = (($48) + 4)|0;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      $54 = $start;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $57 = (($54) + 4)|0;
      $58 = $57;
      $59 = HEAP32[$58>>2]|0;
      $60 = (_i64Subtract(($50|0),($53|0),($56|0),($59|0))|0);
      $61 = tempRet0;
      $62 = (($payload_size) - ($60))|0;
      __THREW__ = 0;
      invoke_viiiiii(808,($45|0),($stream|0),($50|0),($53|0),($62|0),0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       $80 = ___cxa_find_matching_catch()|0;
       $81 = tempRet0;
       __ZdlPv($45);
       $$0 = $80;$$01 = $81;
       break;
      }
      HEAP32[$descriptor>>2] = 0;
      while(1) {
       __THREW__ = 0;
       $65 = (invoke_iii(795,($45|0),($descriptor|0))|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 10;
        break;
       }
       $68 = ($65|0)==(0);
       if (!($68)) {
        break;
       }
       $69 = HEAP32[$descriptor>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_ii(752,12)|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 10;
        break;
       }
       HEAP32[$70>>2] = $69;
       $73 = ((($70)) + 4|0);
       HEAP32[$73>>2] = 0;
       $74 = ((($70)) + 8|0);
       HEAP32[$74>>2] = 0;
       $75 = HEAP32[$7>>2]|0;
       $76 = ($75|0)==(0|0);
       if ($76) {
        HEAP32[$6>>2] = $70;
        HEAP32[$7>>2] = $70;
        HEAP32[$73>>2] = 0;
        $$sink$i$i = 0;
       } else {
        HEAP32[$73>>2] = 0;
        $77 = ((($75)) + 4|0);
        HEAP32[$77>>2] = $70;
        HEAP32[$7>>2] = $70;
        $$sink$i$i = $75;
       }
       HEAP32[$74>>2] = $$sink$i$i;
       $78 = HEAP32[$5>>2]|0;
       $79 = (($78) + 1)|0;
       HEAP32[$5>>2] = $79;
      }
      if ((label|0) == 10) {
       $36 = ___cxa_find_matching_catch()|0;
       $37 = tempRet0;
       $lpad$phi$index = $36;$lpad$phi$index2 = $37;
       label = 12;
       break;
      }
      $82 = HEAP32[$45>>2]|0;
      $83 = ((($82)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      __THREW__ = 0;
      invoke_vi($84|0,($45|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       label = 11;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $lpad$phi$index = $38;$lpad$phi$index2 = $39;
  label = 12;
 }
 if ((label|0) == 12) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 HEAP32[$4>>2] = (5000);
 $87 = HEAP32[$6>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $item$01$i$i = $87;
  while(1) {
   $89 = ((($item$01$i$i)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   __ZdlPv($item$01$i$i);
   $91 = ($90|0)==(0|0);
   if ($91) {
    break;
   } else {
    $item$01$i$i = $90;
   }
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $94 = ___cxa_find_matching_catch(0|0)|0;
  $95 = tempRet0;
  ___clang_call_terminate($94);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN20AP4_ObjectDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(114,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZNK20AP4_ObjectDescriptor17FindSubDescriptorEh($this,$tag) {
 $this = $this|0;
 $tag = $tag|0;
 var $$0$i = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i = 0;
 var $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (5016);
 $1 = ((($0)) + 4|0);
 HEAP8[$1>>0] = $tag;
 $2 = ((($this)) + 40|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $4 = HEAP32[$item$01$i>>2]|0;
 $5 = (__ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor($0,$4)|0);
 $6 = ($5|0)==(0);
 L4: do {
  if ($6) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $7 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$7>>2]|0;
    $8 = ($item$0$i|0)==(0|0);
    if ($8) {
     $$0$i = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $9 = ((($$pre)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$item$0$i>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($0,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0$i|0);
  }
 } while(0);
 $14 = HEAP32[$$lcssa>>2]|0;
 $$0$i = $14;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZN20AP4_ObjectDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 20|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 6;
 $5 = ((($this)) + 22|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = $7 ? 32 : 0;
 $9 = $4 | $8;
 $10 = $9 | 31;
 $11 = $10&65535;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP8[$5>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = ((($this)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17&255;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$18)|0);
  $19 = ((($this)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$16>>2]|0;
  (__ZN14AP4_ByteStream5WriteEPKvj($stream,$20,$21)|0);
 }
 HEAP32[$0>>2] = (5040);
 $22 = ((($0)) + 4|0);
 HEAP32[$22>>2] = $stream;
 $23 = ((($this)) + 40|0);
 $item$01$i = HEAP32[$23>>2]|0;
 $24 = ($item$01$i|0)==(0|0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$item$01$i>>2]|0;
 (__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($0,$25)|0);
 $26 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$26>>2]|0;
 $27 = ($item$0$i1|0)==(0|0);
 if ($27) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $28 = ((($$pre)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$29 & 1023]($0,$30)|0);
  $31 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$31>>2]|0;
  $32 = ($item$0$i|0)==(0|0);
  if ($32) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN20AP4_ObjectDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0;
 var $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,5056,$5,$8,0);
 $9 = HEAP32[$inspector>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,12032,$14,0,0);
 $15 = ((($this)) + 22|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  $18 = HEAP32[$inspector>>2]|0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($this)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_viiii[$20 & 1023]($inspector,5080,$22,0);
 }
 HEAP32[$0>>2] = (5096);
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $inspector;
 $24 = ((($this)) + 40|0);
 $item$01$i = HEAP32[$24>>2]|0;
 $25 = ($item$01$i|0)==(0|0);
 if (!($25)) {
  $26 = HEAP32[$item$01$i>>2]|0;
  (__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($0,$26)|0);
  $27 = ((($item$01$i)) + 4|0);
  $item$0$i1 = HEAP32[$27>>2]|0;
  $28 = ($item$0$i1|0)==(0|0);
  if (!($28)) {
   $item$0$i2 = $item$0$i1;
   while(1) {
    $$pre = HEAP32[$0>>2]|0;
    $29 = ((($$pre)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$item$0$i2>>2]|0;
    (FUNCTION_TABLE_iii[$30 & 1023]($0,$31)|0);
    $32 = ((($item$0$i2)) + 4|0);
    $item$0$i = HEAP32[$32>>2]|0;
    $33 = ($item$0$i|0)==(0|0);
    if ($33) {
     break;
    } else {
     $item$0$i2 = $item$0$i;
    }
   }
  }
 }
 $34 = HEAP32[$inspector>>2]|0;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_vi[$36 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN20AP4_ObjectDescriptor16AddSubDescriptorEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 HEAP32[$0>>2] = $descriptor;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = ((($this)) + 40|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$3>>2] = $0;
  HEAP32[$1>>2] = 0;
  $$sink$i$i = 0;
 } else {
  HEAP32[$1>>2] = 0;
  $6 = ((($4)) + 4|0);
  HEAP32[$6>>2] = $0;
  HEAP32[$3>>2] = $0;
  $$sink$i$i = $4;
 }
 HEAP32[$2>>2] = $$sink$i$i;
 $8 = ((($this)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($descriptor)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($descriptor)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12))|0;
 $16 = ((($this)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + ($17))|0;
 HEAP32[$16>>2] = $18;
 $19 = (__ZN14AP4_Expandable13MinHeaderSizeEj($18)|0);
 $20 = ((($this)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19>>>0)>($21>>>0);
 if (!($22)) {
  return 0;
 }
 HEAP32[$20>>2] = $19;
 return 0;
}
function __ZN27AP4_InitialObjectDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $$sink$i$i = 0, $$tr = 0, $$tr2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $descriptor = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $offset = 0, $start = 0, $url = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 20|0;
 $url_length = sp + 280|0;
 $url = sp + 24|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 $0 = $tag&255;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,$0,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (4832);
 $1 = ((($this)) + 20|0);
 HEAP16[$1>>1] = 0;
 $2 = ((($this)) + 22|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 24|0);
 __ZN10AP4_StringC2Ev($3);
 $4 = ((($this)) + 32|0);
 HEAP32[$4>>2] = (5000);
 $5 = ((($this)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 44|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$this>>2] = (4872);
 $8 = ((($this)) + 49|0);
 $9 = ((($this)) + 50|0);
 $10 = ((($this)) + 51|0);
 $11 = ((($this)) + 52|0);
 $12 = ((($this)) + 53|0);
 ;HEAP8[$8>>0]=0|0;HEAP8[$8+1>>0]=0|0;HEAP8[$8+2>>0]=0|0;HEAP8[$8+3>>0]=0|0;HEAP8[$8+4>>0]=0|0;
 $13 = HEAP32[$stream>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 __THREW__ = 0;
 (invoke_iii($15|0,($stream|0),($start|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if ($17) {
   label = 9;
  } else {
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($bits|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 9;
   } else {
    $20 = HEAP16[$bits>>1]|0;
    $21 = ($20&65535) >>> 6;
    HEAP16[$1>>1] = $21;
    $22 = ($20&65535) >>> 5;
    $$tr = $22&255;
    $23 = $$tr & 1;
    HEAP8[$2>>0] = $23;
    $24 = ((($this)) + 48|0);
    $25 = ($20&65535) >>> 4;
    $$tr2 = $25&255;
    $26 = $$tr2 & 1;
    HEAP8[$24>>0] = $26;
    $27 = ($23<<24>>24)==(0);
    __THREW__ = 0;
    if ($27) {
     (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$8)|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      label = 9;
      break;
     }
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($9|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 9;
      break;
     }
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($10|0))|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 9;
      break;
     }
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($11|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 9;
      break;
     }
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($12|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 9;
      break;
     }
    } else {
     (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$url_length)|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 9;
      break;
     }
     $30 = HEAP8[$url_length>>0]|0;
     $31 = $30&255;
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($url|0),($31|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 9;
      break;
     }
     $34 = HEAP8[$url_length>>0]|0;
     $35 = $34&255;
     $36 = (($url) + ($35)|0);
     HEAP8[$36>>0] = 0;
     __THREW__ = 0;
     (invoke_iii(791,($3|0),($url|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 9;
      break;
     }
    }
    $53 = HEAP32[$stream>>2]|0;
    $54 = ((($53)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    __THREW__ = 0;
    (invoke_iii($55|0,($stream|0),($offset|0))|0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     label = 9;
    } else {
     __THREW__ = 0;
     $58 = (invoke_ii(752,40)|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 9;
     } else {
      $61 = $offset;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($61) + 4)|0;
      $65 = $64;
      $66 = HEAP32[$65>>2]|0;
      $67 = $start;
      $68 = $67;
      $69 = HEAP32[$68>>2]|0;
      $70 = (($67) + 4)|0;
      $71 = $70;
      $72 = HEAP32[$71>>2]|0;
      $73 = (_i64Subtract(($63|0),($66|0),($69|0),($72|0))|0);
      $74 = tempRet0;
      $75 = (($payload_size) - ($73))|0;
      __THREW__ = 0;
      invoke_viiiiii(808,($58|0),($stream|0),($63|0),($66|0),($75|0),0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       __ZdlPv($58);
       $$0 = $93;$$01 = $94;
       break;
      }
      HEAP32[$descriptor>>2] = 0;
      while(1) {
       __THREW__ = 0;
       $78 = (invoke_iii(795,($58|0),($descriptor|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 8;
        break;
       }
       $81 = ($78|0)==(0);
       if (!($81)) {
        break;
       }
       $82 = HEAP32[$descriptor>>2]|0;
       __THREW__ = 0;
       $83 = (invoke_ii(752,12)|0);
       $84 = __THREW__; __THREW__ = 0;
       $85 = $84&1;
       if ($85) {
        label = 8;
        break;
       }
       HEAP32[$83>>2] = $82;
       $86 = ((($83)) + 4|0);
       HEAP32[$86>>2] = 0;
       $87 = ((($83)) + 8|0);
       HEAP32[$87>>2] = 0;
       $88 = HEAP32[$7>>2]|0;
       $89 = ($88|0)==(0|0);
       if ($89) {
        HEAP32[$6>>2] = $83;
        HEAP32[$7>>2] = $83;
        HEAP32[$86>>2] = 0;
        $$sink$i$i = 0;
       } else {
        HEAP32[$86>>2] = 0;
        $90 = ((($88)) + 4|0);
        HEAP32[$90>>2] = $83;
        HEAP32[$7>>2] = $83;
        $$sink$i$i = $88;
       }
       HEAP32[$87>>2] = $$sink$i$i;
       $91 = HEAP32[$5>>2]|0;
       $92 = (($91) + 1)|0;
       HEAP32[$5>>2] = $92;
      }
      if ((label|0) == 8) {
       $39 = ___cxa_find_matching_catch()|0;
       $40 = tempRet0;
       $lpad$phi$index = $39;$lpad$phi$index2 = $40;
       label = 10;
       break;
      }
      $95 = HEAP32[$58>>2]|0;
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      __THREW__ = 0;
      invoke_vi($97|0,($58|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       label = 9;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $lpad$phi$index = $41;$lpad$phi$index2 = $42;
  label = 10;
 }
 if ((label|0) == 10) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 __THREW__ = 0;
 invoke_vi(114,($this|0));
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 if ($101) {
  $102 = ___cxa_find_matching_catch(0|0)|0;
  $103 = tempRet0;
  ___clang_call_terminate($102);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN27AP4_InitialObjectDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 20|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 6;
 $5 = ((($this)) + 22|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = $7 ? 32 : 0;
 $9 = ((($this)) + 48|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 $12 = $11 ? 16 : 0;
 $13 = $4 | $8;
 $14 = $13 | $12;
 $15 = $14 | 15;
 $16 = $15&65535;
 $17 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP8[$5>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $27 = ((($this)) + 49|0);
  $28 = HEAP8[$27>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$28)|0);
  $29 = ((($this)) + 50|0);
  $30 = HEAP8[$29>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$30)|0);
  $31 = ((($this)) + 51|0);
  $32 = HEAP8[$31>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$32)|0);
  $33 = ((($this)) + 52|0);
  $34 = HEAP8[$33>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$34)|0);
  $35 = ((($this)) + 53|0);
  $36 = HEAP8[$35>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$36)|0);
 } else {
  $21 = ((($this)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22&255;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$23)|0);
  $24 = ((($this)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$21>>2]|0;
  (__ZN14AP4_ByteStream5WriteEPKvj($stream,$25,$26)|0);
 }
 HEAP32[$0>>2] = (5040);
 $37 = ((($0)) + 4|0);
 HEAP32[$37>>2] = $stream;
 $38 = ((($this)) + 40|0);
 $item$01$i = HEAP32[$38>>2]|0;
 $39 = ($item$01$i|0)==(0|0);
 if ($39) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$item$01$i>>2]|0;
 (__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($0,$40)|0);
 $41 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$41>>2]|0;
 $42 = ($item$0$i1|0)==(0|0);
 if ($42) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $43 = ((($$pre)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$44 & 1023]($0,$45)|0);
  $46 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$46>>2]|0;
  $47 = ($item$0$i|0)==(0|0);
  if ($47) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN27AP4_InitialObjectDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,5112,$5,$8,0);
 $9 = HEAP32[$inspector>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,12032,$14,0,0);
 $15 = ((($this)) + 22|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $23 = HEAP32[$inspector>>2]|0;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($this)) + 48|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  FUNCTION_TABLE_viiiii[$25 & 1023]($inspector,5136,$28,0,2);
  $29 = HEAP32[$inspector>>2]|0;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($this)) + 49|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  FUNCTION_TABLE_viiiii[$31 & 1023]($inspector,5176,$34,0,1);
  $35 = HEAP32[$inspector>>2]|0;
  $36 = ((($35)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this)) + 50|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  FUNCTION_TABLE_viiiii[$37 & 1023]($inspector,5200,$40,0,1);
  $41 = HEAP32[$inspector>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($this)) + 51|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  FUNCTION_TABLE_viiiii[$43 & 1023]($inspector,5224,$46,0,1);
  $47 = HEAP32[$inspector>>2]|0;
  $48 = ((($47)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($this)) + 52|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  FUNCTION_TABLE_viiiii[$49 & 1023]($inspector,5248,$52,0,1);
  $53 = HEAP32[$inspector>>2]|0;
  $54 = ((($53)) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($this)) + 53|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  FUNCTION_TABLE_viiiii[$55 & 1023]($inspector,5272,$58,0,1);
 } else {
  $18 = HEAP32[$inspector>>2]|0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($this)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_viiii[$20 & 1023]($inspector,5080,$22,0);
 }
 HEAP32[$0>>2] = (5096);
 $59 = ((($0)) + 4|0);
 HEAP32[$59>>2] = $inspector;
 $60 = ((($this)) + 40|0);
 $item$01$i = HEAP32[$60>>2]|0;
 $61 = ($item$01$i|0)==(0|0);
 if ($61) {
  $70 = HEAP32[$inspector>>2]|0;
  $71 = ((($70)) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vi[$72 & 1023]($inspector);
  STACKTOP = sp;return 0;
 }
 $62 = HEAP32[$item$01$i>>2]|0;
 (__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($0,$62)|0);
 $63 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$63>>2]|0;
 $64 = ($item$0$i1|0)==(0|0);
 if ($64) {
  $70 = HEAP32[$inspector>>2]|0;
  $71 = ((($70)) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vi[$72 & 1023]($inspector);
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $65 = ((($$pre)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$66 & 1023]($0,$67)|0);
  $68 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$68>>2]|0;
  $69 = ($item$0$i|0)==(0|0);
  if ($69) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 $70 = HEAP32[$inspector>>2]|0;
 $71 = ((($70)) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 FUNCTION_TABLE_vi[$72 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN20AP4_ObjectDescriptorD2Ev($this) {
 $this = $this|0;
 var $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4832);
 $0 = ((($this)) + 32|0);
 $1 = ((($this)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if (!($3)) {
   $item$01$i = $2;
   while(1) {
    $4 = ((($item$01$i)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$item$01$i>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $8 = HEAP32[$6>>2]|0;
     $9 = ((($8)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_vi($10|0,($6|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break;
     }
    }
    __ZdlPv($item$01$i);
    $13 = ($5|0)==(0|0);
    if ($13) {
     break L1;
    } else {
     $item$01$i = $5;
    }
   }
   $19 = ___cxa_find_matching_catch()|0;
   $20 = tempRet0;
   HEAP32[$0>>2] = (5000);
   $21 = HEAP32[$1>>2]|0;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $item$01$i$i3 = $21;
    while(1) {
     $23 = ((($item$01$i$i3)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     __ZdlPv($item$01$i$i3);
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     } else {
      $item$01$i$i3 = $24;
     }
    }
   }
   $28 = ((($this)) + 36|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($this)) + 44|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$1>>2] = 0;
   $30 = ((($this)) + 24|0);
   __THREW__ = 0;
   invoke_vi(792,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   } else {
    $$1 = $20;$$12 = $19;
    ___resumeException($$12|0);
    // unreachable;
   }
  }
 } while(0);
 $14 = ((($this)) + 44|0);
 $15 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (5000);
 HEAP32[$15>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$1>>2] = 0;
 $16 = ((($this)) + 24|0);
 __THREW__ = 0;
 invoke_vi(792,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  return;
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $$1 = $27;$$12 = $26;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($descriptor)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&255;
 $3 = ((($this)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $not$ = ($2<<24>>24)!=($4<<24>>24);
 $5 = $not$ << 31 >> 31;
 return ($5|0);
}
function __ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$descriptor>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$2 & 1023]($descriptor,$4)|0);
 return ($5|0);
}
function __ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$descriptor>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 1023]($descriptor,$4)|0);
 return 0;
}
function __ZN27AP4_InitialObjectDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(114,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN27AP4_DescriptorListInspectorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN24AP4_DescriptorListWriterD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN20AP4_DescriptorFinderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListI14AP4_DescriptorED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5000);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListI14AP4_DescriptorED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5000);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN10AP4_StringC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 5584;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN10AP4_StringC2EPKc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  HEAP32[$this>>2] = 5584;
  $1 = ((($this)) + 4|0);
  HEAP32[$1>>2] = 0;
  return;
 } else {
  $2 = (_strlen(($s|0))|0);
  $3 = ((($this)) + 4|0);
  HEAP32[$3>>2] = $2;
  $4 = (($2) + 1)|0;
  $5 = (__Znaj($4)|0);
  HEAP32[$this>>2] = $5;
  _memcpy(($5|0),($s|0),($4|0))|0;
  return;
 }
}
function __ZN10AP4_StringC2EPKcj($this,$s,$size) {
 $this = $this|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size) + 1)|0;
 $1 = (__Znaj($0)|0);
 HEAP32[$this>>2] = $1;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $size;
 $3 = (($1) + ($size)|0);
 HEAP8[$3>>0] = 0;
 _memcpy(($1|0),($s|0),($size|0))|0;
 return;
}
function __ZN10AP4_StringC2ERKS_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (($1) + 1)|0;
 $4 = (__Znaj($3)|0);
 HEAP32[$this>>2] = $4;
 $5 = HEAP32[$s>>2]|0;
 _memcpy(($4|0),($5|0),($3|0))|0;
 return;
}
function __ZN10AP4_StringC2Ej($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $exitcond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = (($size) + 1)|0;
 $2 = (__Znaj($1)|0);
 HEAP32[$this>>2] = $2;
 $3 = ($1|0)==(0);
 if ($3) {
  return;
 }
 HEAP8[$2>>0] = 0;
 $exitcond3 = ($size|0)==(0);
 if ($exitcond3) {
  return;
 } else {
  $5 = 1;
 }
 while(1) {
  $$pre = HEAP32[$this>>2]|0;
  $4 = (($$pre) + ($5)|0);
  HEAP8[$4>>0] = 0;
  $6 = (($5) + 1)|0;
  $exitcond = ($6|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $5 = $6;
  }
 }
 return;
}
function __ZN10AP4_StringD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(5584|0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 | $2;
 if ($or$cond) {
  return;
 }
 __ZdaPv($0);
 return;
}
function __ZN10AP4_StringaSEPKc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ($1|0)==(5584|0);
  $3 = ($1|0)==(0|0);
  $or$cond = $2 | $3;
  if (!($or$cond)) {
   __ZdaPv($1);
  }
  HEAP32[$this>>2] = 5584;
  $4 = ((($this)) + 4|0);
  HEAP32[$4>>2] = 0;
  return ($this|0);
 } else {
  $5 = (_strlen(($s|0))|0);
  $6 = HEAP32[$this>>2]|0;
  $7 = ($6|0)==(5584|0);
  $8 = ($6|0)==(0|0);
  $or$cond$i = $7 | $8;
  if (!($or$cond$i)) {
   __ZdaPv($6);
  }
  $9 = ((($this)) + 4|0);
  HEAP32[$9>>2] = $5;
  $10 = (($5) + 1)|0;
  $11 = (__Znaj($10)|0);
  HEAP32[$this>>2] = $11;
  _memcpy(($11|0),($s|0),($5|0))|0;
  $12 = (($11) + ($5)|0);
  HEAP8[$12>>0] = 0;
  return ($this|0);
 }
 return (0)|0;
}
function __ZN10AP4_String6AssignEPKcj($this,$s,$size) {
 $this = $this|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(5584|0);
 $2 = ($0|0)==(0|0);
 $or$cond = $1 | $2;
 if (!($or$cond)) {
  __ZdaPv($0);
 }
 $3 = ((($this)) + 4|0);
 HEAP32[$3>>2] = $size;
 $4 = (($size) + 1)|0;
 $5 = (__Znaj($4)|0);
 HEAP32[$this>>2] = $5;
 _memcpy(($5|0),($s|0),($size|0))|0;
 $6 = (($5) + ($size)|0);
 HEAP8[$6>>0] = 0;
 return;
}
function __ZN11AP4_SdpAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1935962144,$size);
 HEAP32[$this>>2] = (5600);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $$0 = $14;$$01 = $15;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = (($size) + -8)|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = (($size) + -7)|0;
 __THREW__ = 0;
 $6 = (invoke_ii(787,($5|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($6|0),($3|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = (($6) + ($3)|0);
   HEAP8[$11>>0] = 0;
   __THREW__ = 0;
   (invoke_iii(791,($0|0),($6|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __ZdaPv($6);
    return;
   }
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  $$0 = $16;$$01 = $17;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN11AP4_SdpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $$neg1 = (($7) + -8)|0;
 $9 = ($$neg1|0)==($8|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (($$neg1) - ($8))|0;
 $padding$02 = $10;
 while(1) {
  $11 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $11;
  }
 }
 return ($$0|0);
}
function __ZN11AP4_SdpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,25640,$4,0);
 return 0;
}
function __ZN11AP4_SdpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5600);
 $0 = ((($this)) + 36|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN11AP4_SdpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5600);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_MfroAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1835430511,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (5696);
 $8 = ((($4)) + 36|0);
 HEAP32[$8>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($8|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MfroAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return ($2|0);
}
function __ZN12AP4_MfroAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,5784,$4,0,0);
 return 0;
}
function __ZN12AP4_MfroAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __Z19AP4_BytesToDoubleBEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$bytes>>0]|0;
 $1 = $0&255;
 $2 = (_bitshift64Shl(($1|0),0,56)|0);
 $3 = tempRet0;
 $4 = ((($bytes)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (_bitshift64Shl(($6|0),0,48)|0);
 $8 = tempRet0;
 $9 = $7 | $2;
 $10 = $8 | $3;
 $11 = ((($bytes)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,40)|0);
 $15 = tempRet0;
 $16 = $9 | $14;
 $17 = $10 | $15;
 $18 = ((($bytes)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($bytes)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (_bitshift64Shl(($24|0),0,24)|0);
 $26 = tempRet0;
 $27 = $16 | $25;
 $28 = $21 | $26;
 $29 = ((($bytes)) + 5|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $27 | $32;
 $35 = $28 | $33;
 $36 = ((($bytes)) + 6|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = (_bitshift64Shl(($38|0),0,8)|0);
 $40 = tempRet0;
 $41 = $34 | $39;
 $42 = $35 | $40;
 $43 = ((($bytes)) + 7|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $41 | $45;
 HEAP32[tempDoublePtr>>2] = $46;HEAP32[tempDoublePtr+4>>2] = $42;$47 = +HEAPF64[tempDoublePtr>>3];
 return (+$47);
}
function __Z19AP4_BytesToUInt64BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$bytes>>0]|0;
 $1 = $0&255;
 $2 = (_bitshift64Shl(($1|0),0,56)|0);
 $3 = tempRet0;
 $4 = ((($bytes)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (_bitshift64Shl(($6|0),0,48)|0);
 $8 = tempRet0;
 $9 = $7 | $2;
 $10 = $8 | $3;
 $11 = ((($bytes)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,40)|0);
 $15 = tempRet0;
 $16 = $9 | $14;
 $17 = $10 | $15;
 $18 = ((($bytes)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($bytes)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (_bitshift64Shl(($24|0),0,24)|0);
 $26 = tempRet0;
 $27 = $16 | $25;
 $28 = $21 | $26;
 $29 = ((($bytes)) + 5|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $27 | $32;
 $35 = $28 | $33;
 $36 = ((($bytes)) + 6|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = (_bitshift64Shl(($38|0),0,8)|0);
 $40 = tempRet0;
 $41 = $34 | $39;
 $42 = $35 | $40;
 $43 = ((($bytes)) + 7|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $41 | $45;
 tempRet0 = ($42);
 return ($46|0);
}
function __Z21AP4_BytesFromDoubleBEPhd($bytes,$value) {
 $bytes = $bytes|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $value;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),56)|0);
 $3 = tempRet0;
 $4 = $2&255;
 HEAP8[$bytes>>0] = $4;
 $5 = (_bitshift64Lshr(($0|0),($1|0),48)|0);
 $6 = tempRet0;
 $7 = $5&255;
 $8 = ((($bytes)) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($bytes)) + 2|0);
 HEAP8[$12>>0] = $11;
 $13 = $1&255;
 $14 = ((($bytes)) + 3|0);
 HEAP8[$14>>0] = $13;
 $15 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
 $16 = tempRet0;
 $17 = $15&255;
 $18 = ((($bytes)) + 4|0);
 HEAP8[$18>>0] = $17;
 $19 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $20 = tempRet0;
 $21 = $19&255;
 $22 = ((($bytes)) + 5|0);
 HEAP8[$22>>0] = $21;
 $23 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
 $24 = tempRet0;
 $25 = $23&255;
 $26 = ((($bytes)) + 6|0);
 HEAP8[$26>>0] = $25;
 $27 = $0&255;
 $28 = ((($bytes)) + 7|0);
 HEAP8[$28>>0] = $27;
 return;
}
function __Z21AP4_BytesFromUInt64BEPhy($bytes,$0,$1) {
 $bytes = $bytes|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_bitshift64Lshr(($0|0),($1|0),56)|0);
 $3 = tempRet0;
 $4 = $2&255;
 HEAP8[$bytes>>0] = $4;
 $5 = (_bitshift64Lshr(($0|0),($1|0),48)|0);
 $6 = tempRet0;
 $7 = $5&255;
 $8 = ((($bytes)) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($bytes)) + 2|0);
 HEAP8[$12>>0] = $11;
 $13 = $1&255;
 $14 = ((($bytes)) + 3|0);
 HEAP8[$14>>0] = $13;
 $15 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
 $16 = tempRet0;
 $17 = $15&255;
 $18 = ((($bytes)) + 4|0);
 HEAP8[$18>>0] = $17;
 $19 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
 $20 = tempRet0;
 $21 = $19&255;
 $22 = ((($bytes)) + 5|0);
 HEAP8[$22>>0] = $21;
 $23 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
 $24 = tempRet0;
 $25 = $23&255;
 $26 = ((($bytes)) + 6|0);
 HEAP8[$26>>0] = $25;
 $27 = $0&255;
 $28 = ((($bytes)) + 7|0);
 HEAP8[$28>>0] = $27;
 return;
}
function __Z23AP4_DurationMsFromUnitsyj($0,$1,$units_per_second) {
 $0 = $0|0;
 $1 = $1|0;
 $units_per_second = $units_per_second|0;
 var $$0 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($units_per_second|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (+($0>>>0)) + (4294967296.0*(+($1>>>0)));
 $4 = $3 * 1000.0;
 $5 = (+($units_per_second>>>0));
 $6 = $4 / $5;
 $7 = (~~(($6))>>>0);
 $$0 = $7;
 return ($$0|0);
}
function __Z15AP4_ConvertTimeyjj($0,$1,$from_time_scale,$to_time_scale) {
 $0 = $0|0;
 $1 = $1|0;
 $from_time_scale = $from_time_scale|0;
 $to_time_scale = $to_time_scale|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($from_time_scale|0)==(0);
 if ($2) {
  $11 = 0;$12 = 0;
  tempRet0 = ($11);
  return ($12|0);
 }
 $3 = (+($to_time_scale>>>0));
 $4 = (+($from_time_scale>>>0));
 $5 = $3 / $4;
 $6 = (+($0>>>0)) + (4294967296.0*(+($1>>>0)));
 $7 = $6 * $5;
 $8 = $7 + 0.5;
 $9 = (~~$8)>>>0;
 $10 = +Math_abs($8) >= 1.0 ? $8 > 0.0 ? (~~+Math_min(+Math_floor($8 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($8 - +(~~$8 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $11 = $10;$12 = $9;
 tempRet0 = ($11);
 return ($12|0);
}
function __Z19AP4_FormatFourCharsPcj($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $value >>> 24;
 $1 = $0&255;
 HEAP8[$str>>0] = $1;
 $2 = $value >>> 16;
 $3 = $2&255;
 $4 = ((($str)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $value >>> 8;
 $6 = $5&255;
 $7 = ((($str)) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $value&255;
 $9 = ((($str)) + 3|0);
 HEAP8[$9>>0] = $8;
 $10 = ((($str)) + 4|0);
 HEAP8[$10>>0] = 0;
 return;
}
function __Z28AP4_FormatFourCharsPrintablePcj($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $value >>> 24;
 $1 = $0&255;
 HEAP8[$str>>0] = $1;
 $2 = $value >>> 16;
 $3 = $2&255;
 $4 = ((($str)) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $value >>> 8;
 $6 = $5&255;
 $7 = ((($str)) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $value&255;
 $9 = ((($str)) + 3|0);
 HEAP8[$9>>0] = $8;
 $10 = ((($str)) + 4|0);
 HEAP8[$10>>0] = 0;
 $11 = ($1<<24>>24)<(32);
 $12 = ($1<<24>>24)==(127);
 $or$cond = $11 | $12;
 if ($or$cond) {
  HEAP8[$str>>0] = 46;
 }
 $13 = ($3<<24>>24)<(32);
 $14 = ($3<<24>>24)==(127);
 $or$cond$1 = $13 | $14;
 if ($or$cond$1) {
  HEAP8[$4>>0] = 46;
 }
 $15 = ($6<<24>>24)<(32);
 $16 = ($6<<24>>24)==(127);
 $or$cond$2 = $15 | $16;
 if ($or$cond$2) {
  HEAP8[$7>>0] = 46;
 }
 $17 = ($8<<24>>24)<(32);
 $18 = ($8<<24>>24)==(127);
 $or$cond$3 = $17 | $18;
 if (!($or$cond$3)) {
  return;
 }
 HEAP8[$9>>0] = 46;
 return;
}
function __Z13AP4_NibbleHexj($nibble) {
 $nibble = $nibble|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nibble>>>0)<(10);
 if ($0) {
  $1 = (($nibble) + 48)|0;
  $2 = $1&255;
  $$0 = $2;
 } else {
  $3 = ($nibble>>>0)<(16);
  if ($3) {
   $4 = (($nibble) + 55)|0;
   $5 = $4&255;
   $$0 = $5;
  } else {
   $$0 = 32;
  }
 }
 return ($$0|0);
}
function __ZN14AP4_Expandable13MinHeaderSizeEj($payload_size) {
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $payload_size >>> 7;
 $1 = (($0) + 2)|0;
 return ($1|0);
}
function __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,$class_id,$class_id_size,$header_size,$payload_size) {
 $this = $this|0;
 $class_id = $class_id|0;
 $class_id_size = $class_id_size|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5808);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $class_id;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $class_id_size;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = $header_size;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = $payload_size;
 $4 = ($header_size>>>0)>(1);
 if (!($4)) {
  ___assert_fail((5864|0),(5888|0),60,(5928|0));
  // unreachable;
 }
 $5 = ($header_size>>>0)<(6);
 if ($5) {
  return;
 } else {
  ___assert_fail((5944|0),(5888|0),61,(5928|0));
  // unreachable;
 }
}
function __ZN14AP4_Expandable5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $cond = 0, $i$02 = 0, $size$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(0);
 if (!($cond)) {
  $$0 = -13;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($this)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = ($9>>>0)<(9);
 if (!($10)) {
  ___assert_fail((5968|0),(5888|0),84,(5992|0));
  // unreachable;
 }
 $11 = ($8>>>0)>(1);
 if (!($11)) {
  ___assert_fail((6000|0),(5888|0),85,(5992|0));
  // unreachable;
 }
 $12 = ((($this)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 127;
 $15 = $14&255;
 $16 = (($8) + -2)|0;
 $17 = (($bytes) + ($16)|0);
 HEAP8[$17>>0] = $15;
 $18 = (($8) + -3)|0;
 $19 = ($18|0)>(-1);
 if ($19) {
  $i$02 = $18;$size$01 = $13;
  while(1) {
   $20 = $size$01 >>> 7;
   $21 = $20 | 128;
   $22 = $21&255;
   $23 = (($bytes) + ($i$02)|0);
   HEAP8[$23>>0] = $22;
   $24 = (($i$02) + -1)|0;
   $25 = ($i$02|0)>(0);
   if ($25) {
    $i$02 = $24;$size$01 = $20;
   } else {
    break;
   }
  }
 }
 $26 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$bytes,$9)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$this>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 (FUNCTION_TABLE_iii[$30 & 1023]($this,$stream)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN14AP4_Expandable7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 8|0;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_snprintf($name,64,6024,$vararg_buffer)|0);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 FUNCTION_TABLE_viiiii[$4 & 1023]($inspector,$name,$6,$9,0);
 $10 = HEAP32[$inspector>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vi[$12 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN14AP4_ExpandableD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14AP4_ExpandableD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_CttsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(809,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_CttsAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1668576371,16,0,0);
 HEAP32[$this>>2] = (6040);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6136);
 $1 = ((($this)) + 40|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 return;
}
function __ZN12AP4_CttsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $entry_count = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01$i$i = 0, $i$07 = 0, $i1$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1668576371,$size,$version,$flags);
 HEAP32[$this>>2] = (6040);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6136);
 $1 = ((($this)) + 40|0);
 $2 = ((($this)) + 44|0);
 $3 = ((($this)) + 48|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  HEAP32[$0>>2] = (6136);
  HEAP32[$2>>2] = 0;
  $97 = HEAP32[$3>>2]|0;
  __ZdlPv($97);
  ___resumeException($95|0);
  // unreachable;
 }
 $6 = HEAP32[$entry_count>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)==($6|0);
 do {
  if (!($8)) {
   $9 = ($7>>>0)>($6>>>0);
   if ($9) {
    HEAP32[$2>>2] = $6;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10>>>0)<($6>>>0);
   if ($11) {
    $12 = $6 << 3;
    __THREW__ = 0;
    $13 = (invoke_ii(752,($12|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     HEAP32[$0>>2] = (6136);
     HEAP32[$2>>2] = 0;
     $97 = HEAP32[$3>>2]|0;
     __ZdlPv($97);
     ___resumeException($95|0);
     // unreachable;
    }
    $16 = ($13|0)==(0|0);
    if ($16) {
     break;
    }
    $17 = HEAP32[$2>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$pre$i = 0;
    } else {
     $19 = HEAP32[$3>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$pre$i = $17;
     } else {
      $i$01$i$i = 0;
      while(1) {
       $21 = (($13) + ($i$01$i$i<<3)|0);
       $22 = (($19) + ($i$01$i$i<<3)|0);
       $23 = $22;
       $24 = $23;
       $25 = HEAP32[$24>>2]|0;
       $26 = (($23) + 4)|0;
       $27 = $26;
       $28 = HEAP32[$27>>2]|0;
       $29 = $21;
       $30 = $29;
       HEAP32[$30>>2] = $25;
       $31 = (($29) + 4)|0;
       $32 = $31;
       HEAP32[$32>>2] = $28;
       $33 = (($i$01$i$i) + 1)|0;
       $exitcond3$i = ($33|0)==($17|0);
       if ($exitcond3$i) {
        break;
       } else {
        $i$01$i$i = $33;
       }
      }
      __ZdlPv($19);
      $$pre$pre$i = HEAP32[$2>>2]|0;
      $$pre$i = $$pre$pre$i;
     }
    }
    HEAP32[$3>>2] = $13;
    HEAP32[$1>>2] = $6;
    $34 = $$pre$i;
   } else {
    $34 = $7;
   }
   $35 = ($34>>>0)<($6>>>0);
   if ($35) {
    $36 = HEAP32[$3>>2]|0;
    $i1$02$i = $34;
    while(1) {
     $37 = (($36) + ($i1$02$i<<3)|0);
     HEAP32[$37>>2] = 0;
     $38 = (((($36) + ($i1$02$i<<3)|0)) + 4|0);
     HEAP32[$38>>2] = 0;
     $39 = (($i1$02$i) + 1)|0;
     $exitcond$i = ($39|0)==($6|0);
     if ($exitcond$i) {
      break;
     } else {
      $i1$02$i = $39;
     }
    }
   }
   HEAP32[$2>>2] = $6;
  }
 } while(0);
 $40 = HEAP32[$entry_count>>2]|0;
 $41 = $40 << 3;
 __THREW__ = 0;
 $42 = (invoke_ii(787,($41|0))|0);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  HEAP32[$0>>2] = (6136);
  HEAP32[$2>>2] = 0;
  $97 = HEAP32[$3>>2]|0;
  __ZdlPv($97);
  ___resumeException($95|0);
  // unreachable;
 }
 __THREW__ = 0;
 $45 = (invoke_iiii(788,($stream|0),($42|0),($41|0))|0);
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  HEAP32[$0>>2] = (6136);
  HEAP32[$2>>2] = 0;
  $97 = HEAP32[$3>>2]|0;
  __ZdlPv($97);
  ___resumeException($95|0);
  // unreachable;
 }
 $48 = ($45|0)==(0);
 if (!($48)) {
  __ZdaPv($42);
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$entry_count>>2]|0;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $51 = HEAP32[$3>>2]|0;
  $i$07 = 0;
  while(1) {
   $52 = $i$07 << 3;
   $53 = (($42) + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 << 24;
   $$sum1 = $52 | 1;
   $57 = (($42) + ($$sum1)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $59 << 16;
   $61 = $60 | $56;
   $$sum2 = $52 | 2;
   $62 = (($42) + ($$sum2)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $64 << 8;
   $66 = $61 | $65;
   $$sum3 = $52 | 3;
   $67 = (($42) + ($$sum3)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $66 | $69;
   $71 = (($51) + ($i$07<<3)|0);
   HEAP32[$71>>2] = $70;
   $72 = $52 | 4;
   $73 = (($42) + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 << 24;
   $$sum4 = $52 | 5;
   $77 = (($42) + ($$sum4)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $79 << 16;
   $81 = $80 | $76;
   $$sum5 = $52 | 6;
   $82 = (($42) + ($$sum5)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = $84 << 8;
   $86 = $81 | $85;
   $$sum6 = $52 | 7;
   $87 = (($42) + ($$sum6)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $86 | $89;
   $91 = (((($51) + ($i$07<<3)|0)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = (($i$07) + 1)|0;
   $93 = HEAP32[$entry_count>>2]|0;
   $94 = ($92>>>0)<($93>>>0);
   if ($94) {
    $i$07 = $92;
   } else {
    break;
   }
  }
 }
 __ZdaPv($42);
 STACKTOP = sp;return;
}
function __ZN12AP4_CttsAtom8AddEntryEjj($this,$count,$cts_offset) {
 $this = $this|0;
 $count = $count|0;
 $cts_offset = $cts_offset|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 3;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $39 = ((($this)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 8)|0;
    HEAP32[$39>>2] = $41;
    return 0;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre$i$i = ((($this)) + 48|0);
   if ($14) {
    $$pre$i = 0;
   } else {
    $15 = HEAP32[$$pre$i$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre$i = $13;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $17 = (($11) + ($i$01$i$i<<3)|0);
      $18 = (($15) + ($i$01$i$i<<3)|0);
      $19 = $18;
      $20 = $19;
      $21 = HEAP32[$20>>2]|0;
      $22 = (($19) + 4)|0;
      $23 = $22;
      $24 = HEAP32[$23>>2]|0;
      $25 = $17;
      $26 = $25;
      HEAP32[$26>>2] = $21;
      $27 = (($25) + 4)|0;
      $28 = $27;
      HEAP32[$28>>2] = $24;
      $29 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($29|0)==($13|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $29;
      }
     }
     __ZdlPv($15);
     $$pre$pre$i = HEAP32[$2>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0$i;
   $31 = $$pre$i;
  } else {
   $31 = $3;
  }
 } else {
  $31 = $3;
 }
 $30 = (($31) + 1)|0;
 HEAP32[$2>>2] = $30;
 $32 = ((($this)) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($31<<3)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = $count;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $cts_offset;
 $39 = ((($this)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 8)|0;
 HEAP32[$39>>2] = $41;
 return 0;
}
function __ZN12AP4_CttsAtom12GetCtsOffsetEjRj($this,$sample,$cts_offset) {
 $this = $this|0;
 $sample = $sample|0;
 $cts_offset = $cts_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0$ph = 0, $i$04 = 0, $i$04$lcssa = 0, $sample_start$1$ph = 0, $sample_start$13 = 0, $sample_start$13$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$cts_offset>>2] = 0;
 $0 = ($sample|0)==(0);
 if ($0) {
  $$0 = -12;
  return ($$0|0);
 }
 $1 = ((($this)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>($sample>>>0);
 if ($3) {
  $i$0$ph = 0;$sample_start$1$ph = 0;
 } else {
  $4 = ((($this)) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $i$0$ph = $5;$sample_start$1$ph = $2;
 }
 $6 = ((($this)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($i$0$ph>>>0)<($7>>>0);
 if (!($8)) {
  $$0 = -12;
  return ($$0|0);
 }
 $9 = ((($this)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $i$04 = $i$0$ph;$sample_start$13 = $sample_start$1$ph;
 while(1) {
  $11 = (($10) + ($i$04<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($sample_start$13))|0;
  $14 = ($13>>>0)<($sample>>>0);
  if (!($14)) {
   $i$04$lcssa = $i$04;$sample_start$13$lcssa = $sample_start$13;
   break;
  }
  $18 = (($i$04) + 1)|0;
  $19 = ($18>>>0)<($7>>>0);
  if ($19) {
   $i$04 = $18;$sample_start$13 = $13;
  } else {
   $$0 = -12;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $15 = (((($10) + ($i$04$lcssa<<3)|0)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$cts_offset>>2] = $16;
 $17 = ((($this)) + 56|0);
 HEAP32[$17>>2] = $i$04$lcssa;
 HEAP32[$1>>2] = $sample_start$13$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_CttsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 48|0);
 $5 = ($1|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($i$01<<3)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$0 = $11;
   label = 6;
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = (((($13) + ($i$01<<3)|0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
  $17 = ($16|0)==(0);
  $6 = (($i$01) + 1)|0;
  if (!($17)) {
   $$0 = $16;
   label = 6;
   break;
  }
  $7 = ($6>>>0)<($1>>>0);
  if ($7) {
   $i$01 = $6;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_CttsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 80|0;
 $value = sp + 16|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = ((($inspector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(1);
 if (!($7)) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($this)) + 48|0);
  $i$01 = 0;
  while(1) {
   HEAP32[$vararg_buffer>>2] = $i$01;
   (_snprintf($header,32,24608,$vararg_buffer)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($i$01<<3)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($11) + ($i$01<<3)|0)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $13;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $15;
   (_snprintf($value,64,6144,$vararg_buffer1)|0);
   $16 = HEAP32[$inspector>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_viiii[$18 & 1023]($inspector,$header,$value,0);
   $19 = (($i$01) + 1)|0;
   $20 = HEAP32[$3>>2]|0;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $i$01 = $19;
   } else {
    break;
   }
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_CttsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6040);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6136);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_CttsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6040);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6136);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6136);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6136);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_MovieC2EP12AP4_MoovAtomR14AP4_ByteStreamb($this,$moov,$sample_stream,$transfer_moov_ownership) {
 $this = $this|0;
 $moov = $moov|0;
 $sample_stream = $sample_stream|0;
 $transfer_moov_ownership = $transfer_moov_ownership|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01$i$i = 0, $item$04 = 0;
 var $item$05 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $time_scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6224);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $moov;
 $1 = ((($this)) + 8|0);
 $2 = $transfer_moov_ownership&1;
 HEAP8[$1>>0] = $2;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (6264);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ($moov|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($moov)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 $12 = (invoke_iiii($11|0,($8|0),1836476516,0)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if ($14) {
   $19 = ___cxa_find_matching_catch()|0;
   $20 = tempRet0;
   $lpad$phi$index = $19;$lpad$phi$index2 = $20;
   label = 7;
  } else {
   $15 = ($12|0)==(0|0);
   if ($15) {
    $16 = ((($this)) + 12|0);
    HEAP32[$16>>2] = 0;
    $time_scale$0 = 0;
   } else {
    $21 = (___dynamic_cast($12,11216,7896,0)|0);
    $22 = ((($this)) + 12|0);
    HEAP32[$22>>2] = $21;
    $23 = ($21|0)==(0|0);
    if ($23) {
     $time_scale$0 = 0;
    } else {
     $24 = ((($21)) + 56|0);
     $25 = HEAP32[$24>>2]|0;
     $time_scale$0 = $25;
    }
   }
   $26 = ((($moov)) + 64|0);
   $item$04 = HEAP32[$26>>2]|0;
   $27 = ($item$04|0)==(0|0);
   if ($27) {
    return;
   }
   $item$05 = $item$04;
   while(1) {
    __THREW__ = 0;
    $28 = (invoke_ii(752,28)|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 5;
     break;
    }
    $31 = HEAP32[$item$05>>2]|0;
    __THREW__ = 0;
    invoke_viiii(810,($28|0),($31|0),($sample_stream|0),($time_scale$0|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $$lcssa = $28;
     label = 19;
     break;
    }
    __THREW__ = 0;
    $34 = (invoke_ii(752,12)|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 5;
     break;
    }
    HEAP32[$34>>2] = $28;
    $37 = ((($34)) + 4|0);
    HEAP32[$37>>2] = 0;
    $38 = ((($34)) + 8|0);
    HEAP32[$38>>2] = 0;
    $39 = HEAP32[$6>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     HEAP32[$5>>2] = $34;
     HEAP32[$6>>2] = $34;
     HEAP32[$37>>2] = 0;
     $$sink$i$i = 0;
    } else {
     HEAP32[$37>>2] = 0;
     $41 = ((($39)) + 4|0);
     HEAP32[$41>>2] = $34;
     HEAP32[$6>>2] = $34;
     $$sink$i$i = $39;
    }
    HEAP32[$38>>2] = $$sink$i$i;
    $42 = HEAP32[$4>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$4>>2] = $43;
    $44 = ((($item$05)) + 4|0);
    $item$0 = HEAP32[$44>>2]|0;
    $45 = ($item$0|0)==(0|0);
    if ($45) {
     label = 20;
     break;
    } else {
     $item$05 = $item$0;
    }
   }
   if ((label|0) == 5) {
    $17 = ___cxa_find_matching_catch()|0;
    $18 = tempRet0;
    $lpad$phi$index = $17;$lpad$phi$index2 = $18;
    label = 7;
    break;
   }
   else if ((label|0) == 19) {
    $46 = ___cxa_find_matching_catch()|0;
    $47 = tempRet0;
    __ZdlPv($$lcssa);
    $$0 = $46;$$01 = $47;
    break;
   }
   else if ((label|0) == 20) {
    return;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 HEAP32[$3>>2] = (6264);
 $48 = HEAP32[$5>>2]|0;
 $49 = ($48|0)==(0|0);
 if ($49) {
  HEAP32[$4>>2] = 0;
  HEAP32[$6>>2] = 0;
  HEAP32[$5>>2] = 0;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $item$01$i$i = $48;
 }
 while(1) {
  $50 = ((($item$01$i$i)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  __ZdlPv($item$01$i$i);
  $52 = ($51|0)==(0|0);
  if ($52) {
   break;
  } else {
   $item$01$i$i = $51;
  }
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$6>>2] = 0;
 HEAP32[$5>>2] = 0;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN9AP4_MovieD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i = 0, $item$01$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6224);
 $0 = ((($this)) + 16|0);
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   label = 5;
  } else {
   $item$01$i = $2;
   while(1) {
    $4 = ((($item$01$i)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$item$01$i>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $8 = HEAP32[$6>>2]|0;
     $9 = ((($8)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_vi($10|0,($6|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break;
     }
    }
    __ZdlPv($item$01$i);
    $13 = ($5|0)==(0|0);
    if ($13) {
     label = 5;
     break L1;
    } else {
     $item$01$i = $5;
    }
   }
   $27 = ___cxa_find_matching_catch()|0;
   $28 = tempRet0;
   $lpad$phi$index = $27;$lpad$phi$index2 = $28;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $14 = ((($this)) + 28|0);
   HEAP32[$14>>2] = 0;
   HEAP32[$1>>2] = 0;
   $15 = ((($this)) + 20|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($this)) + 8|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if (!($18)) {
    $19 = ((($this)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = HEAP32[$20>>2]|0;
     $23 = ((($22)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_vi($24|0,($20|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $29 = ___cxa_find_matching_catch()|0;
      $30 = tempRet0;
      $lpad$phi$index = $29;$lpad$phi$index2 = $30;
      break;
     }
     $$pre = HEAP32[$1>>2]|0;
     HEAP32[$0>>2] = (6264);
     $36 = ($$pre|0)==(0|0);
     if ($36) {
      HEAP32[$15>>2] = 0;
      HEAP32[$14>>2] = 0;
      HEAP32[$1>>2] = 0;
      return;
     } else {
      $item$01$i$i1 = $$pre;
     }
     while(1) {
      $37 = ((($item$01$i$i1)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      __ZdlPv($item$01$i$i1);
      $39 = ($38|0)==(0|0);
      if ($39) {
       break;
      } else {
       $item$01$i$i1 = $38;
      }
     }
     HEAP32[$15>>2] = 0;
     HEAP32[$14>>2] = 0;
     HEAP32[$1>>2] = 0;
     return;
    }
   }
   HEAP32[$0>>2] = (6264);
   HEAP32[$15>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[$1>>2] = 0;
   return;
  }
 } while(0);
 HEAP32[$0>>2] = (6264);
 $31 = HEAP32[$1>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $40 = ((($this)) + 20|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($this)) + 28|0);
  HEAP32[$41>>2] = 0;
  HEAP32[$1>>2] = 0;
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 } else {
  $item$01$i$i = $31;
 }
 while(1) {
  $33 = ((($item$01$i$i)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  __ZdlPv($item$01$i$i);
  $35 = ($34|0)==(0|0);
  if ($35) {
   break;
  } else {
   $item$01$i$i = $34;
  }
 }
 $40 = ((($this)) + 20|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($this)) + 28|0);
 HEAP32[$41>>2] = 0;
 HEAP32[$1>>2] = 0;
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN9AP4_MovieD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(151,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN9AP4_Movie7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 1023]($1,$inspector)|0);
 return ($5|0);
}
function __ZN9AP4_Movie8GetTrackEj($this,$track_id) {
 $this = $this|0;
 $track_id = $track_id|0;
 var $$0$i = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i = 0;
 var $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (6280);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $track_id;
 $2 = ((($this)) + 24|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $4 = HEAP32[$item$01$i>>2]|0;
 $5 = (__ZNK19AP4_TrackFinderById4TestEP9AP4_Track($0,$4)|0);
 $6 = ($5|0)==(0);
 L4: do {
  if ($6) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $7 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$7>>2]|0;
    $8 = ($item$0$i|0)==(0|0);
    if ($8) {
     $$0$i = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $9 = ((($$pre)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$item$0$i>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($0,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0$i|0);
  }
 } while(0);
 $14 = HEAP32[$$lcssa>>2]|0;
 $$0$i = $14;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($this,$track_type,$index) {
 $this = $this|0;
 $track_type = $track_type|0;
 $index = $index|0;
 var $$0$i = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0;
 var $item$01$i = 0, $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (6304);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $track_type;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $index;
 $3 = ((($this)) + 24|0);
 $item$01$i = HEAP32[$3>>2]|0;
 $4 = ($item$01$i|0)==(0|0);
 if ($4) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $5 = HEAP32[$item$01$i>>2]|0;
 $6 = (__ZNK21AP4_TrackFinderByType4TestEP9AP4_Track($0,$5)|0);
 $7 = ($6|0)==(0);
 L4: do {
  if ($7) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $8 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$8>>2]|0;
    $9 = ($item$0$i|0)==(0|0);
    if ($9) {
     $$0$i = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $10 = ((($$pre)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$item$0$i>>2]|0;
    $13 = (FUNCTION_TABLE_iii[$11 & 1023]($0,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0$i|0);
  }
 } while(0);
 $15 = HEAP32[$$lcssa>>2]|0;
 $$0$i = $15;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNK19AP4_TrackFinderById4TestEP9AP4_Track($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNK9AP4_Track5GetIdEv($track)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$ = ($0|0)!=($2|0);
 $3 = $not$ << 31 >> 31;
 return ($3|0);
}
function __ZNK21AP4_TrackFinderByType4TestEP9AP4_Track($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($track)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = ($6|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = -1;
 return ($$0|0);
}
function __ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN21AP4_TrackFinderByTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN19AP4_TrackFinderByIdD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListI9AP4_TrackED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6264);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListI9AP4_TrackED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6264);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN12AP4_IkmsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(811,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_IkmsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $string_size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1766542675,$size,$version,$flags);
 HEAP32[$this>>2] = (6488);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $$0 = $15;$$02 = $16;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = (($size) + -12)|0;
 $4 = ((($this)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(1);
 $7 = ($3>>>0)>(7);
 $or$cond = $7 & $6;
 $8 = ((($this)) + 44|0);
 if ($or$cond) {
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($8|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = (($size) + -20)|0;
   $12 = ((($this)) + 48|0);
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($12|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $string_size$0 = $11;
    label = 8;
   }
  }
 } else {
  HEAP32[$8>>2] = 0;
  $21 = ((($this)) + 48|0);
  HEAP32[$21>>2] = 0;
  $string_size$0 = $3;
  label = 8;
 }
 if ((label|0) == 8) {
  $22 = ($string_size$0|0)==(0);
  if ($22) {
   return;
  }
  __THREW__ = 0;
  $23 = (invoke_ii(787,($string_size$0|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($23|0),($string_size$0|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = (($string_size$0) + -1)|0;
    $29 = (($23) + ($28)|0);
    HEAP8[$29>>0] = 0;
    __THREW__ = 0;
    (invoke_iii(791,($0|0),($23|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     __ZdaPv($23);
     return;
    }
   }
  }
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $32 = ___cxa_find_matching_catch(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $$0 = $17;$$02 = $18;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN12AP4_IkmsAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 $1 = ((($this)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($0|0),1766542675,12,0,0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 }
 HEAP32[$0>>2] = (6488);
 $9 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vii(812,($9|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 } else {
  $12 = ((($0)) + 44|0);
  HEAP32[$12>>2] = $4;
  $13 = ((($0)) + 48|0);
  HEAP32[$13>>2] = $6;
  $14 = ((($0)) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18))|0;
  HEAP32[$17>>2] = $19;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN12AP4_IkmsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = ((($this)) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$4)|0);
  $5 = ((($this)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$6)|0);
 }
 $7 = ((($this)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$8,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = ((($this)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$9>>2]|0;
 $$neg1 = (($15) + -13)|0;
 $17 = (($$neg1) - ($16))|0;
 $18 = HEAP8[$0>>0]|0;
 $19 = ($18<<24>>24)==(1);
 $20 = (($17) + -8)|0;
 $$ = $19 ? $20 : $17;
 $21 = ($$|0)==(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $padding$02 = $$;
 }
 while(1) {
  $22 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $22;
  }
 }
 return ($$0|0);
}
function __ZN12AP4_IkmsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = ((($this)) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  __Z19AP4_FormatFourCharsPcj($id,$4);
  $5 = HEAP32[$inspector>>2]|0;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($inspector,6576,$id,0);
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,6584,$12,0,0);
  $$pre$phiZ2D = $inspector;
 } else {
  $$pre$phiZ2D = $inspector;
 }
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_viiii[$15 & 1023]($inspector,6600,$17,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_IkmsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6488);
 $0 = ((($this)) + 36|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN12AP4_IkmsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6488);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN19AP4_EncaSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1701733217,$size,$stream,$atom_factory);
 HEAP32[$this>>2] = (6616);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6712);
 return;
}
function __ZN19AP4_EncaSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 1023]($0,7128,0,0)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$7 & 1023]($0,7144,0,0)|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiii[$11 & 1023]($0,7160,0,0)|0);
 $13 = ($4|0)==(0|0);
 if ($13) {
  $23 = 1836069985;
 } else {
  $14 = ((($4)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $23 = $15;
 }
 $16 = ($12|0)==(0|0);
 if (!($16)) {
  $17 = (__Znwj(64)|0);
  $18 = ((($this)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$this>>2]|0;
  $21 = ((($20)) + 84|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  $24 = (invoke_iii($22|0,($this|0),($23|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = ((($12)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($12)) + 44|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($12)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiiiii(813,($17|0),($19|0),($24|0),($23|0),($28|0),($30|0),($32|0),($8|0),1);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $$0 = $17;
    return ($$0|0);
   }
  }
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  __ZdlPv($17);
  $$01 = $36;$$02 = $35;
  ___resumeException($$02|0);
  // unreachable;
 }
 $37 = ($8|0)==(0|0);
 if ($37) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = ((($8)) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($38,1868852077,0)|0);
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$0 = 0;
  return ($$0|0);
 }
 $44 = (__Znwj(64)|0);
 $45 = ((($this)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$this>>2]|0;
 $48 = ((($47)) + 84|0);
 $49 = HEAP32[$48>>2]|0;
 __THREW__ = 0;
 $50 = (invoke_iii($49|0,($this|0),($23|0))|0);
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if (!($52)) {
  __THREW__ = 0;
  invoke_viiiiiiiii(813,($44|0),($46|0),($50|0),($23|0),1868852077,512,(0|0),($8|0),1);
  $53 = __THREW__; __THREW__ = 0;
  $54 = $53&1;
  if (!($54)) {
   $$0 = $44;
   return ($$0|0);
  }
 }
 $55 = ___cxa_find_matching_catch()|0;
 $56 = tempRet0;
 __ZdlPv($44);
 $$01 = $56;$$02 = $55;
 ___resumeException($$02|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_EncaSampleEntry25ToTargetSampleDescriptionEj($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $$0 = 0, $$01 = 0, $$02$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $esds$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($format|0)==(1836069985);
 if (!($cond)) {
  $30 = (__Znwj(44)|0);
  __THREW__ = 0;
  $31 = (invoke_ii(814,($this|0))|0);
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if (!($33)) {
   $34 = ((($this)) + 74|0);
   $35 = HEAP16[$34>>1]|0;
   __THREW__ = 0;
   $36 = (invoke_ii(815,($this|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    $39 = ((($this)) + 36|0);
    __THREW__ = 0;
    invoke_viiii(817,($30|0),0,($format|0),($39|0));
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if (!($41)) {
     $42 = ((($30)) + 32|0);
     $43 = ((($30)) + 36|0);
     HEAP32[$43>>2] = $31;
     $44 = ((($30)) + 40|0);
     HEAP16[$44>>1] = $35;
     $45 = ((($30)) + 42|0);
     HEAP16[$45>>1] = $36;
     HEAP32[$30>>2] = (26136);
     HEAP32[$42>>2] = (26160);
     $$02$in = $30;
     return ($$02$in|0);
    }
   }
  }
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  __ZdlPv($30);
  $$0 = $47;$$01 = $46;
  ___resumeException($$01|0);
  // unreachable;
 }
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($0,1702061171,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  label = 4;
 } else {
  $6 = (___dynamic_cast($4,11216,3984,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 4;
  } else {
   $esds$0 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ((($this)) + 64|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $esds$0 = 0;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiiii[$13 & 1023]($0,23432,0,0)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $esds$0 = 0;
   } else {
    $16 = (___dynamic_cast($14,11216,3984,0)|0);
    $esds$0 = $16;
   }
  }
 }
 $17 = (__Znwj(84)|0);
 __THREW__ = 0;
 $18 = (invoke_ii(814,($this|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $21 = ((($this)) + 74|0);
  $22 = HEAP16[$21>>1]|0;
  __THREW__ = 0;
  $23 = (invoke_ii(815,($this|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   __THREW__ = 0;
   invoke_viiiii(816,($17|0),($18|0),($22|0),($23|0),($esds$0|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $$02$in = $17;
    return ($$02$in|0);
   }
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 __ZdlPv($17);
 $$0 = $29;$$01 = $28;
 ___resumeException($$01|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_EncvSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1701733238,$size,$stream,$atom_factory);
 HEAP32[$this>>2] = (6768);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (6864);
 return;
}
function __ZN19AP4_EncvSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 1023]($0,7128,0,0)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$7 & 1023]($0,7144,0,0)|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiii[$11 & 1023]($0,7160,0,0)|0);
 $13 = ($4|0)==(0|0);
 if ($13) {
  $23 = 1836070006;
 } else {
  $14 = ((($4)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $23 = $15;
 }
 $16 = ($12|0)==(0|0);
 if (!($16)) {
  $17 = (__Znwj(64)|0);
  $18 = ((($this)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$this>>2]|0;
  $21 = ((($20)) + 84|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  $24 = (invoke_iii($22|0,($this|0),($23|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = ((($12)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($12)) + 44|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($12)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiiiii(813,($17|0),($19|0),($24|0),($23|0),($28|0),($30|0),($32|0),($8|0),1);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $$0 = $17;
    return ($$0|0);
   }
  }
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  __ZdlPv($17);
  $$01 = $36;$$02 = $35;
  ___resumeException($$02|0);
  // unreachable;
 }
 $37 = ($8|0)==(0|0);
 if ($37) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = ((($8)) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($38,1868852077,0)|0);
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$0 = 0;
  return ($$0|0);
 }
 $44 = (__Znwj(64)|0);
 $45 = ((($this)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$this>>2]|0;
 $48 = ((($47)) + 84|0);
 $49 = HEAP32[$48>>2]|0;
 __THREW__ = 0;
 $50 = (invoke_iii($49|0,($this|0),($23|0))|0);
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if (!($52)) {
  __THREW__ = 0;
  invoke_viiiiiiiii(813,($44|0),($46|0),($50|0),($23|0),1868852077,512,(0|0),($8|0),1);
  $53 = __THREW__; __THREW__ = 0;
  $54 = $53&1;
  if (!($54)) {
   $$0 = $44;
   return ($$0|0);
  }
 }
 $55 = ___cxa_find_matching_catch()|0;
 $56 = tempRet0;
 __ZdlPv($44);
 $$01 = $56;$$02 = $55;
 ___resumeException($$02|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_EncvSampleEntry25ToTargetSampleDescriptionEj($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $$0 = 0, $$01 = 0, $$02$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($format|0) == 1751479857) | (($format|0) == 1752589105)) {
  $14 = (__Znwj(56)|0);
  $15 = ((($this)) + 80|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ((($this)) + 82|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = ((($this)) + 108|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ((($this)) + 100|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_viiiiiii(819,($14|0),($format|0),($16|0),($18|0),($20|0),($22|0),($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $$02$in = $14;
   return ($$02$in|0);
  }
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  __ZdlPv($14);
  $$0 = $27;$$01 = $26;
  ___resumeException($$01|0);
  // unreachable;
 } else if ((($format|0) == 1836070006)) {
  $28 = (__Znwj(92)|0);
  $29 = ((($this)) + 80|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = ((($this)) + 82|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = ((($this)) + 108|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = ((($this)) + 100|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($this)) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  __THREW__ = 0;
  $41 = (invoke_iiii($40|0,($37|0),1702061171,0)|0);
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if (!($43)) {
   $44 = ($41|0)==(0|0);
   if ($44) {
    $48 = 0;
   } else {
    $45 = (___dynamic_cast($41,11216,3984,0)|0);
    $48 = $45;
   }
   __THREW__ = 0;
   invoke_viiiiii(820,($28|0),($30|0),($32|0),($34|0),($36|0),($48|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    $$02$in = $28;
    return ($$02$in|0);
   }
  }
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  __ZdlPv($28);
  $$0 = $47;$$01 = $46;
  ___resumeException($$01|0);
  // unreachable;
 } else if ((($format|0) == 1635148596) | (($format|0) == 1635148595) | (($format|0) == 1635148594) | (($format|0) == 1635148593)) {
  $0 = (__Znwj(56)|0);
  $1 = ((($this)) + 80|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = ((($this)) + 82|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = ((($this)) + 108|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ((($this)) + 100|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_viiiiiii(818,($0|0),($format|0),($2|0),($4|0),($6|0),($8|0),($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $$02$in = $0;
   return ($$02$in|0);
  }
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  __ZdlPv($0);
  $$0 = $13;$$01 = $12;
  ___resumeException($$01|0);
  // unreachable;
 } else {
  $51 = (__Znwj(52)|0);
  $52 = ((($this)) + 80|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = ((($this)) + 82|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = ((($this)) + 108|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = ((($this)) + 100|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_viiii(817,($51|0),0,($format|0),($60|0));
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  do {
   if ($62) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $eh$lpad$body$index2Z2D = $78;$eh$lpad$body$indexZ2D = $77;
   } else {
    $63 = ((($51)) + 32|0);
    HEAP32[$63>>2] = (7184);
    $64 = ((($51)) + 36|0);
    HEAP16[$64>>1] = $53;
    $65 = ((($51)) + 38|0);
    HEAP16[$65>>1] = $55;
    $66 = ((($51)) + 40|0);
    HEAP16[$66>>1] = $57;
    $67 = ((($51)) + 44|0);
    __THREW__ = 0;
    invoke_vii(812,($67|0),($59|0));
    $68 = __THREW__; __THREW__ = 0;
    $69 = $68&1;
    if ($69) {
     $70 = ___cxa_find_matching_catch()|0;
     $71 = tempRet0;
     HEAP32[$51>>2] = (25848);
     $72 = ((($51)) + 12|0);
     __THREW__ = 0;
     invoke_vi(314,($72|0));
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if (!($74)) {
      $eh$lpad$body$index2Z2D = $71;$eh$lpad$body$indexZ2D = $70;
      break;
     }
     $75 = ___cxa_find_matching_catch(0|0)|0;
     $76 = tempRet0;
     ___clang_call_terminate($75);
     // unreachable;
    } else {
     HEAP32[$51>>2] = (26248);
     HEAP32[$63>>2] = (26272);
     $$02$in = $51;
     return ($$02$in|0);
    }
   }
  } while(0);
  __ZdlPv($51);
  $$0 = $eh$lpad$body$index2Z2D;$$01 = $eh$lpad$body$indexZ2D;
  ___resumeException($$01|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN19AP4_DrmsSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1685220723,$size,$stream,$atom_factory);
 $0 = ((($this)) + 36|0);
 HEAP32[$this>>2] = (7200);
 HEAP32[$0>>2] = (7296);
 return;
}
function __ZN19AP4_DrmiSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1685220713,$size,$stream,$atom_factory);
 $0 = ((($this)) + 36|0);
 HEAP32[$this>>2] = (7352);
 HEAP32[$0>>2] = (7448);
 return;
}
function __ZN24AP4_ProtectionSchemeInfoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6920);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($1);
 return;
}
function __ZN24AP4_ProtectionSchemeInfoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6920);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionC2EjP21AP4_SampleDescriptionjjjPKcP17AP4_ContainerAtomb($this,$format,$original_sample_description,$original_format,$scheme_type,$scheme_version,$scheme_uri,$schi,$transfer_ownership_of_original) {
 $this = $this|0;
 $format = $format|0;
 $original_sample_description = $original_sample_description|0;
 $original_format = $original_format|0;
 $scheme_type = $scheme_type|0;
 $scheme_version = $scheme_version|0;
 $scheme_uri = $scheme_uri|0;
 $schi = $schi|0;
 $transfer_ownership_of_original = $transfer_ownership_of_original|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($this,2,$format,0);
 HEAP32[$this>>2] = (6936);
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = $original_sample_description;
 $1 = ((($this)) + 36|0);
 $2 = $transfer_ownership_of_original&1;
 HEAP8[$1>>0] = $2;
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = $original_format;
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = $scheme_type;
 $5 = ((($this)) + 48|0);
 HEAP32[$5>>2] = $scheme_version;
 $6 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vii(812,($6|0),($scheme_uri|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $$1 = $23;$$12 = $22;
 } else {
  __THREW__ = 0;
  $9 = (invoke_ii(752,8)|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  do {
   if ($11) {
    $24 = ___cxa_find_matching_catch()|0;
    $25 = tempRet0;
    $$0 = $25;$$01 = $24;
   } else {
    HEAP32[$9>>2] = (6920);
    $12 = ($schi|0)==(0|0);
    if ($12) {
     $20 = ((($9)) + 4|0);
     HEAP32[$20>>2] = 0;
     $21 = ((($this)) + 60|0);
     HEAP32[$21>>2] = $9;
     return;
    }
    $13 = HEAP32[$schi>>2]|0;
    $14 = ((($13)) + 48|0);
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    $16 = (invoke_ii($15|0,($schi|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     $26 = ___cxa_find_matching_catch()|0;
     $27 = tempRet0;
     __ZdlPv($9);
     $$0 = $27;$$01 = $26;
     break;
    }
    $19 = ((($9)) + 4|0);
    HEAP32[$19>>2] = $16;
    $21 = ((($this)) + 60|0);
    HEAP32[$21>>2] = $9;
    return;
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(792,($6|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 $30 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6936);
 $0 = ((($this)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 6;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($this)) + 36|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if (!($10)) {
    $11 = ((($this)) + 32|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     $14 = HEAP32[$12>>2]|0;
     $15 = ((($14)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     __THREW__ = 0;
     invoke_vi($16|0,($12|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      label = 6;
      break;
     }
    }
   }
   $24 = ((($this)) + 52|0);
   __THREW__ = 0;
   invoke_vi(792,($24|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $28 = ___cxa_find_matching_catch()|0;
    $29 = tempRet0;
    $$0 = $29;$$01 = $28;
    break;
   } else {
    HEAP32[$this>>2] = (25848);
    $27 = ((($this)) + 12|0);
    __ZN14AP4_AtomParentD2Ev($27);
    return;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $21 = ((($this)) + 52|0);
  __THREW__ = 0;
  invoke_vi(792,($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  } else {
   $$0 = $20;$$01 = $19;
  }
 }
 HEAP32[$this>>2] = (25848);
 $30 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(193,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZNK30AP4_ProtectedSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($1)|0);
 $7 = ((($this)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ($6|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (___dynamic_cast($6,11216,2336,0)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = $6;
  return ($$0|0);
 }
 $13 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(821,($13|0),1936289382);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  __ZdlPv($13);
  $$01 = $50;$$02 = $51;
  ___resumeException($$01|0);
  // unreachable;
 }
 $16 = (__Znwj(40)|0);
 $17 = ((($this)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 __THREW__ = 0;
 invoke_vii(822,($16|0),($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $52 = ___cxa_find_matching_catch()|0;
  $53 = tempRet0;
  __ZdlPv($16);
  $$01 = $52;$$02 = $53;
  ___resumeException($$01|0);
  // unreachable;
 }
 $21 = ((($13)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 (FUNCTION_TABLE_iiii[$24 & 1023]($21,$16,-1)|0);
 $25 = (__Znwj(56)|0);
 $26 = ((($this)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($this)) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($this)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(823,($25|0),($27|0),($29|0),($31|0),0);
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $54 = ___cxa_find_matching_catch()|0;
  $55 = tempRet0;
  __ZdlPv($25);
  $$01 = $54;$$02 = $55;
  ___resumeException($$01|0);
  // unreachable;
 }
 $34 = HEAP32[$21>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 (FUNCTION_TABLE_iiii[$36 & 1023]($21,$25,-1)|0);
 $37 = ((($this)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  $40 = ((($38)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$21>>2]|0;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[$41>>2]|0;
   $47 = ((($46)) + 48|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_ii[$48 & 1023]($41)|0);
   (FUNCTION_TABLE_iiii[$45 & 1023]($21,$49,-1)|0);
  }
 }
 $56 = ((($11)) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 (FUNCTION_TABLE_iiii[$59 & 1023]($56,$13,-1)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN20AP4_AudioSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 $7 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN19AP4_EncaSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_EncaSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_EncaSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN21AP4_VisualSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 $7 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN19AP4_EncvSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_EncvSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_EncvSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN19AP4_DrmiSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_DrmiSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_DrmiSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN19AP4_DrmsSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_DrmsSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_DrmsSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN26AP4_VideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7184);
 $0 = ((($this)) + 12|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN26AP4_VideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7184);
 $0 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_SbgpAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(824,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SbgpAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $entry = 0, $entry_count = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01$i$i = 0, $i$02 = 0, $i1$02$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $remains$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 8|0;
 $entry = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1935828848,$size,$version,$flags);
 HEAP32[$this>>2] = (7624);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = (7720);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 $6 = (invoke_ii(5,($this|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = (($size) - ($6))|0;
    $12 = (($11) + -4)|0;
    $13 = ($version<<24>>24)==(0);
    if ($13) {
     $remains$0 = $12;
    } else {
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($1|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      break;
     }
     $16 = (($11) + -8)|0;
     $remains$0 = $16;
    }
    HEAP32[$entry_count>>2] = 0;
    __THREW__ = 0;
    $17 = (invoke_iii(755,($stream|0),($entry_count|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = ($17|0)==(0);
     if (!($20)) {
      STACKTOP = sp;return;
     }
     $21 = (($remains$0) + -4)|0;
     $22 = HEAP32[$entry_count>>2]|0;
     $23 = $22 << 3;
     $24 = ($21>>>0)<($23>>>0);
     if ($24) {
      STACKTOP = sp;return;
     }
     $25 = HEAP32[$4>>2]|0;
     $26 = ($25|0)==($22|0);
     do {
      if (!($26)) {
       $27 = ($25>>>0)>($22>>>0);
       if ($27) {
        HEAP32[$4>>2] = $22;
        break;
       }
       $28 = HEAP32[$3>>2]|0;
       $29 = ($28>>>0)<($22>>>0);
       if ($29) {
        __THREW__ = 0;
        $30 = (invoke_ii(752,($23|0))|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         break L1;
        }
        $33 = ($30|0)==(0|0);
        if ($33) {
         break;
        }
        $34 = HEAP32[$4>>2]|0;
        $35 = ($34|0)==(0);
        if ($35) {
         $$pre$i = 0;
        } else {
         $36 = HEAP32[$5>>2]|0;
         $37 = ($36|0)==(0|0);
         if ($37) {
          $$pre$i = $34;
         } else {
          $i$01$i$i = 0;
          while(1) {
           $38 = (($30) + ($i$01$i$i<<3)|0);
           $39 = (($36) + ($i$01$i$i<<3)|0);
           $40 = $39;
           $41 = $40;
           $42 = HEAP32[$41>>2]|0;
           $43 = (($40) + 4)|0;
           $44 = $43;
           $45 = HEAP32[$44>>2]|0;
           $46 = $38;
           $47 = $46;
           HEAP32[$47>>2] = $42;
           $48 = (($46) + 4)|0;
           $49 = $48;
           HEAP32[$49>>2] = $45;
           $50 = (($i$01$i$i) + 1)|0;
           $exitcond3$i = ($50|0)==($34|0);
           if ($exitcond3$i) {
            break;
           } else {
            $i$01$i$i = $50;
           }
          }
          __ZdlPv($36);
          $$pre$pre$i = HEAP32[$4>>2]|0;
          $$pre$i = $$pre$pre$i;
         }
        }
        HEAP32[$5>>2] = $30;
        HEAP32[$3>>2] = $22;
        $51 = $$pre$i;
       } else {
        $51 = $25;
       }
       $52 = ($51>>>0)<($22>>>0);
       if ($52) {
        $i1$02$i = $51;
        while(1) {
         $53 = HEAP32[$5>>2]|0;
         $54 = (($53) + ($i1$02$i<<3)|0);
         $55 = $54;
         $56 = $55;
         HEAP32[$56>>2] = 0;
         $57 = (($55) + 4)|0;
         $58 = $57;
         HEAP32[$58>>2] = 0;
         $59 = (($i1$02$i) + 1)|0;
         $exitcond$i = ($59|0)==($22|0);
         if ($exitcond$i) {
          break;
         } else {
          $i1$02$i = $59;
         }
        }
       }
       HEAP32[$4>>2] = $22;
      }
     } while(0);
     $60 = HEAP32[$entry_count>>2]|0;
     $61 = ($60|0)==(0);
     if ($61) {
      STACKTOP = sp;return;
     }
     $62 = ((($entry)) + 4|0);
     $i$02 = 0;
     while(1) {
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($entry|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break;
      }
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($62|0))|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = HEAP32[$5>>2]|0;
      $68 = (($67) + ($i$02<<3)|0);
      $69 = $entry;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($69) + 4)|0;
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      $75 = $68;
      $76 = $75;
      HEAP32[$76>>2] = $71;
      $77 = (($75) + 4)|0;
      $78 = $77;
      HEAP32[$78>>2] = $74;
      $79 = (($i$02) + 1)|0;
      $80 = HEAP32[$entry_count>>2]|0;
      $81 = ($79>>>0)<($80>>>0);
      if ($81) {
       $i$02 = $79;
      } else {
       label = 28;
       break;
      }
     }
     if ((label|0) == 28) {
      STACKTOP = sp;return;
     }
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $lpad$phi$index = $82;$lpad$phi$index2 = $83;
     HEAP32[$2>>2] = (7720);
     HEAP32[$4>>2] = 0;
     $86 = HEAP32[$5>>2]|0;
     __ZdlPv($86);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $84 = ___cxa_find_matching_catch()|0;
 $85 = tempRet0;
 $lpad$phi$index = $84;$lpad$phi$index2 = $85;
 HEAP32[$2>>2] = (7720);
 HEAP32[$4>>2] = 0;
 $86 = HEAP32[$5>>2]|0;
 __ZdlPv($86);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_SbgpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = ((($this)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = $9;
   return ($$0|0);
  }
 }
 $11 = ((($this)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($this)) + 56|0);
 $16 = HEAP32[$11>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $21 = HEAP32[$15>>2]|0;
  $22 = (($21) + ($i$01<<3)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$23)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $$0 = $24;
   label = 9;
   break;
  }
  $26 = HEAP32[$15>>2]|0;
  $27 = (((($26) + ($i$01<<3)|0)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$28)|0);
  $30 = ($29|0)==(0);
  $19 = (($i$01) + 1)|0;
  if (!($30)) {
   $$0 = $29;
   label = 9;
   break;
  }
  $18 = HEAP32[$11>>2]|0;
  $20 = ($19>>>0)<($18>>>0);
  if ($20) {
   $i$01 = $19;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SbgpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fourcc = 0, $header = 0, $i$01 = 0, $value = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fourcc = sp + 176|0;
 $header = sp + 144|0;
 $value = sp + 16|0;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($fourcc,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,14488,$fourcc,0);
 $5 = ((($this)) + 25|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,7728,$12,0,0);
 }
 $13 = HEAP32[$inspector>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_viiiii[$15 & 1023]($inspector,24592,$17,0,0);
 $18 = ((($inspector)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)>(1);
 if (!($20)) {
  STACKTOP = sp;return 0;
 }
 $21 = HEAP32[$16>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = ((($this)) + 56|0);
  $i$01 = 0;
  while(1) {
   HEAP32[$vararg_buffer>>2] = $i$01;
   (_snprintf($header,32,14520,$vararg_buffer)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($i$01<<3)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (((($24) + ($i$01<<3)|0)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $26;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $28;
   (_snprintf($value,128,7752,$vararg_buffer1)|0);
   $29 = HEAP32[$inspector>>2]|0;
   $30 = ((($29)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_viiii[$31 & 1023]($inspector,$header,$value,0);
   $32 = (($i$01) + 1)|0;
   $33 = HEAP32[$16>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if ($34) {
    $i$01 = $32;
   } else {
    break;
   }
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SbgpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7624);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (7720);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_SbgpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7624);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (7720);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7720);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7720);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_MvhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(152)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(825,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MvhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $creation_time = 0, $duration = 0, $modification_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 8|0;
 $modification_time = sp + 4|0;
 $duration = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1836476516,$size,$version,$flags);
 HEAP32[$this>>2] = (7824);
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$creation_time)|0);
  $3 = HEAP32[$creation_time>>2]|0;
  $4 = ((($this)) + 40|0);
  $5 = $4;
  $6 = $5;
  HEAP32[$6>>2] = $3;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$modification_time)|0);
  $9 = HEAP32[$modification_time>>2]|0;
  $10 = ((($this)) + 48|0);
  $11 = $10;
  $12 = $11;
  HEAP32[$12>>2] = $9;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = 0;
  $15 = ((($this)) + 56|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$15)|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$duration)|0);
  $16 = HEAP32[$duration>>2]|0;
  $17 = ((($this)) + 64|0);
  $18 = $17;
  $19 = $18;
  HEAP32[$19>>2] = $16;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = 0;
 } else {
  $22 = ((($this)) + 40|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$22)|0);
  $23 = ((($this)) + 48|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$23)|0);
  $24 = ((($this)) + 56|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$24)|0);
  $25 = ((($this)) + 64|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$25)|0);
 }
 $26 = ((($this)) + 72|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$26)|0);
 $27 = ((($this)) + 76|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$27)|0);
 $28 = ((($this)) + 78|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$28,2)|0);
 $29 = ((($this)) + 80|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$29,8)|0);
 $30 = ((($this)) + 88|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$30)|0);
 $31 = ((($this)) + 92|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$31)|0);
 $32 = ((($this)) + 96|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$32)|0);
 $33 = ((($this)) + 100|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$33)|0);
 $34 = ((($this)) + 104|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$34)|0);
 $35 = ((($this)) + 108|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$35)|0);
 $36 = ((($this)) + 112|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$36)|0);
 $37 = ((($this)) + 116|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$37)|0);
 $38 = ((($this)) + 120|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$38)|0);
 $39 = ((($this)) + 124|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$39,24)|0);
 $40 = ((($this)) + 148|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$40)|0);
 STACKTOP = sp;return;
}
function __ZN12AP4_MvhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 if ($2) {
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$6)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
  $12 = ((($this)) + 48|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = $19;
   return ($$0|0);
  }
  $21 = ((($this)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$22)|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $$0 = $23;
   return ($$0|0);
  }
  $25 = ((($this)) + 64|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$28)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   $$0 = $32;
   return ($$0|0);
  }
 } else {
  $34 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$6,$9)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $34;
   return ($$0|0);
  }
  $36 = ((($this)) + 48|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$39,$42)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   $$0 = $43;
   return ($$0|0);
  }
  $45 = ((($this)) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$46)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = $47;
   return ($$0|0);
  }
  $49 = ((($this)) + 64|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$52,$55)|0);
  $57 = ($56|0)==(0);
  if (!($57)) {
   $$0 = $56;
   return ($$0|0);
  }
 }
 $58 = ((($this)) + 72|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$59)|0);
 $61 = ($60|0)==(0);
 if (!($61)) {
  $$0 = $60;
  return ($$0|0);
 }
 $62 = ((($this)) + 76|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$63)|0);
 $65 = ($64|0)==(0);
 if (!($65)) {
  $$0 = $64;
  return ($$0|0);
 }
 $66 = ((($this)) + 78|0);
 $67 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$66,2)|0);
 $68 = ($67|0)==(0);
 if (!($68)) {
  $$0 = $67;
  return ($$0|0);
 }
 $69 = ((($this)) + 80|0);
 $70 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$69,8)|0);
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$0 = $70;
  return ($$0|0);
 }
 $72 = ((($this)) + 88|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$73)|0);
 $75 = ($74|0)==(0);
 if (!($75)) {
  $$0 = $74;
  return ($$0|0);
 }
 $76 = ((($this)) + 92|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$77)|0);
 $79 = ($78|0)==(0);
 if (!($79)) {
  $$0 = $78;
  return ($$0|0);
 }
 $83 = ((($this)) + 96|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$84)|0);
 $86 = ($85|0)==(0);
 if (!($86)) {
  $$0 = $85;
  return ($$0|0);
 }
 $87 = ((($this)) + 100|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$88)|0);
 $90 = ($89|0)==(0);
 if (!($90)) {
  $$0 = $89;
  return ($$0|0);
 }
 $91 = ((($this)) + 104|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$92)|0);
 $94 = ($93|0)==(0);
 if (!($94)) {
  $$0 = $93;
  return ($$0|0);
 }
 $95 = ((($this)) + 108|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$96)|0);
 $98 = ($97|0)==(0);
 if (!($98)) {
  $$0 = $97;
  return ($$0|0);
 }
 $99 = ((($this)) + 112|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$100)|0);
 $102 = ($101|0)==(0);
 if (!($102)) {
  $$0 = $101;
  return ($$0|0);
 }
 $103 = ((($this)) + 116|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$104)|0);
 $106 = ($105|0)==(0);
 if (!($106)) {
  $$0 = $105;
  return ($$0|0);
 }
 $107 = ((($this)) + 120|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$108)|0);
 $110 = ($109|0)==(0);
 if (!($110)) {
  $$0 = $109;
  return ($$0|0);
 }
 $111 = ((($this)) + 124|0);
 $112 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$111,24)|0);
 $113 = ($112|0)==(0);
 if (!($113)) {
  $$0 = $112;
  return ($$0|0);
 }
 $80 = ((($this)) + 148|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$81)|0);
 $$0 = $82;
 return ($$0|0);
}
function __ZN12AP4_MvhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24720,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 64|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,17776,$11,$14,0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$3>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $28 = 0;$29 = 0;
  FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,17792,$28,$29,0);
  return 0;
 }
 $20 = $8;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (__Z15AP4_ConvertTimeyjj($22,$25,$18,1000)|0);
 $27 = tempRet0;
 $28 = $26;$29 = 0;
 FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,17792,$28,$29,0);
 return 0;
}
function __ZN12AP4_MvhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_StszAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(826,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StszAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937011578,20,0,0);
 HEAP32[$this>>2] = (7920);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = (2152);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 return;
}
function __ZN12AP4_StszAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond$i = 0, $i$01$i$i = 0, $i$04 = 0, $scevgep$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937011578,$size,$version,$flags);
 HEAP32[$this>>2] = (7920);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($4|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if (!($6)) {
   $7 = ((($this)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($7|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = HEAP32[$4>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     return;
    }
    $12 = HEAP32[$7>>2]|0;
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)==($12|0);
    do {
     if (!($14)) {
      $15 = ($13>>>0)>($12>>>0);
      if ($15) {
       HEAP32[$2>>2] = $12;
       break;
      }
      $16 = HEAP32[$1>>2]|0;
      $17 = ($16>>>0)<($12>>>0);
      if ($17) {
       $18 = $12 << 2;
       __THREW__ = 0;
       $19 = (invoke_ii(752,($18|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break L1;
       }
       $22 = ($19|0)==(0|0);
       if ($22) {
        break;
       }
       $23 = HEAP32[$2>>2]|0;
       $24 = ($23|0)==(0);
       if ($24) {
        $$pre$i = 0;
       } else {
        $25 = HEAP32[$3>>2]|0;
        $26 = ($25|0)==(0|0);
        if ($26) {
         $$pre$i = $23;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $27 = (($19) + ($i$01$i$i<<2)|0);
          $28 = (($25) + ($i$01$i$i<<2)|0);
          $29 = HEAP32[$28>>2]|0;
          HEAP32[$27>>2] = $29;
          $30 = (($i$01$i$i) + 1)|0;
          $exitcond$i = ($30|0)==($23|0);
          if ($exitcond$i) {
           break;
          } else {
           $i$01$i$i = $30;
          }
         }
         __ZdlPv($25);
         $$pre$pre$i = HEAP32[$2>>2]|0;
         $$pre$i = $$pre$pre$i;
        }
       }
       HEAP32[$3>>2] = $19;
       HEAP32[$1>>2] = $12;
       $32 = $$pre$i;
      } else {
       $32 = $13;
      }
      $31 = ($12>>>0)>($32>>>0);
      if ($31) {
       $33 = HEAP32[$3>>2]|0;
       $scevgep$i = (($33) + ($32<<2)|0);
       $34 = (($12) - ($32))|0;
       $35 = $34 << 2;
       _memset(($scevgep$i|0),0,($35|0))|0;
      }
      HEAP32[$2>>2] = $12;
     }
    } while(0);
    $36 = $12 << 2;
    __THREW__ = 0;
    $37 = (invoke_ii(787,($36|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     $40 = (invoke_iiii(788,($stream|0),($37|0),($36|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $43 = ($40|0)==(0);
      if (!($43)) {
       __ZdaPv($37);
       return;
      }
      $44 = ($12|0)==(0);
      if (!($44)) {
       $45 = HEAP32[$3>>2]|0;
       $i$04 = 0;
       while(1) {
        $46 = $i$04 << 2;
        $47 = (($37) + ($46)|0);
        $48 = HEAP8[$47>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $$sum1 = $46 | 1;
        $51 = (($37) + ($$sum1)|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52&255;
        $54 = $53 << 16;
        $55 = $54 | $50;
        $$sum2 = $46 | 2;
        $56 = (($37) + ($$sum2)|0);
        $57 = HEAP8[$56>>0]|0;
        $58 = $57&255;
        $59 = $58 << 8;
        $60 = $55 | $59;
        $$sum3 = $46 | 3;
        $61 = (($37) + ($$sum3)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62&255;
        $64 = $60 | $63;
        $65 = (($45) + ($i$04<<2)|0);
        HEAP32[$65>>2] = $64;
        $66 = (($i$04) + 1)|0;
        $exitcond = ($66|0)==($12|0);
        if ($exitcond) {
         break;
        } else {
         $i$04 = $66;
        }
       }
      }
      __ZdaPv($37);
      return;
     }
    }
   }
  }
 } while(0);
 $67 = ___cxa_find_matching_catch()|0;
 $68 = tempRet0;
 HEAP32[$0>>2] = (2152);
 HEAP32[$2>>2] = 0;
 $69 = HEAP32[$3>>2]|0;
 __ZdlPv($69);
 ___resumeException($67|0);
 // unreachable;
}
function __ZN12AP4_StszAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($this)) + 56|0);
 $11 = HEAP32[$4>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $16 = HEAP32[$10>>2]|0;
  $17 = (($16) + ($i$01<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$18)|0);
  $20 = ($19|0)==(0);
  $14 = (($i$01) + 1)|0;
  if (!($20)) {
   $$0 = $19;
   label = 7;
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $15 = ($14>>>0)<($13>>>0);
  if ($15) {
   $i$01 = $14;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StszAtom14GetSampleCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12AP4_StszAtom13GetSampleSizeEjRj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sample) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  $4 = ((($this)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = ((($this)) + 56|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + ($2<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $$0 = 0;$storemerge2 = $10;
  } else {
   $$0 = 0;$storemerge2 = $5;
  }
 } else {
  $$0 = -12;$storemerge2 = 0;
 }
 HEAP32[$sample_size>>2] = $storemerge2;
 return ($$0|0);
}
function __ZN12AP4_StszAtom13SetSampleSizeEjj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sample) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $$0 = -12;
  return ($$0|0);
 }
 $4 = ((($this)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $11 = ((($this)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($2<<2)|0);
  HEAP32[$13>>2] = $sample_size;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($this)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($sample_size|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ($sample|0)==(1);
 if (!($10)) {
  $$0 = -3;
  return ($$0|0);
 }
 HEAP32[$7>>2] = $sample_size;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_StszAtom8AddEntryEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 2;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $26 = ((($this)) + 40|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$26>>2] = $28;
    $29 = ((($this)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 4)|0;
    HEAP32[$29>>2] = $31;
    return 0;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre$i$i = ((($this)) + 56|0);
   if ($14) {
    $$pre$i = 0;
   } else {
    $15 = HEAP32[$$pre$i$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre$i = $13;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $17 = (($11) + ($i$01$i$i<<2)|0);
      $18 = (($15) + ($i$01$i$i<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      HEAP32[$17>>2] = $19;
      $20 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($20|0)==($13|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $20;
      }
     }
     __ZdlPv($15);
     $$pre$pre$i = HEAP32[$2>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0$i;
   $22 = $$pre$i;
  } else {
   $22 = $3;
  }
 } else {
  $22 = $3;
 }
 $21 = (($22) + 1)|0;
 HEAP32[$2>>2] = $21;
 $23 = ((($this)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<2)|0);
 HEAP32[$25>>2] = $size;
 $26 = ((($this)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($this)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 4)|0;
 HEAP32[$29>>2] = $31;
 return 0;
}
function __ZN12AP4_StszAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23384,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,18304,$9,0,0);
 $10 = ((($inspector)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)>(1);
 if (!($12)) {
  STACKTOP = sp;return 0;
 }
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return 0;
 }
 $15 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $16 = HEAP32[$inspector>>2]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$15>>2]|0;
  $20 = (($19) + ($i$01<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiiii[$18 & 1023]($inspector,$header,$21,0,0);
  $22 = (($i$01) + 1)|0;
  $23 = HEAP32[$8>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $i$01 = $22;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StszAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7920);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_StszAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7920);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_BlocAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(1064)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1651273571,($size|0),($2|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (8032);
  $8 = ((($4)) + 292|0);
  HEAP8[$8>>0] = 0;
  $9 = ((($4)) + 549|0);
  HEAP8[$9>>0] = 0;
  $10 = ((($4)) + 36|0);
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($10|0),256)|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = ((($4)) + 293|0);
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($13|0),256)|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = ((($4)) + 550|0);
    __THREW__ = 0;
    (invoke_iiii(788,($stream|0),($16|0),512)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $$0 = $4;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 __ZdlPv($4);
 ___resumeException($19|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_BlocAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,256)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 293|0);
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$3,256)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 550|0);
 $7 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$6,512)|0);
 $$0 = $7;
 return ($$0|0);
}
function __ZN12AP4_BlocAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,8120,$3,0);
 $4 = HEAP32[$inspector>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 293|0);
 FUNCTION_TABLE_viiii[$6 & 1023]($inspector,8136,$7,0);
 return 0;
}
function __ZN12AP4_BlocAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_SencAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(96)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1936027235,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (8168);
 $8 = ((($4)) + 36|0);
 HEAP32[$8>>2] = (8228);
 __THREW__ = 0;
 invoke_viiii(827,($8|0),($4|0),($size|0),($stream|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (8168);
 HEAP32[$8>>2] = (8228);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_SencAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($0,$stream)|0);
 return ($1|0);
}
function __ZN12AP4_SencAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($0,$inspector)|0);
 return ($1|0);
}
function __ZN12AP4_SencAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8336);
 $1 = ((($this)) + 72|0);
 __ZN14AP4_DataBufferD2Ev($1);
 return;
}
function __ZN12AP4_SencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8336);
 $1 = ((($this)) + 72|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($this);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_SencAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this);
 HEAP32[$0>>2] = (8336);
 $1 = ((($this)) + 36|0);
 __ZN14AP4_DataBufferD2Ev($1);
 return;
}
function __ZThn36_N12AP4_SencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ($this);
 HEAP32[$1>>2] = (8336);
 $2 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZdlPv($0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN24AP4_CencSampleEncryptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8336);
 $0 = ((($this)) + 36|0);
 __ZN14AP4_DataBufferD2Ev($0);
 return;
}
function __ZN24AP4_CencSampleEncryptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8336);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_StssAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(828,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StssAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937011571,16,0,0);
 HEAP32[$this>>2] = (8352);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN12AP4_StssAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pr = 0, $$pre$i = 0, $$pre$pre$i = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $exitcond$i = 0, $i$01$i$i = 0, $i$04 = 0, $scevgep$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1937011571,$size,$version,$flags);
 HEAP32[$this>>2] = (8352);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 40|0);
 $2 = ((($this)) + 44|0);
 $3 = ((($this)) + 48|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   $6 = HEAP32[$entry_count>>2]|0;
   $7 = $6 << 2;
   $8 = ($7>>>0)>($size>>>0);
   if ($8) {
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   $9 = (invoke_ii(787,($7|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    $12 = (invoke_iiii(788,($stream|0),($9|0),($7|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = ($12|0)==(0);
     if (!($15)) {
      __ZdaPv($9);
      STACKTOP = sp;return;
     }
     $16 = HEAP32[$entry_count>>2]|0;
     $17 = HEAP32[$2>>2]|0;
     $18 = ($17|0)==($16|0);
     if ($18) {
      $40 = $16;
     } else {
      $19 = ($17>>>0)>($16>>>0);
      do {
       if ($19) {
        HEAP32[$2>>2] = $16;
       } else {
        $20 = HEAP32[$1>>2]|0;
        $21 = ($20>>>0)<($16>>>0);
        if ($21) {
         $22 = $16 << 2;
         __THREW__ = 0;
         $23 = (invoke_ii(752,($22|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          break L1;
         }
         $26 = ($23|0)==(0|0);
         if ($26) {
          break;
         }
         $27 = HEAP32[$2>>2]|0;
         $28 = ($27|0)==(0);
         if ($28) {
          $$pre$i = 0;
         } else {
          $29 = HEAP32[$3>>2]|0;
          $30 = ($29|0)==(0|0);
          if ($30) {
           $$pre$i = $27;
          } else {
           $i$01$i$i = 0;
           while(1) {
            $31 = (($23) + ($i$01$i$i<<2)|0);
            $32 = (($29) + ($i$01$i$i<<2)|0);
            $33 = HEAP32[$32>>2]|0;
            HEAP32[$31>>2] = $33;
            $34 = (($i$01$i$i) + 1)|0;
            $exitcond$i = ($34|0)==($27|0);
            if ($exitcond$i) {
             break;
            } else {
             $i$01$i$i = $34;
            }
           }
           __ZdlPv($29);
           $$pre$pre$i = HEAP32[$2>>2]|0;
           $$pre$i = $$pre$pre$i;
          }
         }
         HEAP32[$3>>2] = $23;
         HEAP32[$1>>2] = $16;
         $36 = $$pre$i;
        } else {
         $36 = $17;
        }
        $35 = ($16>>>0)>($36>>>0);
        if ($35) {
         $37 = HEAP32[$3>>2]|0;
         $scevgep$i = (($37) + ($36<<2)|0);
         $38 = (($16) - ($36))|0;
         $39 = $38 << 2;
         _memset(($scevgep$i|0),0,($39|0))|0;
        }
        HEAP32[$2>>2] = $16;
       }
      } while(0);
      $$pr = HEAP32[$entry_count>>2]|0;
      $40 = $$pr;
     }
     $41 = ($40|0)==(0);
     if (!($41)) {
      $42 = HEAP32[$3>>2]|0;
      $i$04 = 0;
      while(1) {
       $43 = $i$04 << 2;
       $44 = (($9) + ($43)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = $46 << 24;
       $$sum1 = $43 | 1;
       $48 = (($9) + ($$sum1)|0);
       $49 = HEAP8[$48>>0]|0;
       $50 = $49&255;
       $51 = $50 << 16;
       $52 = $51 | $47;
       $$sum2 = $43 | 2;
       $53 = (($9) + ($$sum2)|0);
       $54 = HEAP8[$53>>0]|0;
       $55 = $54&255;
       $56 = $55 << 8;
       $57 = $52 | $56;
       $$sum3 = $43 | 3;
       $58 = (($9) + ($$sum3)|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = $59&255;
       $61 = $57 | $60;
       $62 = (($42) + ($i$04<<2)|0);
       HEAP32[$62>>2] = $61;
       $63 = (($i$04) + 1)|0;
       $64 = HEAP32[$entry_count>>2]|0;
       $65 = ($63>>>0)<($64>>>0);
       if ($65) {
        $i$04 = $63;
       } else {
        break;
       }
      }
     }
     __ZdaPv($9);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $66 = ___cxa_find_matching_catch()|0;
 $67 = tempRet0;
 HEAP32[$0>>2] = (2152);
 HEAP32[$2>>2] = 0;
 $68 = HEAP32[$3>>2]|0;
 __ZdlPv($68);
 ___resumeException($66|0);
 // unreachable;
}
function __ZN12AP4_StssAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 48|0);
 $5 = ($1|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($i$01<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$10)|0);
  $12 = ($11|0)==(0);
  $6 = (($i$01) + 1)|0;
  if (!($12)) {
   $$0 = $11;
   label = 5;
   break;
  }
  $7 = ($6>>>0)<($1>>>0);
  if ($7) {
   $i$01 = $6;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StssAtom8AddEntryEj($this,$sample) {
 $this = $this|0;
 $sample = $sample|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 2;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $26 = ((($this)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 4)|0;
    HEAP32[$26>>2] = $28;
    return 0;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre$i$i = ((($this)) + 48|0);
   if ($14) {
    $$pre$i = 0;
   } else {
    $15 = HEAP32[$$pre$i$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre$i = $13;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $17 = (($11) + ($i$01$i$i<<2)|0);
      $18 = (($15) + ($i$01$i$i<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      HEAP32[$17>>2] = $19;
      $20 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($20|0)==($13|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $20;
      }
     }
     __ZdlPv($15);
     $$pre$pre$i = HEAP32[$2>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0$i;
   $22 = $$pre$i;
  } else {
   $22 = $3;
  }
 } else {
  $22 = $3;
 }
 $21 = (($22) + 1)|0;
 HEAP32[$2>>2] = $21;
 $23 = ((($this)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<2)|0);
 HEAP32[$25>>2] = $sample;
 $26 = ((($this)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 4)|0;
 HEAP32[$26>>2] = $28;
 return 0;
}
function __ZN12AP4_StssAtom12IsSampleSyncEj($this,$sample) {
 $this = $this|0;
 $sample = $sample|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $entry_index$02 = 0, $entry_index$02$lcssa9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sample|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($this)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($sample>>>0);
 $$ = $10 ? 0 : $5;
 $11 = ($$>>>0)<($2>>>0);
 if ($11) {
  $entry_index$02 = $$;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $12 = (($7) + ($entry_index$02<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)>($sample>>>0);
  if ($14) {
   $$0 = 0;
   label = 8;
   break;
  }
  $15 = ($13|0)==($sample|0);
  if ($15) {
   $entry_index$02$lcssa9 = $entry_index$02;
   label = 6;
   break;
  }
  $16 = (($entry_index$02) + 1)|0;
  $17 = ($16>>>0)<($2>>>0);
  if ($17) {
   $entry_index$02 = $16;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$4>>2] = $entry_index$02$lcssa9;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StssAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 return 0;
}
function __ZN12AP4_StssAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8352);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_StssAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8352);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_PdinAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(829,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_PdinAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01 = 0, $i$01$i$i = 0, $i1$02$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1885628782,$size,$version,$flags);
 HEAP32[$this>>2] = (8448);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8544);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = (($size) + -12)|0;
 $5 = $4 >>> 3;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = $5 << 3;
 __THREW__ = 0;
 $8 = (invoke_ii(752,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $lpad$phi$index = $45;$lpad$phi$index2 = $46;
  HEAP32[$0>>2] = (8544);
  HEAP32[$2>>2] = 0;
  $47 = HEAP32[$3>>2]|0;
  __ZdlPv($47);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $11 = ($8|0)==(0|0);
 if ($11) {
  $i$01 = 0;
 } else {
  $12 = HEAP32[$2>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $$pre$i = 0;
  } else {
   $14 = HEAP32[$3>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$pre$i = $12;
   } else {
    $i$01$i$i = 0;
    while(1) {
     $16 = (($8) + ($i$01$i$i<<3)|0);
     $17 = (($14) + ($i$01$i$i<<3)|0);
     $18 = $17;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $24 = $16;
     $25 = $24;
     HEAP32[$25>>2] = $20;
     $26 = (($24) + 4)|0;
     $27 = $26;
     HEAP32[$27>>2] = $23;
     $28 = (($i$01$i$i) + 1)|0;
     $exitcond3$i = ($28|0)==($12|0);
     if ($exitcond3$i) {
      break;
     } else {
      $i$01$i$i = $28;
     }
    }
    __ZdlPv($14);
    $$pre$pre$i = HEAP32[$2>>2]|0;
    $$pre$i = $$pre$pre$i;
   }
  }
  HEAP32[$3>>2] = $8;
  HEAP32[$1>>2] = $5;
  $29 = ($$pre$i>>>0)<($5>>>0);
  if ($29) {
   $i1$02$i = $$pre$i;
   while(1) {
    $30 = (($8) + ($i1$02$i<<3)|0);
    HEAP32[$30>>2] = 0;
    $31 = (((($8) + ($i1$02$i<<3)|0)) + 4|0);
    HEAP32[$31>>2] = 0;
    $32 = (($i1$02$i) + 1)|0;
    $exitcond$i = ($32|0)==($5|0);
    if ($exitcond$i) {
     break;
    } else {
     $i1$02$i = $32;
    }
   }
  }
  HEAP32[$2>>2] = $5;
  if ($6) {
   return;
  } else {
   $i$01 = 0;
  }
 }
 while(1) {
  $33 = HEAP32[$3>>2]|0;
  $34 = (($33) + ($i$01<<3)|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($34|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   break;
  }
  $37 = HEAP32[$3>>2]|0;
  $38 = (((($37) + ($i$01<<3)|0)) + 4|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($38|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   break;
  }
  $41 = (($i$01) + 1)|0;
  $42 = ($41>>>0)<($5>>>0);
  if ($42) {
   $i$01 = $41;
  } else {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  return;
 }
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 $lpad$phi$index = $43;$lpad$phi$index2 = $44;
 HEAP32[$0>>2] = (8544);
 HEAP32[$2>>2] = 0;
 $47 = HEAP32[$3>>2]|0;
 __ZdlPv($47);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_PdinAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 48|0);
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + ($i$01<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   label = 5;
   break;
  }
  $12 = HEAP32[$0>>2]|0;
  $13 = (((($12) + ($i$01<<3)|0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$14)|0);
  $16 = ($15|0)==(0);
  $5 = (($i$01) + 1)|0;
  if (!($16)) {
   $$0 = $15;
   label = 5;
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $6 = ($5>>>0)<($4>>>0);
  if ($6) {
   $i$01 = $5;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_PdinAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0;
 var $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,8552,$vararg_buffer)|0);
  $4 = HEAP32[$inspector>>2]|0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$3>>2]|0;
  $8 = (($7) + ($i$01<<3)|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_viiiii[$6 & 1023]($inspector,$header,$9,0,0);
  HEAP32[$vararg_buffer1>>2] = $i$01;
  (_snprintf($header,32,8568,$vararg_buffer1)|0);
  $10 = HEAP32[$inspector>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$3>>2]|0;
  $14 = (((($13) + ($i$01<<3)|0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_viiiii[$12 & 1023]($inspector,$header,$15,0,0);
  $16 = (($i$01) + 1)|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  if ($18) {
   $i$01 = $16;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_PdinAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8448);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8544);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_PdinAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8448);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8544);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8544);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8544);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN27AP4_DecoderConfigDescriptorC2EhhjjjP33AP4_DecoderSpecificInfoDescriptor($this,$stream_type,$oti,$buffer_size,$max_bitrate,$avg_bitrate,$dsi) {
 $this = $this|0;
 $stream_type = $stream_type|0;
 $oti = $oti|0;
 $buffer_size = $buffer_size|0;
 $max_bitrate = $max_bitrate|0;
 $avg_bitrate = $avg_bitrate|0;
 $dsi = $dsi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,4,0,2,13);
 HEAP32[$this>>2] = (8648);
 $0 = ((($this)) + 20|0);
 HEAP8[$0>>0] = $stream_type;
 $1 = ((($this)) + 21|0);
 HEAP8[$1>>0] = $oti;
 $2 = ((($this)) + 22|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 24|0);
 HEAP32[$3>>2] = $buffer_size;
 $4 = ((($this)) + 28|0);
 HEAP32[$4>>2] = $max_bitrate;
 $5 = ((($this)) + 32|0);
 HEAP32[$5>>2] = $avg_bitrate;
 $6 = ((($this)) + 36|0);
 HEAP32[$6>>2] = (5000);
 $7 = ((($this)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 48|0);
 HEAP32[$9>>2] = 0;
 $10 = ($dsi|0)==(0|0);
 if ($10) {
  return;
 }
 __THREW__ = 0;
 $11 = (invoke_ii(752,12)|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  HEAP32[$11>>2] = $dsi;
  $14 = ((($11)) + 4|0);
  $15 = ((($11)) + 8|0);
  HEAP32[$8>>2] = $11;
  HEAP32[$9>>2] = $11;
  HEAP32[$14>>2] = 0;
  HEAP32[$15>>2] = 0;
  HEAP32[$7>>2] = 1;
  $16 = ((($dsi)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($dsi)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17))|0;
  $21 = ((($this)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22))|0;
  HEAP32[$21>>2] = $23;
  __THREW__ = 0;
  $24 = (invoke_ii(830,($23|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = ((($this)) + 12|0);
   HEAP32[$27>>2] = $24;
   return;
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 HEAP32[$6>>2] = (5000);
 $30 = HEAP32[$8>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  HEAP32[$7>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$8>>2] = 0;
  ___resumeException($28|0);
  // unreachable;
 } else {
  $item$01$i$i = $30;
 }
 while(1) {
  $32 = ((($item$01$i$i)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  __ZdlPv($item$01$i$i);
  $34 = ($33|0)==(0|0);
  if ($34) {
   break;
  } else {
   $item$01$i$i = $33;
  }
 }
 HEAP32[$7>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$8>>2] = 0;
 ___resumeException($28|0);
 // unreachable;
}
function __ZN27AP4_DecoderConfigDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $$lobit = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $bits = 0, $descriptor = 0, $item$01$i$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index2 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp;
 $bits = sp + 12|0;
 $descriptor = sp + 8|0;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,4,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (8648);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (5000);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$stream>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 (invoke_iii($6|0,($stream|0),($start|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   label = 18;
  } else {
   $9 = ((($this)) + 21|0);
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($9|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 18;
   } else {
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($bits|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 18;
    } else {
     $14 = HEAP8[$bits>>0]|0;
     $15 = ($14&255) >>> 2;
     $16 = ((($this)) + 20|0);
     HEAP8[$16>>0] = $15;
     $17 = ((($this)) + 22|0);
     $18 = ($14&255) >>> 1;
     $$lobit = $18 & 1;
     HEAP8[$17>>0] = $$lobit;
     $19 = ((($this)) + 24|0);
     __THREW__ = 0;
     (invoke_iii(831,($stream|0),($19|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 18;
     } else {
      $22 = ((($this)) + 28|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($22|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       label = 18;
      } else {
       $25 = ((($this)) + 32|0);
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($25|0))|0);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       if ($27) {
        label = 18;
       } else {
        __THREW__ = 0;
        $28 = (invoke_ii(752,40)|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         label = 18;
        } else {
         $31 = $start;
         $32 = $31;
         $33 = HEAP32[$32>>2]|0;
         $34 = (($31) + 4)|0;
         $35 = $34;
         $36 = HEAP32[$35>>2]|0;
         $37 = (_i64Add(($33|0),($36|0),13,0)|0);
         $38 = tempRet0;
         $39 = (($payload_size) + -13)|0;
         __THREW__ = 0;
         invoke_viiiiii(808,($28|0),($stream|0),($37|0),($38|0),($39|0),0);
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if ($41) {
          $61 = ___cxa_find_matching_catch()|0;
          $62 = tempRet0;
          __ZdlPv($28);
          $$0 = $61;$$01 = $62;
          break;
         }
         HEAP32[$descriptor>>2] = 0;
         while(1) {
          __THREW__ = 0;
          $42 = (invoke_iii(795,($28|0),($descriptor|0))|0);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if ($44) {
           label = 17;
           break;
          }
          $45 = ($42|0)==(0);
          if (!($45)) {
           break;
          }
          $46 = HEAP32[$descriptor>>2]|0;
          __THREW__ = 0;
          $47 = (invoke_ii(752,12)|0);
          $48 = __THREW__; __THREW__ = 0;
          $49 = $48&1;
          if ($49) {
           label = 17;
           break;
          }
          HEAP32[$47>>2] = $46;
          $50 = ((($47)) + 4|0);
          HEAP32[$50>>2] = 0;
          $51 = ((($47)) + 8|0);
          HEAP32[$51>>2] = 0;
          $52 = HEAP32[$3>>2]|0;
          $53 = ($52|0)==(0|0);
          if ($53) {
           HEAP32[$2>>2] = $47;
           HEAP32[$3>>2] = $47;
           HEAP32[$50>>2] = 0;
           $$sink$i$i = 0;
          } else {
           HEAP32[$50>>2] = 0;
           $54 = ((($52)) + 4|0);
           HEAP32[$54>>2] = $47;
           HEAP32[$3>>2] = $47;
           $$sink$i$i = $52;
          }
          HEAP32[$51>>2] = $$sink$i$i;
          $55 = HEAP32[$1>>2]|0;
          $56 = (($55) + 1)|0;
          HEAP32[$1>>2] = $56;
         }
         if ((label|0) == 17) {
          $57 = ___cxa_find_matching_catch()|0;
          $58 = tempRet0;
          $lpad$phi$index = $57;$lpad$phi$index2 = $58;
          label = 19;
          break;
         }
         $63 = HEAP32[$28>>2]|0;
         $64 = ((($63)) + 12|0);
         $65 = HEAP32[$64>>2]|0;
         __THREW__ = 0;
         invoke_vi($65|0,($28|0));
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if ($67) {
          label = 18;
         } else {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $lpad$phi$index = $59;$lpad$phi$index2 = $60;
  label = 19;
 }
 if ((label|0) == 19) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 HEAP32[$0>>2] = (5000);
 $68 = HEAP32[$2>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  HEAP32[$1>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$2>>2] = 0;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $item$01$i$i = $68;
 }
 while(1) {
  $70 = ((($item$01$i$i)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  __ZdlPv($item$01$i$i);
  $72 = ($71|0)==(0|0);
  if ($72) {
   break;
  } else {
   $item$01$i$i = $71;
  }
 }
 HEAP32[$1>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$2>>2] = 0;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN27AP4_DecoderConfigDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8648);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $14 = ((($this)) + 48|0);
  $15 = ((($this)) + 40|0);
  HEAP32[$0>>2] = (5000);
  HEAP32[$15>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$1>>2] = 0;
  return;
 } else {
  $item$01$i = $2;
 }
 while(1) {
  $4 = ((($item$01$i)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$item$01$i>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$6>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_vi($10|0,($6|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
  }
  __ZdlPv($item$01$i);
  $13 = ($5|0)==(0|0);
  if ($13) {
   label = 5;
   break;
  } else {
   $item$01$i = $5;
  }
 }
 if ((label|0) == 5) {
  $14 = ((($this)) + 48|0);
  $15 = ((($this)) + 40|0);
  HEAP32[$0>>2] = (5000);
  HEAP32[$15>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$1>>2] = 0;
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 HEAP32[$0>>2] = (5000);
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $23 = ((($this)) + 40|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($this)) + 48|0);
  HEAP32[$24>>2] = 0;
  HEAP32[$1>>2] = 0;
  ___resumeException($16|0);
  // unreachable;
 } else {
  $item$01$i$i2 = $18;
 }
 while(1) {
  $20 = ((($item$01$i$i2)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  __ZdlPv($item$01$i$i2);
  $22 = ($21|0)==(0|0);
  if ($22) {
   break;
  } else {
   $item$01$i$i2 = $21;
  }
 }
 $23 = ((($this)) + 40|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 48|0);
 HEAP32[$24>>2] = 0;
 HEAP32[$1>>2] = 0;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN27AP4_DecoderConfigDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $item$01$i$i = 0, $item$01$i$i2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8648);
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$item$01$i$i>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   invoke_vi($9|0,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    break;
   }
  }
  __ZdlPv($item$01$i$i);
  $12 = ($4|0)==(0|0);
  if ($12) {
   label = 7;
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 if ((label|0) == 7) {
  __ZdlPv($this);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $15 = ((($this)) + 36|0);
 HEAP32[$15>>2] = (5000);
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZdlPv($this);
  ___resumeException($13|0);
  // unreachable;
 } else {
  $item$01$i$i2$i = $16;
 }
 while(1) {
  $18 = ((($item$01$i$i2$i)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  __ZdlPv($item$01$i$i2$i);
  $20 = ($19|0)==(0|0);
  if ($20) {
   break;
  } else {
   $item$01$i$i2$i = $19;
  }
 }
 __ZdlPv($this);
 ___resumeException($13|0);
 // unreachable;
}
function __ZN27AP4_DecoderConfigDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 21|0);
 $2 = HEAP8[$1>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$2)|0);
 $3 = ((($this)) + 20|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 2;
 $7 = ((($this)) + 22|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 $10 = $9 ? 2 : 0;
 $11 = $6 | $10;
 $12 = $11 | 1;
 $13 = $12&255;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$13)|0);
 $14 = ((($this)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$15)|0);
 $16 = ((($this)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
 $18 = ((($this)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$19)|0);
 HEAP32[$0>>2] = (5040);
 $20 = ((($0)) + 4|0);
 HEAP32[$20>>2] = $stream;
 $21 = ((($this)) + 44|0);
 $item$01$i = HEAP32[$21>>2]|0;
 $22 = ($item$01$i|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return 0;
 }
 $23 = HEAP32[$item$01$i>>2]|0;
 (__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($0,$23)|0);
 $24 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$24>>2]|0;
 $25 = ($item$0$i1|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $26 = ((($$pre)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$27 & 1023]($0,$28)|0);
  $29 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$29>>2]|0;
  $30 = ($item$0$i|0)==(0|0);
  if ($30) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN27AP4_DecoderConfigDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0;
 var $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,8744,$5,$8,0);
 $9 = HEAP32[$inspector>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 20|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,8760,$14,0,0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 21|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,8776,$20,0,0);
 $21 = HEAP32[$inspector>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($this)) + 22|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 FUNCTION_TABLE_viiiii[$23 & 1023]($inspector,8792,$26,0,0);
 $27 = HEAP32[$inspector>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($this)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_viiiii[$29 & 1023]($inspector,8808,$31,0,0);
 $32 = HEAP32[$inspector>>2]|0;
 $33 = ((($32)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($this)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_viiiii[$34 & 1023]($inspector,19264,$36,0,0);
 $37 = HEAP32[$inspector>>2]|0;
 $38 = ((($37)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($this)) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 FUNCTION_TABLE_viiiii[$39 & 1023]($inspector,19280,$41,0,0);
 HEAP32[$0>>2] = (5096);
 $42 = ((($0)) + 4|0);
 HEAP32[$42>>2] = $inspector;
 $43 = ((($this)) + 44|0);
 $item$01$i = HEAP32[$43>>2]|0;
 $44 = ($item$01$i|0)==(0|0);
 if ($44) {
  $53 = HEAP32[$inspector>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 1023]($inspector);
  STACKTOP = sp;return 0;
 }
 $45 = HEAP32[$item$01$i>>2]|0;
 (__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($0,$45)|0);
 $46 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$46>>2]|0;
 $47 = ($item$0$i1|0)==(0|0);
 if ($47) {
  $53 = HEAP32[$inspector>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 1023]($inspector);
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $48 = ((($$pre)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$49 & 1023]($0,$50)|0);
  $51 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$51>>2]|0;
  $52 = ($item$0$i|0)==(0|0);
  if ($52) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 $53 = HEAP32[$inspector>>2]|0;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_vi[$55 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZNK27AP4_DecoderConfigDescriptor32GetDecoderSpecificInfoDescriptorEv($this) {
 $this = $this|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $item$0$i = 0, $item$01$i = 0, $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (5016);
 $1 = ((($0)) + 4|0);
 HEAP8[$1>>0] = 5;
 $2 = ((($this)) + 44|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$item$01$i>>2]|0;
 $5 = (__ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor($0,$4)|0);
 $6 = ($5|0)==(0);
 L4: do {
  if ($6) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $7 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$7>>2]|0;
    $8 = ($item$0$i|0)==(0|0);
    if ($8) {
     $$0 = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $9 = ((($$pre)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$item$0$i>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($0,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = HEAP32[$$lcssa>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (___dynamic_cast($14,10880,17624,0)|0);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK27AP4_DecoderConfigDescriptor23GetObjectTypeIndicationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 21|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetStreamTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetBufferSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetMaxBitrateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetAvgBitrateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12AP4_OdheAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(832,($4|0),($size|0),0,($5|0),($stream|0),($atom_factory|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_OdheAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$01 = 0, $$neg2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $content_type = 0, $content_type_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $content_type_length = sp + 256|0;
 $content_type = sp;
 __ZN17AP4_ContainerAtomC2Ejybhj($this,1868851301,$size,0,0,$version,$flags);
 HEAP32[$this>>2] = (8832);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8908);
 $1 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(790,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $$0 = $19;$$01 = $20;
 } else {
  __THREW__ = 0;
  (invoke_iii(786,($stream|0),($content_type_length|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   $6 = HEAP8[$content_type_length>>0]|0;
   $7 = $6&255;
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($content_type|0),($7|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = HEAP8[$content_type_length>>0]|0;
    $11 = $10&255;
    __THREW__ = 0;
    invoke_viii(758,($1|0),($content_type|0),($11|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     $14 = HEAP8[$content_type_length>>0]|0;
     $15 = $14&255;
     $$neg2 = (($size) + -13)|0;
     $16 = (($$neg2) - ($15))|0;
     __THREW__ = 0;
     invoke_viiiii(747,($this|0),($atom_factory|0),($stream|0),($16|0),0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if (!($18)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  __THREW__ = 0;
  invoke_vi(792,($1|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $28 = ___cxa_find_matching_catch(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  } else {
   $$0 = $21;$$01 = $22;
  }
 }
 $25 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN12AP4_OdheAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2&255;
 $4 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($this)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$9,$6)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$0>>2] = (11232);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $stream;
 $13 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$13>>2]|0;
 $14 = ($item$01$i|0)==(0|0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[(11240)>>2]|0;
 $16 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$15 & 1023]($0,$16)|0);
 $17 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$17>>2]|0;
 $18 = ($item$0$i1|0)==(0|0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $19 = ((($$pre)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$20 & 1023]($0,$21)|0);
  $22 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$22>>2]|0;
  $23 = ($item$0$i|0)==(0|0);
  if ($23) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_OdheAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,8984,$4,0);
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 1023]($this,$inspector)|0);
 return ($8|0);
}
function __ZN12AP4_OdheAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0;
 var $item$0$i2 = 0, $item$0$i3 = 0, $item$01$i = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($this)|0);
 $6 = (($5) + 1)|0;
 $7 = ((($this)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8))|0;
 $10 = $size;
 $11 = $10;
 HEAP32[$11>>2] = $9;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $14 = ((($1)) + 4|0);
 HEAP32[$14>>2] = $size;
 $15 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$15>>2]|0;
 $16 = ($item$01$i|0)==(0|0);
 if ($16) {
  $31 = $9;$32 = 0;
 } else {
  $17 = HEAP32[$item$01$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$17)|0);
  $18 = ((($item$01$i)) + 4|0);
  $item$0$i2 = HEAP32[$18>>2]|0;
  $19 = ($item$0$i2|0)==(0|0);
  if (!($19)) {
   $item$0$i3 = $item$0$i2;
   while(1) {
    $$pre = HEAP32[$1>>2]|0;
    $20 = ((($$pre)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$item$0$i3>>2]|0;
    (FUNCTION_TABLE_iii[$21 & 1023]($1,$22)|0);
    $23 = ((($item$0$i3)) + 4|0);
    $item$0$i = HEAP32[$23>>2]|0;
    $24 = ($item$0$i|0)==(0|0);
    if ($24) {
     break;
    } else {
     $item$0$i3 = $item$0$i;
    }
   }
  }
  $25 = $size;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $27;$32 = $30;
 }
 __ZN8AP4_Atom7SetSizeEyb($this,$31,$32,0);
 $33 = ((($this)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$34>>2]|0;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vii[$38 & 1023]($34,$this);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_OdheAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $item$0$i$i = 0, $item$0$i$i1 = 0, $item$0$i$i2 = 0, $item$01$i$i = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $1 = sp + 8|0;
 $2 = ((($this)) + -36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = (($6) + 1)|0;
 $8 = ((($2)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9))|0;
 $11 = $size$i;
 $12 = $11;
 HEAP32[$12>>2] = $10;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $15 = ((($1)) + 4|0);
 HEAP32[$15>>2] = $size$i;
 $16 = ((($2)) + 48|0);
 $item$01$i$i = HEAP32[$16>>2]|0;
 $17 = ($item$01$i$i|0)==(0|0);
 if ($17) {
  $32 = $10;$33 = 0;
 } else {
  $18 = HEAP32[$item$01$i$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$18)|0);
  $19 = ((($item$01$i$i)) + 4|0);
  $item$0$i$i1 = HEAP32[$19>>2]|0;
  $20 = ($item$0$i$i1|0)==(0|0);
  if (!($20)) {
   $item$0$i$i2 = $item$0$i$i1;
   while(1) {
    $$pre$i = HEAP32[$1>>2]|0;
    $21 = ((($$pre$i)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$item$0$i$i2>>2]|0;
    (FUNCTION_TABLE_iii[$22 & 1023]($1,$23)|0);
    $24 = ((($item$0$i$i2)) + 4|0);
    $item$0$i$i = HEAP32[$24>>2]|0;
    $25 = ($item$0$i$i|0)==(0|0);
    if ($25) {
     break;
    } else {
     $item$0$i$i2 = $item$0$i$i;
    }
   }
  }
  $26 = $size$i;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $28;$33 = $31;
 }
 __ZN8AP4_Atom7SetSizeEyb($2,$32,$33,0);
 $34 = ((($2)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$35>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vii[$39 & 1023]($35,$2);
 STACKTOP = sp;return;
}
function __ZN12AP4_OdheAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8832);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8908);
 $1 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 $7 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN12AP4_OdheAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8832);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (8908);
 $1 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N12AP4_OdheAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (8832);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (8908);
 $2 = ((($0)) + 56|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_OdheAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (8832);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (8908);
 $2 = ((($0)) + 56|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN29AP4_MarlinIpmpAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom($this,$type,$size,$stream,$0,$atom) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $0 = $0|0;
 $atom = $atom|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  if ((($type|0) == 1937013104)) {
   $4 = (__Znwj(48)|0);
   __THREW__ = 0;
   invoke_viiiii(777,($4|0),1937013104,($size|0),0,($stream|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch()|0;
    $8 = tempRet0;
    __ZdlPv($4);
    ___resumeException($7|0);
    // unreachable;
   } else {
    HEAP32[$atom>>2] = $4;
    $9 = $4;
    break;
   }
  } else if ((($type|0) == 1935766642)) {
   $1 = ((($this)) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory(1935766642,$size,0,0,0,$stream,$2)|0);
   HEAP32[$atom>>2] = $3;
   $9 = $3;
  } else {
   HEAP32[$atom>>2] = 0;
   $9 = 0;
  }
 } while(0);
 $not$ = ($9|0)==(0|0);
 $10 = $not$ << 31 >> 31;
 return ($10|0);
}
function __ZN12AP4_MkidAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(833,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MkidAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $available$012 = 0, $available$1 = 0, $entry_count = 0, $entry_size = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$011 = 0, $i1$02$i = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 4|0;
 $entry_size = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1835755876,$size,$version,$flags);
 HEAP32[$this>>2] = (9048);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (9216);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = (($size) + -16)|0;
 HEAP32[$entry_count>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if ($6) {
   label = 6;
  } else {
   $7 = HEAP32[$entry_count>>2]|0;
   $8 = ($7*20)|0;
   $9 = ($4>>>0)<($8>>>0);
   if ($9) {
    STACKTOP = sp;return;
   }
   $27 = HEAP32[$2>>2]|0;
   $28 = ($27|0)==($7|0);
   do {
    if (!($28)) {
     $29 = ($27>>>0)>($7>>>0);
     if ($29) {
      $i$01$i = $7;
      while(1) {
       $30 = HEAP32[$3>>2]|0;
       $31 = (((($30) + (($i$01$i*24)|0)|0)) + 16|0);
       __THREW__ = 0;
       invoke_vi(792,($31|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 4;
        break;
       }
       $34 = (($i$01$i) + 1)|0;
       $35 = HEAP32[$2>>2]|0;
       $36 = ($34>>>0)<($35>>>0);
       if ($36) {
        $i$01$i = $34;
       } else {
        label = 14;
        break;
       }
      }
      if ((label|0) == 4) {
       $12 = ___cxa_find_matching_catch()|0;
       $13 = tempRet0;
       $lpad$phi$index = $12;$lpad$phi$index4 = $13;
       break L1;
      }
      else if ((label|0) == 14) {
       HEAP32[$2>>2] = $7;
       break;
      }
     }
     __THREW__ = 0;
     $37 = (invoke_iii(834,($0|0),($7|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 6;
      break L1;
     }
     $40 = ($37|0)==(0);
     if ($40) {
      $41 = HEAP32[$2>>2]|0;
      $42 = ($41>>>0)<($7>>>0);
      L18: do {
       if ($42) {
        $i1$02$i = $41;
        while(1) {
         $43 = HEAP32[$3>>2]|0;
         $44 = (($43) + (($i1$02$i*24)|0)|0);
         ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;HEAP32[$44+12>>2]=0|0;HEAP32[$44+16>>2]=0|0;HEAP32[$44+20>>2]=0|0;
         $45 = (((($43) + (($i1$02$i*24)|0)|0)) + 16|0);
         __THREW__ = 0;
         invoke_vi(790,($45|0));
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          break;
         }
         $48 = (($i1$02$i) + 1)|0;
         $exitcond$i = ($48|0)==($7|0);
         if ($exitcond$i) {
          break L18;
         } else {
          $i1$02$i = $48;
         }
        }
        $14 = ___cxa_find_matching_catch()|0;
        $15 = tempRet0;
        $lpad$phi$index = $14;$lpad$phi$index4 = $15;
        break L1;
       }
      } while(0);
      HEAP32[$2>>2] = $7;
     }
    }
   } while(0);
   $49 = HEAP32[$entry_count>>2]|0;
   $50 = ($49|0)!=(0);
   $51 = ($4>>>0)>(19);
   $52 = $51 & $50;
   if ($52) {
    $available$012 = $4;$i$011 = 0;
   } else {
    STACKTOP = sp;return;
   }
   while(1) {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($entry_size|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 3;
     break;
    }
    $55 = HEAP32[$entry_size>>2]|0;
    $56 = (($55) + 4)|0;
    $57 = ($available$012>>>0)<($56>>>0);
    if ($57) {
     label = 31;
     break;
    }
    $58 = ($55>>>0)<(16);
    if ($58) {
     $available$1 = $available$012;
    } else {
     $59 = (($available$012) - ($56))|0;
     $60 = HEAP32[$3>>2]|0;
     $61 = (($60) + (($i$011*24)|0)|0);
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($61|0),16)|0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 3;
      break;
     }
     $64 = HEAP32[$entry_size>>2]|0;
     $65 = (($64) + -16)|0;
     __THREW__ = 0;
     $66 = (invoke_ii(787,($65|0))|0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 3;
      break;
     }
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($66|0),($65|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 3;
      break;
     }
     $71 = HEAP32[$3>>2]|0;
     $72 = (((($71) + (($i$011*24)|0)|0)) + 16|0);
     __THREW__ = 0;
     invoke_viii(758,($72|0),($66|0),($65|0));
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if ($74) {
      label = 3;
      break;
     }
     __ZdaPv($66);
     $available$1 = $59;
    }
    $75 = (($i$011) + 1)|0;
    $76 = HEAP32[$entry_count>>2]|0;
    $77 = ($75>>>0)<($76>>>0);
    $78 = ($available$1>>>0)>(19);
    $79 = $78 & $77;
    if ($79) {
     $available$012 = $available$1;$i$011 = $75;
    } else {
     label = 31;
     break;
    }
   }
   if ((label|0) == 3) {
    $10 = ___cxa_find_matching_catch()|0;
    $11 = tempRet0;
    $lpad$phi$index = $10;$lpad$phi$index4 = $11;
    break;
   }
   else if ((label|0) == 31) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index4 = $17;
 }
 HEAP32[$0>>2] = (9216);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  HEAP32[$2>>2] = 0;
  $80 = HEAP32[$3>>2]|0;
  __ZdlPv($80);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $20 = HEAP32[$3>>2]|0;
  $21 = (((($20) + (($i$01$i$i*24)|0)|0)) + 16|0);
  __THREW__ = 0;
  invoke_vi(792,($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   label = 33;
   break;
  }
  $24 = (($i$01$i$i) + 1)|0;
  $25 = HEAP32[$2>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $i$01$i$i = $24;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  HEAP32[$2>>2] = 0;
  $80 = HEAP32[$3>>2]|0;
  __ZdlPv($80);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $81 = ___cxa_find_matching_catch(0|0)|0;
  $82 = tempRet0;
  ___clang_call_terminate($81);
  // unreachable;
 }
}
function __ZN12AP4_MkidAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  return ($2|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return ($2|0);
 }
 $6 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($7) + (($i$01*24)|0)|0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 16)|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$10)|0);
  $11 = HEAP32[$6>>2]|0;
  $12 = (($11) + (($i$01*24)|0)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($stream,$12,16)|0);
  $13 = HEAP32[$6>>2]|0;
  $14 = (((($13) + (($i$01*24)|0)|0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($13) + (($i$01*24)|0)|0)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  (__ZN14AP4_ByteStream5WriteEPKvj($stream,$15,$17)|0);
  $18 = (($i$01) + 1)|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $i$01 = $18;
  } else {
   break;
  }
 }
 return ($2|0);
}
function __ZN12AP4_MkidAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return 0;
 }
 $7 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$7>>2]|0;
  $12 = (($11) + (($i$01*24)|0)|0);
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,9688,$12,16,0);
  $13 = HEAP32[$inspector>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (((($16) + (($i$01*24)|0)|0)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiii[$15 & 1023]($inspector,24248,$18,0);
  $19 = (($i$01) + 1)|0;
  $20 = HEAP32[$3>>2]|0;
  $21 = ($19>>>0)<($20>>>0);
  if ($21) {
   $i$01 = $19;
  } else {
   break;
  }
 }
 return 0;
}
function __GLOBAL__sub_I_Ap4Marlin_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN22AP4_DefaultAtomFactoryC2Ev(9000);
 HEAP32[9000>>2] = (9328);
 __THREW__ = 0;
 $0 = (invoke_ii(752,8)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  HEAP32[$0>>2] = (9112);
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = 9000;
  __THREW__ = 0;
  (invoke_iii(835,(9000|0),($0|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   (___cxa_atexit((69|0),(9000|0),(___dso_handle|0))|0);
   return;
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_vi(69,(9000|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($6|0);
  // unreachable;
 }
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$pre = 0, $$pre3 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($count>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($count*24)|0;
 $4 = (__Znwj($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($this)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 $$pre6 = ((($this)) + 12|0);
 if (!($8)) {
  $9 = HEAP32[$$pre6>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $13 = $9;$i$01 = 0;
   while(1) {
    $11 = (($4) + (($i$01*24)|0)|0);
    $12 = (($13) + (($i$01*24)|0)|0);
    dest=$11; src=$12; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $14 = (((($4) + (($i$01*24)|0)|0)) + 16|0);
    $15 = (((($13) + (($i$01*24)|0)|0)) + 16|0);
    __ZN10AP4_StringC2ERKS_($14,$15);
    dest=$11; src=$12; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $16 = HEAP32[$$pre6>>2]|0;
    $17 = (((($16) + (($i$01*24)|0)|0)) + 16|0);
    __ZN10AP4_StringD2Ev($17);
    $18 = (($i$01) + 1)|0;
    $19 = HEAP32[$6>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if (!($20)) {
     break;
    }
    $$pre = HEAP32[$$pre6>>2]|0;
    $13 = $$pre;$i$01 = $18;
   }
   $$pre3 = HEAP32[$$pre6>>2]|0;
   __ZdlPv($$pre3);
  }
 }
 HEAP32[$$pre6>>2] = $4;
 HEAP32[$0>>2] = $count;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_MkidAtomD2Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9048);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (9216);
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$pre$i = ((($this)) + 48|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  $9 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($9);
  return;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $4 = HEAP32[$$pre$i>>2]|0;
  $5 = (((($4) + (($i$01$i$i*24)|0)|0)) + 16|0);
  __ZN10AP4_StringD2Ev($5);
  $6 = (($i$01$i$i) + 1)|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $i$01$i$i = $6;
  } else {
   break;
  }
 }
 HEAP32[$1>>2] = 0;
 $9 = HEAP32[$$pre$i>>2]|0;
 __ZdlPv($9);
 return;
}
function __ZN12AP4_MkidAtomD0Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9048);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (9216);
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$pre$i$i = ((($this)) + 48|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  $11 = HEAP32[$$pre$i$i>>2]|0;
  __ZdlPv($11);
  __ZdlPv($this);
  return;
 } else {
  $i$01$i$i$i = 0;
 }
 while(1) {
  $4 = HEAP32[$$pre$i$i>>2]|0;
  $5 = (((($4) + (($i$01$i$i$i*24)|0)|0)) + 16|0);
  __THREW__ = 0;
  invoke_vi(792,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
  $8 = (($i$01$i$i$i) + 1)|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if ($10) {
   $i$01$i$i$i = $8;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$1>>2] = 0;
  $11 = HEAP32[$$pre$i$i>>2]|0;
  __ZdlPv($11);
  __ZdlPv($this);
  return;
 }
 else if ((label|0) == 5) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  __ZdlPv($this);
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN15AP4_AtomFactory11TypeHandlerD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN29AP4_MarlinIpmpAtomTypeHandlerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9216);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$$pre>>2]|0;
  __ZdlPv($8);
  return;
 } else {
  $i$01$i = 0;
 }
 while(1) {
  $3 = HEAP32[$$pre>>2]|0;
  $4 = (((($3) + (($i$01$i*24)|0)|0)) + 16|0);
  __ZN10AP4_StringD2Ev($4);
  $5 = (($i$01$i) + 1)|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $i$01$i = $5;
  } else {
   break;
  }
 }
 HEAP32[$0>>2] = 0;
 $8 = HEAP32[$$pre>>2]|0;
 __ZdlPv($8);
 return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9216);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre$i = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $10 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($10);
  __ZdlPv($this);
  return;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $3 = HEAP32[$$pre$i>>2]|0;
  $4 = (((($3) + (($i$01$i$i*24)|0)|0)) + 16|0);
  __THREW__ = 0;
  invoke_vi(792,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 5;
   break;
  }
  $7 = (($i$01$i$i) + 1)|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $i$01$i$i = $7;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$0>>2] = 0;
  $10 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($10);
  __ZdlPv($this);
  return;
 }
 else if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($this);
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN25AP4_MarlinIpmpAtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(69,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_OdafAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$lobit$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $s$i = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s$i = sp + 5|0;
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1868849510,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (9400);
  $8 = ((($4)) + 37|0);
  HEAP8[$8>>0] = 0;
  $9 = ((($4)) + 38|0);
  HEAP8[$9>>0] = 0;
  __THREW__ = 0;
  (invoke_iii(786,($stream|0),($s$i|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = HEAP8[$s$i>>0]|0;
   $13 = ((($4)) + 36|0);
   $$lobit$i = ($12&255) >>> 7;
   HEAP8[$13>>0] = $$lobit$i;
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($8|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$0 = $4;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 __ZdlPv($4);
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_OdafAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ? -128 : 0;
 $4 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 37|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($this)) + 38|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$11)|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN12AP4_OdafAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24432,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 37|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,24456,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 38|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,24480,$17,0,0);
 return 0;
}
function __ZN12AP4_OdafAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_FtypAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$$i = 0, $$01 = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compatible_brand = 0, $exitcond$i = 0, $i$01$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compatible_brand = sp;
 __ZN8AP4_AtomC2Ejj($this,1718909296,$size);
 HEAP32[$this>>2] = (9496);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($4|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($this)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($7|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($size) + -16)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    STACKTOP = sp;return;
   }
   $$01 = $10;
   while(1) {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($compatible_brand|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    $14 = HEAP32[$1>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = (($15) + 1)|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ($14|0)==(0);
     $19 = $14 << 1;
     $$$i = $18 ? 64 : $19;
     $20 = ($$$i>>>0)<($16>>>0);
     $new_count$0$i = $20 ? $16 : $$$i;
     $21 = ($14>>>0)<($new_count$0$i>>>0);
     if ($21) {
      $22 = $new_count$0$i << 2;
      __THREW__ = 0;
      $23 = (invoke_ii(752,($22|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
      $26 = ($23|0)==(0|0);
      if (!($26)) {
       $27 = HEAP32[$2>>2]|0;
       $28 = ($27|0)==(0);
       if ($28) {
        $$pre$i = 0;
       } else {
        $29 = HEAP32[$3>>2]|0;
        $30 = ($29|0)==(0|0);
        if ($30) {
         $$pre$i = $27;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $31 = (($23) + ($i$01$i$i<<2)|0);
          $32 = (($29) + ($i$01$i$i<<2)|0);
          $33 = HEAP32[$32>>2]|0;
          HEAP32[$31>>2] = $33;
          $34 = (($i$01$i$i) + 1)|0;
          $exitcond$i = ($34|0)==($27|0);
          if ($exitcond$i) {
           break;
          } else {
           $i$01$i$i = $34;
          }
         }
         __ZdlPv($29);
         $$pre$pre$i = HEAP32[$2>>2]|0;
         $$pre$i = $$pre$pre$i;
        }
       }
       HEAP32[$3>>2] = $23;
       HEAP32[$1>>2] = $new_count$0$i;
       $36 = $$pre$i;
       label = 15;
      }
     } else {
      $36 = $15;
      label = 15;
     }
    } else {
     $36 = $15;
     label = 15;
    }
    if ((label|0) == 15) {
     label = 0;
     $35 = (($36) + 1)|0;
     HEAP32[$2>>2] = $35;
     $37 = HEAP32[$3>>2]|0;
     $38 = (($37) + ($36<<2)|0);
     $39 = HEAP32[$compatible_brand>>2]|0;
     HEAP32[$38>>2] = $39;
    }
    $40 = (($$01) + -4)|0;
    $41 = ($40|0)==(0);
    if ($41) {
     label = 17;
     break;
    } else {
     $$01 = $40;
    }
   }
   if ((label|0) == 17) {
    STACKTOP = sp;return;
   }
   $42 = ___cxa_find_matching_catch()|0;
   $43 = tempRet0;
   $$pre$phiZ2D = $3;$lpad$phi$index = $42;$lpad$phi$index2 = $43;
   HEAP32[$0>>2] = (2152);
   HEAP32[$2>>2] = 0;
   $46 = HEAP32[$$pre$phiZ2D>>2]|0;
   __ZdlPv($46);
   ___resumeException($lpad$phi$index|0);
   // unreachable;
  }
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $$pre$phiZ2D = $3;$lpad$phi$index = $44;$lpad$phi$index2 = $45;
 HEAP32[$0>>2] = (2152);
 HEAP32[$2>>2] = 0;
 $46 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZdlPv($46);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_FtypAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this)) + 56|0);
 $11 = ($9|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + ($i$01<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$16)|0);
  $18 = ($17|0)==(0);
  $12 = (($i$01) + 1)|0;
  if (!($18)) {
   $$0 = $17;
   label = 6;
   break;
  }
  $13 = ($12>>>0)<($9>>>0);
  if ($13) {
   $i$01 = $12;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_FtypAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($name,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,9584,$name,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,9600,$9,0,1);
 $10 = ((($this)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return 0;
 }
 $13 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($i$01<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  __Z19AP4_FormatFourCharsPcj($name,$16);
  $17 = HEAP32[$inspector>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_viiii[$19 & 1023]($inspector,9616,$name,0);
  $20 = (($i$01) + 1)|0;
  $21 = HEAP32[$10>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if ($22) {
   $i$01 = $20;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_FtypAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9496);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_FtypAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9496);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN14AP4_DataBufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN14AP4_DataBufferC2Ej($this,$buffer_size) {
 $this = $this|0;
 $buffer_size = $buffer_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 8|0);
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = $buffer_size;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = (__Znaj($buffer_size)|0);
 HEAP32[$1>>2] = $4;
 return;
}
function __ZN14AP4_DataBufferC2EPKvj($this,$data,$data_size) {
 $this = $this|0;
 $data = $data|0;
 $data_size = $data_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = $data_size;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = $data_size;
 $4 = ($data|0)!=(0|0);
 $5 = ($data_size|0)!=(0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  return;
 }
 $6 = (__Znaj($data_size)|0);
 HEAP32[$1>>2] = $6;
 _memcpy(($6|0),($data|0),($data_size|0))|0;
 return;
}
function __ZN14AP4_DataBufferC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 8|0);
 $2 = ((($this)) + 12|0);
 $3 = ((($other)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (__Znaj($4)|0);
 HEAP32[$1>>2] = $6;
 $7 = ((($other)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _memcpy(($6|0),($8|0),($4|0))|0;
 return;
}
function __ZN14AP4_DataBufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ((($this)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 __ZdaPv($4);
 return;
}
function __ZN14AP4_DataBufferD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZdaPv($4);
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN14AP4_DataBuffer7ReserveEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($size>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $1 << 1;
 $4 = (($3) + 1024)|0;
 $5 = ($4>>>0)<($size>>>0);
 $size$ = $5 ? $size : $4;
 $6 = ((($this)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = ((($this)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)>($size$>>>0);
 if ($11) {
  $$0 = -1;
  return ($$0|0);
 }
 $12 = (__Znaj($size$)|0);
 $13 = ((($this)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = ($10|0)==(0);
  if (!($16)) {
   _memcpy(($12|0),($14|0),($10|0))|0;
  }
  __ZdaPv($14);
 }
 HEAP32[$13>>2] = $12;
 HEAP32[$0>>2] = $size$;
 $$0 = 0;
 return ($$0|0);
}
function __ZN14AP4_DataBuffer11SetDataSizeEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($size>>>0);
 if ($2) {
  $3 = ((($this)) + 4|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $$0 = -1;
   return ($$0|0);
  }
  $6 = ((($this)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)>($size>>>0);
  if ($8) {
   $$0 = -1;
   return ($$0|0);
  }
  $9 = (__Znaj($size)|0);
  $10 = ((($this)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ($7|0)==(0);
   if (!($13)) {
    _memcpy(($9|0),($11|0),($7|0))|0;
   }
   __ZdaPv($11);
  }
  HEAP32[$10>>2] = $9;
  HEAP32[$0>>2] = $size;
  $$pre$phiZ2D = $6;
 } else {
  $$pre = ((($this)) + 16|0);
  $$pre$phiZ2D = $$pre;
 }
 HEAP32[$$pre$phiZ2D>>2] = $size;
 $$0 = 0;
 return ($$0|0);
}
function __ZN14AP4_DataBuffer7SetDataEPKhj($this,$data,$size) {
 $this = $this|0;
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($size>>>0);
 if ($2) {
  $3 = ((($this)) + 4|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $$0 = -1;
   return ($$0|0);
  }
  $6 = ((($this)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7>>>0)>($size>>>0);
  if ($8) {
   $$0 = -1;
   return ($$0|0);
  }
  $9 = (__Znaj($size)|0);
  $10 = ((($this)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ($7|0)==(0);
   if (!($13)) {
    _memcpy(($9|0),($11|0),($7|0))|0;
   }
   __ZdaPv($11);
  }
  HEAP32[$10>>2] = $9;
  HEAP32[$0>>2] = $size;
  $$pre$phi3Z2D = $6;$14 = $9;
 } else {
  $$phi$trans$insert = ((($this)) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre2 = ((($this)) + 16|0);
  $$pre$phi3Z2D = $$pre2;$14 = $$pre;
 }
 _memcpy(($14|0),($data|0),($size|0))|0;
 HEAP32[$$pre$phi3Z2D>>2] = $size;
 $$0 = 0;
 return ($$0|0);
}
function __ZN23AP4_CencTrackEncryptionC2ER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9712);
 $0 = ((($this)) + 4|0);
 (__ZN14AP4_ByteStream8ReadUI24ERj($stream,$0)|0);
 $1 = ((($this)) + 8|0);
 (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$1)|0);
 $2 = ((($this)) + 9|0);
 dest=$2; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$2,16)|0);
 return;
}
function __ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,9720,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,9744,$10,0,0);
 $11 = HEAP32[$inspector>>2]|0;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 9|0);
 FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,9760,$14,16,0);
 return 0;
}
function __ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 9|0);
 $9 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$8,16)|0);
 $$0 = $9;
 return ($$0|0);
}
function __ZN24AP4_CencSampleEncryptionC2ER8AP4_AtomjR14AP4_ByteStream($this,$outer,$size,$stream) {
 $this = $this|0;
 $outer = $outer|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8336);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $outer;
 $1 = ((($this)) + 36|0);
 __ZN14AP4_DataBufferC2Ev($1);
 $2 = ((($this)) + 56|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($outer)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 $7 = ((($this)) + 8|0);
 if ($6) {
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;HEAP8[$7+20>>0]=0|0;
  label = 7;
 } else {
  __THREW__ = 0;
  (invoke_iii(831,($stream|0),($7|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = ((($this)) + 12|0);
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($10|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $13 = ((($this)) + 13|0);
    __THREW__ = 0;
    (invoke_iiii(788,($stream|0),($13|0),16)|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     label = 7;
    }
   }
  }
 }
 if ((label|0) == 7) {
  $20 = ((($this)) + 32|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($20|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = HEAP32[$0>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $27 = (invoke_ii($26|0,($23|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $30 = (($size) - ($27))|0;
    $31 = (($30) + -4)|0;
    __THREW__ = 0;
    (invoke_iii(757,($1|0),($31|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $34 = ((($this)) + 44|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($35|0),($31|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sum = 0, $$sum3$us = 0, $$sum3$us$1 = 0, $$sum34 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $header = 0, $i$016$us = 0, $i$016$us$1 = 0;
 var $i2$012 = 0, $info$014$us = 0, $info$014$us$1 = 0, $info1$011 = 0, $info1$19 = 0, $info1$2 = 0, $info_size$015$us = 0, $info_size$015$us$1 = 0, $iv_size$1 = 0, $j$010 = 0, $scevgep26 = 0, $sext = 0, $sext7$us = 0, $sext7$us$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 24|0;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[$inspector>>2]|0;
  $7 = ((($6)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($this)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,9776,$10,0,0);
  $11 = HEAP32[$inspector>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($this)) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,9792,$16,0,0);
  $17 = HEAP32[$inspector>>2]|0;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($this)) + 13|0);
  FUNCTION_TABLE_viiiii[$19 & 1023]($inspector,9688,$20,16,0);
 }
 $21 = HEAP32[$inspector>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($this)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_viiiii[$23 & 1023]($inspector,9800,$25,0,0);
 $26 = ((($inspector)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)<(2);
 if ($28) {
  STACKTOP = sp;return 0;
 }
 $29 = ((($this)) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($30<<24>>24)==(0);
 L7: do {
  if ($32) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 2;
   $37 = ($36|0)==(0);
   if ($37) {
    $62 = HEAP32[$24>>2]|0;
    $63 = ($62|0)==(0);
    $$phi$trans$insert = ((($this)) + 52|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    if ($63) {
     $66 = 0;
    } else {
     $64 = (($$pre>>>0) / ($62>>>0))&-1;
     $66 = $64;
    }
    $65 = Math_imul($62, $66)|0;
    $67 = ($65|0)==($$pre|0);
    if ($67) {
     $iv_size$1 = $66;
     break;
    }
    STACKTOP = sp;return 0;
   }
   $38 = ((($this)) + 44|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($this)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$24>>2]|0;
   $43 = ($42|0)==(0);
   if ($43) {
    $iv_size$1 = 8;
   } else {
    $i$016$us = 0;$info$014$us = $39;$info_size$015$us = $41;
    while(1) {
     $44 = ($info_size$015$us>>>0)<(10);
     if ($44) {
      $i$016$us$1 = 0;$info$014$us$1 = $39;$info_size$015$us$1 = $41;
      break;
     }
     $45 = ((($info$014$us)) + 8|0);
     $46 = (($info_size$015$us) - 8)|0;
     $47 = HEAP8[$45>>0]|0;
     $48 = $47&255;
     $49 = $48 << 8;
     $50 = ((($info$014$us)) + 9|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = $49 | $52;
     $sext7$us = $53 << 16;
     $54 = $sext7$us >> 16;
     $55 = (($46) + -2)|0;
     $56 = ($54*6)|0;
     $57 = ($55>>>0)<($56>>>0);
     if ($57) {
      $i$016$us$1 = 0;$info$014$us$1 = $39;$info_size$015$us$1 = $41;
      break;
     }
     $$sum3$us = (($56) + 10)|0;
     $58 = (($info$014$us) + ($$sum3$us)|0);
     $59 = (($55) - ($56))|0;
     $60 = (($i$016$us) + 1)|0;
     $61 = ($60>>>0)<($42>>>0);
     if ($61) {
      $i$016$us = $60;$info$014$us = $58;$info_size$015$us = $59;
     } else {
      $iv_size$1 = 8;
      break L7;
     }
    }
    while(1) {
     $131 = ($info_size$015$us$1>>>0)<(18);
     if ($131) {
      label = 21;
      break;
     }
     $132 = ((($info$014$us$1)) + 16|0);
     $133 = (($info_size$015$us$1) - 16)|0;
     $134 = HEAP8[$132>>0]|0;
     $135 = $134&255;
     $136 = $135 << 8;
     $137 = ((($info$014$us$1)) + 17|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = $136 | $139;
     $sext7$us$1 = $140 << 16;
     $141 = $sext7$us$1 >> 16;
     $142 = (($133) + -2)|0;
     $143 = ($141*6)|0;
     $144 = ($142>>>0)<($143>>>0);
     if ($144) {
      label = 21;
      break;
     }
     $$sum3$us$1 = (($143) + 18)|0;
     $145 = (($info$014$us$1) + ($$sum3$us$1)|0);
     $146 = (($142) - ($143))|0;
     $147 = (($i$016$us$1) + 1)|0;
     $148 = ($147>>>0)<($42>>>0);
     if ($148) {
      $i$016$us$1 = $147;$info$014$us$1 = $145;$info_size$015$us$1 = $146;
     } else {
      $iv_size$1 = 16;
      break L7;
     }
    }
    if ((label|0) == 21) {
     STACKTOP = sp;return 0;
    }
   }
  } else {
   $iv_size$1 = $31;
  }
 } while(0);
 $68 = HEAP32[$inspector>>2]|0;
 $69 = ((($68)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 FUNCTION_TABLE_viiiii[$70 & 1023]($inspector,9824,$iv_size$1,0,0);
 $71 = HEAP32[$24>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  STACKTOP = sp;return 0;
 }
 $73 = ((($this)) + 44|0);
 $74 = HEAP32[$73>>2]|0;
 $$sum4 = (($iv_size$1) + 1)|0;
 $$sum = (($iv_size$1) + 2)|0;
 $i2$012 = 0;$info1$011 = $74;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i2$012;
  (_snprintf($header,64,18672,$vararg_buffer)|0);
  $75 = HEAP32[$inspector>>2]|0;
  $76 = ((($75)) + 36|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_viiiii[$77 & 1023]($inspector,$header,$info1$011,$iv_size$1,0);
  $78 = (($info1$011) + ($iv_size$1)|0);
  $79 = HEAP32[$0>>2]|0;
  $80 = ((($79)) + 28|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 & 2;
  $83 = ($82|0)==(0);
  if ($83) {
   $info1$2 = $78;
  } else {
   $84 = HEAP8[$78>>0]|0;
   $85 = $84&255;
   $86 = $85 << 8;
   $87 = (($info1$011) + ($$sum4)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $86 | $89;
   $91 = (($info1$011) + ($$sum)|0);
   $92 = ($90|0)==(0);
   if ($92) {
    $info1$2 = $91;
   } else {
    $sext = $90 << 16;
    $93 = $sext >> 16;
    $94 = ($93*6)|0;
    $info1$19 = $91;$j$010 = 0;
    while(1) {
     $95 = HEAP8[$info1$19>>0]|0;
     $96 = $95&255;
     $97 = $96 << 8;
     $98 = ((($info1$19)) + 1|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = $99&255;
     $101 = $97 | $100;
     HEAP32[$vararg_buffer1>>2] = $i2$012;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $j$010;
     (_snprintf($header,64,9848,$vararg_buffer1)|0);
     $102 = HEAP32[$inspector>>2]|0;
     $103 = ((($102)) + 24|0);
     $104 = HEAP32[$103>>2]|0;
     FUNCTION_TABLE_viiiii[$104 & 1023]($inspector,$header,$101,0,0);
     $105 = ((($info1$19)) + 2|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $107 << 24;
     $109 = ((($info1$19)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = $111 << 16;
     $113 = $112 | $108;
     $114 = ((($info1$19)) + 4|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     $117 = $116 << 8;
     $118 = $113 | $117;
     $119 = ((($info1$19)) + 5|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $118 | $121;
     HEAP32[$vararg_buffer5>>2] = $i2$012;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $j$010;
     (_snprintf($header,64,9888,$vararg_buffer5)|0);
     $123 = HEAP32[$inspector>>2]|0;
     $124 = ((($123)) + 24|0);
     $125 = HEAP32[$124>>2]|0;
     FUNCTION_TABLE_viiiii[$125 & 1023]($inspector,$header,$122,0,0);
     $126 = ((($info1$19)) + 6|0);
     $127 = (($j$010) + 1)|0;
     $exitcond = ($127|0)==($93|0);
     if ($exitcond) {
      break;
     } else {
      $info1$19 = $126;$j$010 = $127;
     }
    }
    $$sum34 = (($$sum) + ($94))|0;
    $scevgep26 = (($info1$011) + ($$sum34)|0);
    $info1$2 = $scevgep26;
   }
  }
  $128 = (($i2$012) + 1)|0;
  $129 = HEAP32[$24>>2]|0;
  $130 = ($128>>>0)<($129>>>0);
  if ($130) {
   $i2$012 = $128;$info1$011 = $info1$2;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($this)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$7)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$0 = $8;
   return ($$0|0);
  }
  $10 = ((($this)) + 12|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$11)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$0 = $12;
   return ($$0|0);
  }
  $14 = ((($this)) + 13|0);
  $15 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$14,16)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $$0 = $15;
   return ($$0|0);
  }
 }
 $17 = ((($this)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$18)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = $19;
  return ($$0|0);
 }
 $21 = ((($this)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = ((($this)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$25,$22)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN23AP4_CencTrackEncryptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN23AP4_CencTrackEncryptionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_PsshAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(120)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(836,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_PsshAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0;
 var $9 = 0, $data_size = 0, $phitmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data_size = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1886614376,$size,$version,$flags);
 HEAP32[$this>>2] = (9976);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(837,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $$2 = $20;$$23 = $21;
  ___resumeException($$2|0);
  // unreachable;
 }
 $3 = ((($this)) + 72|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 76|0);
 __THREW__ = 0;
 invoke_vi(837,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $$1 = $22;$$12 = $23;
 } else {
  $7 = ((($this)) + 96|0);
  __THREW__ = 0;
  invoke_vi(837,($7|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$0 = $24;$$01 = $25;
  } else {
   $10 = ((($this)) + 36|0);
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($10|0),16)|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   do {
    if (!($12)) {
     $13 = ((($this)) + 25|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($3|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break;
      }
      $18 = HEAP32[$3>>2]|0;
      $19 = ($18>>>0)>($size>>>0);
      if ($19) {
       STACKTOP = sp;return;
      }
      $30 = $18 << 4;
      __THREW__ = 0;
      (invoke_iii(757,($4|0),($30|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break;
      }
      $33 = ((($this)) + 84|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$3>>2]|0;
      $36 = $35 << 4;
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($34|0),($36|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
     }
     HEAP32[$data_size>>2] = 0;
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($data_size|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      $41 = HEAP32[$data_size>>2]|0;
      $42 = ($41>>>0)>(16777216);
      if ($42) {
       STACKTOP = sp;return;
      }
      __THREW__ = 0;
      (invoke_iii(757,($0|0),($41|0))|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       $45 = ((($this)) + 60|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = HEAP32[$data_size>>2]|0;
       __THREW__ = 0;
       (invoke_iiii(788,($stream|0),($46|0),($47|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if (!($49)) {
        $50 = HEAP8[$13>>0]|0;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $57 = 32;
        } else {
         $52 = ((($this)) + 92|0);
         $53 = HEAP32[$52>>2]|0;
         $phitmp1$i = (($53) + 36)|0;
         $57 = $phitmp1$i;
        }
        $54 = ((($this)) + 68|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = (($55) + ($57))|0;
        $58 = ((($this)) + 112|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = (($56) + ($59))|0;
        $61 = ($60>>>0)<($size>>>0);
        if (!($61)) {
         STACKTOP = sp;return;
        }
        $62 = (($size) - ($60))|0;
        __THREW__ = 0;
        (invoke_iii(757,($7|0),($62|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if (!($64)) {
         $65 = ((($this)) + 104|0);
         $66 = HEAP32[$65>>2]|0;
         __THREW__ = 0;
         (invoke_iiii(788,($stream|0),($66|0),($62|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if (!($68)) {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   } while(0);
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_vi(279,($7|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $73 = ___cxa_find_matching_catch(0|0)|0;
    $74 = tempRet0;
    ___clang_call_terminate($73);
    // unreachable;
   } else {
    $$0 = $26;$$01 = $27;
   }
  }
  __THREW__ = 0;
  invoke_vi(279,($4|0));
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if ($70) {
   $73 = ___cxa_find_matching_catch(0|0)|0;
   $74 = tempRet0;
   ___clang_call_terminate($73);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  $$2 = $$1;$$23 = $$12;
  ___resumeException($$2|0);
  // unreachable;
 }
}
function __ZN12AP4_PsshAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,16)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 25|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = ((($this)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$7)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$0 = $8;
   return ($$0|0);
  }
  $10 = ((($this)) + 84|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$6>>2]|0;
  $13 = $12 << 4;
  $14 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$11,$13)|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   $$0 = $14;
   return ($$0|0);
  }
 }
 $16 = ((($this)) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = $18;
  return ($$0|0);
 }
 $20 = HEAP32[$16>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = ((($this)) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$23,$20)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $$0 = $24;
   return ($$0|0);
  }
 }
 $26 = ((($this)) + 112|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = ((($this)) + 104|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$30,$27)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_PsshAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $i$02 = 0, $kid_name = 0, $position = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $kid_name = sp + 16|0;
 $atom = sp + 12|0;
 $position = sp;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,10064,$3,16,0);
 $4 = HEAP32[$inspector>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 52|0);
 $8 = ((($this)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 1023]($inspector,10080,$9,0,0);
 $10 = ((($this)) + 25|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $13 = ((($this)) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = ((($this)) + 84|0);
   $i$02 = 0;
   while(1) {
    HEAP32[$vararg_buffer>>2] = $i$02;
    (_snprintf($kid_name,32,10096,$vararg_buffer)|0);
    $17 = HEAP32[$inspector>>2]|0;
    $18 = ((($17)) + 36|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$16>>2]|0;
    $21 = $i$02 << 4;
    $22 = (($20) + ($21)|0);
    FUNCTION_TABLE_viiiii[$19 & 1023]($inspector,$kid_name,$22,16,0);
    $23 = (($i$02) + 1)|0;
    $24 = HEAP32[$13>>2]|0;
    $25 = ($23>>>0)<($24>>>0);
    if ($25) {
     $i$02 = $23;
    } else {
     break;
    }
   }
  }
 }
 $26 = ((($inspector)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  STACKTOP = sp;return 0;
 }
 $29 = (_memcmp($3,10104,16)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $64 = HEAP32[$inspector>>2]|0;
  $65 = ((($64)) + 36|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($this)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_viiiii[$66 & 1023]($inspector,10120,$68,$69,0);
  STACKTOP = sp;return 0;
 }
 $31 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vii(838,($31|0),($7|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  __ZdlPv($31);
  ___resumeException($59|0);
  // unreachable;
 }
 $34 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(3224,$31,$atom)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  while(1) {
   $36 = HEAP32[$31>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   (FUNCTION_TABLE_iii[$38 & 1023]($31,$position)|0);
   $39 = HEAP32[$atom>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   (FUNCTION_TABLE_iii[$42 & 1023]($39,$inspector)|0);
   $43 = HEAP32[$31>>2]|0;
   $44 = ((($43)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $position;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiii[$45 & 1023]($31,$48,$51)|0);
   $52 = HEAP32[$atom>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    $54 = HEAP32[$52>>2]|0;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    FUNCTION_TABLE_vi[$56 & 1023]($52);
   }
   $57 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(3224,$31,$atom)|0);
   $58 = ($57|0)==(0);
   if (!($58)) {
    break;
   }
  }
 }
 $61 = HEAP32[$31>>2]|0;
 $62 = ((($61)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($31);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_PsshAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9976);
 $0 = ((($this)) + 96|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $9 = ___cxa_find_matching_catch()|0;
   $10 = tempRet0;
   $11 = ((($this)) + 76|0);
   __THREW__ = 0;
   invoke_vi(279,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   } else {
    $$0 = $10;$$01 = $9;
   }
  } else {
   $3 = ((($this)) + 76|0);
   __THREW__ = 0;
   invoke_vi(279,($3|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $14 = ___cxa_find_matching_catch()|0;
    $15 = tempRet0;
    $$0 = $15;$$01 = $14;
    break;
   }
   $6 = ((($this)) + 52|0);
   __THREW__ = 0;
   invoke_vi(279,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    return;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $$1 = $17;$$12 = $16;
   ___resumeException($$12|0);
   // unreachable;
  }
 } while(0);
 $18 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN12AP4_PsshAtomD0Ev($this) {
 $this = $this|0;
 var $$0$i = 0, $$01$i = 0, $$1$i = 0, $$12$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9976);
 $0 = ((($this)) + 96|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $9 = ___cxa_find_matching_catch()|0;
   $10 = tempRet0;
   $11 = ((($this)) + 76|0);
   __THREW__ = 0;
   invoke_vi(279,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   } else {
    $$0$i = $10;$$01$i = $9;
   }
  } else {
   $3 = ((($this)) + 76|0);
   __THREW__ = 0;
   invoke_vi(279,($3|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $14 = ___cxa_find_matching_catch()|0;
    $15 = tempRet0;
    $$0$i = $15;$$01$i = $14;
    break;
   }
   $6 = ((($this)) + 52|0);
   __THREW__ = 0;
   invoke_vi(279,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    __ZdlPv($this);
    return;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $$1$i = $17;$$12$i = $16;
   __ZdlPv($this);
   ___resumeException($$12$i|0);
   // unreachable;
  }
 } while(0);
 $18 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$1$i = $$0$i;$$12$i = $$01$i;
  __ZdlPv($this);
  ___resumeException($$12$i|0);
  // unreachable;
 }
}
function __ZN12AP4_SidxAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(80)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(839,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SidxAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$lobit = 0, $$lobit1 = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $earliest_presentation_time = 0, $exitcond$i = 0, $exitcond3$i = 0, $first_offset = 0, $i$01$i$i = 0, $i$03 = 0, $i1$02$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $reference_count = 0, $reserved = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $earliest_presentation_time = sp + 8|0;
 $first_offset = sp + 4|0;
 $reserved = sp + 14|0;
 $reference_count = sp + 12|0;
 $value = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1936286840,$size,$version,$flags);
 HEAP32[$this>>2] = (10136);
 $0 = ((($this)) + 64|0);
 HEAP32[$0>>2] = (10232);
 $1 = ((($this)) + 68|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 72|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 76|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($4|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if (!($6)) {
   $7 = ((($this)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($7|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = ($version<<24>>24)==(0);
    if ($10) {
     HEAP32[$earliest_presentation_time>>2] = 0;
     HEAP32[$first_offset>>2] = 0;
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($earliest_presentation_time|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break;
     }
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($first_offset|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      break;
     }
     $15 = HEAP32[$earliest_presentation_time>>2]|0;
     $16 = ((($this)) + 48|0);
     $17 = $16;
     $18 = $17;
     HEAP32[$18>>2] = $15;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = 0;
     $21 = HEAP32[$first_offset>>2]|0;
     $22 = ((($this)) + 56|0);
     $23 = $22;
     $24 = $23;
     HEAP32[$24>>2] = $21;
     $25 = (($23) + 4)|0;
     $26 = $25;
     HEAP32[$26>>2] = 0;
    } else {
     $27 = ((($this)) + 48|0);
     __THREW__ = 0;
     (invoke_iii(840,($stream|0),($27|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      break;
     }
     $30 = ((($this)) + 56|0);
     __THREW__ = 0;
     (invoke_iii(840,($stream|0),($30|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break;
     }
    }
    __THREW__ = 0;
    (invoke_iii(794,($stream|0),($reserved|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     HEAP16[$reference_count>>1] = 0;
     __THREW__ = 0;
     (invoke_iii(794,($stream|0),($reference_count|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $37 = $10 ? 32 : 40;
      $38 = HEAP16[$reference_count>>1]|0;
      $39 = $38&65535;
      $40 = ($39*12)|0;
      $41 = (($40) + ($37))|0;
      $42 = ($41>>>0)>($size>>>0);
      if ($42) {
       STACKTOP = sp;return;
      }
      $43 = HEAP32[$2>>2]|0;
      $44 = ($43|0)==($39|0);
      do {
       if (!($44)) {
        $45 = ($43>>>0)>($39>>>0);
        if ($45) {
         HEAP32[$2>>2] = $39;
         break;
        }
        $46 = HEAP32[$1>>2]|0;
        $47 = ($46>>>0)<($39>>>0);
        if ($47) {
         $48 = ($39*20)|0;
         __THREW__ = 0;
         $49 = (invoke_ii(752,($48|0))|0);
         $50 = __THREW__; __THREW__ = 0;
         $51 = $50&1;
         if ($51) {
          break L1;
         }
         $52 = ($49|0)==(0|0);
         if ($52) {
          break;
         }
         $53 = HEAP32[$2>>2]|0;
         $54 = ($53|0)==(0);
         if ($54) {
          $$pre$i = 0;
         } else {
          $55 = HEAP32[$3>>2]|0;
          $56 = ($55|0)==(0|0);
          if ($56) {
           $$pre$i = $53;
          } else {
           $i$01$i$i = 0;
           while(1) {
            $57 = (($49) + (($i$01$i$i*20)|0)|0);
            $58 = (($55) + (($i$01$i$i*20)|0)|0);
            ;HEAP32[$57>>2]=HEAP32[$58>>2]|0;HEAP32[$57+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$57+12>>2]=HEAP32[$58+12>>2]|0;HEAP32[$57+16>>2]=HEAP32[$58+16>>2]|0;
            $59 = (($i$01$i$i) + 1)|0;
            $exitcond3$i = ($59|0)==($53|0);
            if ($exitcond3$i) {
             break;
            } else {
             $i$01$i$i = $59;
            }
           }
           __ZdlPv($55);
           $$pre$pre$i = HEAP32[$2>>2]|0;
           $$pre$i = $$pre$pre$i;
          }
         }
         HEAP32[$3>>2] = $49;
         HEAP32[$1>>2] = $39;
         $60 = $$pre$i;
        } else {
         $60 = $43;
        }
        $61 = ($60>>>0)<($39>>>0);
        if ($61) {
         $i1$02$i = $60;
         while(1) {
          $62 = HEAP32[$3>>2]|0;
          $63 = (($62) + (($i1$02$i*20)|0)|0);
          HEAP8[$63>>0] = 0;
          $64 = ((($63)) + 4|0);
          $65 = ((($63)) + 16|0);
          HEAP32[$65>>2] = 0;
          ;HEAP32[$64>>2]=0|0;HEAP32[$64+4>>2]=0|0;HEAP16[$64+8>>1]=0|0;
          $66 = (($i1$02$i) + 1)|0;
          $exitcond$i = ($66|0)==($39|0);
          if ($exitcond$i) {
           break;
          } else {
           $i1$02$i = $66;
          }
         }
        }
        HEAP32[$2>>2] = $39;
       }
      } while(0);
      $67 = HEAP16[$reference_count>>1]|0;
      $68 = ($67<<16>>16)==(0);
      if ($68) {
       STACKTOP = sp;return;
      } else {
       $i$03 = 0;
      }
      while(1) {
       HEAP32[$value>>2] = 0;
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($value|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break;
       }
       $71 = HEAP32[$value>>2]|0;
       $$lobit = $71 >>> 31;
       $72 = $$lobit&255;
       $73 = HEAP32[$3>>2]|0;
       $74 = (($73) + (($i$03*20)|0)|0);
       HEAP8[$74>>0] = $72;
       $75 = $71 & 2147483647;
       $76 = (((($73) + (($i$03*20)|0)|0)) + 4|0);
       HEAP32[$76>>2] = $75;
       $77 = (((($73) + (($i$03*20)|0)|0)) + 8|0);
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($77|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        break;
       }
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($value|0))|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        break;
       }
       $82 = HEAP32[$value>>2]|0;
       $83 = HEAP32[$3>>2]|0;
       $84 = (((($83) + (($i$03*20)|0)|0)) + 12|0);
       $$lobit1 = $82 >>> 31;
       $85 = $$lobit1&255;
       HEAP8[$84>>0] = $85;
       $86 = $82 >>> 28;
       $87 = $86 & 7;
       $88 = $87&255;
       $89 = (((($83) + (($i$03*20)|0)|0)) + 13|0);
       HEAP8[$89>>0] = $88;
       $90 = $82 & 268435455;
       $91 = (((($83) + (($i$03*20)|0)|0)) + 16|0);
       HEAP32[$91>>2] = $90;
       $92 = (($i$03) + 1)|0;
       $93 = HEAP16[$reference_count>>1]|0;
       $94 = $93&65535;
       $95 = ($92>>>0)<($94>>>0);
       if ($95) {
        $i$03 = $92;
       } else {
        label = 31;
        break;
       }
      }
      if ((label|0) == 31) {
       STACKTOP = sp;return;
      }
      $96 = ___cxa_find_matching_catch()|0;
      $97 = tempRet0;
      $lpad$phi$index = $96;$lpad$phi$index2 = $97;
      HEAP32[$0>>2] = (10232);
      HEAP32[$2>>2] = 0;
      $100 = HEAP32[$3>>2]|0;
      __ZdlPv($100);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $98 = ___cxa_find_matching_catch()|0;
 $99 = tempRet0;
 $lpad$phi$index = $98;$lpad$phi$index2 = $99;
 HEAP32[$0>>2] = (10232);
 HEAP32[$2>>2] = 0;
 $100 = HEAP32[$3>>2]|0;
 __ZdlPv($100);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_SidxAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$3)|0);
 $4 = ((($this)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = ((($this)) + 48|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 if ($6) {
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$10)|0);
  $14 = ((($this)) + 56|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
 } else {
  (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$10,$13)|0);
  $21 = ((($this)) + 56|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$24,$27)|0);
 }
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,0)|0);
 $28 = ((($this)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$30)|0);
 $31 = HEAP32[$28>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  return 0;
 }
 $33 = ((($this)) + 76|0);
 $i$01 = 0;
 while(1) {
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + (($i$01*20)|0)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 31;
  $39 = (((($34) + (($i$01*20)|0)|0)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $38 | $40;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$41)|0);
  $42 = HEAP32[$33>>2]|0;
  $43 = (((($42) + (($i$01*20)|0)|0)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$44)|0);
  $45 = HEAP32[$33>>2]|0;
  $46 = (((($45) + (($i$01*20)|0)|0)) + 12|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 31;
  $50 = (((($45) + (($i$01*20)|0)|0)) + 13|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 << 28;
  $54 = (((($45) + (($i$01*20)|0)|0)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 | $49;
  $57 = $56 | $53;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$57)|0);
  $58 = (($i$01) + 1)|0;
  $59 = HEAP32[$28>>2]|0;
  $60 = ($58>>>0)<($59>>>0);
  if ($60) {
   $i$01 = $58;
  } else {
   break;
  }
 }
 return 0;
}
function __ZN12AP4_SidxAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $header = 0, $i$01 = 0;
 var $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 288|0;
 $value = sp + 32|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,10240,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,24720,$9,0,0);
 $10 = HEAP32[$inspector>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($this)) + 48|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 1023]($inspector,10256,$16,$19,0);
 $20 = HEAP32[$inspector>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 56|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_viiiii[$22 & 1023]($inspector,10288,$26,$29,0);
 $30 = ((($inspector)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return 0;
 }
 $33 = ((($this)) + 72|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  STACKTOP = sp;return 0;
 }
 $36 = ((($this)) + 76|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,18672,$vararg_buffer)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($i$01*20)|0)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = (((($37) + (($i$01*20)|0)|0)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (((($37) + (($i$01*20)|0)|0)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (((($37) + (($i$01*20)|0)|0)) + 12|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (((($37) + (($i$01*20)|0)|0)) + 13|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (((($37) + (($i$01*20)|0)|0)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $40;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $42;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $44;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $47;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $50;
  $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $52;
  (_snprintf($value,256,10304,$vararg_buffer1)|0);
  $53 = HEAP32[$inspector>>2]|0;
  $54 = ((($53)) + 32|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_viiii[$55 & 1023]($inspector,$header,$value,0);
  $56 = (($i$01) + 1)|0;
  $exitcond = ($56|0)==($34|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $56;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SidxAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10136);
 $0 = ((($this)) + 64|0);
 HEAP32[$0>>2] = (10232);
 $1 = ((($this)) + 72|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_SidxAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10136);
 $0 = ((($this)) + 64|0);
 HEAP32[$0>>2] = (10232);
 $1 = ((($this)) + 72|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10232);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10232);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN25AP4_IpmpDescriptorPointerC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,10,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (10480);
 $0 = ((($this)) + 20|0);
 (__ZN14AP4_ByteStream8ReadUI08ERh($stream,$0)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(-1);
 $3 = ($payload_size>>>0)>(4);
 $or$cond = $3 & $2;
 if (!($or$cond)) {
  return;
 }
 $4 = ((($this)) + 22|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$4)|0);
 $5 = ((($this)) + 24|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$5)|0);
 return;
}
function __ZN25AP4_IpmpDescriptorPointer11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$1)|0);
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(-1);
 if (!($3)) {
  return 0;
 }
 $4 = ((($this)) + 22|0);
 $5 = HEAP16[$4>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$5)|0);
 $6 = ((($this)) + 24|0);
 $7 = HEAP16[$6>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$7)|0);
 return 0;
}
function __ZN25AP4_IpmpDescriptorPointer7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,10624,$4,$7,0);
 $8 = HEAP32[$inspector>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 20|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,10648,$13,0,0);
 $14 = HEAP8[$11>>0]|0;
 $15 = ($14<<24>>24)==(-1);
 if (!($15)) {
  $28 = HEAP32[$inspector>>2]|0;
  $29 = ((($28)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_vi[$30 & 1023]($inspector);
  return 0;
 }
 $16 = HEAP32[$inspector>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this)) + 22|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 FUNCTION_TABLE_viiiii[$18 & 1023]($inspector,10672,$21,0,0);
 $22 = HEAP32[$inspector>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($this)) + 24|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 FUNCTION_TABLE_viiiii[$24 & 1023]($inspector,10696,$27,0,0);
 $28 = HEAP32[$inspector>>2]|0;
 $29 = ((($28)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vi[$30 & 1023]($inspector);
 return 0;
}
function __ZN18AP4_IpmpDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $fields_size$0 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,11,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (10512);
 $0 = ((($this)) + 24|0);
 HEAP16[$0>>1] = 0;
 $1 = ((($this)) + 42|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 43|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(790,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $$1 = $30;$$12 = $31;
  ___resumeException($$1|0);
  // unreachable;
 }
 $6 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(837,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $$0 = $32;$$01 = $33;
 } else {
  $9 = ((($this)) + 20|0);
  __THREW__ = 0;
  (invoke_iii(786,($stream|0),($9|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  do {
   if (!($11)) {
    $12 = ((($this)) + 22|0);
    __THREW__ = 0;
    (invoke_iii(794,($stream|0),($12|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = ((($this)) + 26|0);
     dest=$15; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     $16 = HEAP8[$9>>0]|0;
     $17 = ($16<<24>>24)==(-1);
     $18 = HEAP16[$12>>1]|0;
     $19 = ($18<<16>>16)==(-1);
     $or$cond = $17 & $19;
     if ($or$cond) {
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($0|0))|0);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break;
      }
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($15|0),16)|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       break;
      }
      __THREW__ = 0;
      (invoke_iii(786,($stream|0),($1|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
      $26 = HEAP8[$1>>0]|0;
      $27 = ($26<<24>>24)==(0);
      if ($27) {
       $fields_size$0 = 6;
      } else {
       __THREW__ = 0;
       (invoke_iii(786,($stream|0),($2|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break;
       } else {
        $fields_size$0 = 7;
       }
      }
      $38 = ($fields_size$0>>>0)<($payload_size>>>0);
      if (!($38)) {
       return;
      }
      $39 = (($payload_size) - ($fields_size$0))|0;
      __THREW__ = 0;
      (invoke_iii(757,($6|0),($39|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = ((($this)) + 60|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($43|0),($39|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       break;
      }
      return;
     }
     $46 = ($18<<16>>16)==(0);
     $47 = ($payload_size>>>0)>(3);
     if (!($46)) {
      if (!($47)) {
       return;
      }
      $58 = (($payload_size) + -3)|0;
      __THREW__ = 0;
      (invoke_iii(757,($6|0),($58|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break;
      }
      $61 = ((($this)) + 60|0);
      $62 = HEAP32[$61>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($62|0),($58|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break;
      }
      return;
     }
     if (!($47)) {
      return;
     }
     $48 = (($payload_size) + -2)|0;
     __THREW__ = 0;
     $49 = (invoke_ii(787,($48|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      $52 = (($payload_size) + -3)|0;
      $53 = (($49) + ($52)|0);
      HEAP8[$53>>0] = 0;
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($49|0),($52|0))|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if (!($55)) {
       __THREW__ = 0;
       invoke_viii(758,($3|0),($49|0),($52|0));
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if (!($57)) {
        __ZdaPv($49);
        return;
       }
      }
     }
    }
   }
  } while(0);
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($6|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $67 = ___cxa_find_matching_catch(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  } else {
   $$0 = $34;$$01 = $35;
  }
 }
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $67 = ___cxa_find_matching_catch(0|0)|0;
  $68 = tempRet0;
  ___clang_call_terminate($67);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN18AP4_IpmpDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$1)|0);
 $2 = ((($this)) + 22|0);
 $3 = HEAP16[$2>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$3)|0);
 $4 = HEAP8[$0>>0]|0;
 $5 = ($4<<24>>24)==(-1);
 $6 = HEAP16[$2>>1]|0;
 $7 = ($6<<16>>16)==(-1);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  $22 = ($6<<16>>16)==(0);
  if ($22) {
   $23 = ((($this)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this)) + 48|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   (__ZN14AP4_ByteStream5WriteEPKvj($stream,$24,$27)|0);
   return 0;
  } else {
   $28 = ((($this)) + 60|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($this)) + 68|0);
   $31 = HEAP32[$30>>2]|0;
   (__ZN14AP4_ByteStream5WriteEPKvj($stream,$29,$31)|0);
   return 0;
  }
 }
 $8 = ((($this)) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$9)|0);
 $10 = ((($this)) + 26|0);
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$10,16)|0);
 $11 = ((($this)) + 42|0);
 $12 = HEAP8[$11>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$12)|0);
 $13 = HEAP8[$11>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  $15 = ((($this)) + 43|0);
  $16 = HEAP8[$15>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$16)|0);
 }
 $17 = ((($this)) + 68|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  return 0;
 }
 $20 = ((($this)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$21,$18)|0);
 return 0;
}
function __ZN18AP4_IpmpDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,10712,$4,$7,0);
 $8 = HEAP32[$inspector>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 20|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,10648,$13,0,0);
 $14 = HEAP32[$inspector>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($this)) + 22|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 FUNCTION_TABLE_viiiii[$16 & 1023]($inspector,10728,$19,0,1);
 $20 = HEAP8[$11>>0]|0;
 $21 = ($20<<24>>24)==(-1);
 $22 = HEAP16[$17>>1]|0;
 $23 = ($22<<16>>16)==(-1);
 $or$cond = $21 & $23;
 if ($or$cond) {
  $24 = HEAP32[$inspector>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($this)) + 24|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  FUNCTION_TABLE_viiiii[$26 & 1023]($inspector,10672,$29,0,0);
  $30 = HEAP32[$inspector>>2]|0;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($this)) + 26|0);
  FUNCTION_TABLE_viiiii[$32 & 1023]($inspector,10744,$33,16,1);
  $34 = HEAP32[$inspector>>2]|0;
  $35 = ((($34)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($this)) + 42|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  FUNCTION_TABLE_viiiii[$36 & 1023]($inspector,10760,$39,0,0);
  $40 = HEAP8[$37>>0]|0;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $59 = HEAP32[$inspector>>2]|0;
   $60 = ((($59)) + 20|0);
   $61 = HEAP32[$60>>2]|0;
   FUNCTION_TABLE_vi[$61 & 1023]($inspector);
   return 0;
  }
  $42 = HEAP32[$inspector>>2]|0;
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($this)) + 43|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  FUNCTION_TABLE_viiiii[$44 & 1023]($inspector,10784,$47,0,0);
  $59 = HEAP32[$inspector>>2]|0;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vi[$61 & 1023]($inspector);
  return 0;
 }
 $48 = ($22<<16>>16)==(0);
 if ($48) {
  $49 = HEAP32[$inspector>>2]|0;
  $50 = ((($49)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($this)) + 44|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_viiii[$51 & 1023]($inspector,10800,$53,0);
  $59 = HEAP32[$inspector>>2]|0;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vi[$61 & 1023]($inspector);
  return 0;
 } else {
  $54 = HEAP32[$inspector>>2]|0;
  $55 = ((($54)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($this)) + 68|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_viiiii[$56 & 1023]($inspector,10808,$58,0,0);
  $59 = HEAP32[$inspector>>2]|0;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vi[$61 & 1023]($inspector);
  return 0;
 }
 return (0)|0;
}
function __ZN25AP4_IpmpDescriptorPointerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN18AP4_IpmpDescriptorD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10512);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 44|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0 = $7;$$01 = $6;
   ___resumeException($$01|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0 = $12;$$01 = $11;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN18AP4_IpmpDescriptorD0Ev($this) {
 $this = $this|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10512);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 44|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0$i = $7;$$01$i = $6;
   __ZdlPv($this);
   ___resumeException($$01$i|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($this);
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0$i = $12;$$01$i = $11;
 __ZdlPv($this);
 ___resumeException($$01$i|0);
 // unreachable;
}
function __ZN14AP4_Descriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 4|0;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_snprintf($name,20,10936,$vararg_buffer)|0);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 FUNCTION_TABLE_viiiii[$4 & 1023]($inspector,$name,$6,$9,0);
 $10 = HEAP32[$inspector>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vi[$12 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_UnknownDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $tag&255;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,$0,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (10832);
 $1 = ((($this)) + 20|0);
 __THREW__ = 0;
 invoke_vi(837,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $$0 = $11;$$01 = $10;
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(757,($1|0),($payload_size|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = ((($this)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($7|0),($payload_size|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   return;
  }
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $$0 = $13;$$01 = $12;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN21AP4_UnknownDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 return 0;
}
function __ZN21AP4_UnknownDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10832);
 $0 = ((($this)) + 20|0);
 __ZN14AP4_DataBufferD2Ev($0);
 return;
}
function __ZN21AP4_UnknownDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10832);
 $0 = ((($this)) + 20|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN8AP4_AtomC2Ejj($this,$type,$size) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10960);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $type;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $size;
 $2 = ((($this)) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 24|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($this)) + 25|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($this)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 32|0);
 HEAP32[$10>>2] = 0;
 return;
}
function __ZN8AP4_AtomC2Ejyb($this,$type,$0,$1,$force_64) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10960);
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($this)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 16|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 24|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($this)) + 25|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($this)) + 28|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 32|0);
 HEAP32[$12>>2] = 0;
 if ($force_64) {
  $22 = $0;$25 = $1;$storemerge1 = 1;
  HEAP32[$3>>2] = $storemerge1;
  $20 = $4;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
  return;
 }
 $13 = ($1>>>0)>(0);
 $14 = ($0>>>0)>(4294967295);
 $15 = ($1|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $$ = $17 ? 1 : $0;
 $18 = $17 ? $0 : 0;
 $19 = $17 ? $1 : 0;
 $22 = $18;$25 = $19;$storemerge1 = $$;
 HEAP32[$3>>2] = $storemerge1;
 $20 = $4;
 $21 = $20;
 HEAP32[$21>>2] = $22;
 $23 = (($20) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 return;
}
function __ZN8AP4_Atom7SetSizeEyb($this,$0,$1,$force_64) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $$0$off0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$pre = ((($this)) + 8|0);
 if (!($force_64)) {
  $2 = HEAP32[$$pre>>2]|0;
  $3 = ($2|0)==(1);
  if ($3) {
   $4 = ((($this)) + 16|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<(1);
   $12 = ($7>>>0)<(0);
   $13 = ($10|0)==(1);
   $14 = $13 & $12;
   $15 = $11 | $14;
   $$0$off0 = $15;
  } else {
   $$0$off0 = 0;
  }
  $16 = ($1>>>0)>(0);
  $17 = ($0>>>0)>(4294967295);
  $18 = ($1|0)==(0);
  $19 = $18 & $17;
  $20 = $16 | $19;
  $brmerge = $20 | $$0$off0;
  if (!($brmerge)) {
   HEAP32[$$pre>>2] = $0;
   $21 = ((($this)) + 16|0);
   $22 = $21;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = 0;
   return;
  }
 }
 HEAP32[$$pre>>2] = 1;
 $26 = ((($this)) + 16|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 return;
}
function __ZN8AP4_AtomC2Ejjhj($this,$type,$size,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10960);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $type;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $size;
 $2 = ((($this)) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 24|0);
 HEAP8[$7>>0] = 1;
 $8 = ((($this)) + 25|0);
 HEAP8[$8>>0] = $version;
 $9 = ((($this)) + 28|0);
 HEAP32[$9>>2] = $flags;
 $10 = ((($this)) + 32|0);
 HEAP32[$10>>2] = 0;
 return;
}
function __ZN8AP4_AtomC2Ejybhj($this,$type,$0,$1,$force_64,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $version = $version|0;
 $flags = $flags|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (10960);
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($this)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 16|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 24|0);
 HEAP8[$9>>0] = 1;
 $10 = ((($this)) + 25|0);
 HEAP8[$10>>0] = $version;
 $11 = ((($this)) + 28|0);
 HEAP32[$11>>2] = $flags;
 $12 = ((($this)) + 32|0);
 HEAP32[$12>>2] = 0;
 if ($force_64) {
  $22 = $0;$25 = $1;$storemerge1 = 1;
  HEAP32[$3>>2] = $storemerge1;
  $20 = $4;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
  return;
 }
 $13 = ($1>>>0)>(0);
 $14 = ($0>>>0)>(4294967295);
 $15 = ($1|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $$ = $17 ? 1 : $0;
 $18 = $17 ? $0 : 0;
 $19 = $17 ? $1 : 0;
 $22 = $18;$25 = $19;$storemerge1 = $$;
 HEAP32[$3>>2] = $storemerge1;
 $20 = $4;
 $21 = $20;
 HEAP32[$21>>2] = $22;
 $23 = (($20) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $25;
 return;
}
function __ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags) {
 $stream = $stream|0;
 $version = $version|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $header = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp;
 $0 = (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$header)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$header>>2]|0;
 $3 = $2 >>> 24;
 $4 = $3&255;
 HEAP8[$version>>0] = $4;
 $5 = $2 & 16777215;
 HEAP32[$flags>>2] = $5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK8AP4_Atom13GetHeaderSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ? 12 : 8;
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 $7 = $6 ? 8 : 0;
 $8 = (($7) + ($3))|0;
 return ($8|0);
}
function __ZN8AP4_Atom11WriteHeaderER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  $10 = ((($this)) + 16|0);
  $11 = $10;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$13,$16)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $$0 = $17;
   return ($$0|0);
  }
 }
 $19 = ((($this)) + 24|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  $22 = ((($this)) + 25|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$23)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $$0 = $24;
   return ($$0|0);
  }
  $26 = ((($this)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$27)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$0 = $28;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN8AP4_Atom5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 1023]($this,$stream)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  return ($$0|0);
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 1023]($this,$stream)|0);
 $$0 = $8;
 return ($$0|0);
}
function __ZN8AP4_Atom7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 1023]($this,$inspector)|0);
 $3 = HEAP32[$this>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 (FUNCTION_TABLE_iii[$5 & 1023]($this,$inspector)|0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 1023]($inspector);
 return 0;
}
function __ZN8AP4_Atom13InspectHeaderER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __Z28AP4_FormatFourCharsPrintablePcj($name,$1);
 $2 = ((($name)) + 4|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP32[$inspector>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 25|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ((($this)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($this)|0);
 $14 = ((($this)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = ((($this)) + 16|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $20;$25 = $23;
  FUNCTION_TABLE_viiiiiii[$5 & 1023]($inspector,$name,$7,$9,$13,$24,$25);
  STACKTOP = sp;return 0;
 } else {
  $24 = $15;$25 = 0;
  FUNCTION_TABLE_viiiiiii[$5 & 1023]($inspector,$name,$7,$9,$13,$24,$25);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_Atom6DetachEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 1023]($1,$this)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN8AP4_Atom5CloneEv($this) {
 $this = $this|0;
 var $$0 = 0, $$off0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $clone = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $clone = sp;
 HEAP32[$clone>>2] = 0;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($this)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;$12 = $6;
 } else {
  $10 = 0;$12 = $1;
 }
 $11 = ($10>>>0)>(0);
 $13 = ($12>>>0)>(1048576);
 $14 = ($10|0)==(0);
 $15 = $14 & $13;
 $16 = $11 | $15;
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__Znwj(32)|0);
 if ($2) {
  $18 = ((($this)) + 16|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $$off0 = $21;
 } else {
  $$off0 = $1;
 }
 __THREW__ = 0;
 invoke_vii(841,($17|0),($$off0|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __ZdlPv($17);
  ___resumeException($32|0);
  // unreachable;
 }
 $27 = HEAP32[$this>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_iii[$29 & 1023]($this,$17)|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $34 = HEAP32[$17>>2]|0;
  $35 = ((($34)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  (FUNCTION_TABLE_iiii[$36 & 1023]($17,0,0)|0);
  (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(3224,$17,$clone)|0);
 }
 $37 = HEAP32[$17>>2]|0;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($17);
 $40 = HEAP32[$clone>>2]|0;
 $$0 = $40;
 STACKTOP = sp;return ($$0|0);
}
function __ZN15AP4_UnknownAtomC2EjyR14AP4_ByteStream($this,$type,$0,$1,$stream) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $$$i = 0, $$0 = 0, $$02 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $file_size = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file_size = sp;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($this)) + 8|0);
 $4 = ((($this)) + 16|0);
 $5 = ((($this)) + 24|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 25|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($this)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = ($1>>>0)>(0);
 $10 = ($0>>>0)>(4294967295);
 $11 = ($1|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $$$i = $13 ? 1 : $0;
 $14 = $13 ? $0 : 0;
 $15 = $13 ? $1 : 0;
 HEAP32[$3>>2] = $$$i;
 $16 = $4;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 HEAP32[$this>>2] = (11024);
 $20 = ((($this)) + 36|0);
 HEAP32[$20>>2] = $stream;
 $21 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(837,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$02 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = ($1>>>0)<(0);
 $25 = ($0>>>0)<(4097);
 $26 = ($1|0)==(0);
 $27 = $26 & $25;
 $28 = $24 | $27;
 $29 = ($type|0)!=(1835295092);
 $or$cond = $29 & $28;
 L5: do {
  if ($or$cond) {
   $30 = ((($this)) + 40|0);
   $31 = $30;
   $32 = $31;
   HEAP32[$32>>2] = 0;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = 0;
   HEAP32[$20>>2] = 0;
   $35 = HEAP32[$this>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   __THREW__ = 0;
   $38 = (invoke_ii($37|0,($this|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    $41 = (($0) - ($38))|0;
    __THREW__ = 0;
    (invoke_iii(757,($21|0),($41|0))|0);
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if (!($43)) {
     $44 = ((($this)) + 56|0);
     $45 = HEAP32[$44>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(788,($stream|0),($45|0),($41|0))|0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if (!($47)) {
      STACKTOP = sp;return;
     }
    }
   }
  } else {
   $54 = HEAP32[$stream>>2]|0;
   $55 = ((($54)) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($this)) + 40|0);
   __THREW__ = 0;
   (invoke_iii($56|0,($stream|0),($57|0))|0);
   $58 = __THREW__; __THREW__ = 0;
   $59 = $58&1;
   if (!($59)) {
    $60 = HEAP32[$stream>>2]|0;
    $61 = ((($60)) + 32|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_iii($62|0,($stream|0),($file_size|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if (!($65)) {
     $66 = ($63|0)==(0);
     do {
      if ($66) {
       $67 = $57;
       $68 = $67;
       $69 = HEAP32[$68>>2]|0;
       $70 = (($67) + 4)|0;
       $71 = $70;
       $72 = HEAP32[$71>>2]|0;
       $73 = HEAP32[$this>>2]|0;
       $74 = ((($73)) + 8|0);
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       $76 = (invoke_ii($75|0,($this|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        break L5;
       }
       $79 = (_i64Add(($69|0),($72|0),($0|0),($1|0))|0);
       $80 = tempRet0;
       $81 = (_i64Subtract(($79|0),($80|0),($76|0),0)|0);
       $82 = tempRet0;
       $83 = $file_size;
       $84 = $83;
       $85 = HEAP32[$84>>2]|0;
       $86 = (($83) + 4)|0;
       $87 = $86;
       $88 = HEAP32[$87>>2]|0;
       $89 = ($82>>>0)>($88>>>0);
       $90 = ($81>>>0)>($85>>>0);
       $91 = ($82|0)==($88|0);
       $92 = $91 & $90;
       $93 = $89 | $92;
       if ($93) {
        $94 = HEAP32[$3>>2]|0;
        $95 = ($94|0)==(1);
        if ($95) {
         $96 = $57;
         $97 = $96;
         $98 = HEAP32[$97>>2]|0;
         $99 = (($96) + 4)|0;
         $100 = $99;
         $101 = HEAP32[$100>>2]|0;
         $102 = (_i64Subtract(($85|0),($88|0),($98|0),($101|0))|0);
         $103 = tempRet0;
         $104 = $4;
         $105 = $104;
         HEAP32[$105>>2] = $102;
         $106 = (($104) + 4)|0;
         $107 = $106;
         HEAP32[$107>>2] = $103;
         break;
        }
        $108 = ($1>>>0)<(1);
        $109 = ($0>>>0)<(0);
        $110 = ($1|0)==(1);
        $111 = $110 & $109;
        $112 = $108 | $111;
        if ($112) {
         $114 = $57;
         $115 = $114;
         $116 = HEAP32[$115>>2]|0;
         $117 = (($114) + 4)|0;
         $118 = $117;
         $119 = HEAP32[$118>>2]|0;
         $120 = (_i64Subtract(($85|0),($88|0),($116|0),($119|0))|0);
         $121 = tempRet0;
         HEAP32[$3>>2] = $120;
         break;
        } else {
         __THREW__ = 0;
         invoke_viiii(756,(11408|0),(11432|0),359,(11464|0));
         $113 = __THREW__; __THREW__ = 0;
         break L5;
        }
       }
      }
     } while(0);
     $122 = HEAP32[$20>>2]|0;
     $123 = HEAP32[$122>>2]|0;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     __THREW__ = 0;
     invoke_vi($125|0,($122|0));
     $126 = __THREW__; __THREW__ = 0;
     $127 = $126&1;
     if (!($127)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $50 = ___cxa_find_matching_catch()|0;
 $51 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($21|0));
 $52 = __THREW__; __THREW__ = 0;
 $53 = $52&1;
 if ($53) {
  $128 = ___cxa_find_matching_catch(0|0)|0;
  $129 = tempRet0;
  ___clang_call_terminate($128);
  // unreachable;
 } else {
  $$0 = $50;$$02 = $51;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN15AP4_UnknownAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($other)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 16|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 24|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($this)) + 25|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($this)) + 28|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 32|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$this>>2] = (11024);
 $13 = ((($this)) + 36|0);
 $14 = ((($other)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$13>>2] = $15;
 $16 = ((($this)) + 40|0);
 $17 = ((($other)) + 40|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $16;
 $25 = $24;
 HEAP32[$25>>2] = $20;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = ((($this)) + 48|0);
 $29 = ((($other)) + 48|0);
 __THREW__ = 0;
 invoke_vii(842,($28|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $52 = ___cxa_find_matching_catch()|0;
  $53 = tempRet0;
  $$0 = $53;$$01 = $52;
  ___resumeException($$01|0);
  // unreachable;
 }
 $32 = ((($other)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$3>>2] = $33;
 $34 = ((($other)) + 16|0);
 $35 = $34;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $4;
 $42 = $41;
 HEAP32[$42>>2] = $37;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $45 = HEAP32[$13>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  return;
 }
 $47 = HEAP32[$45>>2]|0;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 __THREW__ = 0;
 invoke_vi($49|0,($45|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if (!($51)) {
  return;
 }
 $54 = ___cxa_find_matching_catch()|0;
 $55 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($28|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  $$0 = $55;$$01 = $54;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN15AP4_UnknownAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11024);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch()|0;
   $9 = tempRet0;
   $10 = ((($this)) + 48|0);
   __THREW__ = 0;
   invoke_vi(279,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $$0 = $9;$$01 = $8;
    ___resumeException($$01|0);
    // unreachable;
   }
  }
 }
 $13 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $$0 = $17;$$01 = $16;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN15AP4_UnknownAtomD0Ev($this) {
 $this = $this|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11024);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch()|0;
   $9 = tempRet0;
   $10 = ((($this)) + 48|0);
   __THREW__ = 0;
   invoke_vi(279,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $$0$i = $9;$$01$i = $8;
    __ZdlPv($this);
    ___resumeException($$01$i|0);
    // unreachable;
   }
  }
 }
 $13 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $$0$i = $17;$$01$i = $16;
 __ZdlPv($this);
 ___resumeException($$01$i|0);
 // unreachable;
}
function __ZN15AP4_UnknownAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $position = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $position = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($this)) + 56|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($this)) + 64|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$4,$6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iii[$10 & 1023]($1,$position)|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 40|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iiii[$14 & 1023]($11,$18,$21)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ((($this)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = ((($this)) + 16|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $38 = $30;$39 = $33;
 } else {
  $38 = $25;$39 = 0;
 }
 $34 = HEAP32[$this>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (FUNCTION_TABLE_ii[$36 & 1023]($this)|0);
 $40 = (_i64Subtract(($38|0),($39|0),($37|0),0)|0);
 $41 = tempRet0;
 $42 = HEAP32[$0>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (FUNCTION_TABLE_iiiii[$45 & 1023]($42,$stream,$40,$41)|0);
 $47 = ($46|0)==(0);
 if (!($47)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = HEAP32[$0>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $position;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 (FUNCTION_TABLE_iiii[$51 & 1023]($48,$54,$57)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN15AP4_UnknownAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vii(843,($0|0),($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN28AP4_NullTerminatedStringAtomC2EjyR14AP4_ByteStream($this,$type,$0,$1,$stream) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $$$i = 0, $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $type;
 $3 = ((($this)) + 8|0);
 $4 = ((($this)) + 16|0);
 $5 = ((($this)) + 24|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($this)) + 25|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($this)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = ($1>>>0)>(0);
 $10 = ($0>>>0)>(4294967295);
 $11 = ($1|0)==(0);
 $12 = $11 & $10;
 $13 = $9 | $12;
 $$$i = $13 ? 1 : $0;
 $14 = $13 ? $0 : 0;
 $15 = $13 ? $1 : 0;
 HEAP32[$3>>2] = $$$i;
 $16 = $4;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 HEAP32[$this>>2] = (11088);
 $20 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(790,($20|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $$0 = $33;$$01 = $34;
  ___resumeException($$0|0);
  // unreachable;
 }
 $23 = (($0) + -8)|0;
 __THREW__ = 0;
 $24 = (invoke_ii(787,($23|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($24|0),($23|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   $29 = (($0) + -9)|0;
   $30 = (($24) + ($29)|0);
   HEAP8[$30>>0] = 0;
   __THREW__ = 0;
   (invoke_iii(791,($20|0),($24|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    return;
   }
  }
 }
 $35 = ___cxa_find_matching_catch()|0;
 $36 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($20|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  $$0 = $35;$$01 = $36;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN28AP4_NullTerminatedStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(8);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$4,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $$neg1 = (($10) + -9)|0;
 $12 = ($$neg1|0)==($11|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (($$neg1) - ($11))|0;
 $padding$02 = $13;
 while(1) {
  $14 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $14;
  }
 }
 return ($$0|0);
}
function __ZN28AP4_NullTerminatedStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,11480,$4,0);
 return 0;
}
function __ZN14AP4_AtomParentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11152);
 $0 = ((($this)) + 4|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $14 = ((($this)) + 16|0);
  $15 = ((($this)) + 8|0);
  HEAP32[$0>>2] = (2376);
  HEAP32[$15>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$1>>2] = 0;
  return;
 } else {
  $item$01$i = $2;
 }
 while(1) {
  $4 = ((($item$01$i)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$item$01$i>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$6>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   invoke_vi($10|0,($6|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
  }
  __ZdlPv($item$01$i);
  $13 = ($5|0)==(0|0);
  if ($13) {
   label = 5;
   break;
  } else {
   $item$01$i = $5;
  }
 }
 if ((label|0) == 5) {
  $14 = ((($this)) + 16|0);
  $15 = ((($this)) + 8|0);
  HEAP32[$0>>2] = (2376);
  HEAP32[$15>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$1>>2] = 0;
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 HEAP32[$0>>2] = (2376);
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $23 = ((($this)) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($this)) + 16|0);
  HEAP32[$24>>2] = 0;
  HEAP32[$1>>2] = 0;
  ___resumeException($16|0);
  // unreachable;
 } else {
  $item$01$i$i1 = $18;
 }
 while(1) {
  $20 = ((($item$01$i$i1)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  __ZdlPv($item$01$i$i1);
  $22 = ($21|0)==(0|0);
  if ($22) {
   break;
  } else {
   $item$01$i$i1 = $21;
  }
 }
 $23 = ((($this)) + 8|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 16|0);
 HEAP32[$24>>2] = 0;
 HEAP32[$1>>2] = 0;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN14AP4_AtomParentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $item$01$i$i = 0, $item$01$i$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11152);
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$item$01$i$i>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   invoke_vi($9|0,($5|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    break;
   }
  }
  __ZdlPv($item$01$i$i);
  $12 = ($4|0)==(0|0);
  if ($12) {
   label = 7;
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 if ((label|0) == 7) {
  __ZdlPv($this);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $15 = ((($this)) + 4|0);
 HEAP32[$15>>2] = (2376);
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZdlPv($this);
  ___resumeException($13|0);
  // unreachable;
 } else {
  $item$01$i$i1$i = $16;
 }
 while(1) {
  $18 = ((($item$01$i$i1$i)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  __ZdlPv($item$01$i$i1$i);
  $20 = ($19|0)==(0|0);
  if ($20) {
   break;
  } else {
   $item$01$i$i1$i = $19;
  }
 }
 __ZdlPv($this);
 ___resumeException($13|0);
 // unreachable;
}
function __ZN14AP4_AtomParent8AddChildEP8AP4_Atomi($this,$child,$position) {
 $this = $this|0;
 $child = $child|0;
 $position = $position|0;
 var $$0 = 0, $$lcssa = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $insertion_point$0 = 0, $insertion_point$0$lcssa = 0, $insertion_point$03 = 0, $insertion_point$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$child>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($child)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = -3;
  return ($$0|0);
 }
 do {
  if ((($position|0) == -1)) {
   $5 = (__Znwj(12)|0);
   HEAP32[$5>>2] = $child;
   $6 = ((($5)) + 4|0);
   HEAP32[$6>>2] = 0;
   $7 = ((($5)) + 8|0);
   HEAP32[$7>>2] = 0;
   $8 = ((($this)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $12 = ((($this)) + 12|0);
    HEAP32[$12>>2] = $5;
    HEAP32[$8>>2] = $5;
    HEAP32[$6>>2] = 0;
    $$sink$i$i = 0;
   } else {
    HEAP32[$6>>2] = 0;
    $11 = ((($9)) + 4|0);
    HEAP32[$11>>2] = $5;
    HEAP32[$8>>2] = $5;
    $$sink$i$i = $9;
   }
   HEAP32[$7>>2] = $$sink$i$i;
   $13 = ((($this)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
  } else if ((($position|0) == 0)) {
   $16 = (__Znwj(12)|0);
   HEAP32[$16>>2] = $child;
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = 0;
   $18 = ((($16)) + 8|0);
   HEAP32[$18>>2] = 0;
   $19 = ((($this)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    HEAP32[$19>>2] = $16;
    $24 = ((($this)) + 16|0);
    HEAP32[$24>>2] = $16;
    HEAP32[$17>>2] = 0;
    HEAP32[$18>>2] = 0;
   } else {
    $22 = $20;
    HEAP32[$18>>2] = 0;
    HEAP32[$17>>2] = $22;
    $23 = ((($20)) + 8|0);
    HEAP32[$23>>2] = $16;
    HEAP32[$19>>2] = $16;
   }
   $25 = ((($this)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[$25>>2] = $27;
  } else {
   $28 = ((($this)) + 12|0);
   $insertion_point$03 = HEAP32[$28>>2]|0;
   $29 = ($insertion_point$03|0)!=(0|0);
   $30 = (($position) + -1)|0;
   $31 = ($30|0)!=(0);
   $32 = $29 & $31;
   if ($32) {
    $36 = $30;$insertion_point$05 = $insertion_point$03;
    while(1) {
     $33 = ((($insertion_point$05)) + 4|0);
     $insertion_point$0 = HEAP32[$33>>2]|0;
     $34 = ($insertion_point$0|0)!=(0|0);
     $35 = (($36) + -1)|0;
     $37 = ($35|0)!=(0);
     $38 = $34 & $37;
     if ($38) {
      $36 = $35;$insertion_point$05 = $insertion_point$0;
     } else {
      $$lcssa = $34;$insertion_point$0$lcssa = $insertion_point$0;
      break;
     }
    }
   } else {
    $$lcssa = $29;$insertion_point$0$lcssa = $insertion_point$03;
   }
   if (!($$lcssa)) {
    $$0 = -12;
    return ($$0|0);
   }
   $39 = (__Znwj(12)|0);
   HEAP32[$39>>2] = $child;
   $40 = ((($39)) + 4|0);
   HEAP32[$40>>2] = 0;
   $41 = ((($39)) + 8|0);
   HEAP32[$41>>2] = 0;
   $42 = ((($this)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==($insertion_point$0$lcssa|0);
   if ($44) {
    HEAP32[$40>>2] = 0;
    $45 = ((($insertion_point$0$lcssa)) + 4|0);
    HEAP32[$45>>2] = $39;
    HEAP32[$42>>2] = $39;
    HEAP32[$41>>2] = $insertion_point$0$lcssa;
    $46 = ((($this)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$46>>2] = $48;
    break;
   } else {
    HEAP32[$41>>2] = $insertion_point$0$lcssa;
    $49 = ((($insertion_point$0$lcssa)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[$40>>2] = $50;
    $51 = $50;
    $52 = ((($51)) + 8|0);
    HEAP32[$52>>2] = $39;
    HEAP32[$49>>2] = $39;
    $53 = ((($this)) + 8|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$53>>2] = $55;
    break;
   }
  }
 } while(0);
 $56 = HEAP32[$child>>2]|0;
 $57 = ((($56)) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 (FUNCTION_TABLE_iii[$58 & 1023]($child,$this)|0);
 $59 = HEAP32[$this>>2]|0;
 $60 = ((($59)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_vii[$61 & 1023]($this,$child);
 $$0 = 0;
 return ($$0|0);
}
function __ZN14AP4_AtomParent11RemoveChildEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$02$i = 0, $item$03$i = 0, $item$03$i$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$child>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($child)|0);
 $4 = ($3|0)==($this|0);
 if (!($4)) {
  $$0 = -3;
  return ($$0|0);
 }
 $5 = ((($this)) + 12|0);
 $item$02$i = HEAP32[$5>>2]|0;
 $6 = ($item$02$i|0)==(0|0);
 if ($6) {
  $$0 = -11;
  return ($$0|0);
 } else {
  $item$03$i = $item$02$i;
 }
 while(1) {
  $7 = HEAP32[$item$03$i>>2]|0;
  $8 = ($7|0)==($child|0);
  if ($8) {
   $item$03$i$lcssa = $item$03$i;
   break;
  }
  $24 = ((($item$03$i)) + 4|0);
  $item$0$i = HEAP32[$24>>2]|0;
  $25 = ($item$0$i|0)==(0|0);
  if ($25) {
   $$0 = -11;
   label = 13;
   break;
  } else {
   $item$03$i = $item$0$i;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $9 = ((($item$03$i$lcssa)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = ((($item$03$i$lcssa)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13;
 do {
  if ($11) {
   HEAP32[$5>>2] = $13;
   $21 = ($13|0)==(0|0);
   if ($21) {
    $23 = ((($this)) + 16|0);
    HEAP32[$23>>2] = 0;
    break;
   } else {
    $22 = ((($13)) + 8|0);
    HEAP32[$22>>2] = 0;
    break;
   }
  } else {
   $15 = ($13|0)==(0|0);
   if ($15) {
    $19 = ((($this)) + 16|0);
    HEAP32[$19>>2] = $10;
    $20 = ((($10)) + 4|0);
    HEAP32[$20>>2] = 0;
    break;
   } else {
    $16 = ((($13)) + 8|0);
    HEAP32[$16>>2] = $10;
    $17 = HEAP32[$9>>2]|0;
    $18 = ((($17)) + 4|0);
    HEAP32[$18>>2] = $14;
    break;
   }
  }
 } while(0);
 __ZdlPv($item$03$i$lcssa);
 $26 = ((($this)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[$26>>2] = $28;
 $29 = HEAP32[$child>>2]|0;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 (FUNCTION_TABLE_iii[$31 & 1023]($child,0)|0);
 $32 = HEAP32[$this>>2]|0;
 $33 = ((($32)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vii[$34 & 1023]($this,$child);
 $$0 = 0;
 return ($$0|0);
}
function __ZN14AP4_AtomParent11DeleteChildEjj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiii[$2 & 1023]($this,$type,$index)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 1023]($this,$3)|0);
 $$not = ($8|0)==(0);
 if (!($$not)) {
  $$0 = $8;
  return ($$0|0);
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($3);
 $$0 = 0;
 return ($$0|0);
}
function __ZNK14AP4_AtomParent8GetChildEjj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $$0$i = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0;
 var $item$01$i = 0, $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (11504);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = $type;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $index;
 $3 = ((($this)) + 12|0);
 $item$01$i = HEAP32[$3>>2]|0;
 $4 = ($item$01$i|0)==(0|0);
 if ($4) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $5 = HEAP32[$item$01$i>>2]|0;
 $6 = (__ZNK14AP4_AtomFinder4TestEP8AP4_Atom($0,$5)|0);
 $7 = ($6|0)==(0);
 L4: do {
  if ($7) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $8 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$8>>2]|0;
    $9 = ($item$0$i|0)==(0|0);
    if ($9) {
     $$0$i = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $10 = ((($$pre)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$item$0$i>>2]|0;
    $13 = (FUNCTION_TABLE_iii[$11 & 1023]($0,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0$i|0);
  }
 } while(0);
 $15 = HEAP32[$$lcssa>>2]|0;
 $$0$i = $15;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNK14AP4_AtomParent8GetChildEPKhj($this,$uuid,$index) {
 $this = $this|0;
 $uuid = $uuid|0;
 $index = $index|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0;
 var $item$02 = 0, $item$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $item$02 = HEAP32[$0>>2]|0;
 $1 = ($item$02|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$013 = $index;$item$04 = $item$02;
 }
 while(1) {
  $2 = HEAP32[$item$04>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(1970628964);
  if ($5) {
   $6 = ($2|0)==(0|0);
   if ($6) {
    $9 = 0;
   } else {
    $7 = (___dynamic_cast($2,11216,18120,0)|0);
    $9 = $7;
   }
   $8 = ((($9)) + 36|0);
   $10 = (_memcmp($8,$uuid,16)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ($$013|0)==(0);
    if ($12) {
     $$0 = $2;
     label = 9;
     break;
    }
    $13 = (($$013) + -1)|0;
    $$1 = $13;
   } else {
    $$1 = $$013;
   }
  } else {
   $$1 = $$013;
  }
  $14 = ((($item$04)) + 4|0);
  $item$0 = HEAP32[$14>>2]|0;
  $15 = ($item$0|0)==(0|0);
  if ($15) {
   $$0 = 0;
   label = 9;
   break;
  } else {
   $$013 = $$1;$item$04 = $item$0;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomParent9FindChildEPKcbb($this,$path,$auto_create,$auto_create_full) {
 $this = $this|0;
 $path = $path|0;
 $auto_create = $auto_create|0;
 $auto_create_full = $auto_create_full|0;
 var $$ = 0, $$$us = 0, $$0 = 0, $$05 = 0, $$06 = 0, $$07 = 0, $$07$us = 0, $$lcssa = 0, $$lcssa$us = 0, $$lcssa59 = 0, $$lcssa60 = 0, $$off = 0, $$off$us = 0, $$off11 = 0, $$off11$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom$1$us = 0, $index$0$lcssa = 0, $index$0$lcssa$us = 0, $index$012 = 0, $index$012$us = 0, $index$1 = 0, $index$1$us = 0, $parent$0 = 0, $parent$0$us = 0, $tail$0 = 0, $tail$0$us = 0;
 var $x$0$lcssa = 0, $x$0$lcssa$us = 0, $x$013 = 0, $x$013$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($auto_create) {
  $$07$us = $path;$parent$0$us = $this;
 } else {
  $$07 = $path;$parent$0 = $this;
  while(1) {
   $60 = HEAP8[$$07>>0]|0;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $$06 = 0;
    label = 36;
    break;
   }
   $62 = ((($$07)) + 1|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $$06 = 0;
    label = 36;
    break;
   }
   $65 = ((($$07)) + 2|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)==(0);
   if ($67) {
    $$06 = 0;
    label = 36;
    break;
   }
   $68 = ((($$07)) + 3|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = ($69<<24>>24)==(0);
   if ($70) {
    $$06 = 0;
    label = 36;
    break;
   }
   $71 = ((($$07)) + 4|0);
   $72 = HEAP8[$71>>0]|0;
   if ((($72<<24>>24) == 47)) {
    $73 = ((($$07)) + 5|0);
    $index$1 = 0;$tail$0 = $73;
   } else if ((($72<<24>>24) == 0)) {
    $index$1 = 0;$tail$0 = 0;
   } else if ((($72<<24>>24) == 91)) {
    $74 = ((($$07)) + 5|0);
    $75 = HEAP8[$74>>0]|0;
    $$off11 = (($75) + -48)<<24>>24;
    $76 = ($$off11&255)<(10);
    if ($76) {
     $78 = $75;$index$012 = 0;$x$013 = $74;
     while(1) {
      $77 = $78 << 24 >> 24;
      $79 = ($index$012*10)|0;
      $80 = ((($x$013)) + 1|0);
      $81 = (($79) + -48)|0;
      $82 = (($81) + ($77))|0;
      $83 = HEAP8[$80>>0]|0;
      $$off = (($83) + -48)<<24>>24;
      $84 = ($$off&255)<(10);
      if ($84) {
       $78 = $83;$index$012 = $82;$x$013 = $80;
      } else {
       $$lcssa = $83;$index$0$lcssa = $82;$x$0$lcssa = $80;
       break;
      }
     }
    } else {
     $$lcssa = $75;$index$0$lcssa = 0;$x$0$lcssa = $74;
    }
    $85 = ($$lcssa<<24>>24)==(93);
    if (!($85)) {
     $$06 = 0;
     label = 36;
     break;
    }
    $86 = ((($x$0$lcssa)) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ($87<<24>>24)==(0);
    $89 = ((($x$0$lcssa)) + 2|0);
    $$ = $88 ? 0 : $89;
    $index$1 = $index$0$lcssa;$tail$0 = $$;
   } else {
    $$06 = 0;
    label = 36;
    break;
   }
   $90 = $60&255;
   $91 = $90 << 24;
   $92 = $63 << 24 >> 24;
   $93 = $92 << 16;
   $94 = $93 | $91;
   $95 = $66 << 24 >> 24;
   $96 = $95 << 8;
   $97 = $94 | $96;
   $98 = $69 << 24 >> 24;
   $99 = $97 | $98;
   $100 = HEAP32[$parent$0>>2]|0;
   $101 = ((($100)) + 20|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($parent$0,$99,$index$1)|0);
   $104 = ($103|0)==(0|0);
   if ($104) {
    $$06 = 0;
    label = 36;
    break;
   }
   $109 = ($tail$0|0)==(0|0);
   if ($109) {
    $$06 = $103;
    label = 36;
    break;
   }
   $110 = (___dynamic_cast($103,11216,2336,0)|0);
   $111 = ($110|0)==(0|0);
   $112 = ((($110)) + 36|0);
   $113 = $111 ? 0 : $112;
   if ($111) {
    $$06 = 0;
    label = 36;
    break;
   } else {
    $$07 = $tail$0;$parent$0 = $113;
   }
  }
  if ((label|0) == 36) {
   return ($$06|0);
  }
 }
 while(1) {
  $0 = HEAP8[$$07$us>>0]|0;
  $1 = ($0<<24>>24)==(0);
  if ($1) {
   $$06 = 0;
   label = 36;
   break;
  }
  $2 = ((($$07$us)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$06 = 0;
   label = 36;
   break;
  }
  $5 = ((($$07$us)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$06 = 0;
   label = 36;
   break;
  }
  $8 = ((($$07$us)) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $$06 = 0;
   label = 36;
   break;
  }
  $11 = ((($$07$us)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  if ((($12<<24>>24) == 47)) {
   $29 = ((($$07$us)) + 5|0);
   $index$1$us = 0;$tail$0$us = $29;
  } else if ((($12<<24>>24) == 91)) {
   $13 = ((($$07$us)) + 5|0);
   $14 = HEAP8[$13>>0]|0;
   $$off11$us = (($14) + -48)<<24>>24;
   $15 = ($$off11$us&255)<(10);
   if ($15) {
    $22 = $14;$index$012$us = 0;$x$013$us = $13;
    while(1) {
     $21 = $22 << 24 >> 24;
     $23 = ($index$012$us*10)|0;
     $24 = ((($x$013$us)) + 1|0);
     $25 = (($23) + -48)|0;
     $26 = (($25) + ($21))|0;
     $27 = HEAP8[$24>>0]|0;
     $$off$us = (($27) + -48)<<24>>24;
     $28 = ($$off$us&255)<(10);
     if ($28) {
      $22 = $27;$index$012$us = $26;$x$013$us = $24;
     } else {
      $$lcssa$us = $27;$index$0$lcssa$us = $26;$x$0$lcssa$us = $24;
      break;
     }
    }
   } else {
    $$lcssa$us = $14;$index$0$lcssa$us = 0;$x$0$lcssa$us = $13;
   }
   $16 = ($$lcssa$us<<24>>24)==(93);
   if (!($16)) {
    $$06 = 0;
    label = 36;
    break;
   }
   $17 = ((($x$0$lcssa$us)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   $20 = ((($x$0$lcssa$us)) + 2|0);
   $$$us = $19 ? 0 : $20;
   $index$1$us = $index$0$lcssa$us;$tail$0$us = $$$us;
  } else if ((($12<<24>>24) == 0)) {
   $index$1$us = 0;$tail$0$us = 0;
  } else {
   $$06 = 0;
   label = 36;
   break;
  }
  $30 = $0&255;
  $31 = $30 << 24;
  $32 = $3 << 24 >> 24;
  $33 = $32 << 16;
  $34 = $33 | $31;
  $35 = $6 << 24 >> 24;
  $36 = $35 << 8;
  $37 = $34 | $36;
  $38 = $9 << 24 >> 24;
  $39 = $37 | $38;
  $40 = HEAP32[$parent$0$us>>2]|0;
  $41 = ((($40)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_iiii[$42 & 1023]($parent$0$us,$39,$index$1$us)|0);
  $44 = ($43|0)==(0|0);
  if ($44) {
   $45 = ($index$1$us|0)==(0);
   if (!($45)) {
    $$06 = 0;
    label = 36;
    break;
   }
   $46 = (__Znwj(56)|0);
   __THREW__ = 0;
   if ($auto_create_full) {
    __ZN17AP4_ContainerAtomC2Ejhj($46,$39,0,0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $$lcssa60 = $46;
     label = 32;
     break;
    }
   } else {
    __ZN17AP4_ContainerAtomC2Ej($46,$39);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $$lcssa59 = $46;
     label = 33;
     break;
    }
   }
   $51 = HEAP32[$parent$0$us>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   (FUNCTION_TABLE_iiii[$53 & 1023]($parent$0$us,$46,-1)|0);
   $atom$1$us = $46;
  } else {
   $atom$1$us = $43;
  }
  $54 = ($tail$0$us|0)==(0|0);
  if ($54) {
   $$06 = $atom$1$us;
   label = 36;
   break;
  }
  $55 = ($atom$1$us|0)==(0|0);
  if ($55) {
   $$06 = 0;
   label = 36;
   break;
  }
  $56 = (___dynamic_cast($atom$1$us,11216,2336,0)|0);
  $57 = ($56|0)==(0|0);
  $58 = ((($56)) + 36|0);
  $59 = $57 ? 0 : $58;
  if ($57) {
   $$06 = 0;
   label = 36;
   break;
  } else {
   $$07$us = $tail$0$us;$parent$0$us = $59;
  }
 }
 if ((label|0) == 32) {
  $105 = ___cxa_find_matching_catch()|0;
  $106 = tempRet0;
  __ZdlPv($$lcssa60);
  $$0 = $106;$$05 = $105;
  ___resumeException($$05|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  __ZdlPv($$lcssa59);
  $$0 = $108;$$05 = $107;
  ___resumeException($$05|0);
  // unreachable;
 }
 else if ((label|0) == 36) {
  return ($$06|0);
 }
 return (0)|0;
}
function __ZNK18AP4_AtomListWriter6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $after = 0, $before = 0, $i$03 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $before = sp + 8|0;
 $after = sp;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_iii[$4 & 1023]($1,$before)|0);
 $5 = HEAP32[$atom>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 (FUNCTION_TABLE_iii[$7 & 1023]($atom,$8)|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iii[$12 & 1023]($9,$after)|0);
 $13 = $after;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $before;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_i64Subtract(($15|0),($18|0),($21|0),($24|0))|0);
 $26 = tempRet0;
 $27 = ((($atom)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = ((($atom)) + 16|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $38 = $36;$40 = $33;
 } else {
  $38 = 0;$40 = $28;
 }
 $37 = ($26>>>0)>($38>>>0);
 $39 = ($25>>>0)>($40>>>0);
 $41 = ($26|0)==($38|0);
 $42 = $41 & $39;
 $43 = $37 | $42;
 if ($43) {
  ___assert_fail((11520|0),(11432|0),720,(11560|0));
  // unreachable;
 }
 if ($29) {
  $44 = ((($atom)) + 16|0);
  $45 = $44;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $52 = $50;$54 = $47;
 } else {
  $52 = 0;$54 = $28;
 }
 $51 = ($26>>>0)<($52>>>0);
 $53 = ($25>>>0)<($54>>>0);
 $55 = ($26|0)==($52|0);
 $56 = $55 & $53;
 $57 = $51 | $56;
 if (!($57)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __Z9AP4_DebugPKcz(11568,$vararg_buffer);
 $58 = HEAP32[$27>>2]|0;
 $59 = ($58|0)==(1);
 if ($59) {
  $60 = ((($atom)) + 16|0);
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $63;$68 = $66;
 } else {
  $67 = $58;$68 = 0;
 }
 $69 = (_i64Subtract(($67|0),($68|0),($25|0),($26|0))|0);
 $70 = tempRet0;
 $71 = ($70>>>0)>(0);
 $72 = ($69>>>0)>(1024);
 $73 = ($70|0)==(0);
 $74 = $73 & $72;
 $75 = $71 | $74;
 if ($75) {
  __Z9AP4_DebugPKcz(11632,$vararg_buffer1);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = ($67|0)==($25|0);
 $77 = ($68|0)==($26|0);
 $78 = $76 & $77;
 if ($78) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$03 = 0;
 }
 while(1) {
  $79 = HEAP32[$0>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($79,0)|0);
  $80 = (($i$03) + 1)|0;
  $81 = (0)<($70>>>0);
  $82 = ($80>>>0)<($69>>>0);
  $83 = (0)==($70|0);
  $84 = $83 & $82;
  $85 = $81 | $84;
  if ($85) {
   $i$03 = $80;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNK14AP4_AtomFinder4TestEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($this)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $not$ = ($6|0)!=(0);
 $$ = $not$ << 31 >> 31;
 $$0 = $$;
 return ($$0|0);
}
function __ZN8AP4_AtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_Atom13InspectFieldsER17AP4_AtomInspector($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN28AP4_NullTerminatedStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11088);
 $0 = ((($this)) + 36|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN28AP4_NullTerminatedStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11088);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN18AP4_AtomListWriterD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListI8AP4_AtomE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14AP4_AtomFinderD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN9AP4_TrackC2ER12AP4_TrakAtomR14AP4_ByteStreamj($this,$atom,$sample_stream,$movie_time_scale) {
 $this = $this|0;
 $atom = $atom|0;
 $sample_stream = $sample_stream|0;
 $movie_time_scale = $movie_time_scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11768);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $atom;
 $1 = ((($this)) + 8|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 20|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = $movie_time_scale;
 $6 = ((($atom)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiii[$9 & 1023]($6,11800,0,0)|0);
 $11 = ($10|0)==(0|0);
 do {
  if (!($11)) {
   $12 = (___dynamic_cast($10,11216,24816,0)|0);
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = ((($12)) + 36|0);
    $15 = HEAP32[$14>>2]|0;
    if ((($15|0) == 1751740020)) {
     HEAP32[$2>>2] = 4;
     break;
    } else if ((($15|0) == 1785750887)) {
     HEAP32[$2>>2] = 6;
     break;
    } else if ((($15|0) == 1952807028) | (($15|0) == 1954034535)) {
     HEAP32[$2>>2] = 5;
     break;
    } else if ((($15|0) == 1936684398)) {
     HEAP32[$2>>2] = 1;
     break;
    } else if ((($15|0) == 1986618469)) {
     HEAP32[$2>>2] = 2;
     break;
    } else if ((($15|0) == 1937072756)) {
     HEAP32[$2>>2] = 8;
     break;
    } else if ((($15|0) == 1868854125) | (($15|0) == 1935962989)) {
     HEAP32[$2>>2] = 3;
     break;
    } else {
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP32[$6>>2]|0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiiii[$18 & 1023]($6,11816,0,0)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  return;
 }
 $21 = (___dynamic_cast($19,11216,2336,0)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  return;
 }
 $23 = (__Znwj(44)|0);
 __THREW__ = 0;
 invoke_viii(844,($23|0),($21|0),($sample_stream|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  __ZdlPv($23);
  ___resumeException($26|0);
  // unreachable;
 }
 HEAP32[$3>>2] = $23;
 return;
}
function __ZN9AP4_TrackD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11768);
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = HEAP32[$4>>2]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   FUNCTION_TABLE_vi[$8 & 1023]($4);
  }
 }
 $9 = ((($this)) + 20|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  return;
 }
 $12 = ((($this)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = HEAP32[$13>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vi[$17 & 1023]($13);
 return;
}
function __ZN9AP4_TrackD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (11768);
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = HEAP32[$4>>2]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_vi($8|0,($4|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $22 = ___cxa_find_matching_catch()|0;
    $23 = tempRet0;
    __ZdlPv($this);
    ___resumeException($22|0);
    // unreachable;
   }
  }
 }
 $11 = ((($this)) + 20|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  __ZdlPv($this);
  return;
 }
 $14 = ((($this)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZdlPv($this);
  return;
 }
 $17 = HEAP32[$15>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __THREW__ = 0;
 invoke_vi($19|0,($15|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZdlPv($this);
  ___resumeException($22|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZNK9AP4_Track5GetIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN12AP4_TrakAtom5GetIdEv($1)|0);
 return ($2|0);
}
function __ZN12AP4_MehdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $duration$i = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $duration$i = sp + 4|0;
 $version = sp + 8|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1835362404,($size|0),($2|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   HEAP32[$4>>2] = (11840);
   $8 = ((($4)) + 25|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($duration$i|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    }
    $13 = HEAP32[$duration$i>>2]|0;
    $14 = ((($4)) + 40|0);
    $15 = $14;
    $16 = $15;
    HEAP32[$16>>2] = $13;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = 0;
   } else {
    $19 = ((($4)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(840,($stream|0),($19|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
   }
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 __ZdlPv($4);
 ___resumeException($22|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_MehdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 if ($2) {
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$6)|0);
  $$0 = $10;
  return ($$0|0);
 } else {
  $11 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$6,$9)|0);
  $$0 = $11;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MehdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,17776,$6,$9,0);
 return 0;
}
function __ZN12AP4_MehdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_TkhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(136)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(845,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TkhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coefficient = 0, $creation_time = 0, $duration = 0, $modification_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 12|0;
 $modification_time = sp + 8|0;
 $duration = sp + 4|0;
 $coefficient = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1953196132,$size,$version,$flags);
 HEAP32[$this>>2] = (11936);
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$creation_time)|0);
  $3 = HEAP32[$creation_time>>2]|0;
  $4 = ((($this)) + 40|0);
  $5 = $4;
  $6 = $5;
  HEAP32[$6>>2] = $3;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$modification_time)|0);
  $9 = HEAP32[$modification_time>>2]|0;
  $10 = ((($this)) + 48|0);
  $11 = $10;
  $12 = $11;
  HEAP32[$12>>2] = $9;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = 0;
  $15 = ((($this)) + 56|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$15)|0);
  $16 = ((($this)) + 60|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$16)|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$duration)|0);
  $17 = HEAP32[$duration>>2]|0;
  $18 = ((($this)) + 64|0);
  $19 = $18;
  $20 = $19;
  HEAP32[$20>>2] = $17;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = 0;
 } else {
  $23 = ((($this)) + 40|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$23)|0);
  $24 = ((($this)) + 48|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$24)|0);
  $25 = ((($this)) + 56|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$25)|0);
  $26 = ((($this)) + 60|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$26)|0);
  $27 = ((($this)) + 64|0);
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$27)|0);
 }
 $28 = ((($this)) + 72|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$28,8)|0);
 $29 = ((($this)) + 80|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$29)|0);
 $30 = ((($this)) + 82|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$30)|0);
 $31 = ((($this)) + 84|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$31)|0);
 $32 = ((($this)) + 86|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$32)|0);
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $33 = HEAP32[$coefficient>>2]|0;
 $34 = ((($this)) + 88|0);
 HEAP32[$34>>2] = $33;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $35 = HEAP32[$coefficient>>2]|0;
 $36 = ((($this)) + 92|0);
 HEAP32[$36>>2] = $35;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $37 = HEAP32[$coefficient>>2]|0;
 $38 = ((($this)) + 96|0);
 HEAP32[$38>>2] = $37;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $39 = HEAP32[$coefficient>>2]|0;
 $40 = ((($this)) + 100|0);
 HEAP32[$40>>2] = $39;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $41 = HEAP32[$coefficient>>2]|0;
 $42 = ((($this)) + 104|0);
 HEAP32[$42>>2] = $41;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $43 = HEAP32[$coefficient>>2]|0;
 $44 = ((($this)) + 108|0);
 HEAP32[$44>>2] = $43;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $45 = HEAP32[$coefficient>>2]|0;
 $46 = ((($this)) + 112|0);
 HEAP32[$46>>2] = $45;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $47 = HEAP32[$coefficient>>2]|0;
 $48 = ((($this)) + 116|0);
 HEAP32[$48>>2] = $47;
 HEAP32[$coefficient>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$coefficient)|0);
 $49 = HEAP32[$coefficient>>2]|0;
 $50 = ((($this)) + 120|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($this)) + 124|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$51)|0);
 $52 = ((($this)) + 128|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$52)|0);
 STACKTOP = sp;return;
}
function __ZN12AP4_TkhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 if ($2) {
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$6)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
  $12 = ((($this)) + 48|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = $19;
   return ($$0|0);
  }
  $21 = ((($this)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$22)|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $$0 = $23;
   return ($$0|0);
  }
  $25 = ((($this)) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$26)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = $27;
   return ($$0|0);
  }
  $29 = ((($this)) + 64|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$32)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0 = $36;
   return ($$0|0);
  }
 } else {
  $38 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$6,$9)|0);
  $39 = ($38|0)==(0);
  if (!($39)) {
   $$0 = $38;
   return ($$0|0);
  }
  $40 = ((($this)) + 48|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$43,$46)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = $47;
   return ($$0|0);
  }
  $49 = ((($this)) + 56|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$50)|0);
  $52 = ($51|0)==(0);
  if (!($52)) {
   $$0 = $51;
   return ($$0|0);
  }
  $53 = ((($this)) + 60|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$54)|0);
  $56 = ($55|0)==(0);
  if (!($56)) {
   $$0 = $55;
   return ($$0|0);
  }
  $57 = ((($this)) + 64|0);
  $58 = $57;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$60,$63)|0);
  $65 = ($64|0)==(0);
  if (!($65)) {
   $$0 = $64;
   return ($$0|0);
  }
 }
 $66 = ((($this)) + 72|0);
 $67 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$66,8)|0);
 $68 = ($67|0)==(0);
 if (!($68)) {
  $$0 = $67;
  return ($$0|0);
 }
 $69 = ((($this)) + 80|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$70)|0);
 $72 = ($71|0)==(0);
 if (!($72)) {
  $$0 = $71;
  return ($$0|0);
 }
 $73 = ((($this)) + 82|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$74)|0);
 $76 = ($75|0)==(0);
 if (!($76)) {
  $$0 = $75;
  return ($$0|0);
 }
 $77 = ((($this)) + 84|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$78)|0);
 $80 = ($79|0)==(0);
 if (!($80)) {
  $$0 = $79;
  return ($$0|0);
 }
 $81 = ((($this)) + 86|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$82)|0);
 $84 = ($83|0)==(0);
 if (!($84)) {
  $$0 = $83;
  return ($$0|0);
 }
 $85 = ((($this)) + 88|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$86)|0);
 $88 = ($87|0)==(0);
 if (!($88)) {
  $$0 = $87;
  return ($$0|0);
 }
 $89 = ((($this)) + 92|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$90)|0);
 $92 = ($91|0)==(0);
 if (!($92)) {
  $$0 = $91;
  return ($$0|0);
 }
 $96 = ((($this)) + 96|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$97)|0);
 $99 = ($98|0)==(0);
 if (!($99)) {
  $$0 = $98;
  return ($$0|0);
 }
 $100 = ((($this)) + 100|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$101)|0);
 $103 = ($102|0)==(0);
 if (!($103)) {
  $$0 = $102;
  return ($$0|0);
 }
 $104 = ((($this)) + 104|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$105)|0);
 $107 = ($106|0)==(0);
 if (!($107)) {
  $$0 = $106;
  return ($$0|0);
 }
 $108 = ((($this)) + 108|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$109)|0);
 $111 = ($110|0)==(0);
 if (!($111)) {
  $$0 = $110;
  return ($$0|0);
 }
 $112 = ((($this)) + 112|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$113)|0);
 $115 = ($114|0)==(0);
 if (!($115)) {
  $$0 = $114;
  return ($$0|0);
 }
 $116 = ((($this)) + 116|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$117)|0);
 $119 = ($118|0)==(0);
 if (!($119)) {
  $$0 = $118;
  return ($$0|0);
 }
 $120 = ((($this)) + 120|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$121)|0);
 $123 = ($122|0)==(0);
 if (!($123)) {
  $$0 = $122;
  return ($$0|0);
 }
 $124 = ((($this)) + 124|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$125)|0);
 $127 = ($126|0)==(0);
 if (!($127)) {
  $$0 = $126;
  return ($$0|0);
 }
 $93 = ((($this)) + 128|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$94)|0);
 $$0 = $95;
 return ($$0|0);
}
function __ZN12AP4_TkhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,12024,$5,0,2);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,12032,$10,0,0);
 $11 = HEAP32[$inspector>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 64|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,17776,$17,$20,0);
 $21 = ((($inspector)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $$pre$phiZ2D = $inspector;
  $105 = HEAP32[$$pre$phiZ2D>>2]|0;
  $106 = ((($105)) + 28|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($this)) + 124|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (+($109>>>0));
  $111 = $110 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$107 & 0]($inspector,23592,$111,0);
  $112 = HEAP32[$$pre$phiZ2D>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($this)) + 128|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (+($116>>>0));
  $118 = $117 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$114 & 0]($inspector,23600,$118,0);
  return 0;
 } else {
  $24 = HEAP32[$inspector>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($this)) + 84|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  FUNCTION_TABLE_viiiii[$26 & 1023]($inspector,12040,$29,0,0);
  $30 = HEAP32[$inspector>>2]|0;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($this)) + 80|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  FUNCTION_TABLE_viiiii[$32 & 1023]($inspector,12048,$35,0,0);
  $36 = HEAP32[$inspector>>2]|0;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($this)) + 82|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  FUNCTION_TABLE_viiiii[$38 & 1023]($inspector,12056,$41,0,0);
  $42 = HEAP32[$inspector>>2]|0;
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($this)) + 88|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (+($46|0));
  $48 = $47 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$44 & 0]($inspector,12072,$48,0);
  $49 = HEAP32[$inspector>>2]|0;
  $50 = ((($49)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($this)) + 92|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (+($53|0));
  $55 = $54 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$51 & 0]($inspector,12088,$55,0);
  $56 = HEAP32[$inspector>>2]|0;
  $57 = ((($56)) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($this)) + 96|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (+($60|0));
  $62 = $61 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$58 & 0]($inspector,12104,$62,0);
  $63 = HEAP32[$inspector>>2]|0;
  $64 = ((($63)) + 28|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($this)) + 100|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (+($67|0));
  $69 = $68 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$65 & 0]($inspector,12120,$69,0);
  $70 = HEAP32[$inspector>>2]|0;
  $71 = ((($70)) + 28|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($this)) + 104|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (+($74|0));
  $76 = $75 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$72 & 0]($inspector,12136,$76,0);
  $77 = HEAP32[$inspector>>2]|0;
  $78 = ((($77)) + 28|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($this)) + 108|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (+($81|0));
  $83 = $82 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$79 & 0]($inspector,12152,$83,0);
  $84 = HEAP32[$inspector>>2]|0;
  $85 = ((($84)) + 28|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($this)) + 112|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (+($88|0));
  $90 = $89 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$86 & 0]($inspector,12168,$90,0);
  $91 = HEAP32[$inspector>>2]|0;
  $92 = ((($91)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($this)) + 116|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95|0));
  $97 = $96 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$93 & 0]($inspector,12184,$97,0);
  $98 = HEAP32[$inspector>>2]|0;
  $99 = ((($98)) + 28|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($this)) + 120|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (+($102|0));
  $104 = $103 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$100 & 0]($inspector,12200,$104,0);
  $$pre$phiZ2D = $inspector;
  $105 = HEAP32[$$pre$phiZ2D>>2]|0;
  $106 = ((($105)) + 28|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($this)) + 124|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (+($109>>>0));
  $111 = $110 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$107 & 0]($inspector,23592,$111,0);
  $112 = HEAP32[$$pre$phiZ2D>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($this)) + 128|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (+($116>>>0));
  $118 = $117 * 1.52587890625E-5;
  FUNCTION_TABLE_viidi[$114 & 0]($inspector,23600,$118,0);
  return 0;
 }
 return (0)|0;
}
function __ZN12AP4_TkhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_TfhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $size$1$$i = 0, $size$1$i = 0, $size$3$$i = 0, $size$3$i = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$flags>>2]|0;
 $5 = $4 << 3;
 $6 = $5 & 8;
 $7 = $4 << 1;
 $8 = $7 & 4;
 $9 = $6 | $8;
 $size$1$i = $9 | 16;
 $10 = $4 & 8;
 $11 = ($10|0)==(0);
 $12 = (($size$1$i) + 4)|0;
 $size$1$$i = $11 ? $size$1$i : $12;
 $13 = $4 & 16;
 $14 = ($13|0)==(0);
 $15 = (($size$1$$i) + 4)|0;
 $size$3$i = $14 ? $size$1$$i : $15;
 $16 = $4 & 32;
 $17 = ($16|0)==(0);
 $18 = (($size$3$i) + 4)|0;
 $size$3$$i = $17 ? $size$3$i : $18;
 $19 = ($size$3$$i>>>0)>($size>>>0);
 if ($19) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_viiiii(846,($20|0),($size|0),0,($4|0),($stream|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  __ZdlPv($20);
  ___resumeException($23|0);
  // unreachable;
 } else {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TfhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1952868452,$size,$version,$flags);
 HEAP32[$this>>2] = (12224);
 $0 = ((($this)) + 36|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$0)|0);
 $1 = $flags & 1;
 $2 = ($1|0)==(0);
 $3 = ((($this)) + 40|0);
 if ($2) {
  $4 = $3;
  $5 = $4;
  HEAP32[$5>>2] = 0;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
 } else {
  (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$3)|0);
 }
 $8 = $flags & 2;
 $9 = ($8|0)==(0);
 $10 = ((($this)) + 48|0);
 if ($9) {
  HEAP32[$10>>2] = 1;
 } else {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$10)|0);
 }
 $11 = $flags & 8;
 $12 = ($11|0)==(0);
 $13 = ((($this)) + 52|0);
 if ($12) {
  HEAP32[$13>>2] = 0;
 } else {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$13)|0);
 }
 $14 = $flags & 16;
 $15 = ($14|0)==(0);
 $16 = ((($this)) + 56|0);
 if ($15) {
  HEAP32[$16>>2] = 0;
 } else {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$16)|0);
 }
 $17 = $flags & 32;
 $18 = ($17|0)==(0);
 $19 = ((($this)) + 60|0);
 if ($18) {
  HEAP32[$19>>2] = 0;
  return;
 } else {
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$19)|0);
  return;
 }
}
function __ZN12AP4_TfhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $$pre2 = 0, $$pre3 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $18 = $5;
  } else {
   $8 = ((($this)) + 40|0);
   $9 = $8;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$11,$14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$pre = HEAP32[$4>>2]|0;
    $18 = $$pre;
    break;
   } else {
    $$0 = $15;
    return ($$0|0);
   }
  }
 } while(0);
 $17 = $18 & 2;
 $19 = ($17|0)==(0);
 do {
  if ($19) {
   $25 = $18;
  } else {
   $20 = ((($this)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $$pre2 = HEAP32[$4>>2]|0;
    $25 = $$pre2;
    break;
   } else {
    $$0 = $22;
    return ($$0|0);
   }
  }
 } while(0);
 $24 = $25 & 8;
 $26 = ($24|0)==(0);
 if ($26) {
  $30 = $25;
 } else {
  $27 = ((($this)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$28)|0);
  $$pre3 = HEAP32[$4>>2]|0;
  $30 = $$pre3;
 }
 $29 = $30 & 16;
 $31 = ($29|0)==(0);
 if ($31) {
  $35 = $30;
 } else {
  $32 = ((($this)) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$33)|0);
  $$pre4 = HEAP32[$4>>2]|0;
  $35 = $$pre4;
 }
 $34 = $35 & 32;
 $36 = ($34|0)==(0);
 if ($36) {
  $$0 = 0;
  return ($$0|0);
 }
 $37 = ((($this)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$38)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_TfhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,12312,$4,0,0);
 $5 = ((($this)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $20 = $6;
 } else {
  $9 = HEAP32[$inspector>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($this)) + 40|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,12328,$15,$18,0);
  $$pre = HEAP32[$5>>2]|0;
  $20 = $$pre;
 }
 $19 = $20 & 2;
 $21 = ($19|0)==(0);
 if ($21) {
  $28 = $20;
 } else {
  $22 = HEAP32[$inspector>>2]|0;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($this)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_viiiii[$24 & 1023]($inspector,12352,$26,0,0);
  $$pre1 = HEAP32[$5>>2]|0;
  $28 = $$pre1;
 }
 $27 = $28 & 8;
 $29 = ($27|0)==(0);
 if ($29) {
  $36 = $28;
 } else {
  $30 = HEAP32[$inspector>>2]|0;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($this)) + 52|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_viiiii[$32 & 1023]($inspector,12384,$34,0,0);
  $$pre2 = HEAP32[$5>>2]|0;
  $36 = $$pre2;
 }
 $35 = $36 & 16;
 $37 = ($35|0)==(0);
 if ($37) {
  $44 = $36;
 } else {
  $38 = HEAP32[$inspector>>2]|0;
  $39 = ((($38)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($this)) + 56|0);
  $42 = HEAP32[$41>>2]|0;
  FUNCTION_TABLE_viiiii[$40 & 1023]($inspector,12408,$42,0,0);
  $$pre3 = HEAP32[$5>>2]|0;
  $44 = $$pre3;
 }
 $43 = $44 & 32;
 $45 = ($43|0)==(0);
 if ($45) {
  return 0;
 }
 $46 = HEAP32[$inspector>>2]|0;
 $47 = ((($46)) + 24|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($this)) + 60|0);
 $50 = HEAP32[$49>>2]|0;
 FUNCTION_TABLE_viiiii[$48 & 1023]($inspector,12432,$50,0,1);
 return 0;
}
function __ZN12AP4_TfhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_IsltAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1767066708,$size);
 HEAP32[$this>>2] = (12464);
 $0 = ((($this)) + 36|0);
 $1 = $0;
 $2 = $1;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP8[$4>>0]=0&255;HEAP8[$4+1>>0]=(0>>8)&255;HEAP8[$4+2>>0]=(0>>16)&255;HEAP8[$4+3>>0]=0>>24;
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,8)|0);
 return;
}
function __ZN12AP4_IsltAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,8)|0);
 return ($1|0);
}
function __ZN12AP4_IsltAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,12552,$3,8,0);
 return 0;
}
function __ZN12AP4_IsltAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_MfhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1835427940,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (12568);
 $8 = ((($4)) + 36|0);
 HEAP32[$8>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($8|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MfhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return ($2|0);
}
function __ZN12AP4_MfhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,12656,$4,0,0);
 return 0;
}
function __ZN12AP4_MfhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_TencAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1952804451,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 $8 = ((($4)) + 36|0);
 __THREW__ = 0;
 invoke_vii(847,($8|0),($stream|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (12680);
 HEAP32[$8>>2] = (12740);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_TencAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($0,$stream)|0);
 return ($1|0);
}
function __ZN12AP4_TencAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = (__ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($0,$inspector)|0);
 return ($1|0);
}
function __ZN12AP4_TencAtomD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12AP4_TencAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZThn36_N12AP4_TencAtomD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZThn36_N12AP4_TencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __ZdlPv($0);
 return;
}
function __ZN12AP4_TfdtAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $value$i = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value$i = sp + 4|0;
 $version = sp + 8|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1952867444,($size|0),($2|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   HEAP32[$4>>2] = (12808);
   if ((($2<<24>>24) == 1)) {
    $16 = ((($4)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(840,($stream|0),($16|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
   } else if ((($2<<24>>24) == 0)) {
    HEAP32[$value$i>>2] = 0;
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($value$i|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
    $10 = HEAP32[$value$i>>2]|0;
    $11 = ((($4)) + 40|0);
    $12 = $11;
    $13 = $12;
    HEAP32[$13>>2] = $10;
    $14 = (($12) + 4)|0;
    $15 = $14;
    HEAP32[$15>>2] = 0;
   }
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 __ZdlPv($4);
 ___resumeException($19|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_TfdtAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 if ((($1<<24>>24) == 1)) {
  $10 = ((($this)) + 40|0);
  $11 = $10;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$13,$16)|0);
  $$0 = $17;
  return ($$0|0);
 } else if ((($1<<24>>24) == 0)) {
  $2 = ((($this)) + 40|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
  $$0 = $9;
  return ($$0|0);
 } else {
  $$0 = -18;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TfdtAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,12896,$6,$9,0);
 return 0;
}
function __ZN12AP4_TfdtAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_StcoAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(848,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StcoAtomC2EPjj($this,$entries,$entry_count) {
 $this = $this|0;
 $entries = $entries|0;
 $entry_count = $entry_count|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $entry_count << 2;
 $1 = (($0) + 16)|0;
 __ZN8AP4_AtomC2Ejjhj($this,1937007471,$1,0,0);
 HEAP32[$this>>2] = (12928);
 $2 = ((($this)) + 36|0);
 $$arith = $entry_count<<2;
 $$overflow = ($entry_count>>>0)>(1073741823);
 $3 = $$overflow ? -1 : $$arith;
 $4 = (__Znaj($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = ((($this)) + 40|0);
 HEAP32[$5>>2] = $entry_count;
 _memcpy(($4|0),($entries|0),($0|0))|0;
 return;
}
function __ZN12AP4_StcoAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$arith = 0, $$overflow = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937007471,$size,$version,$flags);
 HEAP32[$this>>2] = (12928);
 $0 = ((($this)) + 40|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($size) + -16)|0;
 $3 = $2 >>> 2;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  HEAP32[$0>>2] = $3;
  $5 = $3;
 } else {
  $5 = $1;
 }
 $$arith = $5<<2;
 $$overflow = ($5>>>0)>(1073741823);
 $6 = $$overflow ? -1 : $$arith;
 $7 = (__Znaj($6)|0);
 $8 = ((($this)) + 36|0);
 HEAP32[$8>>2] = $7;
 $9 = $5 << 2;
 $10 = (__Znaj($9)|0);
 $11 = (__ZN14AP4_ByteStream4ReadEPvj($stream,$10,$9)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  __ZdaPv($10);
  return;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = HEAP32[$8>>2]|0;
  $i$04 = 0;
  while(1) {
   $16 = $i$04 << 2;
   $17 = (($10) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 << 24;
   $$sum1 = $16 | 1;
   $21 = (($10) + ($$sum1)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 16;
   $25 = $24 | $20;
   $$sum2 = $16 | 2;
   $26 = (($10) + ($$sum2)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $25 | $29;
   $$sum3 = $16 | 3;
   $31 = (($10) + ($$sum3)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $30 | $33;
   $35 = (($15) + ($i$04<<2)|0);
   HEAP32[$35>>2] = $34;
   $36 = (($i$04) + 1)|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $i$04 = $36;
   } else {
    break;
   }
  }
 }
 __ZdaPv($10);
 return;
}
function __ZN12AP4_StcoAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (12928);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __ZdaPv($1);
 return;
}
function __ZN12AP4_StcoAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (12928);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 __ZdaPv($1);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_StcoAtom14GetChunkOffsetEjRj($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($chunk) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $$0 = -12;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$chunk_offset>>2] = $7;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_StcoAtom14SetChunkOffsetEjj($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($chunk) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $$0 = -12;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $chunk_offset;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_StcoAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + ($i$01<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$12)|0);
  $14 = ($13|0)==(0);
  $8 = (($i$01) + 1)|0;
  if (!($14)) {
   $$0 = $13;
   label = 5;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $9 = ($8>>>0)<($7>>>0);
  if ($9) {
   $i$01 = $8;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StcoAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $header = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = ((($inspector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return 0;
 }
 $10 = ((($this)) + 36|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $11 = HEAP32[$inspector>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + ($i$01<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,$header,$16,0,0);
  $17 = (($i$01) + 1)|0;
  $18 = HEAP32[$3>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $i$01 = $17;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_FrmaAtomC2Ej($this,$original_format) {
 $this = $this|0;
 $original_format = $original_format|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1718775137,12);
 HEAP32[$this>>2] = (13024);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = $original_format;
 return;
}
function __ZN12AP4_FrmaAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1718775137,$size);
 HEAP32[$this>>2] = (13024);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$0)|0);
 return;
}
function __ZN12AP4_FrmaAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return ($2|0);
}
function __ZN12AP4_FrmaAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $format = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $format = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($format,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,13112,$format,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_FrmaAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_GrpiAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(72)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(849,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_GrpiAtomC2EhPKcPKhj($this,$key_encryption_method,$group_id,$group_key,$group_key_length) {
 $this = $this|0;
 $key_encryption_method = $key_encryption_method|0;
 $group_id = $group_id|0;
 $group_key = $group_key|0;
 $group_key_length = $group_key_length|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1735553129,12,0,0);
 HEAP32[$this>>2] = (13136);
 $0 = ((($this)) + 36|0);
 HEAP8[$0>>0] = $key_encryption_method;
 $1 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vii(812,($1|0),($group_id|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $$0 = $15;$$01 = $14;
  ___resumeException($$01|0);
  // unreachable;
 }
 $4 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_viii(850,($4|0),($group_key|0),($group_key_length|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($this)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($this)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($group_key_length) + 5)|0;
  $12 = (($11) + ($8))|0;
  $13 = (($12) + ($10))|0;
  HEAP32[$9>>2] = $13;
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  $$0 = $17;$$01 = $16;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN12AP4_GrpiAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $group_id_length = 0, $group_key_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $group_id_length = sp + 2|0;
 $group_key_length = sp;
 __ZN8AP4_AtomC2Ejybhj($this,1735553129,$size,0,0,$version,$flags);
 HEAP32[$this>>2] = (13136);
 $0 = ((($this)) + 36|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(790,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $$1 = $34;$$12 = $35;
  ___resumeException($$1|0);
  // unreachable;
 }
 $4 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(837,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $$0 = $36;$$01 = $37;
 } else {
  HEAP16[$group_id_length>>1] = 0;
  __THREW__ = 0;
  (invoke_iii(794,($stream|0),($group_id_length|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    HEAP16[$group_key_length>>1] = 0;
    __THREW__ = 0;
    (invoke_iii(794,($stream|0),($group_key_length|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if (!($12)) {
     $13 = HEAP16[$group_id_length>>1]|0;
     $14 = $13&65535;
     __THREW__ = 0;
     $15 = (invoke_ii(787,($14|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iiii(788,($stream|0),($15|0),($14|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       $20 = HEAP16[$group_id_length>>1]|0;
       $21 = $20&65535;
       __THREW__ = 0;
       invoke_viii(758,($1|0),($15|0),($21|0));
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if (!($23)) {
        __ZdaPv($15);
        $24 = HEAP16[$group_key_length>>1]|0;
        $25 = $24&65535;
        __THREW__ = 0;
        (invoke_iii(757,($4|0),($25|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         $28 = ((($this)) + 56|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = HEAP16[$group_key_length>>1]|0;
         $31 = $30&65535;
         __THREW__ = 0;
         (invoke_iiii(788,($stream|0),($29|0),($31|0))|0);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if (!($33)) {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($4|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $44 = ___cxa_find_matching_catch(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  } else {
   $$0 = $38;$$01 = $39;
  }
 }
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch(0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN12AP4_GrpiAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&65535;
 $3 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  return ($$0|0);
 }
 $5 = ((($this)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  return ($$0|0);
 }
 $9 = ((($this)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = ((($this)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$15,$16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  return ($$0|0);
 }
 $19 = ((($this)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$9>>2]|0;
 $22 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$20,$21)|0);
 $$0 = $22;
 return ($$0|0);
}
function __ZN12AP4_GrpiAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,13224,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 1023]($inspector,13248,$10,0);
 $11 = HEAP32[$inspector>>2]|0;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,13264,$15,$17,0);
 return 0;
}
function __ZN12AP4_GrpiAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(72)|0);
 $1 = ((($this)) + 36|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($this)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(851,($0|0),($2|0),($4|0),($6|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($0);
  ___resumeException($11|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN12AP4_GrpiAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13136);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 40|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0 = $7;$$01 = $6;
   ___resumeException($$01|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0 = $12;$$01 = $11;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN12AP4_GrpiAtomD0Ev($this) {
 $this = $this|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13136);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 40|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0$i = $7;$$01$i = $6;
   __ZdlPv($this);
   ___resumeException($$01$i|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($this);
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0$i = $12;$$01$i = $11;
 __ZdlPv($this);
 ___resumeException($$01$i|0);
 // unreachable;
}
function __ZN12AP4_HvccAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $payload_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp;
 $0 = (($size) + -8)|0;
 __ZN14AP4_DataBufferC2Ej($payload_data,$0);
 $1 = ((($payload_data)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(788,($stream|0),($2|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 3;
  } else {
   $6 = ($3|0)==(0);
   if (!($6)) {
    $$02 = 0;
    __ZN14AP4_DataBufferD2Ev($payload_data);
    STACKTOP = sp;return ($$02|0);
   }
   __THREW__ = 0;
   $9 = (invoke_ii(752,120)|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 3;
   } else {
    $12 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_viii(852,($9|0),($size|0),($12|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $15 = ___cxa_find_matching_catch()|0;
     $16 = tempRet0;
     __ZdlPv($9);
     $$0 = $16;$$01 = $15;
     break;
    } else {
     $$02 = $9;
     __ZN14AP4_DataBufferD2Ev($payload_data);
     STACKTOP = sp;return ($$02|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $$0 = $8;$$01 = $7;
 }
 __THREW__ = 0;
 invoke_vi(279,($payload_data|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_HvccAtomC2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, $i$01$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1752589123,8);
 HEAP32[$this>>2] = (13288);
 $0 = ((($this)) + 36|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 37|0);
 $2 = ((($this)) + 48|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 56|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($this)) + 57|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($this)) + 60|0);
 $10 = ((($this)) + 80|0);
 ;HEAP8[$1>>0]=0|0;HEAP8[$1+1>>0]=0|0;HEAP8[$1+2>>0]=0|0;HEAP8[$1+3>>0]=0|0;HEAP8[$1+4>>0]=0|0;HEAP8[$1+5>>0]=0|0;HEAP8[$1+6>>0]=0|0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP16[$9+16>>1]=0|0;
 HEAP32[$10>>2] = (13424);
 $11 = ((($this)) + 84|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 88|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 92|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($this)) + 96|0);
 __THREW__ = 0;
 invoke_vi(837,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($this)) + 112|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($this)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($18))|0;
  HEAP32[$19>>2] = $21;
  return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 HEAP32[$10>>2] = (13424);
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  HEAP32[$12>>2] = 0;
  $44 = HEAP32[$13>>2]|0;
  __ZdlPv($44);
  ___resumeException($22|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 L6: while(1) {
  $26 = HEAP32[$13>>2]|0;
  $27 = (((($26) + (($i$01$i$i*20)|0)|0)) + 4|0);
  HEAP32[$27>>2] = (13440);
  $28 = (((($26) + (($i$01$i$i*20)|0)|0)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  $$pre$i$i$i$i = (((($26) + (($i$01$i$i*20)|0)|0)) + 16|0);
  if (!($30)) {
   $i$01$i$i$i$i$i = 0;
   while(1) {
    $31 = HEAP32[$$pre$i$i$i$i>>2]|0;
    $32 = (($31) + (($i$01$i$i$i$i$i*20)|0)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$33>>2]|0;
    __THREW__ = 0;
    invoke_vi($34|0,($32|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 9;
     break L6;
    }
    $37 = (($i$01$i$i$i$i$i) + 1)|0;
    $38 = HEAP32[$28>>2]|0;
    $39 = ($37>>>0)<($38>>>0);
    if ($39) {
     $i$01$i$i$i$i$i = $37;
    } else {
     break;
    }
   }
  }
  HEAP32[$28>>2] = 0;
  $40 = HEAP32[$$pre$i$i$i$i>>2]|0;
  __ZdlPv($40);
  $41 = (($i$01$i$i) + 1)|0;
  $42 = HEAP32[$12>>2]|0;
  $43 = ($41>>>0)<($42>>>0);
  if ($43) {
   $i$01$i$i = $41;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$12>>2] = 0;
  $44 = HEAP32[$13>>2]|0;
  __ZdlPv($44);
  ___resumeException($22|0);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 }
}
function __ZN12AP4_HvccAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $$$i = 0, $$0 = 0, $$01 = 0, $$pre$i$i$i$i = 0, $$pre$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$01$i$i = 0, $i$01$i$i$i$i$i = 0, $i$06 = 0, $lpad$phi$index = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($other)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN8AP4_AtomC2Ejj($this,1752589123,$1);
 HEAP32[$this>>2] = (13288);
 $2 = ((($this)) + 36|0);
 $3 = ((($other)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 HEAP8[$2>>0] = $4;
 $5 = ((($this)) + 37|0);
 $6 = ((($other)) + 37|0);
 $7 = HEAP8[$6>>0]|0;
 HEAP8[$5>>0] = $7;
 $8 = ((($this)) + 38|0);
 $9 = ((($other)) + 38|0);
 $10 = HEAP8[$9>>0]|0;
 HEAP8[$8>>0] = $10;
 $11 = ((($this)) + 39|0);
 $12 = ((($other)) + 39|0);
 $13 = HEAP8[$12>>0]|0;
 HEAP8[$11>>0] = $13;
 $14 = ((($this)) + 40|0);
 $15 = ((($other)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($this)) + 48|0);
 $18 = ((($other)) + 48|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $17;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = ((($this)) + 56|0);
 $30 = ((($other)) + 56|0);
 $31 = HEAP8[$30>>0]|0;
 HEAP8[$29>>0] = $31;
 $32 = ((($this)) + 57|0);
 $33 = ((($other)) + 57|0);
 $34 = HEAP8[$33>>0]|0;
 HEAP8[$32>>0] = $34;
 $35 = ((($this)) + 60|0);
 $36 = ((($other)) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $38 = ((($this)) + 64|0);
 $39 = ((($other)) + 64|0);
 $40 = HEAP8[$39>>0]|0;
 HEAP8[$38>>0] = $40;
 $41 = ((($this)) + 65|0);
 $42 = ((($other)) + 65|0);
 $43 = HEAP8[$42>>0]|0;
 HEAP8[$41>>0] = $43;
 $44 = ((($this)) + 66|0);
 $45 = ((($other)) + 66|0);
 $46 = HEAP8[$45>>0]|0;
 HEAP8[$44>>0] = $46;
 $47 = ((($this)) + 67|0);
 $48 = ((($other)) + 67|0);
 $49 = HEAP8[$48>>0]|0;
 HEAP8[$47>>0] = $49;
 $50 = ((($this)) + 68|0);
 $51 = ((($other)) + 68|0);
 $52 = HEAP8[$51>>0]|0;
 HEAP8[$50>>0] = $52;
 $53 = ((($this)) + 69|0);
 $54 = ((($other)) + 69|0);
 $55 = HEAP8[$54>>0]|0;
 HEAP8[$53>>0] = $55;
 $56 = ((($this)) + 70|0);
 $57 = ((($other)) + 70|0);
 $58 = HEAP8[$57>>0]|0;
 HEAP8[$56>>0] = $58;
 $59 = ((($this)) + 71|0);
 $60 = ((($other)) + 71|0);
 $61 = HEAP8[$60>>0]|0;
 HEAP8[$59>>0] = $61;
 $62 = ((($this)) + 72|0);
 $63 = ((($other)) + 72|0);
 $64 = HEAP16[$63>>1]|0;
 HEAP16[$62>>1] = $64;
 $65 = ((($this)) + 74|0);
 $66 = ((($other)) + 74|0);
 $67 = HEAP8[$66>>0]|0;
 HEAP8[$65>>0] = $67;
 $68 = ((($this)) + 75|0);
 $69 = ((($other)) + 75|0);
 $70 = HEAP8[$69>>0]|0;
 HEAP8[$68>>0] = $70;
 $71 = ((($this)) + 76|0);
 $72 = ((($other)) + 76|0);
 $73 = HEAP8[$72>>0]|0;
 HEAP8[$71>>0] = $73;
 $74 = ((($this)) + 77|0);
 $75 = ((($other)) + 77|0);
 $76 = HEAP8[$75>>0]|0;
 HEAP8[$74>>0] = $76;
 $77 = ((($this)) + 80|0);
 HEAP32[$77>>2] = (13424);
 $78 = ((($this)) + 84|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($this)) + 88|0);
 HEAP32[$79>>2] = 0;
 $80 = ((($this)) + 92|0);
 HEAP32[$80>>2] = 0;
 $81 = ((($this)) + 96|0);
 $82 = ((($other)) + 96|0);
 __THREW__ = 0;
 invoke_vii(842,($81|0),($82|0));
 $83 = __THREW__; __THREW__ = 0;
 $84 = $83&1;
 if ($84) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $$0 = $112;$$01 = $111;
 } else {
  $85 = ((($other)) + 88|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   return;
  }
  $88 = ((($other)) + 92|0);
  $i$06 = 0;
  while(1) {
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + (($i$06*20)|0)|0);
   $91 = HEAP32[$78>>2]|0;
   $92 = HEAP32[$79>>2]|0;
   $93 = (($92) + 1)|0;
   $94 = ($91>>>0)<($93>>>0);
   if ($94) {
    $95 = ($91|0)==(0);
    $96 = $91 << 1;
    $$$i = $95 ? 64 : $96;
    $97 = ($$$i>>>0)<($93>>>0);
    $new_count$0$i = $97 ? $93 : $$$i;
    __THREW__ = 0;
    $98 = (invoke_iii(853,($77|0),($new_count$0$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    }
    $101 = ($98|0)==(0);
    if ($101) {
     $$pre$i2 = HEAP32[$79>>2]|0;
     $103 = $$pre$i2;
     label = 8;
    }
   } else {
    $103 = $92;
    label = 8;
   }
   if ((label|0) == 8) {
    label = 0;
    $102 = (($103) + 1)|0;
    HEAP32[$79>>2] = $102;
    $104 = HEAP32[$80>>2]|0;
    $105 = (($104) + (($103*20)|0)|0);
    __THREW__ = 0;
    invoke_vii(854,($105|0),($90|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     break;
    }
   }
   $108 = (($i$06) + 1)|0;
   $109 = HEAP32[$85>>2]|0;
   $110 = ($108>>>0)<($109>>>0);
   if ($110) {
    $i$06 = $108;
   } else {
    label = 12;
    break;
   }
  }
  if ((label|0) == 12) {
   return;
  }
  $113 = ___cxa_find_matching_catch()|0;
  $114 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($81|0));
  $115 = __THREW__; __THREW__ = 0;
  $116 = $115&1;
  if ($116) {
   $140 = ___cxa_find_matching_catch(0|0)|0;
   $141 = tempRet0;
   $lpad$phi$index = $140;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  } else {
   $$0 = $114;$$01 = $113;
  }
 }
 HEAP32[$77>>2] = (13424);
 $117 = HEAP32[$79>>2]|0;
 $118 = ($117|0)==(0);
 if ($118) {
  HEAP32[$79>>2] = 0;
  $137 = HEAP32[$80>>2]|0;
  __ZdlPv($137);
  ___resumeException($$01|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 L24: while(1) {
  $119 = HEAP32[$80>>2]|0;
  $120 = (((($119) + (($i$01$i$i*20)|0)|0)) + 4|0);
  HEAP32[$120>>2] = (13440);
  $121 = (((($119) + (($i$01$i$i*20)|0)|0)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)==(0);
  $$pre$i$i$i$i = (((($119) + (($i$01$i$i*20)|0)|0)) + 16|0);
  if (!($123)) {
   $i$01$i$i$i$i$i = 0;
   while(1) {
    $124 = HEAP32[$$pre$i$i$i$i>>2]|0;
    $125 = (($124) + (($i$01$i$i$i$i$i*20)|0)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = HEAP32[$126>>2]|0;
    __THREW__ = 0;
    invoke_vi($127|0,($125|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     break L24;
    }
    $130 = (($i$01$i$i$i$i$i) + 1)|0;
    $131 = HEAP32[$121>>2]|0;
    $132 = ($130>>>0)<($131>>>0);
    if ($132) {
     $i$01$i$i$i$i$i = $130;
    } else {
     break;
    }
   }
  }
  HEAP32[$121>>2] = 0;
  $133 = HEAP32[$$pre$i$i$i$i>>2]|0;
  __ZdlPv($133);
  $134 = (($i$01$i$i) + 1)|0;
  $135 = HEAP32[$79>>2]|0;
  $136 = ($134>>>0)<($135>>>0);
  if ($136) {
   $i$01$i$i = $134;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  HEAP32[$79>>2] = 0;
  $137 = HEAP32[$80>>2]|0;
  __ZdlPv($137);
  ___resumeException($$01|0);
  // unreachable;
 }
 $138 = ___cxa_find_matching_catch(0|0)|0;
 $139 = tempRet0;
 $lpad$phi$index = $138;
 ___clang_call_terminate($lpad$phi$index);
 // unreachable;
}
function __ZN12AP4_HvccAtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $$0 = 0, $$01 = 0, $$masked = 0, $$pre = 0, $$pre$i$i$i$i = 0, $$pre$i7 = 0, $$pre$pre = 0, $$pre3$i = 0, $$pre6$i = 0, $$sum = 0, $$sum14 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cursor$040 = 0, $cursor$133 = 0, $cursor$2 = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i$i$i$i$i = 0, $i$01$i5 = 0, $i$038 = 0, $i1$02$i = 0, $j$034 = 0, $lpad$phi$index = 0, $lpad$phi20$index = 0, $lpad$phi20$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1752589123,$size);
 HEAP32[$this>>2] = (13288);
 $0 = ((($this)) + 80|0);
 HEAP32[$0>>2] = (13424);
 $1 = ((($this)) + 84|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 88|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 92|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 96|0);
 __THREW__ = 0;
 invoke_vi(837,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $174 = ___cxa_find_matching_catch()|0;
  $175 = tempRet0;
  $$0 = $174;$$01 = $175;
 } else {
  $7 = (($size) + -8)|0;
  __THREW__ = 0;
  (invoke_iiii(855,($4|0),($payload|0),($7|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  do {
   if ($9) {
    label = 12;
   } else {
    $10 = HEAP8[$payload>>0]|0;
    $11 = ((($this)) + 36|0);
    HEAP8[$11>>0] = $10;
    $12 = ((($payload)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13&255) >>> 6;
    $15 = ((($this)) + 37|0);
    HEAP8[$15>>0] = $14;
    $16 = HEAP8[$12>>0]|0;
    $17 = $16&255;
    $18 = $17 >>> 5;
    $19 = $18 & 1;
    $20 = $19&255;
    $21 = ((($this)) + 38|0);
    HEAP8[$21>>0] = $20;
    $22 = HEAP8[$12>>0]|0;
    $23 = $22&255;
    $24 = $23 & 31;
    $25 = $24&255;
    $26 = ((($this)) + 39|0);
    HEAP8[$26>>0] = $25;
    $27 = ((($payload)) + 2|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $29 << 24;
    $31 = ((($payload)) + 3|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 << 16;
    $35 = $34 | $30;
    $36 = ((($payload)) + 4|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = $38 << 8;
    $40 = $35 | $39;
    $41 = ((($payload)) + 5|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $40 | $43;
    $45 = ((($this)) + 40|0);
    HEAP32[$45>>2] = $44;
    $46 = ((($payload)) + 6|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $48 << 24;
    $50 = ((($payload)) + 7|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = $52 << 16;
    $54 = $53 | $49;
    $55 = ((($payload)) + 8|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 << 8;
    $59 = $54 | $58;
    $60 = ((($payload)) + 9|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $59 | $62;
    $64 = (_bitshift64Shl(($63|0),0,16)|0);
    $65 = tempRet0;
    $66 = ((($payload)) + 10|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 8;
    $70 = ((($payload)) + 11|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $69 | $72;
    $74 = $64 | $73;
    $75 = ((($this)) + 48|0);
    $76 = $75;
    $77 = $76;
    HEAP32[$77>>2] = $74;
    $78 = (($76) + 4)|0;
    $79 = $78;
    HEAP32[$79>>2] = $65;
    $80 = ((($payload)) + 12|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ((($this)) + 56|0);
    HEAP8[$82>>0] = $81;
    $83 = ((($payload)) + 13|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ($84&255) >>> 4;
    $86 = ((($this)) + 57|0);
    HEAP8[$86>>0] = $85;
    $87 = HEAP8[$83>>0]|0;
    $88 = $87&255;
    $89 = $88 << 8;
    $90 = ((($payload)) + 14|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $$masked = $89 & 3840;
    $93 = $$masked | $92;
    $94 = ((($this)) + 60|0);
    HEAP32[$94>>2] = $93;
    $95 = ((($payload)) + 15|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96&255) >>> 2;
    $98 = ((($this)) + 64|0);
    HEAP8[$98>>0] = $97;
    $99 = HEAP8[$95>>0]|0;
    $100 = $99&255;
    $101 = $100 & 3;
    $102 = $101&255;
    $103 = ((($this)) + 65|0);
    HEAP8[$103>>0] = $102;
    $104 = ((($payload)) + 16|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = ($105&255) >>> 2;
    $107 = ((($this)) + 66|0);
    HEAP8[$107>>0] = $106;
    $108 = HEAP8[$104>>0]|0;
    $109 = $108&255;
    $110 = $109 & 3;
    $111 = $110&255;
    $112 = ((($this)) + 67|0);
    HEAP8[$112>>0] = $111;
    $113 = ((($payload)) + 17|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ($114&255) >>> 3;
    $116 = ((($this)) + 68|0);
    HEAP8[$116>>0] = $115;
    $117 = HEAP8[$113>>0]|0;
    $118 = $117&255;
    $119 = $118 & 7;
    $120 = $119 | 8;
    $121 = $120&255;
    $122 = ((($this)) + 69|0);
    HEAP8[$122>>0] = $121;
    $123 = ((($payload)) + 18|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = ($124&255) >>> 3;
    $126 = ((($this)) + 70|0);
    HEAP8[$126>>0] = $125;
    $127 = HEAP8[$123>>0]|0;
    $128 = $127&255;
    $129 = $128 & 7;
    $130 = $129 | 8;
    $131 = $130&255;
    $132 = ((($this)) + 71|0);
    HEAP8[$132>>0] = $131;
    $133 = ((($payload)) + 19|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134&255;
    $136 = $135 << 8;
    $137 = ((($payload)) + 20|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $140 = $136 | $139;
    $141 = $140&65535;
    $142 = ((($this)) + 72|0);
    HEAP16[$142>>1] = $141;
    $143 = ((($payload)) + 21|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = ($144&255) >>> 6;
    $146 = ((($this)) + 74|0);
    HEAP8[$146>>0] = $145;
    $147 = HEAP8[$143>>0]|0;
    $148 = $147&255;
    $149 = $148 >>> 3;
    $150 = $149 & 7;
    $151 = $150&255;
    $152 = ((($this)) + 75|0);
    HEAP8[$152>>0] = $151;
    $153 = HEAP8[$143>>0]|0;
    $154 = $153&255;
    $155 = $154 >>> 2;
    $156 = $155 & 1;
    $157 = $156&255;
    $158 = ((($this)) + 76|0);
    HEAP8[$158>>0] = $157;
    $159 = HEAP8[$143>>0]|0;
    $160 = $159&255;
    $161 = $160 & 3;
    $162 = (($161) + 1)|0;
    $163 = $162&255;
    $164 = ((($this)) + 77|0);
    HEAP8[$164>>0] = $163;
    $165 = ((($payload)) + 22|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    __THREW__ = 0;
    (invoke_iii(856,($0|0),($167|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 12;
    } else {
     $170 = ($166<<24>>24)==(0);
     if ($170) {
      return;
     } else {
      $cursor$040 = 23;$i$038 = 0;
     }
     L8: while(1) {
      $171 = HEAP32[$3>>2]|0;
      $172 = (($cursor$040) + 1)|0;
      $173 = ($172>>>0)>($7>>>0);
      if ($173) {
       label = 44;
       break;
      }
      $190 = (($payload) + ($cursor$040)|0);
      $191 = HEAP8[$190>>0]|0;
      $192 = ($191&255) >>> 7;
      $193 = (($171) + (($i$038*20)|0)|0);
      HEAP8[$193>>0] = $192;
      $194 = HEAP8[$190>>0]|0;
      $195 = $194&255;
      $196 = $195 >>> 6;
      $197 = $196 & 1;
      $198 = $197&255;
      $199 = (((($171) + (($i$038*20)|0)|0)) + 1|0);
      HEAP8[$199>>0] = $198;
      $200 = HEAP8[$190>>0]|0;
      $201 = $200&255;
      $202 = $201 & 63;
      $203 = $202&255;
      $204 = (((($171) + (($i$038*20)|0)|0)) + 2|0);
      HEAP8[$204>>0] = $203;
      $205 = (($cursor$040) + 3)|0;
      $206 = ($205>>>0)>($7>>>0);
      if ($206) {
       label = 44;
       break;
      }
      $207 = (($payload) + ($172)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $208&255;
      $210 = $209 << 8;
      $$sum = (($cursor$040) + 2)|0;
      $211 = (($payload) + ($$sum)|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      $214 = $210 | $213;
      $215 = (((($171) + (($i$038*20)|0)|0)) + 12|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = ($216|0)==($214|0);
      do {
       if (!($217)) {
        $218 = ($216>>>0)>($214>>>0);
        if ($218) {
         $219 = (((($171) + (($i$038*20)|0)|0)) + 16|0);
         $i$01$i = $214;
         while(1) {
          $220 = HEAP32[$219>>2]|0;
          $221 = (($220) + (($i$01$i*20)|0)|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = HEAP32[$222>>2]|0;
          __THREW__ = 0;
          invoke_vi($223|0,($221|0));
          $224 = __THREW__; __THREW__ = 0;
          $225 = $224&1;
          if ($225) {
           label = 8;
           break L8;
          }
          $226 = (($i$01$i) + 1)|0;
          $227 = HEAP32[$215>>2]|0;
          $228 = ($226>>>0)<($227>>>0);
          if ($228) {
           $i$01$i = $226;
          } else {
           break;
          }
         }
         HEAP32[$215>>2] = $214;
         break;
        }
        $229 = (((($171) + (($i$038*20)|0)|0)) + 8|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ($230>>>0)<($214>>>0);
        if ($231) {
         $232 = ($214*20)|0;
         __THREW__ = 0;
         $233 = (invoke_ii(752,($232|0))|0);
         $234 = __THREW__; __THREW__ = 0;
         $235 = $234&1;
         if ($235) {
          label = 11;
          break L8;
         }
         $236 = ($233|0)==(0|0);
         if ($236) {
          break;
         }
         $237 = HEAP32[$215>>2]|0;
         $238 = ($237|0)==(0);
         $$pre6$i = (((($171) + (($i$038*20)|0)|0)) + 16|0);
         if ($238) {
          $$pre = 0;
         } else {
          $239 = HEAP32[$$pre6$i>>2]|0;
          $240 = ($239|0)==(0|0);
          if ($240) {
           $$pre = $237;
          } else {
           $243 = $239;$i$01$i5 = 0;
           while(1) {
            $241 = (($233) + (($i$01$i5*20)|0)|0);
            $242 = (($243) + (($i$01$i5*20)|0)|0);
            __THREW__ = 0;
            invoke_vii(842,($241|0),($242|0));
            $244 = __THREW__; __THREW__ = 0;
            $245 = $244&1;
            if ($245) {
             label = 10;
             break L8;
            }
            $246 = HEAP32[$$pre6$i>>2]|0;
            $247 = (($246) + (($i$01$i5*20)|0)|0);
            $248 = HEAP32[$247>>2]|0;
            $249 = HEAP32[$248>>2]|0;
            __THREW__ = 0;
            invoke_vi($249|0,($247|0));
            $250 = __THREW__; __THREW__ = 0;
            $251 = $250&1;
            if ($251) {
             label = 10;
             break L8;
            }
            $252 = (($i$01$i5) + 1)|0;
            $253 = HEAP32[$215>>2]|0;
            $254 = ($252>>>0)<($253>>>0);
            if (!($254)) {
             break;
            }
            $$pre$i7 = HEAP32[$$pre6$i>>2]|0;
            $243 = $$pre$i7;$i$01$i5 = $252;
           }
           $$pre3$i = HEAP32[$$pre6$i>>2]|0;
           __ZdlPv($$pre3$i);
           $$pre$pre = HEAP32[$215>>2]|0;
           $$pre = $$pre$pre;
          }
         }
         HEAP32[$$pre6$i>>2] = $233;
         HEAP32[$229>>2] = $214;
         $255 = $$pre;
        } else {
         $255 = $216;
        }
        $256 = ($255>>>0)<($214>>>0);
        if ($256) {
         $257 = (((($171) + (($i$038*20)|0)|0)) + 16|0);
         $i1$02$i = $255;
         while(1) {
          $258 = HEAP32[$257>>2]|0;
          $259 = (($258) + (($i1$02$i*20)|0)|0);
          __THREW__ = 0;
          invoke_vi(837,($259|0));
          $260 = __THREW__; __THREW__ = 0;
          $261 = $260&1;
          if ($261) {
           label = 9;
           break L8;
          }
          $262 = (($i1$02$i) + 1)|0;
          $exitcond$i = ($262|0)==($214|0);
          if ($exitcond$i) {
           break;
          } else {
           $i1$02$i = $262;
          }
         }
        }
        HEAP32[$215>>2] = $214;
       }
      } while(0);
      $263 = ($214|0)==(0);
      L42: do {
       if ($263) {
        $cursor$2 = $205;
       } else {
        $264 = (((($171) + (($i$038*20)|0)|0)) + 16|0);
        $cursor$133 = $205;$j$034 = 0;
        while(1) {
         $265 = (($cursor$133) + 2)|0;
         $266 = ($265>>>0)>($7>>>0);
         if ($266) {
          $cursor$2 = $cursor$133;
          break L42;
         }
         $267 = (($payload) + ($cursor$133)|0);
         $268 = HEAP8[$267>>0]|0;
         $269 = $268&255;
         $270 = $269 << 8;
         $$sum14 = (($cursor$133) + 1)|0;
         $271 = (($payload) + ($$sum14)|0);
         $272 = HEAP8[$271>>0]|0;
         $273 = $272&255;
         $274 = $270 | $273;
         $275 = (($274) + ($265))|0;
         $276 = ($275>>>0)>($7>>>0);
         if ($276) {
          $cursor$2 = $265;
          break L42;
         }
         $277 = HEAP32[$264>>2]|0;
         $278 = (($277) + (($j$034*20)|0)|0);
         $279 = (($payload) + ($265)|0);
         __THREW__ = 0;
         (invoke_iiii(855,($278|0),($279|0),($274|0))|0);
         $280 = __THREW__; __THREW__ = 0;
         $281 = $280&1;
         if ($281) {
          label = 7;
          break L8;
         }
         $282 = (($j$034) + 1)|0;
         $283 = ($282>>>0)<($214>>>0);
         if ($283) {
          $cursor$133 = $275;$j$034 = $282;
         } else {
          $cursor$2 = $275;
          break;
         }
        }
       }
      } while(0);
      $284 = (($i$038) + 1)|0;
      $285 = ($284>>>0)<($167>>>0);
      if ($285) {
       $cursor$040 = $cursor$2;$i$038 = $284;
      } else {
       label = 44;
       break;
      }
     }
     if ((label|0) == 7) {
      $176 = ___cxa_find_matching_catch()|0;
      $177 = tempRet0;
      $lpad$phi20$index = $176;$lpad$phi20$index6 = $177;
      break;
     }
     else if ((label|0) == 8) {
      $178 = ___cxa_find_matching_catch()|0;
      $179 = tempRet0;
      $lpad$phi20$index = $178;$lpad$phi20$index6 = $179;
      break;
     }
     else if ((label|0) == 9) {
      $180 = ___cxa_find_matching_catch()|0;
      $181 = tempRet0;
      $lpad$phi20$index = $180;$lpad$phi20$index6 = $181;
      break;
     }
     else if ((label|0) == 10) {
      $182 = ___cxa_find_matching_catch()|0;
      $183 = tempRet0;
      $lpad$phi20$index = $182;$lpad$phi20$index6 = $183;
      break;
     }
     else if ((label|0) == 11) {
      $184 = ___cxa_find_matching_catch()|0;
      $185 = tempRet0;
      $lpad$phi20$index = $184;$lpad$phi20$index6 = $185;
      break;
     }
     else if ((label|0) == 44) {
      return;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   $186 = ___cxa_find_matching_catch()|0;
   $187 = tempRet0;
   $lpad$phi20$index = $186;$lpad$phi20$index6 = $187;
  }
  __THREW__ = 0;
  invoke_vi(279,($4|0));
  $188 = __THREW__; __THREW__ = 0;
  $189 = $188&1;
  if ($189) {
   $309 = ___cxa_find_matching_catch(0|0)|0;
   $310 = tempRet0;
   $lpad$phi$index = $309;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  } else {
   $$0 = $lpad$phi20$index;$$01 = $lpad$phi20$index6;
  }
 }
 HEAP32[$0>>2] = (13424);
 $286 = HEAP32[$2>>2]|0;
 $287 = ($286|0)==(0);
 if ($287) {
  HEAP32[$2>>2] = 0;
  $306 = HEAP32[$3>>2]|0;
  __ZdlPv($306);
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 L68: while(1) {
  $288 = HEAP32[$3>>2]|0;
  $289 = (((($288) + (($i$01$i$i*20)|0)|0)) + 4|0);
  HEAP32[$289>>2] = (13440);
  $290 = (((($288) + (($i$01$i$i*20)|0)|0)) + 12|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = ($291|0)==(0);
  $$pre$i$i$i$i = (((($288) + (($i$01$i$i*20)|0)|0)) + 16|0);
  if (!($292)) {
   $i$01$i$i$i$i$i = 0;
   while(1) {
    $293 = HEAP32[$$pre$i$i$i$i>>2]|0;
    $294 = (($293) + (($i$01$i$i$i$i$i*20)|0)|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = HEAP32[$295>>2]|0;
    __THREW__ = 0;
    invoke_vi($296|0,($294|0));
    $297 = __THREW__; __THREW__ = 0;
    $298 = $297&1;
    if ($298) {
     break L68;
    }
    $299 = (($i$01$i$i$i$i$i) + 1)|0;
    $300 = HEAP32[$290>>2]|0;
    $301 = ($299>>>0)<($300>>>0);
    if ($301) {
     $i$01$i$i$i$i$i = $299;
    } else {
     break;
    }
   }
  }
  HEAP32[$290>>2] = 0;
  $302 = HEAP32[$$pre$i$i$i$i>>2]|0;
  __ZdlPv($302);
  $303 = (($i$01$i$i) + 1)|0;
  $304 = HEAP32[$2>>2]|0;
  $305 = ($303>>>0)<($304>>>0);
  if ($305) {
   $i$01$i$i = $303;
  } else {
   label = 50;
   break;
  }
 }
 if ((label|0) == 50) {
  HEAP32[$2>>2] = 0;
  $306 = HEAP32[$3>>2]|0;
  __ZdlPv($306);
  ___resumeException($$0|0);
  // unreachable;
 }
 $307 = ___cxa_find_matching_catch(0|0)|0;
 $308 = tempRet0;
 $lpad$phi$index = $307;
 ___clang_call_terminate($lpad$phi$index);
 // unreachable;
}
function __ZN12AP4_HvccAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 return ($4|0);
}
function __ZN12AP4_HvccAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$0$i$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,19000,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 37|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,13448,$11,0,0);
 $12 = HEAP8[$9>>0]|0;
 $13 = ((($this)) + 39|0);
 $14 = ($12<<24>>24)==(0);
 $15 = HEAP8[$13>>0]|0;
 do {
  if ($14) {
   $16 = $15&255;
   if ((($16|0) == 3)) {
    $$0$i$ph = 13384;
   } else if ((($16|0) == 4)) {
    $$0$i$ph = 13376;
   } else if ((($16|0) == 1)) {
    $$0$i$ph = 18976;
   } else if ((($16|0) == 2)) {
    $$0$i$ph = 13408;
   } else {
    label = 7;
    break;
   }
   $17 = HEAP32[$inspector>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiii[$19 & 1023]($inspector,19024,$$0$i$ph,0);
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $20 = HEAP32[$inspector>>2]|0;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $15&255;
  FUNCTION_TABLE_viiiii[$22 & 1023]($inspector,19024,$23,0,0);
 }
 $24 = HEAP32[$inspector>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($this)) + 38|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 FUNCTION_TABLE_viiiii[$26 & 1023]($inspector,13464,$29,0,0);
 $30 = HEAP32[$inspector>>2]|0;
 $31 = ((($30)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($this)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_viiiii[$32 & 1023]($inspector,19032,$34,0,1);
 $35 = HEAP32[$inspector>>2]|0;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($this)) + 48|0);
 $39 = $38;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 FUNCTION_TABLE_viiiii[$37 & 1023]($inspector,13472,$41,$44,1);
 $45 = HEAP32[$inspector>>2]|0;
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($this)) + 56|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 FUNCTION_TABLE_viiiii[$47 & 1023]($inspector,19056,$50,0,0);
 $51 = HEAP32[$inspector>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($this)) + 60|0);
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_viiiii[$53 & 1023]($inspector,13488,$55,0,0);
 $56 = HEAP32[$inspector>>2]|0;
 $57 = ((($56)) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($this)) + 65|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 FUNCTION_TABLE_viiiii[$58 & 1023]($inspector,13520,$61,0,0);
 $62 = HEAP32[$inspector>>2]|0;
 $63 = ((($62)) + 24|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($this)) + 67|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 FUNCTION_TABLE_viiiii[$64 & 1023]($inspector,13544,$67,0,0);
 $68 = HEAP32[$inspector>>2]|0;
 $69 = ((($68)) + 24|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($this)) + 71|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 FUNCTION_TABLE_viiiii[$70 & 1023]($inspector,13560,$73,0,0);
 $74 = HEAP32[$inspector>>2]|0;
 $75 = ((($74)) + 24|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this)) + 69|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 FUNCTION_TABLE_viiiii[$76 & 1023]($inspector,13576,$79,0,0);
 $80 = HEAP32[$inspector>>2]|0;
 $81 = ((($80)) + 24|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($this)) + 72|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 FUNCTION_TABLE_viiiii[$82 & 1023]($inspector,13592,$85,0,0);
 $86 = HEAP32[$inspector>>2]|0;
 $87 = ((($86)) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($this)) + 74|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 FUNCTION_TABLE_viiiii[$88 & 1023]($inspector,13616,$91,0,0);
 $92 = HEAP32[$inspector>>2]|0;
 $93 = ((($92)) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($this)) + 75|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 FUNCTION_TABLE_viiiii[$94 & 1023]($inspector,13640,$97,0,0);
 $98 = HEAP32[$inspector>>2]|0;
 $99 = ((($98)) + 24|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($this)) + 76|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 FUNCTION_TABLE_viiiii[$100 & 1023]($inspector,13672,$103,0,0);
 $104 = HEAP32[$inspector>>2]|0;
 $105 = ((($104)) + 24|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($this)) + 77|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 FUNCTION_TABLE_viiiii[$106 & 1023]($inspector,19064,$109,0,0);
 return 0;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $$0 = 0, $$pre = 0, $$pre$i$i = 0, $$pre2 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$01$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($count>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($count*20)|0;
 $4 = (__Znwj($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($this)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 $$pre5 = ((($this)) + 12|0);
 if (!($8)) {
  $9 = HEAP32[$$pre5>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $13 = $9;$i$01 = 0;
   while(1) {
    $11 = (($4) + (($i$01*20)|0)|0);
    $12 = (($13) + (($i$01*20)|0)|0);
    __ZN12AP4_HvccAtom8SequenceC2ERKS0_($11,$12);
    $14 = HEAP32[$$pre5>>2]|0;
    $15 = (((($14) + (($i$01*20)|0)|0)) + 4|0);
    HEAP32[$15>>2] = (13440);
    $16 = (((($14) + (($i$01*20)|0)|0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0);
    $$pre$i$i = (((($14) + (($i$01*20)|0)|0)) + 16|0);
    if (!($18)) {
     $i$01$i$i$i = 0;
     while(1) {
      $19 = HEAP32[$$pre$i$i>>2]|0;
      $20 = (($19) + (($i$01$i$i$i*20)|0)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      FUNCTION_TABLE_vi[$22 & 1023]($20);
      $23 = (($i$01$i$i$i) + 1)|0;
      $24 = HEAP32[$16>>2]|0;
      $25 = ($23>>>0)<($24>>>0);
      if ($25) {
       $i$01$i$i$i = $23;
      } else {
       break;
      }
     }
    }
    HEAP32[$16>>2] = 0;
    $26 = HEAP32[$$pre$i$i>>2]|0;
    __ZdlPv($26);
    $27 = (($i$01) + 1)|0;
    $28 = HEAP32[$6>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     break;
    }
    $$pre = HEAP32[$$pre5>>2]|0;
    $13 = $$pre;$i$01 = $27;
   }
   $$pre2 = HEAP32[$$pre5>>2]|0;
   __ZdlPv($$pre2);
  }
 }
 HEAP32[$$pre5>>2] = $4;
 HEAP32[$0>>2] = $count;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_HvccAtom8SequenceC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$lcssa$i = 0, $$pr = 0, $$pre$i = 0, $$pre3$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP8[$this>>0]=HEAP8[$0>>0]|0;HEAP8[$this+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$this+2>>0]=HEAP8[$0+2>>0]|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = (13440);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$lcssa$i = 0;
  HEAP32[$3>>2] = $$lcssa$i;
  return;
 }
 $8 = ($6*20)|0;
 $9 = (__Znwj($8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = HEAP32[$4>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    __ZN14AP4_DataBufferC2ERKS_($9,$13);
    $15 = HEAP32[$4>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$17 & 1023]($15);
    $18 = HEAP32[$3>>2]|0;
    $19 = ($18>>>0)>(1);
    if ($19) {
     $21 = 1;
     while(1) {
      $$pre$i = HEAP32[$4>>2]|0;
      $20 = (($9) + (($21*20)|0)|0);
      $22 = (($$pre$i) + (($21*20)|0)|0);
      __ZN14AP4_DataBufferC2ERKS_($20,$22);
      $23 = HEAP32[$4>>2]|0;
      $24 = (($23) + (($21*20)|0)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = HEAP32[$25>>2]|0;
      FUNCTION_TABLE_vi[$26 & 1023]($24);
      $27 = (($21) + 1)|0;
      $28 = HEAP32[$3>>2]|0;
      $29 = ($27>>>0)<($28>>>0);
      if ($29) {
       $21 = $27;
      } else {
       break;
      }
     }
    }
    $$pre3$i = HEAP32[$4>>2]|0;
    __ZdlPv($$pre3$i);
   }
  }
  HEAP32[$4>>2] = $9;
  HEAP32[$2>>2] = $6;
 }
 $$pr = HEAP32[$5>>2]|0;
 $30 = ($$pr|0)==(0);
 if ($30) {
  $$lcssa$i = 0;
  HEAP32[$3>>2] = $$lcssa$i;
  return;
 }
 $31 = ((($0)) + 16|0);
 $i$01$i = 0;
 while(1) {
  $32 = HEAP32[$4>>2]|0;
  $33 = (($32) + (($i$01$i*20)|0)|0);
  $34 = HEAP32[$31>>2]|0;
  $35 = (($34) + (($i$01$i*20)|0)|0);
  __ZN14AP4_DataBufferC2ERKS_($33,$35);
  $36 = (($i$01$i) + 1)|0;
  $37 = HEAP32[$5>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $i$01$i = $36;
  } else {
   $$lcssa$i = $37;
   break;
  }
 }
 HEAP32[$3>>2] = $$lcssa$i;
 return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $$0 = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $i$01$i$i$i = 0, $i1$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($item_count|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($1>>>0)>($item_count>>>0);
 if ($3) {
  $4 = ((($this)) + 12|0);
  $i$01 = $item_count;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($5) + (($i$01*20)|0)|0)) + 4|0);
   HEAP32[$6>>2] = (13440);
   $7 = (((($5) + (($i$01*20)|0)|0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   $$pre$i$i = (((($5) + (($i$01*20)|0)|0)) + 16|0);
   if (!($9)) {
    $i$01$i$i$i = 0;
    while(1) {
     $10 = HEAP32[$$pre$i$i>>2]|0;
     $11 = (($10) + (($i$01$i$i$i*20)|0)|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = HEAP32[$12>>2]|0;
     FUNCTION_TABLE_vi[$13 & 1023]($11);
     $14 = (($i$01$i$i$i) + 1)|0;
     $15 = HEAP32[$7>>2]|0;
     $16 = ($14>>>0)<($15>>>0);
     if ($16) {
      $i$01$i$i$i = $14;
     } else {
      break;
     }
    }
   }
   HEAP32[$7>>2] = 0;
   $17 = HEAP32[$$pre$i$i>>2]|0;
   __ZdlPv($17);
   $18 = (($i$01) + 1)|0;
   $19 = HEAP32[$0>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $i$01 = $18;
   } else {
    break;
   }
  }
  HEAP32[$0>>2] = $item_count;
  $$0 = 0;
  return ($$0|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj($this,$item_count)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  return ($$0|0);
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = ($23>>>0)<($item_count>>>0);
 if ($24) {
  $25 = ((($this)) + 12|0);
  $i1$02 = $23;
  while(1) {
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + (($i1$02*20)|0)|0);
   ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = (13440);
   $29 = ((($27)) + 8|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($27)) + 12|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($27)) + 16|0);
   HEAP32[$31>>2] = 0;
   $32 = (($i1$02) + 1)|0;
   $exitcond = ($32|0)==($item_count|0);
   if ($exitcond) {
    break;
   } else {
    $i1$02 = $32;
   }
  }
 }
 HEAP32[$0>>2] = $item_count;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_HvccAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$pre$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i4 = 0, $$pre$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01$i$i = 0, $i$01$i$i$i$i$i = 0, $i$01$i$i$i$i$i6 = 0, $i$01$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13288);
 $0 = ((($this)) + 96|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  $28 = ((($this)) + 80|0);
  HEAP32[$28>>2] = (13424);
  $29 = ((($this)) + 88|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  $$pre$i2 = ((($this)) + 92|0);
  L3: do {
   if (!($31)) {
    $i$01$i$i3 = 0;
    L4: while(1) {
     $32 = HEAP32[$$pre$i2>>2]|0;
     $33 = (((($32) + (($i$01$i$i3*20)|0)|0)) + 4|0);
     HEAP32[$33>>2] = (13440);
     $34 = (((($32) + (($i$01$i$i3*20)|0)|0)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==(0);
     $$pre$i$i$i$i4 = (((($32) + (($i$01$i$i3*20)|0)|0)) + 16|0);
     if (!($36)) {
      $i$01$i$i$i$i$i6 = 0;
      while(1) {
       $37 = HEAP32[$$pre$i$i$i$i4>>2]|0;
       $38 = (($37) + (($i$01$i$i$i$i$i6*20)|0)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       __THREW__ = 0;
       invoke_vi($40|0,($38|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break L4;
       }
       $43 = (($i$01$i$i$i$i$i6) + 1)|0;
       $44 = HEAP32[$34>>2]|0;
       $45 = ($43>>>0)<($44>>>0);
       if ($45) {
        $i$01$i$i$i$i$i6 = $43;
       } else {
        break;
       }
      }
     }
     HEAP32[$34>>2] = 0;
     $46 = HEAP32[$$pre$i$i$i$i4>>2]|0;
     __ZdlPv($46);
     $47 = (($i$01$i$i3) + 1)|0;
     $48 = HEAP32[$29>>2]|0;
     $49 = ($47>>>0)<($48>>>0);
     if ($49) {
      $i$01$i$i3 = $47;
     } else {
      break L3;
     }
    }
    $53 = ___cxa_find_matching_catch(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
  } while(0);
  HEAP32[$29>>2] = 0;
  $50 = HEAP32[$$pre$i2>>2]|0;
  __ZdlPv($50);
  $$0 = $27;$$01 = $26;
  ___resumeException($$01|0);
  // unreachable;
 }
 $3 = ((($this)) + 80|0);
 HEAP32[$3>>2] = (13424);
 $4 = ((($this)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$pre$i = ((($this)) + 92|0);
 if ($6) {
  HEAP32[$4>>2] = 0;
  $25 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($25);
  return;
 } else {
  $i$01$i$i = 0;
 }
 L17: while(1) {
  $7 = HEAP32[$$pre$i>>2]|0;
  $8 = (((($7) + (($i$01$i$i*20)|0)|0)) + 4|0);
  HEAP32[$8>>2] = (13440);
  $9 = (((($7) + (($i$01$i$i*20)|0)|0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  $$pre$i$i$i$i = (((($7) + (($i$01$i$i*20)|0)|0)) + 16|0);
  if (!($11)) {
   $i$01$i$i$i$i$i = 0;
   while(1) {
    $12 = HEAP32[$$pre$i$i$i$i>>2]|0;
    $13 = (($12) + (($i$01$i$i$i$i$i*20)|0)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    invoke_vi($15|0,($13|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break L17;
    }
    $18 = (($i$01$i$i$i$i$i) + 1)|0;
    $19 = HEAP32[$9>>2]|0;
    $20 = ($18>>>0)<($19>>>0);
    if ($20) {
     $i$01$i$i$i$i$i = $18;
    } else {
     break;
    }
   }
  }
  HEAP32[$9>>2] = 0;
  $21 = HEAP32[$$pre$i$i$i$i>>2]|0;
  __ZdlPv($21);
  $22 = (($i$01$i$i) + 1)|0;
  $23 = HEAP32[$4>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $i$01$i$i = $22;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$4>>2] = 0;
  $25 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($25);
  return;
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $$0 = $52;$$01 = $51;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN12AP4_HvccAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(359,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN9AP4_ArrayI14AP4_DataBufferED2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13440);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $10 = HEAP32[$$pre>>2]|0;
  __ZdlPv($10);
  return;
 } else {
  $i$01$i = 0;
 }
 while(1) {
  $3 = HEAP32[$$pre>>2]|0;
  $4 = (($3) + (($i$01$i*20)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($4);
  $7 = (($i$01$i) + 1)|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $i$01$i = $7;
  } else {
   break;
  }
 }
 HEAP32[$0>>2] = 0;
 $10 = HEAP32[$$pre>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZN9AP4_ArrayI14AP4_DataBufferED0Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13440);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre$i = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $12 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($12);
  __ZdlPv($this);
  return;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $3 = HEAP32[$$pre$i>>2]|0;
  $4 = (($3) + (($i$01$i$i*20)|0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vi($6|0,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   label = 5;
   break;
  }
  $9 = (($i$01$i$i) + 1)|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if ($11) {
   $i$01$i$i = $9;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$0>>2] = 0;
  $12 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($12);
  __ZdlPv($this);
  return;
 }
 else if ((label|0) == 5) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __ZdlPv($this);
  ___resumeException($13|0);
  // unreachable;
 }
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01$i = 0, $i$01$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13424);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $19 = HEAP32[$$pre>>2]|0;
  __ZdlPv($19);
  return;
 } else {
  $i$01$i = 0;
 }
 while(1) {
  $3 = HEAP32[$$pre>>2]|0;
  $4 = (((($3) + (($i$01$i*20)|0)|0)) + 4|0);
  HEAP32[$4>>2] = (13440);
  $5 = (((($3) + (($i$01$i*20)|0)|0)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  $$pre$i$i$i = (((($3) + (($i$01$i*20)|0)|0)) + 16|0);
  if (!($7)) {
   $i$01$i$i$i$i = 0;
   while(1) {
    $8 = HEAP32[$$pre$i$i$i>>2]|0;
    $9 = (($8) + (($i$01$i$i$i$i*20)|0)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    FUNCTION_TABLE_vi[$11 & 1023]($9);
    $12 = (($i$01$i$i$i$i) + 1)|0;
    $13 = HEAP32[$5>>2]|0;
    $14 = ($12>>>0)<($13>>>0);
    if ($14) {
     $i$01$i$i$i$i = $12;
    } else {
     break;
    }
   }
  }
  HEAP32[$5>>2] = 0;
  $15 = HEAP32[$$pre$i$i$i>>2]|0;
  __ZdlPv($15);
  $16 = (($i$01$i) + 1)|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  if ($18) {
   $i$01$i = $16;
  } else {
   break;
  }
 }
 HEAP32[$0>>2] = 0;
 $19 = HEAP32[$$pre>>2]|0;
 __ZdlPv($19);
 return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED0Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, $i$01$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13424);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre$i = ((($this)) + 12|0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  $21 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($21);
  __ZdlPv($this);
  return;
 } else {
  $i$01$i$i = 0;
 }
 L3: while(1) {
  $3 = HEAP32[$$pre$i>>2]|0;
  $4 = (((($3) + (($i$01$i$i*20)|0)|0)) + 4|0);
  HEAP32[$4>>2] = (13440);
  $5 = (((($3) + (($i$01$i$i*20)|0)|0)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  $$pre$i$i$i$i = (((($3) + (($i$01$i$i*20)|0)|0)) + 16|0);
  if (!($7)) {
   $i$01$i$i$i$i$i = 0;
   while(1) {
    $8 = HEAP32[$$pre$i$i$i$i>>2]|0;
    $9 = (($8) + (($i$01$i$i$i$i$i*20)|0)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    invoke_vi($11|0,($9|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 7;
     break L3;
    }
    $14 = (($i$01$i$i$i$i$i) + 1)|0;
    $15 = HEAP32[$5>>2]|0;
    $16 = ($14>>>0)<($15>>>0);
    if ($16) {
     $i$01$i$i$i$i$i = $14;
    } else {
     break;
    }
   }
  }
  HEAP32[$5>>2] = 0;
  $17 = HEAP32[$$pre$i$i$i$i>>2]|0;
  __ZdlPv($17);
  $18 = (($i$01$i$i) + 1)|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $i$01$i$i = $18;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  $21 = HEAP32[$$pre$i>>2]|0;
  __ZdlPv($21);
  __ZdlPv($this);
  return;
 }
 else if ((label|0) == 7) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZdlPv($this);
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN16AP4_TrefTypeAtomC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$$i = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data_size$01 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, $track_id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $track_id = sp;
 __ZN8AP4_AtomC2Ejj($this,$type,$size);
 HEAP32[$this>>2] = (13792);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = (($size) + -8)|0;
 $5 = ($4>>>0)>(3);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $data_size$01 = $4;
 while(1) {
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($track_id|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 16;
   break;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + 1)|0;
  $11 = ($8>>>0)<($10>>>0);
  if ($11) {
   $12 = ($8|0)==(0);
   $13 = $8 << 1;
   $$$i = $12 ? 64 : $13;
   $14 = ($$$i>>>0)<($10>>>0);
   $new_count$0$i = $14 ? $10 : $$$i;
   $15 = ($8>>>0)<($new_count$0$i>>>0);
   if ($15) {
    $16 = $new_count$0$i << 2;
    __THREW__ = 0;
    $17 = (invoke_ii(752,($16|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 16;
     break;
    }
    $20 = ($17|0)==(0|0);
    if (!($20)) {
     $21 = HEAP32[$2>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $$pre$i = 0;
     } else {
      $23 = HEAP32[$3>>2]|0;
      $24 = ($23|0)==(0|0);
      if ($24) {
       $$pre$i = $21;
      } else {
       $i$01$i$i = 0;
       while(1) {
        $25 = (($17) + ($i$01$i$i<<2)|0);
        $26 = (($23) + ($i$01$i$i<<2)|0);
        $27 = HEAP32[$26>>2]|0;
        HEAP32[$25>>2] = $27;
        $28 = (($i$01$i$i) + 1)|0;
        $exitcond$i = ($28|0)==($21|0);
        if ($exitcond$i) {
         break;
        } else {
         $i$01$i$i = $28;
        }
       }
       __ZdlPv($23);
       $$pre$pre$i = HEAP32[$2>>2]|0;
       $$pre$i = $$pre$pre$i;
      }
     }
     HEAP32[$3>>2] = $17;
     HEAP32[$1>>2] = $new_count$0$i;
     $30 = $$pre$i;
     label = 13;
    }
   } else {
    $30 = $9;
    label = 13;
   }
  } else {
   $30 = $9;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $29 = (($30) + 1)|0;
   HEAP32[$2>>2] = $29;
   $31 = HEAP32[$3>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   $33 = HEAP32[$track_id>>2]|0;
   HEAP32[$32>>2] = $33;
  }
  $34 = (($data_size$01) + -4)|0;
  $35 = ($34>>>0)>(3);
  if ($35) {
   $data_size$01 = $34;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  HEAP32[$0>>2] = (2152);
  HEAP32[$2>>2] = 0;
  $38 = HEAP32[$3>>2]|0;
  __ZdlPv($38);
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN16AP4_TrefTypeAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 48|0);
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$8)|0);
  $10 = ($9|0)==(0);
  $4 = (($i$01) + 1)|0;
  if (!($10)) {
   $$0 = $9;
   label = 4;
   break;
  }
  $5 = ($4>>>0)<($1>>>0);
  if ($5) {
   $i$01 = $4;
  } else {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN16AP4_TrefTypeAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,13888,$4,0,0);
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return 0;
 }
 $7 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$7>>2]|0;
  $12 = (($11) + ($i$01<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,13904,$13,0,0);
  $14 = (($i$01) + 1)|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $i$01 = $14;
  } else {
   break;
  }
 }
 return 0;
}
function __ZN16AP4_TrefTypeAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13792);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN16AP4_TrefTypeAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13792);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_SttsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(72)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(857,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SttsAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937011827,16,0,0);
 HEAP32[$this>>2] = (13928);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (14032);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 56|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 return;
}
function __ZN12AP4_SttsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$$i = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $exitcond$i = 0, $i$01$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $new_count$0$i = 0, $sample_count = 0, $sample_duration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 8|0;
 $sample_count = sp + 4|0;
 $sample_duration = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1937011827,$size,$version,$flags);
 HEAP32[$this>>2] = (13928);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (14032);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 56|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $63 = ___cxa_find_matching_catch()|0;
  $64 = tempRet0;
  $$pre$phiZ2D = $3;$lpad$phi$index = $63;$lpad$phi$index2 = $64;
  HEAP32[$0>>2] = (14032);
  HEAP32[$2>>2] = 0;
  $65 = HEAP32[$$pre$phiZ2D>>2]|0;
  __ZdlPv($65);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $7 = HEAP32[$entry_count>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$entry_count>>2] = $8;
 $9 = ($7|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 L8: while(1) {
  __THREW__ = 0;
  $10 = (invoke_iii(755,($stream|0),($sample_count|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   break;
  }
  $13 = ($10|0)==(0);
  do {
   if ($13) {
    __THREW__ = 0;
    $14 = (invoke_iii(755,($stream|0),($sample_duration|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break L8;
    }
    $17 = ($14|0)==(0);
    if ($17) {
     $21 = HEAP32[$sample_count>>2]|0;
     $22 = HEAP32[$sample_duration>>2]|0;
     $23 = HEAP32[$1>>2]|0;
     $24 = HEAP32[$2>>2]|0;
     $25 = (($24) + 1)|0;
     $26 = ($23>>>0)<($25>>>0);
     if ($26) {
      $27 = ($23|0)==(0);
      $28 = $23 << 1;
      $$$i = $27 ? 64 : $28;
      $29 = ($$$i>>>0)<($25>>>0);
      $new_count$0$i = $29 ? $25 : $$$i;
      $30 = ($23>>>0)<($new_count$0$i>>>0);
      if ($30) {
       $31 = $new_count$0$i << 3;
       __THREW__ = 0;
       $32 = (invoke_ii(752,($31|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        break L8;
       }
       $35 = ($32|0)==(0|0);
       if ($35) {
        break;
       }
       $36 = HEAP32[$2>>2]|0;
       $37 = ($36|0)==(0);
       if ($37) {
        $$pre$i = 0;
       } else {
        $38 = HEAP32[$3>>2]|0;
        $39 = ($38|0)==(0|0);
        if ($39) {
         $$pre$i = $36;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $40 = (($32) + ($i$01$i$i<<3)|0);
          $41 = (($38) + ($i$01$i$i<<3)|0);
          $42 = $41;
          $43 = $42;
          $44 = HEAP32[$43>>2]|0;
          $45 = (($42) + 4)|0;
          $46 = $45;
          $47 = HEAP32[$46>>2]|0;
          $48 = $40;
          $49 = $48;
          HEAP32[$49>>2] = $44;
          $50 = (($48) + 4)|0;
          $51 = $50;
          HEAP32[$51>>2] = $47;
          $52 = (($i$01$i$i) + 1)|0;
          $exitcond$i = ($52|0)==($36|0);
          if ($exitcond$i) {
           break;
          } else {
           $i$01$i$i = $52;
          }
         }
         __ZdlPv($38);
         $$pre$pre$i = HEAP32[$2>>2]|0;
         $$pre$i = $$pre$pre$i;
        }
       }
       HEAP32[$3>>2] = $32;
       HEAP32[$1>>2] = $new_count$0$i;
       $54 = $$pre$i;
      } else {
       $54 = $24;
      }
     } else {
      $54 = $24;
     }
     $53 = (($54) + 1)|0;
     HEAP32[$2>>2] = $53;
     $55 = HEAP32[$3>>2]|0;
     $56 = (($55) + ($54<<3)|0);
     $57 = $56;
     $58 = $57;
     HEAP32[$58>>2] = $21;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $22;
    }
   }
  } while(0);
  $18 = HEAP32[$entry_count>>2]|0;
  $19 = (($18) + -1)|0;
  HEAP32[$entry_count>>2] = $19;
  $20 = ($18|0)==(0);
  if ($20) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
 $61 = ___cxa_find_matching_catch()|0;
 $62 = tempRet0;
 $$pre$phiZ2D = $3;$lpad$phi$index = $61;$lpad$phi$index2 = $62;
 HEAP32[$0>>2] = (14032);
 HEAP32[$2>>2] = 0;
 $65 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZdlPv($65);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_SttsAtom6GetDtsEjRyPj($this,$sample,$dts,$duration) {
 $this = $this|0;
 $sample = $sample|0;
 $dts = $dts|0;
 $duration = $duration|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$ph = 0, $i$06 = 0;
 var $i$06$lcssa = 0, $sample_start$1$ph = 0, $sample_start$14 = 0, $sample_start$14$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $dts;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = ($duration|0)!=(0|0);
 if ($4) {
  HEAP32[$duration>>2] = 0;
 }
 $5 = ($sample|0)==(0);
 if ($5) {
  $$0 = -12;
  return ($$0|0);
 }
 $6 = ((($this)) + 56|0);
 $7 = ((($this)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>($sample>>>0);
 if ($9) {
  $55 = 0;$56 = 0;$i$0$ph = 0;$sample_start$1$ph = 0;
 } else {
  $10 = HEAP32[$6>>2]|0;
  $11 = ((($this)) + 64|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $55 = $14;$56 = $17;$i$0$ph = $10;$sample_start$1$ph = $8;
 }
 $18 = ((($this)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($i$0$ph>>>0)<($19>>>0);
 if (!($20)) {
  $$0 = -12;
  return ($$0|0);
 }
 $21 = ((($this)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $49 = $55;$50 = $56;$i$06 = $i$0$ph;$sample_start$14 = $sample_start$1$ph;
 while(1) {
  $23 = (($22) + ($i$06<<3)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($sample_start$14))|0;
  $26 = ($25>>>0)<($sample>>>0);
  if (!($26)) {
   $33 = $49;$34 = $50;$i$06$lcssa = $i$06;$sample_start$14$lcssa = $sample_start$14;
   break;
  }
  $46 = (((($22) + ($i$06<<3)|0)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($47, $24)|0;
  $51 = (_i64Add(($48|0),0,($49|0),($50|0))|0);
  $52 = tempRet0;
  $53 = (($i$06) + 1)|0;
  $54 = ($53>>>0)<($19>>>0);
  if ($54) {
   $49 = $51;$50 = $52;$i$06 = $53;$sample_start$14 = $25;
  } else {
   $$0 = -12;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $27 = (($sample) + -1)|0;
 $28 = (($27) - ($sample_start$14$lcssa))|0;
 $29 = (((($22) + ($i$06$lcssa<<3)|0)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (___muldi3(($30|0),0,($28|0),0)|0);
 $32 = tempRet0;
 $35 = (_i64Add(($31|0),($32|0),($33|0),($34|0))|0);
 $36 = tempRet0;
 $37 = $dts;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 if ($4) {
  HEAP32[$duration>>2] = $30;
 }
 HEAP32[$6>>2] = $i$06$lcssa;
 HEAP32[$7>>2] = $sample_start$14$lcssa;
 $41 = ((($this)) + 64|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = $33;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $34;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_SttsAtom8AddEntryEjj($this,$sample_count,$sample_duration) {
 $this = $this|0;
 $sample_count = $sample_count|0;
 $sample_duration = $sample_duration|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 3;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $39 = ((($this)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 8)|0;
    HEAP32[$39>>2] = $41;
    return 0;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre$i$i = ((($this)) + 48|0);
   if ($14) {
    $$pre$i = 0;
   } else {
    $15 = HEAP32[$$pre$i$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre$i = $13;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $17 = (($11) + ($i$01$i$i<<3)|0);
      $18 = (($15) + ($i$01$i$i<<3)|0);
      $19 = $18;
      $20 = $19;
      $21 = HEAP32[$20>>2]|0;
      $22 = (($19) + 4)|0;
      $23 = $22;
      $24 = HEAP32[$23>>2]|0;
      $25 = $17;
      $26 = $25;
      HEAP32[$26>>2] = $21;
      $27 = (($25) + 4)|0;
      $28 = $27;
      HEAP32[$28>>2] = $24;
      $29 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($29|0)==($13|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $29;
      }
     }
     __ZdlPv($15);
     $$pre$pre$i = HEAP32[$2>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0$i;
   $31 = $$pre$i;
  } else {
   $31 = $3;
  }
 } else {
  $31 = $3;
 }
 $30 = (($31) + 1)|0;
 HEAP32[$2>>2] = $30;
 $32 = ((($this)) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($31<<3)|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = $sample_count;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $sample_duration;
 $39 = ((($this)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 8)|0;
 HEAP32[$39>>2] = $41;
 return 0;
}
function __ZN12AP4_SttsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 48|0);
 $5 = ($1|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($i$01<<3)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$0 = $11;
   label = 6;
   break;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = (((($13) + ($i$01<<3)|0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
  $17 = ($16|0)==(0);
  $6 = (($i$01) + 1)|0;
  if (!($17)) {
   $$0 = $16;
   label = 6;
   break;
  }
  $7 = ($6>>>0)<($1>>>0);
  if ($7) {
   $i$01 = $6;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SttsAtom26GetSampleIndexForTimeStampEyRj($this,$0,$1,$sample_index) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $sample_index = $sample_index|0;
 var $$0 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$sample_index>>2] = 0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($this)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $13 = 0;$14 = 0;$32 = 0;$i$03 = 0;
 while(1) {
  $7 = (($6) + ($i$03<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (((($6) + ($i$03<<3)|0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (___muldi3(($10|0),0,($8|0),0)|0);
  $12 = tempRet0;
  $15 = (_i64Add(($11|0),($12|0),($13|0),($14|0))|0);
  $16 = tempRet0;
  $17 = ($16>>>0)>($1>>>0);
  $18 = ($15>>>0)>($0>>>0);
  $19 = ($16|0)==($1|0);
  $20 = $19 & $18;
  $21 = $17 | $20;
  if ($21) {
   $$lcssa = $32;$22 = $13;$23 = $14;$26 = $10;$27 = 0;
   break;
  }
  $31 = (($32) + ($8))|0;
  HEAP32[$sample_index>>2] = $31;
  $33 = (($i$03) + 1)|0;
  $34 = ($33>>>0)<($3>>>0);
  if ($34) {
   $13 = $15;$14 = $16;$32 = $31;$i$03 = $33;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 $24 = (_i64Subtract(($0|0),($1|0),($22|0),($23|0))|0);
 $25 = tempRet0;
 $28 = (___udivdi3(($24|0),($25|0),($26|0),($27|0))|0);
 $29 = tempRet0;
 $30 = (($$lcssa) + ($28))|0;
 HEAP32[$sample_index>>2] = $30;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_SttsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 272|0;
 $value = sp + 16|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = ((($inspector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($this)) + 48|0);
  $i$01 = 0;
  while(1) {
   HEAP32[$vararg_buffer>>2] = $i$01;
   (_snprintf($header,32,24608,$vararg_buffer)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($i$01<<3)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($11) + ($i$01<<3)|0)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $13;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $15;
   (_snprintf($value,256,14040,$vararg_buffer1)|0);
   $16 = HEAP32[$inspector>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_viiii[$18 & 1023]($inspector,$header,$value,0);
   $19 = (($i$01) + 1)|0;
   $20 = HEAP32[$3>>2]|0;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $i$01 = $19;
   } else {
    break;
   }
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SttsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13928);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (14032);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_SttsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (13928);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (14032);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14032);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14032);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_SthdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1937008740,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (14136);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_SthdAtom11WriteFieldsER14AP4_ByteStream($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN12AP4_SthdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_8bdlAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size>>>0)<(16);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_viii(858,($1|0),($size|0),($stream|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($1);
  ___resumeException($4|0);
  // unreachable;
 } else {
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_8bdlAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,945972332,$size);
 HEAP32[$this>>2] = (14232);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 2020437024;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 $3 = (($size) + -16)|0;
 __THREW__ = 0;
 invoke_vii(759,($2|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $$0 = $21;$$01 = $20;
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($0|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($1|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = ((($this)) + 56|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   (invoke_iii(757,($2|0),($11|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = ((($this)) + 52|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($this)) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(788,($stream|0),($15|0),($17|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     return;
    }
   }
  }
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $$0 = $23;$$01 = $22;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN12AP4_8bdlAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$9,$11)|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN12AP4_8bdlAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enc = 0, $xml = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $enc = sp + 8|0;
 $xml = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($enc,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,14320,$enc,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,14336,$9,0,0);
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(2020437024);
 if (!($11)) {
  $26 = HEAP32[$inspector>>2]|0;
  $27 = ((($26)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($this)) + 52|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($this)) + 60|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_viiiii[$28 & 1023]($inspector,14360,$30,$32,0);
  STACKTOP = sp;return 0;
 }
 $12 = ((($this)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 __ZN10AP4_StringC2EPKcj($xml,$13,$15);
 $16 = HEAP32[$inspector>>2]|0;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$xml>>2]|0;
 __THREW__ = 0;
 invoke_viiii($18|0,($inspector|0),(14360|0),($19|0),0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if (!($21)) {
  __ZN10AP4_StringD2Ev($xml);
  STACKTOP = sp;return 0;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($xml|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  ___resumeException($22|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_8bdlAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14232);
 $0 = ((($this)) + 44|0);
 __ZN14AP4_DataBufferD2Ev($0);
 return;
}
function __ZN12AP4_8bdlAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14232);
 $0 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_SgpdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(859,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SgpdAtomD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01$i$i = 0, $item$01$i$i2 = 0, $item$06 = 0, $item$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14384);
 $0 = ((($this)) + 44|0);
 $1 = ((($this)) + 52|0);
 $item$06 = HEAP32[$1>>2]|0;
 $2 = ($item$06|0)==(0|0);
 L1: do {
  if ($2) {
   HEAP32[$0>>2] = (14480);
  } else {
   $item$07 = $item$06;
   while(1) {
    $3 = HEAP32[$item$07>>2]|0;
    $4 = ($3|0)==(0|0);
    if (!($4)) {
     $5 = HEAP32[$3>>2]|0;
     $6 = ((($5)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     __THREW__ = 0;
     invoke_vi($7|0,($3|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      break;
     }
    }
    $10 = ((($item$07)) + 4|0);
    $item$0 = HEAP32[$10>>2]|0;
    $11 = ($item$0|0)==(0|0);
    if ($11) {
     label = 8;
     break;
    } else {
     $item$07 = $item$0;
    }
   }
   if ((label|0) == 8) {
    $$pre = HEAP32[$1>>2]|0;
    HEAP32[$0>>2] = (14480);
    $19 = ($$pre|0)==(0|0);
    if ($19) {
     break;
    } else {
     $item$01$i$i = $$pre;
    }
    while(1) {
     $20 = ((($item$01$i$i)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     __ZdlPv($item$01$i$i);
     $22 = ($21|0)==(0|0);
     if ($22) {
      break L1;
     } else {
      $item$01$i$i = $21;
     }
    }
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   HEAP32[$0>>2] = (14480);
   $14 = HEAP32[$1>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $25 = ((($this)) + 48|0);
    HEAP32[$25>>2] = 0;
    $26 = ((($this)) + 56|0);
    HEAP32[$26>>2] = 0;
    HEAP32[$1>>2] = 0;
    ___resumeException($12|0);
    // unreachable;
   } else {
    $item$01$i$i2 = $14;
   }
   while(1) {
    $16 = ((($item$01$i$i2)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    __ZdlPv($item$01$i$i2);
    $18 = ($17|0)==(0|0);
    if ($18) {
     break;
    } else {
     $item$01$i$i2 = $17;
    }
   }
   $25 = ((($this)) + 48|0);
   HEAP32[$25>>2] = 0;
   $26 = ((($this)) + 56|0);
   HEAP32[$26>>2] = 0;
   HEAP32[$1>>2] = 0;
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $23 = ((($this)) + 48|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 56|0);
 HEAP32[$24>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN12AP4_SgpdAtomD0Ev($this) {
 $this = $this|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i$i$i = 0, $item$01$i$i2$i = 0, $item$06$i = 0, $item$07$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14384);
 $0 = ((($this)) + 44|0);
 $1 = ((($this)) + 52|0);
 $item$06$i = HEAP32[$1>>2]|0;
 $2 = ($item$06$i|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$07$i = $item$06$i;
 }
 while(1) {
  $3 = HEAP32[$item$07$i>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   invoke_vi($7|0,($3|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    label = 5;
    break;
   }
  }
  $10 = ((($item$07$i)) + 4|0);
  $item$0$i = HEAP32[$10>>2]|0;
  $11 = ($item$0$i|0)==(0|0);
  if ($11) {
   label = 7;
   break;
  } else {
   $item$07$i = $item$0$i;
  }
 }
 if ((label|0) == 5) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  HEAP32[$0>>2] = (14480);
  $14 = HEAP32[$1>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   __ZdlPv($this);
   ___resumeException($12|0);
   // unreachable;
  } else {
   $item$01$i$i2$i = $14;
  }
  while(1) {
   $16 = ((($item$01$i$i2$i)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   __ZdlPv($item$01$i$i2$i);
   $18 = ($17|0)==(0|0);
   if ($18) {
    break;
   } else {
    $item$01$i$i2$i = $17;
   }
  }
  __ZdlPv($this);
  ___resumeException($12|0);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$pre$i = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = (14480);
  $19 = ($$pre$i|0)==(0|0);
  if ($19) {
   __ZdlPv($this);
   return;
  } else {
   $item$01$i$i$i = $$pre$i;
  }
  while(1) {
   $20 = ((($item$01$i$i$i)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   __ZdlPv($item$01$i$i$i);
   $22 = ($21|0)==(0|0);
   if ($22) {
    break;
   } else {
    $item$01$i$i$i = $21;
   }
  }
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_SgpdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_available$0 = 0, $description_length = 0, $entry_count = 0, $i$04 = 0, $item$01$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 4|0;
 $description_length = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1936158820,$size,$version,$flags);
 HEAP32[$this>>2] = (14384);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = (14480);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($0|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   label = 6;
  } else {
   $8 = (($size) + -16)|0;
   $9 = ($version<<24>>24)==(0);
   if ($9) {
    $bytes_available$0 = $8;
   } else {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($1|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 6;
     break;
    }
    $12 = (($size) + -20)|0;
    $bytes_available$0 = $12;
   }
   HEAP32[$entry_count>>2] = 0;
   __THREW__ = 0;
   $17 = (invoke_iii(755,($stream|0),($entry_count|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 6;
   } else {
    $20 = ($17|0)==(0);
    if (!($20)) {
     STACKTOP = sp;return;
    }
    $21 = (($bytes_available$0) + -4)|0;
    $22 = HEAP32[$entry_count>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     STACKTOP = sp;return;
    }
    $24 = ((($this)) + 25|0);
    $i$04 = 0;
    while(1) {
     $25 = HEAP32[$1>>2]|0;
     HEAP32[$description_length>>2] = $25;
     $26 = HEAP8[$24>>0]|0;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      HEAP32[$description_length>>2] = $21;
      label = 18;
     } else {
      $28 = ($25|0)==(0);
      if ($28) {
       __THREW__ = 0;
       $29 = (invoke_iii(755,($stream|0),($description_length|0))|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        label = 5;
        break;
       }
       HEAP32[$description_length>>2] = $29;
       $32 = $29;
      } else {
       $32 = $25;
      }
      $33 = ($32>>>0)>($21>>>0);
      if (!($33)) {
       label = 18;
      }
     }
     if ((label|0) == 18) {
      label = 0;
      __THREW__ = 0;
      $34 = (invoke_ii(752,20)|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       label = 5;
       break;
      }
      __THREW__ = 0;
      invoke_vi(837,($34|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       $$lcssa = $34;
       label = 23;
       break;
      }
      $39 = HEAP32[$description_length>>2]|0;
      $40 = ($39|0)==(0);
      if (!($40)) {
       __THREW__ = 0;
       (invoke_iii(757,($34|0),($39|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 5;
        break;
       }
       $43 = ((($34)) + 8|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = HEAP32[$description_length>>2]|0;
       __THREW__ = 0;
       (invoke_iiii(788,($stream|0),($44|0),($45|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 5;
        break;
       }
      }
      __THREW__ = 0;
      $50 = (invoke_ii(752,12)|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       label = 5;
       break;
      }
      HEAP32[$50>>2] = $34;
      $53 = ((($50)) + 4|0);
      HEAP32[$53>>2] = 0;
      $54 = ((($50)) + 8|0);
      HEAP32[$54>>2] = 0;
      $55 = HEAP32[$5>>2]|0;
      $56 = ($55|0)==(0|0);
      if ($56) {
       HEAP32[$4>>2] = $50;
       HEAP32[$5>>2] = $50;
       HEAP32[$53>>2] = 0;
       $$sink$i$i = 0;
      } else {
       HEAP32[$53>>2] = 0;
       $57 = ((($55)) + 4|0);
       HEAP32[$57>>2] = $50;
       HEAP32[$5>>2] = $50;
       $$sink$i$i = $55;
      }
      HEAP32[$54>>2] = $$sink$i$i;
      $58 = HEAP32[$3>>2]|0;
      $59 = (($58) + 1)|0;
      HEAP32[$3>>2] = $59;
     }
     $60 = (($i$04) + 1)|0;
     $61 = HEAP32[$entry_count>>2]|0;
     $62 = ($60>>>0)<($61>>>0);
     if ($62) {
      $i$04 = $60;
     } else {
      label = 30;
      break;
     }
    }
    if ((label|0) == 5) {
     $13 = ___cxa_find_matching_catch()|0;
     $14 = tempRet0;
     $lpad$phi$index = $13;$lpad$phi$index2 = $14;
     label = 7;
     break;
    }
    else if ((label|0) == 23) {
     $48 = ___cxa_find_matching_catch()|0;
     $49 = tempRet0;
     __ZdlPv($$lcssa);
     $$0 = $48;$$01 = $49;
     break;
    }
    else if ((label|0) == 30) {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index2 = $16;
  label = 7;
 }
 if ((label|0) == 7) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 HEAP32[$2>>2] = (14480);
 $63 = HEAP32[$4>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  HEAP32[$3>>2] = 0;
  HEAP32[$5>>2] = 0;
  HEAP32[$4>>2] = 0;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $item$01$i$i = $63;
 }
 while(1) {
  $65 = ((($item$01$i$i)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  __ZdlPv($item$01$i$i);
  $67 = ($66|0)==(0|0);
  if ($67) {
   break;
  } else {
   $item$01$i$i = $66;
  }
 }
 HEAP32[$3>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$4>>2] = 0;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN12AP4_SgpdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01 = 0, $item$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = ((($this)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = $9;
   return ($$0|0);
  }
 }
 $11 = ((($this)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($this)) + 52|0);
 $item$01 = HEAP32[$15>>2]|0;
 $16 = ($item$01|0)==(0|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($this)) + 40|0);
 $item$02 = $item$01;
 while(1) {
  $20 = HEAP32[$item$02>>2]|0;
  $21 = HEAP8[$4>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if (!($22)) {
   $23 = HEAP32[$17>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = ((($20)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$26)|0);
   }
  }
  $27 = ((($20)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($20)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$28,$30)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   label = 12;
   break;
  }
  $18 = ((($item$02)) + 4|0);
  $item$0 = HEAP32[$18>>2]|0;
  $19 = ($item$0|0)==(0|0);
  if ($19) {
   $$0 = 0;
   label = 12;
   break;
  } else {
   $item$02 = $item$0;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SgpdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fourcc = 0, $header = 0, $i$02 = 0, $item$0 = 0, $item$01 = 0, $item$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fourcc = sp + 40|0;
 $header = sp + 8|0;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($fourcc,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,14488,$fourcc,0);
 $5 = ((($this)) + 25|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,14504,$12,0,0);
 }
 $13 = HEAP32[$inspector>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_viiiii[$15 & 1023]($inspector,24592,$17,0,0);
 $18 = ((($this)) + 52|0);
 $item$01 = HEAP32[$18>>2]|0;
 $19 = ($item$01|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return 0;
 }
 $i$02 = 0;$item$03 = $item$01;
 while(1) {
  $20 = HEAP32[$item$03>>2]|0;
  HEAP32[$vararg_buffer>>2] = $i$02;
  (_snprintf($header,32,14520,$vararg_buffer)|0);
  $21 = (($i$02) + 1)|0;
  $22 = HEAP32[$inspector>>2]|0;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($20)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($20)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_viiiii[$24 & 1023]($inspector,$header,$26,$28,0);
  $29 = ((($item$03)) + 4|0);
  $item$0 = HEAP32[$29>>2]|0;
  $30 = ($item$0|0)==(0|0);
  if ($30) {
   break;
  } else {
   $i$02 = $21;$item$03 = $item$0;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN8AP4_ListI14AP4_DataBufferED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14480);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListI14AP4_DataBufferED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14480);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN27AP4_MetaDataAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom($this,$type,$size,$stream,$context,$atom) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $context = $context|0;
 $atom = $atom|0;
 var $$0 = 0, $$0$i13 = 0, $$0$i20 = 0, $$0$i3 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$i = 0, $flags$i11 = 0, $flags$i18 = 0, $i$01$i = 0, $i$01$i4 = 0, $not$ = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond$i19 = 0, $or$cond2$i = 0, $version$i = 0;
 var $version$i10 = 0, $version$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version$i17 = sp + 14|0;
 $flags$i18 = sp + 8|0;
 $version$i10 = sp + 13|0;
 $flags$i11 = sp + 4|0;
 $version$i = sp + 12|0;
 $flags$i = sp;
 HEAP32[$atom>>2] = 0;
 $0 = ($context|0)==(1768715124);
 L1: do {
  if ($0) {
   $i$01$i = 0;
   while(1) {
    $3 = (14592 + ($i$01$i<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==($type|0);
    $1 = (($i$01$i) + 1)|0;
    if ($5) {
     break;
    }
    $2 = ($1>>>0)<(46);
    if ($2) {
     $i$01$i = $1;
    } else {
     $61 = 0;
     break L1;
    }
   }
   $6 = ((($this)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   __ZN15AP4_AtomFactory11PushContextEj($7,$type);
   $8 = HEAP32[$6>>2]|0;
   $9 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($type,$size,0,0,0,$stream,$8)|0);
   HEAP32[$atom>>2] = $9;
   $10 = HEAP32[$6>>2]|0;
   __ZN15AP4_AtomFactory10PopContextEv($10);
   $$pre = HEAP32[$atom>>2]|0;
   $61 = $$pre;
  } else {
   $11 = ($type|0)==(1684108385);
   if ($11) {
    $i$01$i4 = 0;
    while(1) {
     $14 = (14592 + ($i$01$i4<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($context|0);
     $12 = (($i$01$i4) + 1)|0;
     if ($16) {
      break;
     }
     $13 = ($12>>>0)<(46);
     if ($13) {
      $i$01$i4 = $12;
     } else {
      $61 = 0;
      break L1;
     }
    }
    $17 = (__Znwj(48)|0);
    __THREW__ = 0;
    invoke_viii(860,($17|0),($size|0),($stream|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     HEAP32[$atom>>2] = $17;
     $61 = $17;
     break;
    }
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZdlPv($17);
    $$0 = $21;$$02 = $20;
    ___resumeException($$02|0);
    // unreachable;
   }
   if ((($context|0) == 757935405)) {
    if (!((($type|0) == 1835360622) | (($type|0) == 1851878757))) {
     $61 = 0;
     break;
    }
    $22 = (__Znwj(48)|0);
    __THREW__ = 0;
    invoke_viiii(861,($22|0),($type|0),($size|0),($stream|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     HEAP32[$atom>>2] = $22;
     $61 = $22;
     break;
    }
    $25 = ___cxa_find_matching_catch()|0;
    $26 = tempRet0;
    __ZdlPv($22);
    $$0 = $26;$$02 = $25;
    ___resumeException($$02|0);
    // unreachable;
   } else if (!((($context|0) == 1969517665))) {
    $61 = 0;
    break;
   }
   if ((($type|0) == 1684235844)) {
    $47 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version$i,$flags$i)|0);
    $48 = ($47|0)==(0);
    $49 = HEAP8[$version$i>>0]|0;
    $50 = ($49<<24>>24)==(0);
    $or$cond$i = $48 & $50;
    $51 = ($size|0)==(16);
    $or$cond2$i = $51 & $or$cond$i;
    if ($or$cond2$i) {
     $52 = (__Znwj(40)|0);
     $53 = HEAP32[$flags$i>>2]|0;
     __THREW__ = 0;
     invoke_viiiii(749,($52|0),1684235844,16,0,($53|0));
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      $59 = ___cxa_find_matching_catch()|0;
      $60 = tempRet0;
      __ZdlPv($52);
      ___resumeException($59|0);
      // unreachable;
     }
     HEAP32[$52>>2] = (15040);
     $56 = ((($52)) + 36|0);
     HEAP32[$56>>2] = 0;
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($56|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $59 = ___cxa_find_matching_catch()|0;
      $60 = tempRet0;
      __ZdlPv($52);
      ___resumeException($59|0);
      // unreachable;
     } else {
      $$0$i3 = $52;
     }
    } else {
     $$0$i3 = 0;
    }
    HEAP32[$atom>>2] = $$0$i3;
    $61 = $$0$i3;
    break;
   } else if ((($type|0) == 1819435893) | (($type|0) == 1668706933) | (($type|0) == 1768842869) | (($type|0) == 1768124021)) {
    $37 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version$i17,$flags$i18)|0);
    $38 = ($37|0)==(0);
    $39 = HEAP8[$version$i17>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $or$cond$i19 = $38 & $40;
    if ($or$cond$i19) {
     $41 = (__Znwj(48)|0);
     $42 = HEAP32[$flags$i18>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii(863,($41|0),($type|0),($size|0),0,($42|0),($stream|0));
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      $45 = ___cxa_find_matching_catch()|0;
      $46 = tempRet0;
      __ZdlPv($41);
      ___resumeException($45|0);
      // unreachable;
     } else {
      $$0$i20 = $41;
     }
    } else {
     $$0$i20 = 0;
    }
    HEAP32[$atom>>2] = $$0$i20;
    $61 = $$0$i20;
    break;
   } else if ((($type|0) == 1735291493) | (($type|0) == 1635087464) | (($type|0) == 1885696614) | (($type|0) == 1668313716) | (($type|0) == 1685283696) | (($type|0) == 1953068140)) {
    $27 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version$i10,$flags$i11)|0);
    $28 = ($27|0)==(0);
    $29 = HEAP8[$version$i10>>0]|0;
    $30 = ($29<<24>>24)==(0);
    $or$cond$i12 = $28 & $30;
    if ($or$cond$i12) {
     $31 = (__Znwj(48)|0);
     $32 = HEAP32[$flags$i11>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii(862,($31|0),($type|0),($size|0),0,($32|0),($stream|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch()|0;
      $36 = tempRet0;
      __ZdlPv($31);
      ___resumeException($35|0);
      // unreachable;
     } else {
      $$0$i13 = $31;
     }
    } else {
     $$0$i13 = 0;
    }
    HEAP32[$atom>>2] = $$0$i13;
    $61 = $$0$i13;
    break;
   } else {
    $61 = 0;
    break;
   }
  }
 } while(0);
 $not$ = ($61|0)==(0|0);
 $62 = $not$ << 31 >> 31;
 STACKTOP = sp;return ($62|0);
}
function __ZN12AP4_MetaDataD2Ev($this) {
 $this = $this|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $10 = ((($this)) + 12|0);
  $11 = ((($this)) + 4|0);
  HEAP32[$this>>2] = (16080);
  HEAP32[$11>>2] = 0;
  HEAP32[$10>>2] = 0;
  HEAP32[$0>>2] = 0;
  return;
 } else {
  $item$01$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$item$01$i>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __THREW__ = 0;
   invoke_vi(864,($5|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $$lcssa = $5;
    break;
   }
   __ZdlPv($5);
  }
  __ZdlPv($item$01$i);
  $9 = ($4|0)==(0|0);
  if ($9) {
   label = 6;
   break;
  } else {
   $item$01$i = $4;
  }
 }
 if ((label|0) == 6) {
  $10 = ((($this)) + 12|0);
  $11 = ((($this)) + 4|0);
  HEAP32[$this>>2] = (16080);
  HEAP32[$11>>2] = 0;
  HEAP32[$10>>2] = 0;
  HEAP32[$0>>2] = 0;
  return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 __ZdlPv($$lcssa);
 HEAP32[$this>>2] = (16080);
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $19 = ((($this)) + 4|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($this)) + 12|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$0>>2] = 0;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $item$01$i$i1 = $14;
 }
 while(1) {
  $16 = ((($item$01$i$i1)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  __ZdlPv($item$01$i$i1);
  $18 = ($17|0)==(0|0);
  if ($18) {
   break;
  } else {
   $item$01$i$i1 = $17;
  }
 }
 $19 = ((($this)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($this)) + 12|0);
 HEAP32[$20>>2] = 0;
 HEAP32[$0>>2] = 0;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN12AP4_DataAtom11LoadIntegerERl($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $sext = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $bytes = sp + 8|0;
 HEAP32[$value>>2] = 0;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $size;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iii[$9 & 1023]($1,$size)|0);
 $10 = $size;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)>(0);
 $17 = ($12>>>0)>(4);
 $18 = ($15|0)==(0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 if ($20) {
  $$0 = -12;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 (FUNCTION_TABLE_iiii[$24 & 1023]($21,0,0)|0);
 $25 = HEAP32[$0>>2]|0;
 $26 = $size;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 (__ZN14AP4_ByteStream4ReadEPvj($25,$bytes,$28)|0);
 $32 = $size;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 if ((($34|0) == 4)) {
  $cond = ($37|0)==(0);
  if ($cond) {
   $48 = HEAP8[$bytes>>0]|0;
   $49 = $48&255;
   $50 = $49 << 24;
   $51 = ((($bytes)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 16;
   $55 = $54 | $50;
   $56 = ((($bytes)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << 8;
   $60 = $55 | $59;
   $61 = ((($bytes)) + 3|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $60 | $63;
   HEAP32[$value>>2] = $64;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($34|0) == 1)) {
  $cond2 = ($37|0)==(0);
  if ($cond2) {
   $38 = HEAP8[$bytes>>0]|0;
   $39 = $38&255;
   HEAP32[$value>>2] = $39;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($34|0) == 2)) {
  $cond1 = ($37|0)==(0);
  if ($cond1) {
   $40 = HEAP8[$bytes>>0]|0;
   $41 = $40&255;
   $42 = $41 << 8;
   $43 = ((($bytes)) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $42 | $45;
   $sext = $46 << 16;
   $47 = $sext >> 16;
   HEAP32[$value>>2] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$value>>2] = 0;
 $$0 = -10;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_DataAtom10LoadStringERP10AP4_String($this,$string) {
 $this = $this|0;
 $string = $string|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (__Znwj(8)|0);
  __THREW__ = 0;
  invoke_vi(790,($3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch()|0;
   $7 = tempRet0;
   __ZdlPv($3);
   $$01 = $7;$$02 = $6;
   ___resumeException($$02|0);
   // unreachable;
  } else {
   HEAP32[$string>>2] = $3;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = $size;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_iii[$14 & 1023]($1,$size)|0);
 $15 = $size;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>(0);
 $22 = ($17>>>0)>(1073741824);
 $23 = ($20|0)==(0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 if ($25) {
  $$0 = -12;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (__Znwj(8)|0);
 __THREW__ = 0;
 invoke_vii(865,($26|0),($17|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  __ZdlPv($26);
  $$01 = $49;$$02 = $48;
  ___resumeException($$02|0);
  // unreachable;
 }
 HEAP32[$string>>2] = $26;
 $29 = HEAP32[$0>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 (FUNCTION_TABLE_iiii[$32 & 1023]($29,0,0)|0);
 $33 = HEAP32[$0>>2]|0;
 $34 = HEAP32[$string>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = $size;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (__ZN14AP4_ByteStream4ReadEPvj($33,$35,$38)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = HEAP32[$string>>2]|0;
 $45 = ($44|0)==(0|0);
 do {
  if (!($45)) {
   __THREW__ = 0;
   invoke_vi(792,($44|0));
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if (!($47)) {
    __ZdlPv($44);
    break;
   }
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   __ZdlPv($44);
   $$01 = $51;$$02 = $50;
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 HEAP32[$string>>2] = 0;
 $$0 = $42;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_DataAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data_offset = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 8|0;
 $data_offset = sp;
 __ZN8AP4_AtomC2Ejj($this,1684108385,$size);
 HEAP32[$this>>2] = (14784);
 $0 = ($size>>>0)<(16);
 if ($0) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($i|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$i>>2]|0;
  $4 = ((($this)) + 36|0);
  HEAP32[$4>>2] = $3;
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($i|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = HEAP32[$i>>2]|0;
   $8 = ((($this)) + 40|0);
   HEAP32[$8>>2] = $7;
   $9 = HEAP32[$stream>>2]|0;
   $10 = ((($9)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   (invoke_iii($11|0,($stream|0),($data_offset|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    $14 = (invoke_ii(752,40)|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     $17 = (($size) + -16)|0;
     $18 = $data_offset;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii(808,($14|0),($stream|0),($20|0),($23|0),($17|0),0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $29 = ___cxa_find_matching_catch()|0;
      $30 = tempRet0;
      __ZdlPv($14);
      $$0 = $29;$$01 = $30;
      ___resumeException($$0|0);
      // unreachable;
     } else {
      $26 = ((($this)) + 44|0);
      HEAP32[$26>>2] = $14;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $$0 = $27;$$01 = $28;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN12AP4_DataAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14784);
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($1);
 return;
}
function __ZN12AP4_DataAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14784);
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_DataAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$3)|0);
 $4 = ((($this)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return 0;
 }
 $7 = $size;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 (FUNCTION_TABLE_iii[$13 & 1023]($5,$size)|0);
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiii[$17 & 1023]($14,0,0)|0);
 $18 = HEAP32[$4>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $size;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 (FUNCTION_TABLE_iiiii[$21 & 1023]($18,$stream,$24,$27)|0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_DataAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 4|0;
 $value = sp;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,16088,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,16096,$9,0,0);
 $10 = HEAP32[$3>>2]|0;
 if ((($10|0) == 1)) {
  $11 = (__ZN12AP4_DataAtom10LoadStringERP10AP4_String($this,$str)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   STACKTOP = sp;return 0;
  }
  $13 = HEAP32[$inspector>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$str>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_viiii[$15 & 1023]($inspector,16104,$17,0);
  $18 = ($16|0)==(0|0);
  if ($18) {
   STACKTOP = sp;return 0;
  }
  __THREW__ = 0;
  invoke_vi(792,($16|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   __ZdlPv($16);
   ___resumeException($21|0);
   // unreachable;
  }
  __ZdlPv($16);
  STACKTOP = sp;return 0;
 } else if ((($10|0) == 21)) {
  $23 = (__ZN12AP4_DataAtom11LoadIntegerERl($this,$value)|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   STACKTOP = sp;return 0;
  }
  $25 = HEAP32[$inspector>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$value>>2]|0;
  $29 = ($28|0)<(0);
  $30 = $29 << 31 >> 31;
  FUNCTION_TABLE_viiiii[$27 & 1023]($inspector,16104,$28,$30,0);
  STACKTOP = sp;return 0;
 } else {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN22AP4_MetaDataStringAtomC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,$type,$size);
 HEAP32[$this>>2] = (14848);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 $2 = (($size) + -12)|0;
 __THREW__ = 0;
 invoke_vii(865,($1|0),($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $$0 = $13;$$01 = $12;
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($0|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($this)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($7|0),($9|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   return;
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$0 = $15;$$01 = $14;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN22AP4_MetaDataStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$3,$5)|0);
 return ($6|0);
}
function __ZN22AP4_MetaDataStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,16104,$4,0);
 return 0;
}
function __ZN27AP4_3GppLocalizedStringAtomC2EjjhjR14AP4_ByteStream($this,$type,$size,$version,$flags,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $packed_language = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $packed_language = sp;
 __ZN8AP4_AtomC2Ejjhj($this,$type,$size,$version,$flags);
 HEAP32[$this>>2] = (14912);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $$0 = $30;$$01 = $31;
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(794,($stream|0),($packed_language|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = HEAP16[$packed_language>>1]|0;
  $6 = $5&65535;
  $7 = $6 >>> 10;
  $8 = $7 | 96;
  $9 = $8&255;
  $10 = ((($this)) + 36|0);
  HEAP8[$10>>0] = $9;
  $11 = $6 >>> 5;
  $12 = $11 & 31;
  $13 = $12 | 96;
  $14 = $13&255;
  $15 = ((($this)) + 37|0);
  HEAP8[$15>>0] = $14;
  $16 = $6 & 31;
  $17 = $16 | 96;
  $18 = $17&255;
  $19 = ((($this)) + 38|0);
  HEAP8[$19>>0] = $18;
  $20 = ((($this)) + 39|0);
  HEAP8[$20>>0] = 0;
  $21 = ($size>>>0)>(14);
  if (!($21)) {
   STACKTOP = sp;return;
  }
  $22 = (($size) + -14)|0;
  __THREW__ = 0;
  $23 = (invoke_ii(787,($22|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($23|0),($22|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    __THREW__ = 0;
    invoke_viii(758,($0|0),($23|0),($22|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __ZdaPv($23);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  $$0 = $32;$$01 = $33;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN27AP4_3GppLocalizedStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $$off0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = $2 << 10;
 $4 = (($3) + 32768)|0;
 $5 = ((($this)) + 37|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = $7 << 5;
 $9 = (($8) + 62464)|0;
 $10 = $9 | $4;
 $11 = ((($this)) + 38|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = (($13) + 65440)|0;
 $15 = $10 | $14;
 $16 = $15&65535;
 (__ZN14AP4_ByteStream9WriteUI16Et($stream,$16)|0);
 $17 = ((($this)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  $20 = ((($this)) + 16|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $$off0 = $23;
 } else {
  $$off0 = $18;
 }
 $27 = HEAP32[$this>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 1023]($this)|0);
 $31 = (($$off0) - ($30))|0;
 $32 = ($31>>>0)<(2);
 if ($32) {
  $$0 = -10;
  return ($$0|0);
 }
 $33 = ((($this)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 1)|0;
 $36 = (($31) + -2)|0;
 $37 = ($35>>>0)>($36>>>0);
 $$ = $37 ? $36 : $35;
 $38 = ((($this)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$39,$$)|0);
 $40 = ($$>>>0)<($36>>>0);
 if ($40) {
  $i$02 = $$;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $41 = (($i$02) + 1)|0;
  $42 = ($41>>>0)<($36>>>0);
  if ($42) {
   $i$02 = $41;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function __ZN27AP4_3GppLocalizedStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,17808,$3,0);
 $4 = HEAP32[$inspector>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$6 & 1023]($inspector,16104,$8,0);
 return 0;
}
function __ZN17AP4_DcfStringAtomC2EjjhjR14AP4_ByteStream($this,$type,$size,$version,$flags,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,$type,$size,$version,$flags);
 HEAP32[$this>>2] = (14976);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $$0 = $12;$$01 = $13;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = ($size>>>0)>(12);
 if (!($3)) {
  return;
 }
 $4 = (($size) + -12)|0;
 __THREW__ = 0;
 $5 = (invoke_ii(787,($4|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($5|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   invoke_viii(758,($0|0),($5|0),($4|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __ZdaPv($5);
    return;
   }
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$0 = $14;$$01 = $15;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN17AP4_DcfStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return 0;
 }
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$4,$1)|0);
 return 0;
}
function __ZN17AP4_DcfStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 1023]($inspector,16104,$4,0);
 return 0;
}
function __ZN12AP4_DcfdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return 0;
}
function __ZN12AP4_DcfdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,17776,$4,0,0);
 return 0;
}
function __GLOBAL__sub_I_Ap4MetaData_cpp() {
 var $$pre$i$pre$i$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[14576>>2] = (17120);
 HEAP32[(14580)>>2] = 44;
 HEAP32[(14584)>>2] = 44;
 $0 = (__Znwj(704)|0);
 HEAP32[(14588)>>2] = $0;
 ;HEAP32[$0>>2]=HEAP32[15368>>2]|0;HEAP32[$0+4>>2]=HEAP32[15368+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[15368+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[15368+12>>2]|0;
 $1 = ((($0)) + 16|0);
 ;HEAP32[$1>>2]=HEAP32[(15384)>>2]|0;HEAP32[$1+4>>2]=HEAP32[(15384)+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[(15384)+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[(15384)+12>>2]|0;
 $2 = ((($0)) + 32|0);
 ;HEAP32[$2>>2]=HEAP32[(15400)>>2]|0;HEAP32[$2+4>>2]=HEAP32[(15400)+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[(15400)+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[(15400)+12>>2]|0;
 $4 = 3;
 while(1) {
  $$pre$i$pre$i$pre = HEAP32[(14588)>>2]|0;
  $3 = (($$pre$i$pre$i$pre) + ($4<<4)|0);
  $5 = (15368 + ($4<<4)|0);
  ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$5+12>>2]|0;
  $6 = (($4) + 1)|0;
  $exitcond$i$i = ($6|0)==(44);
  if ($exitcond$i$i) {
   break;
  } else {
   $4 = $6;
  }
 }
 (___cxa_atexit((415|0),(14576|0),(___dso_handle|0))|0);
 return;
}
function __ZN12AP4_MetaData5EntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $19 = ((($this)) + 8|0);
   __THREW__ = 0;
   invoke_vi(792,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $24 = ___cxa_find_matching_catch(0|0)|0;
    $25 = tempRet0;
    __THREW__ = 0;
    invoke_vi(792,($this|0));
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(0|0)|0;
     $29 = tempRet0;
     ___clang_call_terminate($28);
     // unreachable;
    } else {
     $eh$lpad$body$indexZ2D = $24;
     ___clang_call_terminate($eh$lpad$body$indexZ2D);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(792,($this|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    ___resumeException($17|0);
    // unreachable;
   }
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   $eh$lpad$body$indexZ2D = $30;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 $8 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vi(792,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __ZN10AP4_StringD2Ev($this);
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($this|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN22AP4_MetaDataStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14848);
 $0 = ((($this)) + 40|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN22AP4_MetaDataStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14848);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN27AP4_3GppLocalizedStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14912);
 $0 = ((($this)) + 40|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN27AP4_3GppLocalizedStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14912);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN17AP4_DcfStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14976);
 $0 = ((($this)) + 36|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN17AP4_DcfStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (14976);
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_DcfdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN27AP4_MetaDataAtomTypeHandlerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (16080);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $item$01$i = $1;
  while(1) {
   $3 = ((($item$01$i)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   __ZdlPv($item$01$i);
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $item$01$i = $4;
   }
  }
 }
 $6 = ((($this)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $item$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (16080);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 } else {
  $item$01$i$i = $1;
 }
 while(1) {
  $3 = ((($item$01$i$i)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($item$01$i$i);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $item$01$i$i = $4;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17120);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17120);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN22AP4_StdcFileByteStream6CreateEP18AP4_FileByteStreamPKcNS0_4ModeERP14AP4_ByteStream($delegator,$name,$mode,$stream) {
 $delegator = $delegator|0;
 $name = $name|0;
 $mode = $mode|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $open_result$0 = 0, $open_result$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$stream>>2] = 0;
 $0 = ($name|0)==(0|0);
 if ($0) {
  $$0 = -3;
  return ($$0|0);
 }
 $1 = (_strcmp($name,17280)|0);
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = HEAP32[_stdin>>2]|0;
   $30 = $3;$43 = 0;$46 = 0;
  } else {
   $4 = (_strcmp($name,17288)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = HEAP32[_stdout>>2]|0;
    $30 = $6;$43 = 0;$46 = 0;
    break;
   }
   $7 = (_strcmp($name,17296)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = HEAP32[_stderr>>2]|0;
    $30 = $9;$43 = 0;$46 = 0;
    break;
   }
   if ((($mode|0) == 1)) {
    $14 = (_fopen(($name|0),(17312|0))|0);
    $15 = $14;
    $16 = ($14|0)==(0|0);
    if ($16) {
     $17 = (___errno_location()|0);
     $47 = $15;$open_result$0$in = $17;
     label = 15;
    } else {
     $22 = $15;
    }
   } else if ((($mode|0) == 2)) {
    $18 = (_fopen(($name|0),(17320|0))|0);
    $19 = $18;
    $20 = ($18|0)==(0|0);
    if ($20) {
     $21 = (___errno_location()|0);
     $47 = $19;$open_result$0$in = $21;
     label = 15;
    } else {
     $22 = $19;
    }
   } else if ((($mode|0) == 0)) {
    $10 = (_fopen(($name|0),(17304|0))|0);
    $11 = $10;
    $12 = ($10|0)==(0|0);
    if ($12) {
     $13 = (___errno_location()|0);
     $47 = $11;$open_result$0$in = $13;
     label = 15;
    } else {
     $22 = $11;
    }
   } else {
    $$0 = -3;
    return ($$0|0);
   }
   do {
    if ((label|0) == 15) {
     $open_result$0 = HEAP32[$open_result$0$in>>2]|0;
     if ((($open_result$0|0) == 2)) {
      $$0 = -4;
      return ($$0|0);
     } else if ((($open_result$0|0) == 13)) {
      $$0 = -5;
      return ($$0|0);
     } else if ((($open_result$0|0) == 0)) {
      $22 = $47;
      break;
     } else {
      $$0 = -6;
      return ($$0|0);
     }
    }
   } while(0);
   $23 = $22;
   $24 = (_fseeko(($23|0),0,2)|0);
   $25 = ($24|0)>(-1);
   if ($25) {
    $26 = (_ftello(($23|0))|0);
    $27 = ($26|0)<(0);
    $28 = $27 << 31 >> 31;
    (_fseeko(($23|0),0,0)|0);
    $30 = $22;$43 = $26;$46 = $28;
   } else {
    $30 = $22;$43 = 0;$46 = 0;
   }
  }
 } while(0);
 $29 = (__Znwj(32)|0);
 $31 = $30;
 HEAP32[$29>>2] = (17184);
 $32 = ((($29)) + 4|0);
 HEAP32[$32>>2] = $delegator;
 $33 = ((($29)) + 8|0);
 HEAP32[$33>>2] = 1;
 $34 = ((($29)) + 12|0);
 HEAP32[$34>>2] = $31;
 $35 = ((($29)) + 16|0);
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = ((($29)) + 24|0);
 $41 = $40;
 $42 = $41;
 HEAP32[$42>>2] = $43;
 $44 = (($41) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $46;
 HEAP32[$stream>>2] = $29;
 $$0 = 0;
 return ($$0|0);
}
function __ZN22AP4_StdcFileByteStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17184);
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = HEAP32[_stdin>>2]|0;
 $4 = ($1|0)==($3|0);
 $or$cond = $2 | $4;
 $5 = HEAP32[_stdout>>2]|0;
 $6 = ($1|0)==($5|0);
 $or$cond3 = $or$cond | $6;
 $7 = HEAP32[_stderr>>2]|0;
 $8 = ($1|0)==($7|0);
 $or$cond5 = $or$cond3 | $8;
 if ($or$cond5) {
  return;
 }
 (_fclose(($1|0))|0);
 return;
}
function __ZN22AP4_StdcFileByteStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17184);
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = HEAP32[_stdin>>2]|0;
 $4 = ($1|0)==($3|0);
 $or$cond$i = $2 | $4;
 $5 = HEAP32[_stdout>>2]|0;
 $6 = ($1|0)==($5|0);
 $or$cond3$i = $or$cond$i | $6;
 $7 = HEAP32[_stderr>>2]|0;
 $8 = ($1|0)==($7|0);
 $or$cond5$i = $or$cond3$i | $8;
 if ($or$cond5$i) {
  __ZdlPv($this);
  return;
 }
 (_fclose(($1|0))|0);
 __ZdlPv($this);
 return;
}
function __ZN22AP4_StdcFileByteStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZN22AP4_StdcFileByteStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  return;
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $10 = HEAP32[$this>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 1023]($this);
  return;
 } else {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($5);
  return;
 }
}
function __ZN22AP4_StdcFileByteStream11ReadPartialEPvjRj($this,$buffer,$bytesToRead,$bytesRead) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytesToRead = $bytesToRead|0;
 $bytesRead = $bytesRead|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fread(($buffer|0),1,($bytesToRead|0),($1|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (_feof(($17|0))|0);
  $19 = ($18|0)==(0);
  HEAP32[$bytesRead>>2] = 0;
  $$ = $19 ? -9 : -7;
  $$0 = $$;
  return ($$0|0);
 } else {
  HEAP32[$bytesRead>>2] = $2;
  $4 = ((($this)) + 16|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_i64Add(($7|0),($10|0),($2|0),0)|0);
  $12 = tempRet0;
  $13 = $4;
  $14 = $13;
  HEAP32[$14>>2] = $11;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN22AP4_StdcFileByteStream12WritePartialEPKvjRj($this,$buffer,$bytesToWrite,$bytesWritten) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytesToWrite = $bytesToWrite|0;
 $bytesWritten = $bytesWritten|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($bytesToWrite|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_fwrite(($buffer|0),1,($bytesToWrite|0),($2|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$bytesWritten>>2] = 0;
  $$0 = -8;
  return ($$0|0);
 } else {
  HEAP32[$bytesWritten>>2] = $3;
  $5 = ((($this)) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_i64Add(($8|0),($11|0),($3|0),0)|0);
  $13 = tempRet0;
  $14 = $5;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN22AP4_StdcFileByteStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($0|0);
 $10 = ($8|0)==($1|0);
 $11 = $9 & $10;
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($this)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_fseeko(($13|0),($0|0),0)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = -1;
  return ($$0|0);
 }
 $16 = $2;
 $17 = $16;
 HEAP32[$17>>2] = $0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function __ZN22AP4_StdcFileByteStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $position;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return 0;
}
function __ZN22AP4_StdcFileByteStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $size;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 return 0;
}
function __ZN22AP4_StdcFileByteStream5FlushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fflush(($1|0))|0);
 $3 = ($2|0)>(0);
 $4 = $3 << 31 >> 31;
 return ($4|0);
}
function __ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($name,$mode,$stream) {
 $name = $name|0;
 $mode = $mode|0;
 $stream = $stream|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN22AP4_StdcFileByteStream6CreateEP18AP4_FileByteStreamPKcNS0_4ModeERP14AP4_ByteStream(0,$name,$mode,$stream)|0);
 return ($0|0);
}
function __ZN12AP4_ElstAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(866,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_ElstAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$$i = 0, $$$i4 = 0, $$pr = 0, $$pre$i = 0, $$pre$i12 = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $$pre$pre$i10 = 0, $$sroa$4 = 0, $$sroa$421 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entry_count = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i8 = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i$i7 = 0, $i$022 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $media_rate = 0, $media_time = 0, $media_time2 = 0, $new_count$0$i = 0, $new_count$0$i5 = 0, $segment_duration = 0;
 var $segment_duration1 = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 24|0;
 $media_rate = sp + 42|0;
 $zero = sp + 40|0;
 $segment_duration = sp + 20|0;
 $media_time = sp + 16|0;
 $$sroa$421 = sp + 34|0;
 $segment_duration1 = sp + 8|0;
 $media_time2 = sp;
 $$sroa$4 = sp + 28|0;
 __ZN8AP4_AtomC2Ejjhj($this,1701606260,$size,$version,$flags);
 HEAP32[$this>>2] = (17336);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (17432);
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = HEAP32[$entry_count>>2]|0;
   $7 = HEAP32[$1>>2]|0;
   $8 = ($7>>>0)<($6>>>0);
   if ($8) {
    $9 = ($6*24)|0;
    __THREW__ = 0;
    $10 = (invoke_ii(752,($9|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    }
    $13 = ($10|0)==(0|0);
    if (!($13)) {
     $14 = HEAP32[$2>>2]|0;
     $15 = ($14|0)==(0);
     if (!($15)) {
      $16 = HEAP32[$3>>2]|0;
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $i$01$i = 0;
       while(1) {
        $18 = (($10) + (($i$01$i*24)|0)|0);
        $19 = (($16) + (($i$01$i*24)|0)|0);
        ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[$19+12>>2]|0;HEAP32[$18+16>>2]=HEAP32[$19+16>>2]|0;HEAP32[$18+20>>2]=HEAP32[$19+20>>2]|0;
        $20 = (($i$01$i) + 1)|0;
        $exitcond = ($20|0)==($14|0);
        if ($exitcond) {
         break;
        } else {
         $i$01$i = $20;
        }
       }
       __ZdlPv($16);
      }
     }
     HEAP32[$3>>2] = $10;
     HEAP32[$1>>2] = $6;
    }
    $$pr = HEAP32[$entry_count>>2]|0;
    $21 = $$pr;
   } else {
    $21 = $6;
   }
   $22 = ($21|0)==(0);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = ($version<<24>>24)==(0);
   $i$022 = 0;
   L19: while(1) {
    __THREW__ = 0;
    do {
     if ($23) {
      (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$segment_duration)|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($media_time|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($media_rate|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($zero|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       break L19;
      }
      $32 = HEAP32[$segment_duration>>2]|0;
      $33 = HEAP32[$media_time>>2]|0;
      $34 = HEAP16[$media_rate>>1]|0;
      $35 = HEAP32[$1>>2]|0;
      $36 = HEAP32[$2>>2]|0;
      $37 = (($36) + 1)|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       $39 = ($35|0)==(0);
       $40 = $35 << 1;
       $$$i4 = $39 ? 64 : $40;
       $41 = ($$$i4>>>0)<($37>>>0);
       $new_count$0$i5 = $41 ? $37 : $$$i4;
       $42 = ($35>>>0)<($new_count$0$i5>>>0);
       if ($42) {
        $43 = ($new_count$0$i5*24)|0;
        __THREW__ = 0;
        $44 = (invoke_ii(752,($43|0))|0);
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if ($46) {
         break L19;
        }
        $47 = ($44|0)==(0|0);
        if ($47) {
         break;
        }
        $48 = HEAP32[$2>>2]|0;
        $49 = ($48|0)==(0);
        if ($49) {
         $$pre$i12 = 0;
        } else {
         $50 = HEAP32[$3>>2]|0;
         $51 = ($50|0)==(0|0);
         if ($51) {
          $$pre$i12 = $48;
         } else {
          $i$01$i$i7 = 0;
          while(1) {
           $52 = (($44) + (($i$01$i$i7*24)|0)|0);
           $53 = (($50) + (($i$01$i$i7*24)|0)|0);
           ;HEAP32[$52>>2]=HEAP32[$53>>2]|0;HEAP32[$52+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$52+12>>2]=HEAP32[$53+12>>2]|0;HEAP32[$52+16>>2]=HEAP32[$53+16>>2]|0;HEAP32[$52+20>>2]=HEAP32[$53+20>>2]|0;
           $54 = (($i$01$i$i7) + 1)|0;
           $exitcond$i8 = ($54|0)==($48|0);
           if ($exitcond$i8) {
            break;
           } else {
            $i$01$i$i7 = $54;
           }
          }
          __ZdlPv($50);
          $$pre$pre$i10 = HEAP32[$2>>2]|0;
          $$pre$i12 = $$pre$pre$i10;
         }
        }
        HEAP32[$3>>2] = $44;
        HEAP32[$1>>2] = $new_count$0$i5;
        $56 = $$pre$i12;
       } else {
        $56 = $36;
       }
      } else {
       $56 = $36;
      }
      $55 = (($56) + 1)|0;
      HEAP32[$2>>2] = $55;
      $57 = HEAP32[$3>>2]|0;
      $58 = (($57) + (($56*24)|0)|0);
      $59 = $58;
      $60 = $59;
      HEAP32[$60>>2] = $32;
      $61 = (($59) + 4)|0;
      $62 = $61;
      HEAP32[$62>>2] = 0;
      $63 = (((($57) + (($56*24)|0)|0)) + 8|0);
      $64 = $63;
      $65 = $64;
      HEAP32[$65>>2] = $33;
      $66 = (($64) + 4)|0;
      $67 = $66;
      HEAP32[$67>>2] = 0;
      $68 = (((($57) + (($56*24)|0)|0)) + 16|0);
      HEAP16[$68>>1] = $34;
      $69 = (((($57) + (($56*24)|0)|0)) + 18|0);
      ;HEAP16[$69>>1]=HEAP16[$$sroa$421>>1]|0;HEAP16[$69+2>>1]=HEAP16[$$sroa$421+2>>1]|0;HEAP16[$69+4>>1]=HEAP16[$$sroa$421+4>>1]|0;
     } else {
      (__ZN14AP4_ByteStream8ReadUI64ERy($stream,$segment_duration1)|0);
      $70 = __THREW__; __THREW__ = 0;
      $71 = $70&1;
      if ($71) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(840,($stream|0),($media_time2|0))|0);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($media_rate|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       break L19;
      }
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($zero|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       break L19;
      }
      $78 = $segment_duration1;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = $media_time2;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = (($84) + 4)|0;
      $88 = $87;
      $89 = HEAP32[$88>>2]|0;
      $90 = HEAP16[$media_rate>>1]|0;
      $91 = HEAP32[$1>>2]|0;
      $92 = HEAP32[$2>>2]|0;
      $93 = (($92) + 1)|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       $95 = ($91|0)==(0);
       $96 = $91 << 1;
       $$$i = $95 ? 64 : $96;
       $97 = ($$$i>>>0)<($93>>>0);
       $new_count$0$i = $97 ? $93 : $$$i;
       $98 = ($91>>>0)<($new_count$0$i>>>0);
       if ($98) {
        $99 = ($new_count$0$i*24)|0;
        __THREW__ = 0;
        $100 = (invoke_ii(752,($99|0))|0);
        $101 = __THREW__; __THREW__ = 0;
        $102 = $101&1;
        if ($102) {
         break L19;
        }
        $103 = ($100|0)==(0|0);
        if ($103) {
         break;
        }
        $104 = HEAP32[$2>>2]|0;
        $105 = ($104|0)==(0);
        if ($105) {
         $$pre$i = 0;
        } else {
         $106 = HEAP32[$3>>2]|0;
         $107 = ($106|0)==(0|0);
         if ($107) {
          $$pre$i = $104;
         } else {
          $i$01$i$i = 0;
          while(1) {
           $108 = (($100) + (($i$01$i$i*24)|0)|0);
           $109 = (($106) + (($i$01$i$i*24)|0)|0);
           ;HEAP32[$108>>2]=HEAP32[$109>>2]|0;HEAP32[$108+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$109+8>>2]|0;HEAP32[$108+12>>2]=HEAP32[$109+12>>2]|0;HEAP32[$108+16>>2]=HEAP32[$109+16>>2]|0;HEAP32[$108+20>>2]=HEAP32[$109+20>>2]|0;
           $110 = (($i$01$i$i) + 1)|0;
           $exitcond$i = ($110|0)==($104|0);
           if ($exitcond$i) {
            break;
           } else {
            $i$01$i$i = $110;
           }
          }
          __ZdlPv($106);
          $$pre$pre$i = HEAP32[$2>>2]|0;
          $$pre$i = $$pre$pre$i;
         }
        }
        HEAP32[$3>>2] = $100;
        HEAP32[$1>>2] = $new_count$0$i;
        $112 = $$pre$i;
       } else {
        $112 = $92;
       }
      } else {
       $112 = $92;
      }
      $111 = (($112) + 1)|0;
      HEAP32[$2>>2] = $111;
      $113 = HEAP32[$3>>2]|0;
      $114 = (($113) + (($112*24)|0)|0);
      $115 = $114;
      $116 = $115;
      HEAP32[$116>>2] = $80;
      $117 = (($115) + 4)|0;
      $118 = $117;
      HEAP32[$118>>2] = $83;
      $119 = (((($113) + (($112*24)|0)|0)) + 8|0);
      $120 = $119;
      $121 = $120;
      HEAP32[$121>>2] = $86;
      $122 = (($120) + 4)|0;
      $123 = $122;
      HEAP32[$123>>2] = $89;
      $124 = (((($113) + (($112*24)|0)|0)) + 16|0);
      HEAP16[$124>>1] = $90;
      $125 = (((($113) + (($112*24)|0)|0)) + 18|0);
      ;HEAP16[$125>>1]=HEAP16[$$sroa$4>>1]|0;HEAP16[$125+2>>1]=HEAP16[$$sroa$4+2>>1]|0;HEAP16[$125+4>>1]=HEAP16[$$sroa$4+4>>1]|0;
     }
    } while(0);
    $126 = (($i$022) + 1)|0;
    $127 = HEAP32[$entry_count>>2]|0;
    $128 = ($126>>>0)<($127>>>0);
    if ($128) {
     $i$022 = $126;
    } else {
     label = 43;
     break;
    }
   }
   if ((label|0) == 43) {
    STACKTOP = sp;return;
   }
   $129 = ___cxa_find_matching_catch()|0;
   $130 = tempRet0;
   $$pre$phiZ2D = $3;$lpad$phi$index = $129;$lpad$phi$index2 = $130;
   HEAP32[$0>>2] = (17432);
   HEAP32[$2>>2] = 0;
   $133 = HEAP32[$$pre$phiZ2D>>2]|0;
   __ZdlPv($133);
   ___resumeException($lpad$phi$index|0);
   // unreachable;
  }
 } while(0);
 $131 = ___cxa_find_matching_catch()|0;
 $132 = tempRet0;
 $$pre$phiZ2D = $3;$lpad$phi$index = $131;$lpad$phi$index2 = $132;
 HEAP32[$0>>2] = (17432);
 HEAP32[$2>>2] = 0;
 $133 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZdlPv($133);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_ElstAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($this)) + 25|0);
 $7 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  $11 = HEAP8[$6>>0]|0;
  $12 = ($11<<24>>24)==(0);
  $13 = HEAP32[$7>>2]|0;
  $14 = (($13) + (($i$01*24)|0)|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  if ($12) {
   $21 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $$0 = $21;
    label = 12;
    break;
   }
   $23 = HEAP32[$7>>2]|0;
   $24 = (((($23) + (($i$01*24)|0)|0)) + 8|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$27)|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    $$0 = $31;
    label = 12;
    break;
   }
  } else {
   $33 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$17,$20)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    $$0 = $33;
    label = 12;
    break;
   }
   $35 = HEAP32[$7>>2]|0;
   $36 = (((($35) + (($i$01*24)|0)|0)) + 8|0);
   $37 = $36;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$39,$42)|0);
   $44 = ($43|0)==(0);
   if (!($44)) {
    $$0 = $43;
    label = 12;
    break;
   }
  }
  $45 = HEAP32[$7>>2]|0;
  $46 = (((($45) + (($i$01*24)|0)|0)) + 16|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$47)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   $$0 = $48;
   label = 12;
   break;
  }
  $50 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,0)|0);
  $51 = ($50|0)==(0);
  $9 = (($i$01) + 1)|0;
  if (!($51)) {
   $$0 = $50;
   label = 12;
   break;
  }
  $8 = HEAP32[$0>>2]|0;
  $10 = ($9>>>0)<($8>>>0);
  if ($10) {
   $i$01 = $9;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_ElstAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,21048,$4,0,0);
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return 0;
 }
 $7 = ((($this)) + 48|0);
 $i$01 = 0;
 while(1) {
  $8 = HEAP32[$inspector>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$7>>2]|0;
  $12 = (($11) + (($i$01*24)|0)|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,17440,$15,0,0);
  $19 = HEAP32[$inspector>>2]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = (((($22) + (($i$01*24)|0)|0)) + 8|0);
  $24 = $23;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_bitshift64Ashr(0,($26|0),32)|0);
  $31 = tempRet0;
  FUNCTION_TABLE_viiiii[$21 & 1023]($inspector,17464,$30,$31,0);
  $32 = HEAP32[$inspector>>2]|0;
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$7>>2]|0;
  $36 = (((($35) + (($i$01*24)|0)|0)) + 16|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  FUNCTION_TABLE_viiiii[$34 & 1023]($inspector,17488,$38,0,0);
  $39 = (($i$01) + 1)|0;
  $40 = HEAP32[$3>>2]|0;
  $41 = ($39>>>0)<($40>>>0);
  if ($41) {
   $i$01 = $39;
  } else {
   break;
  }
 }
 return 0;
}
function __ZN12AP4_ElstAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17336);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (17432);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_ElstAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17336);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (17432);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17432);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17432);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN33AP4_DecoderSpecificInfoDescriptorC2ERK14AP4_DataBuffer($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_Expandable13MinHeaderSizeEj($1)|0);
 $3 = HEAP32[$0>>2]|0;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,5,0,$2,$3);
 HEAP32[$this>>2] = (17560);
 $4 = ((($this)) + 20|0);
 __ZN14AP4_DataBufferC2ERKS_($4,$data);
 return;
}
function __ZN33AP4_DecoderSpecificInfoDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,5,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (17560);
 $0 = ((($this)) + 20|0);
 __THREW__ = 0;
 invoke_vi(837,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $$0 = $10;$$01 = $9;
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(757,($0|0),($payload_size|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ((($this)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiii(788,($stream|0),($6|0),($payload_size|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   return;
  }
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  $$0 = $12;$$01 = $11;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17560);
 $0 = ((($this)) + 20|0);
 __ZN14AP4_DataBufferD2Ev($0);
 return;
}
function __ZN33AP4_DecoderSpecificInfoDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17560);
 $0 = ((($this)) + 20|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return 0;
 }
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return 0;
 }
 $6 = ((($this)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$7,$4)|0);
 return 0;
}
function __ZN33AP4_DecoderSpecificInfoDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1*3)|0;
 $3 = (($2) + 1)|0;
 $4 = (__Znaj($3)|0);
 $5 = ($1|0)==(0);
 if ($5) {
  $$lcssa = 0;
 } else {
  $6 = ((($this)) + 28|0);
  $i$01 = 0;
  while(1) {
   $7 = ($i$01*3)|0;
   $8 = (($4) + ($7)|0);
   $9 = HEAP32[$6>>2]|0;
   $10 = (($9) + ($i$01)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   HEAP32[$vararg_buffer>>2] = $12;
   (_snprintf($8,4,17640,$vararg_buffer)|0);
   $13 = (($i$01) + 1)|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = ($13>>>0)<($14>>>0);
   if ($15) {
    $i$01 = $13;
   } else {
    $$lcssa6 = $14;
    break;
   }
  }
  $phitmp = ($$lcssa6*3)|0;
  $$lcssa = $phitmp;
 }
 $16 = (($4) + ($$lcssa)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP32[$inspector>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiii[$19 & 1023]($inspector,17648,$4,0);
 __ZdaPv($4);
 STACKTOP = sp;return 0;
}
function __ZNK33AP4_DecoderSpecificInfoDescriptor22GetDecoderSpecificInfoEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 return ($0|0);
}
function __ZN12AP4_MdhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(80)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(867,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_MdhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $creation_time = 0, $duration = 0, $lang = 0, $lang_str = 0, $modification_time = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 8|0;
 $modification_time = sp + 4|0;
 $duration = sp;
 $lang = sp + 16|0;
 $lang_str = sp + 12|0;
 __ZN8AP4_AtomC2Ejjhj($this,1835296868,$size,$version,$flags);
 HEAP32[$this>>2] = (17680);
 $0 = ((($this)) + 72|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $$0 = $33;$$04 = $34;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = ((($this)) + 25|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($creation_time|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   $8 = HEAP32[$creation_time>>2]|0;
   $9 = ((($this)) + 40|0);
   $10 = $9;
   $11 = $10;
   HEAP32[$11>>2] = $8;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = 0;
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($modification_time|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = HEAP32[$modification_time>>2]|0;
    $17 = ((($this)) + 48|0);
    $18 = $17;
    $19 = $18;
    HEAP32[$19>>2] = $16;
    $20 = (($18) + 4)|0;
    $21 = $20;
    HEAP32[$21>>2] = 0;
    $22 = ((($this)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($22|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($duration|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      $27 = HEAP32[$duration>>2]|0;
      $28 = ((($this)) + 64|0);
      $29 = $28;
      $30 = $29;
      HEAP32[$30>>2] = $27;
      $31 = (($29) + 4)|0;
      $32 = $31;
      HEAP32[$32>>2] = 0;
      label = 14;
     }
    }
   }
  }
 } else {
  $39 = ((($this)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(840,($stream|0),($39|0))|0);
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if (!($41)) {
   $42 = ((($this)) + 48|0);
   __THREW__ = 0;
   (invoke_iii(840,($stream|0),($42|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    $45 = ((($this)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($45|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $48 = ((($this)) + 64|0);
     __THREW__ = 0;
     (invoke_iii(840,($stream|0),($48|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if (!($50)) {
      label = 14;
     }
    }
   }
  }
 }
 do {
  if ((label|0) == 14) {
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($lang|0),2)|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    $53 = HEAP8[$lang>>0]|0;
    $54 = $53&255;
    $55 = $54 >>> 2;
    $56 = $55 & 31;
    $57 = $54 << 3;
    $58 = $57 & 24;
    $59 = ((($lang)) + 1|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    $62 = $61 >>> 5;
    $63 = $58 | $62;
    $64 = $61 & 31;
    $65 = ($56|0)!=(0);
    $66 = ($63|0)!=(0);
    $or$cond = $65 & $66;
    $67 = ($64|0)!=(0);
    $or$cond3 = $67 & $or$cond;
    if ($or$cond3) {
     $68 = $55 | 96;
     $69 = $68&255;
     HEAP8[$lang_str>>0] = $69;
     $70 = ((($lang_str)) + 1|0);
     $71 = $63 | 96;
     $72 = $71&255;
     HEAP8[$70>>0] = $72;
     $73 = ((($lang_str)) + 2|0);
     $74 = $64 | 96;
     $75 = $74&255;
     HEAP8[$73>>0] = $75;
     __THREW__ = 0;
     invoke_viii(758,($0|0),($lang_str|0),3);
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if ($77) {
      break;
     }
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viii(758,($0|0),(17768|0),3);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      break;
     }
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $35 = ___cxa_find_matching_catch()|0;
 $36 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $80 = ___cxa_find_matching_catch(0|0)|0;
  $81 = tempRet0;
  ___clang_call_terminate($80);
  // unreachable;
 } else {
  $$0 = $35;$$04 = $36;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN12AP4_MdhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 if ($2) {
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$6)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
  $12 = ((($this)) + 48|0);
  $13 = $12;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = $19;
   return ($$0|0);
  }
  $21 = ((($this)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$22)|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $$0 = $23;
   return ($$0|0);
  }
  $25 = ((($this)) + 64|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$28)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   $$0 = $32;
   return ($$0|0);
  }
 } else {
  $34 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$6,$9)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $34;
   return ($$0|0);
  }
  $36 = ((($this)) + 48|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$39,$42)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   $$0 = $43;
   return ($$0|0);
  }
  $45 = ((($this)) + 56|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$46)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = $47;
   return ($$0|0);
  }
  $49 = ((($this)) + 64|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$52,$55)|0);
  $57 = ($56|0)==(0);
  if (!($57)) {
   $$0 = $56;
   return ($$0|0);
  }
 }
 $58 = ((($this)) + 72|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ((($59)) + 1|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (($64) + 160)|0;
 $66 = ((($59)) + 2|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $61 << 2;
 $69 = (($68) + 128)|0;
 $70 = $65 >>> 3;
 $71 = $70 & 31;
 $72 = $71 | $69;
 $73 = $72&255;
 $74 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$73)|0);
 $75 = ($74|0)==(0);
 if (!($75)) {
  $$0 = $74;
  return ($$0|0);
 }
 $76 = $67&255;
 $77 = (($76) + 160)|0;
 $78 = $65 << 5;
 $79 = $78 | $77;
 $80 = $79&255;
 $81 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$80)|0);
 $82 = ($81|0)==(0);
 if (!($82)) {
  $$0 = $81;
  return ($$0|0);
 }
 $83 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,0)|0);
 $$0 = $83;
 return ($$0|0);
}
function __ZN12AP4_MdhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24720,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 64|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,17776,$11,$14,0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $8;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = (__Z23AP4_DurationMsFromUnitsyj($20,$23,$24)|0);
 FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,17792,$25,0,0);
 $26 = HEAP32[$inspector>>2]|0;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($this)) + 72|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_viiii[$28 & 1023]($inspector,17808,$30,0);
 return 0;
}
function __ZN12AP4_MdhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17680);
 $0 = ((($this)) + 72|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN12AP4_MdhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (17680);
 $0 = ((($this)) + 72|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_TrakAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($this,1953653099,$size,0,0,$stream,$atom_factory);
 HEAP32[$this>>2] = (17832);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (17908);
 __THREW__ = 0;
 $1 = (invoke_iiiii(27,($0|0),(17952|0),0,0)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($1|0)==(0|0);
  if ($4) {
   $11 = 0;
  } else {
   $5 = (___dynamic_cast($1,11216,12008,0)|0);
   $11 = $5;
  }
  $10 = ((($this)) + 56|0);
  HEAP32[$10>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  $15 = (invoke_iiiii($14|0,($0|0),(17960|0),0,0)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = ($15|0)==(0|0);
   if ($18) {
    $21 = 0;
    $20 = ((($this)) + 60|0);
    HEAP32[$20>>2] = $21;
    return;
   }
   $19 = (___dynamic_cast($15,11216,17752,0)|0);
   $21 = $19;
   $20 = ((($this)) + 60|0);
   HEAP32[$20>>2] = $21;
   return;
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  ___resumeException($6|0);
  // unreachable;
 }
}
function __ZN12AP4_TrakAtom5GetIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = 0;
  return ($5|0);
 }
 $3 = ((($1)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 return ($5|0);
}
function __ZN12AP4_TrakAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_TrakAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N12AP4_TrakAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN12AP4_UuidAtomC2EyPKhhj($this,$0,$1,$uuid,$version,$flags) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $uuid = $uuid|0;
 $version = $version|0;
 $flags = $flags|0;
 var $2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejybhj($this,1970628964,$0,$1,0,$version,$flags);
 HEAP32[$this>>2] = (17984);
 $2 = ((($this)) + 36|0);
 dest=$2; src=$uuid; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZNK12AP4_UuidAtom13GetHeaderSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ? 28 : 24;
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 $7 = $6 ? 8 : 0;
 $8 = (($7) + ($3))|0;
 return ($8|0);
}
function __ZN12AP4_UuidAtom11WriteHeaderER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  $10 = ((($this)) + 16|0);
  $11 = $10;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$13,$16)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $$0 = $17;
   return ($$0|0);
  }
 }
 $19 = ((($this)) + 36|0);
 $20 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$19,16)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  return ($$0|0);
 }
 $22 = ((($this)) + 24|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = ((($this)) + 25|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$26)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = $27;
   return ($$0|0);
  }
  $29 = ((($this)) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$30)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_UuidAtom13InspectHeaderER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst$07 = 0, $dst$1 = 0, $exitcond = 0;
 var $i$06 = 0, $uuid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uuid = sp;
 $0 = ((($uuid)) + 36|0);
 HEAP8[$0>>0] = 0;
 $dst$07 = $uuid;$i$06 = 0;
 while(1) {
  $1 = (((($this)) + 36|0) + ($i$06)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $3 >>> 4;
  $5 = (__Z13AP4_NibbleHexj($4)|0);
  $6 = ((($dst$07)) + 1|0);
  HEAP8[$dst$07>>0] = $5;
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  $9 = $8 & 15;
  $10 = (__Z13AP4_NibbleHexj($9)|0);
  $11 = ((($dst$07)) + 2|0);
  HEAP8[$6>>0] = $10;
  if ((($i$06|0) == 5) | (($i$06|0) == 7) | (($i$06|0) == 9) | (($i$06|0) == 11)) {
   $12 = ((($dst$07)) + 3|0);
   HEAP8[$11>>0] = 45;
   $dst$1 = $12;
  } else {
   $dst$1 = $11;
  }
  $13 = (($i$06) + 1)|0;
  $exitcond = ($13|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $dst$07 = $dst$1;$i$06 = $13;
  }
 }
 $14 = HEAP32[$inspector>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($this)) + 25|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ((($this)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$this>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1023]($this)|0);
 $25 = ((($this)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = ((($this)) + 16|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $31;$36 = $34;
  FUNCTION_TABLE_viiiiiii[$16 & 1023]($inspector,$uuid,$18,$20,$24,$35,$36);
  STACKTOP = sp;return 0;
 } else {
  $35 = $26;$36 = 0;
  FUNCTION_TABLE_viiiiiii[$16 & 1023]($inspector,$uuid,$18,$20,$24,$35,$36);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN19AP4_UnknownUuidAtomC2EyPKhR14AP4_ByteStream($this,$0,$1,$uuid,$stream) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $uuid = $uuid|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejyb($this,1970628964,$0,$1,0);
 HEAP32[$this>>2] = (17984);
 $2 = ((($this)) + 36|0);
 dest=$2; src=$uuid; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$this>>2] = (18048);
 $3 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(837,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $$0 = $22;$$01 = $21;
  ___resumeException($$01|0);
  // unreachable;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_ii($8|0,($this|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = (($0) - ($9))|0;
  __THREW__ = 0;
  (invoke_iii(757,($3|0),($12|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($this)) + 60|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($this)) + 68|0);
   $18 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($16|0),($18|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    return;
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($3|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  $$0 = $24;$$01 = $23;
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN19AP4_UnknownUuidAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 return ($4|0);
}
function __ZN12AP4_UuidAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN19AP4_UnknownUuidAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18048);
 $0 = ((($this)) + 52|0);
 __ZN14AP4_DataBufferD2Ev($0);
 return;
}
function __ZN19AP4_UnknownUuidAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18048);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_Stz2Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(868,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_Stz2AtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond11 = 0;
 var $exitcond12 = 0, $i$01$i$i = 0, $i$06 = 0, $i1$07 = 0, $i2$09 = 0, $reserved = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $reserved = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1937013298,$size,$version,$flags);
 HEAP32[$this>>2] = (18184);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(786,($stream|0),($reserved|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($reserved|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($reserved|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     $10 = ((($this)) + 36|0);
     __THREW__ = 0;
     (invoke_iii(786,($stream|0),($10|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      $13 = ((($this)) + 40|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($13|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       $16 = HEAP8[$10>>0]|0;
       if (!((($16<<24>>24) == 16) | (($16<<24>>24) == 8) | (($16<<24>>24) == 4))) {
        STACKTOP = sp;return;
       }
       $17 = HEAP32[$13>>2]|0;
       $18 = HEAP32[$2>>2]|0;
       $19 = ($18|0)==($17|0);
       do {
        if (!($19)) {
         $20 = ($18>>>0)>($17>>>0);
         if ($20) {
          HEAP32[$2>>2] = $17;
          break;
         }
         $21 = HEAP32[$1>>2]|0;
         $22 = ($21>>>0)<($17>>>0);
         if ($22) {
          $23 = $17 << 2;
          __THREW__ = 0;
          $24 = (invoke_ii(752,($23|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if ($26) {
           break L1;
          }
          $27 = ($24|0)==(0|0);
          if ($27) {
           break;
          }
          $28 = HEAP32[$2>>2]|0;
          $29 = ($28|0)==(0);
          if ($29) {
           $$pre$i = 0;
          } else {
           $30 = HEAP32[$3>>2]|0;
           $31 = ($30|0)==(0|0);
           if ($31) {
            $$pre$i = $28;
           } else {
            $i$01$i$i = 0;
            while(1) {
             $32 = (($24) + ($i$01$i$i<<2)|0);
             $33 = (($30) + ($i$01$i$i<<2)|0);
             $34 = HEAP32[$33>>2]|0;
             HEAP32[$32>>2] = $34;
             $35 = (($i$01$i$i) + 1)|0;
             $exitcond$i = ($35|0)==($28|0);
             if ($exitcond$i) {
              break;
             } else {
              $i$01$i$i = $35;
             }
            }
            __ZdlPv($30);
            $$pre$pre$i = HEAP32[$2>>2]|0;
            $$pre$i = $$pre$pre$i;
           }
          }
          HEAP32[$3>>2] = $24;
          HEAP32[$1>>2] = $17;
          $37 = $$pre$i;
         } else {
          $37 = $18;
         }
         $36 = ($17>>>0)>($37>>>0);
         if ($36) {
          $38 = HEAP32[$3>>2]|0;
          $scevgep$i = (($38) + ($37<<2)|0);
          $39 = (($17) - ($37))|0;
          $40 = $39 << 2;
          _memset(($scevgep$i|0),0,($40|0))|0;
         }
         HEAP32[$2>>2] = $17;
        }
       } while(0);
       $41 = HEAP8[$10>>0]|0;
       $42 = $41&255;
       $43 = Math_imul($42, $17)|0;
       $44 = (($43) + 7)|0;
       $45 = $44 >>> 3;
       $46 = (($45) + 8)|0;
       $47 = ($46>>>0)>($size>>>0);
       if ($47) {
        STACKTOP = sp;return;
       }
       __THREW__ = 0;
       $48 = (invoke_ii(787,($45|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if (!($50)) {
        __THREW__ = 0;
        $51 = (invoke_iiii(788,($stream|0),($48|0),($45|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if (!($53)) {
         $54 = ($51|0)==(0);
         if (!($54)) {
          __ZdaPv($48);
          STACKTOP = sp;return;
         }
         $55 = HEAP8[$10>>0]|0;
         $56 = $55&255;
         if ((($56|0) == 16)) {
          $57 = ($17|0)==(0);
          if (!($57)) {
           $58 = HEAP32[$3>>2]|0;
           $i2$09 = 0;
           while(1) {
            $80 = $i2$09 << 1;
            $81 = (($48) + ($80)|0);
            $82 = HEAP8[$81>>0]|0;
            $83 = $82&255;
            $84 = $83 << 8;
            $$sum1 = $80 | 1;
            $85 = (($48) + ($$sum1)|0);
            $86 = HEAP8[$85>>0]|0;
            $87 = $86&255;
            $88 = $84 | $87;
            $89 = (($58) + ($i2$09<<2)|0);
            HEAP32[$89>>2] = $88;
            $90 = (($i2$09) + 1)|0;
            $exitcond12 = ($90|0)==($17|0);
            if ($exitcond12) {
             break;
            } else {
             $i2$09 = $90;
            }
           }
          }
         } else if ((($56|0) == 8)) {
          $59 = ($17|0)==(0);
          if (!($59)) {
           $60 = HEAP32[$3>>2]|0;
           $i1$07 = 0;
           while(1) {
            $75 = (($48) + ($i1$07)|0);
            $76 = HEAP8[$75>>0]|0;
            $77 = $76&255;
            $78 = (($60) + ($i1$07<<2)|0);
            HEAP32[$78>>2] = $77;
            $79 = (($i1$07) + 1)|0;
            $exitcond11 = ($79|0)==($17|0);
            if ($exitcond11) {
             break;
            } else {
             $i1$07 = $79;
            }
           }
          }
         } else if ((($56|0) == 4)) {
          $61 = ($17|0)==(0);
          if (!($61)) {
           $i$06 = 0;
           while(1) {
            $62 = $i$06 & 1;
            $63 = ($62|0)==(0);
            $64 = $i$06 >>> 1;
            $65 = (($48) + ($64)|0);
            $66 = HEAP8[$65>>0]|0;
            $67 = $66&255;
            if ($63) {
             $68 = $67 >>> 4;
             $69 = HEAP32[$3>>2]|0;
             $70 = (($69) + ($i$06<<2)|0);
             HEAP32[$70>>2] = $68;
            } else {
             $71 = $67 & 15;
             $72 = HEAP32[$3>>2]|0;
             $73 = (($72) + ($i$06<<2)|0);
             HEAP32[$73>>2] = $71;
            }
            $74 = (($i$06) + 1)|0;
            $exitcond = ($74|0)==($17|0);
            if ($exitcond) {
             break;
            } else {
             $i$06 = $74;
            }
           }
          }
         }
         __ZdaPv($48);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 HEAP32[$0>>2] = (2152);
 HEAP32[$2>>2] = 0;
 $93 = HEAP32[$3>>2]|0;
 __ZdlPv($93);
 ___resumeException($91|0);
 // unreachable;
}
function __ZN12AP4_Stz2Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $i1$010 = 0, $i2$015 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 36|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($this)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = HEAP8[$6>>0]|0;
 $15 = $14&255;
 if ((($15|0) == 8)) {
  $19 = ((($this)) + 56|0);
  $20 = HEAP32[$10>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $i1$010 = 0;
  }
  while(1) {
   $47 = HEAP32[$19>>2]|0;
   $48 = (($47) + ($i1$010<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49&255;
   $51 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$50)|0);
   $52 = ($51|0)==(0);
   $45 = (($i1$010) + 1)|0;
   if (!($52)) {
    $$0 = $51;
    label = 20;
    break;
   }
   $44 = HEAP32[$10>>2]|0;
   $46 = ($45>>>0)<($44>>>0);
   if ($46) {
    $i1$010 = $45;
   } else {
    $$0 = 0;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   return ($$0|0);
  }
 } else if ((($15|0) == 16)) {
  $16 = ((($this)) + 56|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $i2$015 = 0;
  }
  while(1) {
   $56 = HEAP32[$16>>2]|0;
   $57 = (($56) + ($i2$015<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58&65535;
   $60 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$59)|0);
   $61 = ($60|0)==(0);
   $54 = (($i2$015) + 1)|0;
   if (!($61)) {
    $$0 = $60;
    label = 20;
    break;
   }
   $53 = HEAP32[$10>>2]|0;
   $55 = ($54>>>0)<($53>>>0);
   if ($55) {
    $i2$015 = $54;
   } else {
    $$0 = 0;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   return ($$0|0);
  }
 } else if ((($15|0) == 4)) {
  $22 = HEAP32[$10>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
  $24 = ((($this)) + 56|0);
  $30 = $22;$i$07 = 0;
  while(1) {
   $28 = $i$07 | 1;
   $29 = ($28>>>0)<($30>>>0);
   $31 = HEAP32[$24>>2]|0;
   $32 = (($31) + ($i$07<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 << 4;
   if ($29) {
    $35 = (($31) + ($28<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 & 15;
    $38 = $37 | $34;
    $39 = $38&255;
    $40 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$39)|0);
    $result$1 = $40;
   } else {
    $41 = $34&255;
    $42 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$41)|0);
    $result$1 = $42;
   }
   $43 = ($result$1|0)==(0);
   $26 = (($i$07) + 2)|0;
   if (!($43)) {
    $$0 = $result$1;
    label = 20;
    break;
   }
   $25 = HEAP32[$10>>2]|0;
   $27 = ($26>>>0)<($25>>>0);
   if ($27) {
    $30 = $25;$i$07 = $26;
   } else {
    $$0 = 0;
    label = 20;
    break;
   }
  }
  if ((label|0) == 20) {
   return ($$0|0);
  }
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_Stz2Atom14GetSampleCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12AP4_Stz2Atom13GetSampleSizeEjRj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sample) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  $4 = ((($this)) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = 0;$storemerge = $7;
 } else {
  $$0 = -12;$storemerge = 0;
 }
 HEAP32[$sample_size>>2] = $storemerge;
 return ($$0|0);
}
function __ZN12AP4_Stz2Atom13SetSampleSizeEjj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sample) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $$0 = -12;
  return ($$0|0);
 }
 $4 = ((($this)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $sample_size;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_Stz2Atom8AddEntryEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $exitcond$i = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$$i = $6 ? 64 : $7;
  $8 = ($$$i>>>0)<($4>>>0);
  $new_count$0$i = $8 ? $4 : $$$i;
  $9 = ($1>>>0)<($new_count$0$i>>>0);
  if ($9) {
   $10 = $new_count$0$i << 2;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)==(0);
    $$pre$i$i = ((($this)) + 56|0);
    if ($14) {
     $$pre$i = 0;
    } else {
     $15 = HEAP32[$$pre$i$i>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $$pre$i = $13;
     } else {
      $i$01$i$i = 0;
      while(1) {
       $17 = (($11) + ($i$01$i$i<<2)|0);
       $18 = (($15) + ($i$01$i$i<<2)|0);
       $19 = HEAP32[$18>>2]|0;
       HEAP32[$17>>2] = $19;
       $20 = (($i$01$i$i) + 1)|0;
       $exitcond$i = ($20|0)==($13|0);
       if ($exitcond$i) {
        break;
       } else {
        $i$01$i$i = $20;
       }
      }
      __ZdlPv($15);
      $$pre$pre$i = HEAP32[$2>>2]|0;
      $$pre$i = $$pre$pre$i;
     }
    }
    HEAP32[$$pre$i$i>>2] = $11;
    HEAP32[$0>>2] = $new_count$0$i;
    $22 = $$pre$i;
    label = 9;
   }
  } else {
   $22 = $3;
   label = 9;
  }
 } else {
  $22 = $3;
  label = 9;
 }
 if ((label|0) == 9) {
  $21 = (($22) + 1)|0;
  HEAP32[$2>>2] = $21;
  $23 = ((($this)) + 56|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($22<<2)|0);
  HEAP32[$25>>2] = $size;
 }
 $26 = ((($this)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($this)) + 36|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(4);
 if (!($31)) {
  $div = ($30&255) >>> 3;
  $37 = $div&255;
  $38 = ((($this)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($37))|0;
  HEAP32[$38>>2] = $40;
  return 0;
 }
 $32 = $28 & 1;
 $33 = ($32|0)==(0);
 if ($33) {
  return 0;
 }
 $34 = ((($this)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 1)|0;
 HEAP32[$34>>2] = $36;
 return 0;
}
function __ZN12AP4_Stz2Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,18288,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,18304,$10,0,0);
 $11 = ((($inspector)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>(1);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = HEAP32[$9>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return 0;
 }
 $16 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $17 = HEAP32[$inspector>>2]|0;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$16>>2]|0;
  $21 = (($20) + ($i$01<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_viiiii[$19 & 1023]($inspector,$header,$22,0,0);
  $23 = (($i$01) + 1)|0;
  $24 = HEAP32[$9>>2]|0;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   $i$01 = $23;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_Stz2AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18184);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_Stz2AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18184);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (2152);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_VmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1986881636,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (18328);
  $8 = ((($4)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(794,($stream|0),($8|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = ((($4)) + 38|0);
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($11|0),6)|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __ZdlPv($4);
 ___resumeException($14|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_VmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 38|0);
 $5 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$4,6)|0);
 $$0 = $5;
 return ($$0|0);
}
function __ZN12AP4_VmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $formatted = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $formatted = sp + 16|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,18416,$5,0,0);
 $6 = ((($this)) + 38|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($this)) + 40|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ((($this)) + 42|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 (_snprintf($formatted,16,18432,$vararg_buffer)|0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_viiii[$17 & 1023]($inspector,18448,$formatted,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_VmhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_TfraAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(869,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TfraAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pr = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entry_count = 0, $exitcond$i = 0, $exitcond3$i = 0;
 var $fields = 0, $i$01 = 0, $i$01$i$i = 0, $i1$02$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $moof_offset = 0, $sample_number = 0, $sample_number7 = 0, $sample_number8 = 0, $sample_number9 = 0, $time = 0, $traf_number = 0, $traf_number1 = 0, $traf_number2 = 0, $traf_number3 = 0, $trun_number = 0, $trun_number4 = 0, $trun_number5 = 0, $trun_number6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fields = sp + 36|0;
 $entry_count = sp + 32|0;
 $time = sp + 28|0;
 $moof_offset = sp + 24|0;
 $traf_number = sp + 48|0;
 $traf_number1 = sp + 44|0;
 $traf_number2 = sp + 20|0;
 $traf_number3 = sp + 16|0;
 $trun_number = sp + 47|0;
 $trun_number4 = sp + 42|0;
 $trun_number5 = sp + 12|0;
 $trun_number6 = sp + 8|0;
 $sample_number = sp + 46|0;
 $sample_number7 = sp + 40|0;
 $sample_number8 = sp + 4|0;
 $sample_number9 = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1952871009,$size,$version,$flags);
 HEAP32[$this>>2] = (18472);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (18568);
 $1 = ((($this)) + 48|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 56|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($4|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if (!($6)) {
   HEAP32[$fields>>2] = 0;
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($fields|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$fields>>2]|0;
    $10 = $9 >>> 4;
    $11 = $10 & 3;
    $12 = $11&255;
    $13 = ((($this)) + 40|0);
    HEAP8[$13>>0] = $12;
    $14 = $9 >>> 2;
    $15 = $14 & 3;
    $16 = $15&255;
    $17 = ((($this)) + 41|0);
    HEAP8[$17>>0] = $16;
    $18 = $9 & 3;
    $19 = $18&255;
    $20 = ((($this)) + 42|0);
    HEAP8[$20>>0] = $19;
    HEAP32[$entry_count>>2] = 0;
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($entry_count|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = HEAP32[$entry_count>>2]|0;
     $24 = HEAP32[$2>>2]|0;
     $25 = ($24|0)==($23|0);
     if ($25) {
      $46 = $23;
     } else {
      $26 = ($24>>>0)>($23>>>0);
      do {
       if ($26) {
        HEAP32[$2>>2] = $23;
       } else {
        $27 = HEAP32[$1>>2]|0;
        $28 = ($27>>>0)<($23>>>0);
        if ($28) {
         $29 = $23 << 5;
         __THREW__ = 0;
         $30 = (invoke_ii(752,($29|0))|0);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          break L1;
         }
         $33 = ($30|0)==(0|0);
         if ($33) {
          break;
         }
         $34 = HEAP32[$2>>2]|0;
         $35 = ($34|0)==(0);
         if ($35) {
          $$pre$i = 0;
         } else {
          $36 = HEAP32[$3>>2]|0;
          $37 = ($36|0)==(0|0);
          if ($37) {
           $$pre$i = $34;
          } else {
           $i$01$i$i = 0;
           while(1) {
            $38 = (($30) + ($i$01$i$i<<5)|0);
            $39 = (($36) + ($i$01$i$i<<5)|0);
            ;HEAP32[$38>>2]=HEAP32[$39>>2]|0;HEAP32[$38+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$39+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[$39+16>>2]|0;HEAP32[$38+20>>2]=HEAP32[$39+20>>2]|0;HEAP32[$38+24>>2]=HEAP32[$39+24>>2]|0;HEAP32[$38+28>>2]=HEAP32[$39+28>>2]|0;
            $40 = (($i$01$i$i) + 1)|0;
            $exitcond3$i = ($40|0)==($34|0);
            if ($exitcond3$i) {
             break;
            } else {
             $i$01$i$i = $40;
            }
           }
           __ZdlPv($36);
           $$pre$pre$i = HEAP32[$2>>2]|0;
           $$pre$i = $$pre$pre$i;
          }
         }
         HEAP32[$3>>2] = $30;
         HEAP32[$1>>2] = $23;
         $41 = $$pre$i;
        } else {
         $41 = $24;
        }
        $42 = ($41>>>0)<($23>>>0);
        if ($42) {
         $i1$02$i = $41;
         while(1) {
          $43 = HEAP32[$3>>2]|0;
          $44 = (($43) + ($i1$02$i<<5)|0);
          ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;HEAP32[$44+12>>2]=0|0;HEAP32[$44+16>>2]=0|0;HEAP32[$44+20>>2]=0|0;HEAP32[$44+24>>2]=0|0;
          $45 = (($i1$02$i) + 1)|0;
          $exitcond$i = ($45|0)==($23|0);
          if ($exitcond$i) {
           break;
          } else {
           $i1$02$i = $45;
          }
         }
        }
        HEAP32[$2>>2] = $23;
       }
      } while(0);
      $$pr = HEAP32[$entry_count>>2]|0;
      $46 = $$pr;
     }
     $47 = ($46|0)==(0);
     if ($47) {
      STACKTOP = sp;return;
     }
     $48 = ($version<<24>>24)==(1);
     $i$01 = 0;
     while(1) {
      if ($48) {
       $49 = HEAP32[$3>>2]|0;
       $50 = (($49) + ($i$01<<5)|0);
       __THREW__ = 0;
       (invoke_iii(840,($stream|0),($50|0))|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        break;
       }
       $53 = HEAP32[$3>>2]|0;
       $54 = (((($53) + ($i$01<<5)|0)) + 8|0);
       __THREW__ = 0;
       (invoke_iii(840,($stream|0),($54|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        break;
       }
      } else {
       HEAP32[$time>>2] = 0;
       HEAP32[$moof_offset>>2] = 0;
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($time|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($moof_offset|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break;
       }
       $61 = HEAP32[$time>>2]|0;
       $62 = HEAP32[$3>>2]|0;
       $63 = (($62) + ($i$01<<5)|0);
       $64 = $63;
       $65 = $64;
       HEAP32[$65>>2] = $61;
       $66 = (($64) + 4)|0;
       $67 = $66;
       HEAP32[$67>>2] = 0;
       $68 = HEAP32[$moof_offset>>2]|0;
       $69 = (((($62) + ($i$01<<5)|0)) + 8|0);
       $70 = $69;
       $71 = $70;
       HEAP32[$71>>2] = $68;
       $72 = (($70) + 4)|0;
       $73 = $72;
       HEAP32[$73>>2] = 0;
      }
      $74 = HEAP8[$13>>0]|0;
      $75 = $74&255;
      if ((($75|0) == 1)) {
       __THREW__ = 0;
       (invoke_iii(794,($stream|0),($traf_number1|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        break;
       }
       $84 = HEAP16[$traf_number1>>1]|0;
       $85 = $84&65535;
       $86 = HEAP32[$3>>2]|0;
       $87 = (((($86) + ($i$01<<5)|0)) + 16|0);
       HEAP32[$87>>2] = $85;
      } else if ((($75|0) == 3)) {
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($traf_number3|0))|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        break;
       }
       $95 = HEAP32[$traf_number3>>2]|0;
       $96 = HEAP32[$3>>2]|0;
       $97 = (((($96) + ($i$01<<5)|0)) + 16|0);
       HEAP32[$97>>2] = $95;
      } else if ((($75|0) == 2)) {
       __THREW__ = 0;
       (invoke_iii(831,($stream|0),($traf_number2|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        break;
       }
       $90 = HEAP32[$traf_number2>>2]|0;
       $91 = HEAP32[$3>>2]|0;
       $92 = (((($91) + ($i$01<<5)|0)) + 16|0);
       HEAP32[$92>>2] = $90;
      } else if ((($75|0) == 0)) {
       __THREW__ = 0;
       (invoke_iii(786,($stream|0),($traf_number|0))|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break;
       }
       $78 = HEAP8[$traf_number>>0]|0;
       $79 = $78&255;
       $80 = HEAP32[$3>>2]|0;
       $81 = (((($80) + ($i$01<<5)|0)) + 16|0);
       HEAP32[$81>>2] = $79;
      }
      $98 = HEAP8[$17>>0]|0;
      $99 = $98&255;
      if ((($99|0) == 1)) {
       __THREW__ = 0;
       (invoke_iii(794,($stream|0),($trun_number4|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        break;
       }
       $108 = HEAP16[$trun_number4>>1]|0;
       $109 = $108&65535;
       $110 = HEAP32[$3>>2]|0;
       $111 = (((($110) + ($i$01<<5)|0)) + 20|0);
       HEAP32[$111>>2] = $109;
      } else if ((($99|0) == 2)) {
       __THREW__ = 0;
       (invoke_iii(831,($stream|0),($trun_number5|0))|0);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        break;
       }
       $114 = HEAP32[$trun_number5>>2]|0;
       $115 = HEAP32[$3>>2]|0;
       $116 = (((($115) + ($i$01<<5)|0)) + 20|0);
       HEAP32[$116>>2] = $114;
      } else if ((($99|0) == 3)) {
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($trun_number6|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        break;
       }
       $119 = HEAP32[$trun_number6>>2]|0;
       $120 = HEAP32[$3>>2]|0;
       $121 = (((($120) + ($i$01<<5)|0)) + 20|0);
       HEAP32[$121>>2] = $119;
      } else if ((($99|0) == 0)) {
       __THREW__ = 0;
       (invoke_iii(786,($stream|0),($trun_number|0))|0);
       $100 = __THREW__; __THREW__ = 0;
       $101 = $100&1;
       if ($101) {
        break;
       }
       $102 = HEAP8[$trun_number>>0]|0;
       $103 = $102&255;
       $104 = HEAP32[$3>>2]|0;
       $105 = (((($104) + ($i$01<<5)|0)) + 20|0);
       HEAP32[$105>>2] = $103;
      }
      $122 = HEAP8[$20>>0]|0;
      $123 = $122&255;
      if ((($123|0) == 0)) {
       __THREW__ = 0;
       (invoke_iii(786,($stream|0),($sample_number|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        break;
       }
       $126 = HEAP8[$sample_number>>0]|0;
       $127 = $126&255;
       $128 = HEAP32[$3>>2]|0;
       $129 = (((($128) + ($i$01<<5)|0)) + 24|0);
       HEAP32[$129>>2] = $127;
      } else if ((($123|0) == 1)) {
       __THREW__ = 0;
       (invoke_iii(794,($stream|0),($sample_number7|0))|0);
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if ($131) {
        break;
       }
       $132 = HEAP16[$sample_number7>>1]|0;
       $133 = $132&65535;
       $134 = HEAP32[$3>>2]|0;
       $135 = (((($134) + ($i$01<<5)|0)) + 24|0);
       HEAP32[$135>>2] = $133;
      } else if ((($123|0) == 2)) {
       __THREW__ = 0;
       (invoke_iii(831,($stream|0),($sample_number8|0))|0);
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if ($137) {
        break;
       }
       $138 = HEAP32[$sample_number8>>2]|0;
       $139 = HEAP32[$3>>2]|0;
       $140 = (((($139) + ($i$01<<5)|0)) + 24|0);
       HEAP32[$140>>2] = $138;
      } else if ((($123|0) == 3)) {
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($sample_number9|0))|0);
       $141 = __THREW__; __THREW__ = 0;
       $142 = $141&1;
       if ($142) {
        break;
       }
       $143 = HEAP32[$sample_number9>>2]|0;
       $144 = HEAP32[$3>>2]|0;
       $145 = (((($144) + ($i$01<<5)|0)) + 24|0);
       HEAP32[$145>>2] = $143;
      }
      $146 = (($i$01) + 1)|0;
      $147 = HEAP32[$entry_count>>2]|0;
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $i$01 = $146;
      } else {
       label = 55;
       break;
      }
     }
     if ((label|0) == 55) {
      STACKTOP = sp;return;
     }
     $149 = ___cxa_find_matching_catch()|0;
     $150 = tempRet0;
     $lpad$phi$index = $149;$lpad$phi$index2 = $150;
     HEAP32[$0>>2] = (18568);
     HEAP32[$2>>2] = 0;
     $153 = HEAP32[$3>>2]|0;
     __ZdlPv($153);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $151 = ___cxa_find_matching_catch()|0;
 $152 = tempRet0;
 $lpad$phi$index = $151;$lpad$phi$index2 = $152;
 HEAP32[$0>>2] = (18568);
 HEAP32[$2>>2] = 0;
 $153 = HEAP32[$3>>2]|0;
 __ZdlPv($153);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_TfraAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 4;
 $8 = ((($this)) + 41|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 2;
 $12 = $11 | $7;
 $13 = ((($this)) + 42|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  return ($$0|0);
 }
 $19 = ((($this)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  return ($$0|0);
 }
 $23 = HEAP32[$19>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  return ($$0|0);
 }
 $25 = ((($this)) + 25|0);
 $26 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  $27 = HEAP8[$25>>0]|0;
  $28 = ($27<<24>>24)==(1);
  $29 = HEAP32[$26>>2]|0;
  $30 = (($29) + ($i$01<<5)|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  if ($28) {
   $37 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$33,$36)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    $$0 = $37;
    label = 27;
    break;
   }
   $39 = HEAP32[$26>>2]|0;
   $40 = (((($39) + ($i$01<<5)|0)) + 8|0);
   $41 = $40;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$43,$46)|0);
   $48 = ($47|0)==(0);
   if (!($48)) {
    $$0 = $47;
    label = 27;
    break;
   }
  } else {
   $49 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$33)|0);
   $50 = ($49|0)==(0);
   if (!($50)) {
    $$0 = $49;
    label = 27;
    break;
   }
   $51 = HEAP32[$26>>2]|0;
   $52 = (((($51) + ($i$01<<5)|0)) + 8|0);
   $53 = $52;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($53) + 4)|0;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$55)|0);
   $60 = ($59|0)==(0);
   if (!($60)) {
    $$0 = $59;
    label = 27;
    break;
   }
  }
  $61 = HEAP8[$4>>0]|0;
  $62 = $61&255;
  if ((($62|0) == 0)) {
   $63 = HEAP32[$26>>2]|0;
   $64 = (((($63) + ($i$01<<5)|0)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65&255;
   $67 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$66)|0);
   $68 = ($67|0)==(0);
   if (!($68)) {
    $$0 = $67;
    label = 27;
    break;
   }
  } else if ((($62|0) == 1)) {
   $69 = HEAP32[$26>>2]|0;
   $70 = (((($69) + ($i$01<<5)|0)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71&65535;
   $73 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$72)|0);
   $74 = ($73|0)==(0);
   if (!($74)) {
    $$0 = $73;
    label = 27;
    break;
   }
  } else if ((($62|0) == 2)) {
   $75 = HEAP32[$26>>2]|0;
   $76 = (((($75) + ($i$01<<5)|0)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$77)|0);
   $79 = ($78|0)==(0);
   if (!($79)) {
    $$0 = $78;
    label = 27;
    break;
   }
  } else if ((($62|0) == 3)) {
   $80 = HEAP32[$26>>2]|0;
   $81 = (((($80) + ($i$01<<5)|0)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$82)|0);
   $84 = ($83|0)==(0);
   if (!($84)) {
    $$0 = $83;
    label = 27;
    break;
   }
  }
  $85 = HEAP8[$8>>0]|0;
  $86 = $85&255;
  if ((($86|0) == 1)) {
   $93 = HEAP32[$26>>2]|0;
   $94 = (((($93) + ($i$01<<5)|0)) + 20|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95&65535;
   $97 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$96)|0);
   $98 = ($97|0)==(0);
   if (!($98)) {
    $$0 = $97;
    label = 27;
    break;
   }
  } else if ((($86|0) == 0)) {
   $87 = HEAP32[$26>>2]|0;
   $88 = (((($87) + ($i$01<<5)|0)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89&255;
   $91 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$90)|0);
   $92 = ($91|0)==(0);
   if (!($92)) {
    $$0 = $91;
    label = 27;
    break;
   }
  } else if ((($86|0) == 2)) {
   $99 = HEAP32[$26>>2]|0;
   $100 = (((($99) + ($i$01<<5)|0)) + 20|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$101)|0);
   $103 = ($102|0)==(0);
   if (!($103)) {
    $$0 = $102;
    label = 27;
    break;
   }
  } else if ((($86|0) == 3)) {
   $104 = HEAP32[$26>>2]|0;
   $105 = (((($104) + ($i$01<<5)|0)) + 20|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$106)|0);
   $108 = ($107|0)==(0);
   if (!($108)) {
    $$0 = $107;
    label = 27;
    break;
   }
  }
  $109 = HEAP8[$13>>0]|0;
  $110 = $109&255;
  if ((($110|0) == 1)) {
   $117 = HEAP32[$26>>2]|0;
   $118 = (((($117) + ($i$01<<5)|0)) + 24|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119&65535;
   $121 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$120)|0);
   $122 = ($121|0)==(0);
   if (!($122)) {
    $$0 = $121;
    label = 27;
    break;
   }
  } else if ((($110|0) == 3)) {
   $128 = HEAP32[$26>>2]|0;
   $129 = (((($128) + ($i$01<<5)|0)) + 24|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$130)|0);
   $132 = ($131|0)==(0);
   if (!($132)) {
    $$0 = $131;
    label = 27;
    break;
   }
  } else if ((($110|0) == 0)) {
   $111 = HEAP32[$26>>2]|0;
   $112 = (((($111) + ($i$01<<5)|0)) + 24|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113&255;
   $115 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$114)|0);
   $116 = ($115|0)==(0);
   if (!($116)) {
    $$0 = $115;
    label = 27;
    break;
   }
  } else if ((($110|0) == 2)) {
   $123 = HEAP32[$26>>2]|0;
   $124 = (((($123) + ($i$01<<5)|0)) + 24|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (__ZN14AP4_ByteStream9WriteUI24Ej($stream,$125)|0);
   $127 = ($126|0)==(0);
   if (!($127)) {
    $$0 = $126;
    label = 27;
    break;
   }
  }
  $133 = (($i$01) + 1)|0;
  $134 = HEAP32[$19>>2]|0;
  $135 = ($133>>>0)<($134>>>0);
  if ($135) {
   $i$01 = $133;
  } else {
   $$0 = 0;
   label = 27;
   break;
  }
 }
 if ((label|0) == 27) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_TfraAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $name = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 296|0;
 $value = sp + 40|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,18576,$4,0,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 FUNCTION_TABLE_viiiii[$7 & 1023]($inspector,18592,$10,0,0);
 $11 = HEAP32[$inspector>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 41|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,18616,$16,0,0);
 $17 = HEAP32[$inspector>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 42|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 FUNCTION_TABLE_viiiii[$19 & 1023]($inspector,18640,$22,0,0);
 $23 = ((($inspector)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  STACKTOP = sp;return 0;
 }
 $26 = ((($this)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  STACKTOP = sp;return 0;
 }
 $29 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($name,16,18672,$vararg_buffer)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($i$01<<5)|0);
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (((($30) + ($i$01<<5)|0)) + 8|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (((($30) + ($i$01<<5)|0)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (((($30) + ($i$01<<5)|0)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (((($30) + ($i$01<<5)|0)) + 24|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $vararg_buffer1;
  $52 = $51;
  HEAP32[$52>>2] = $34;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $37;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  $55 = $vararg_ptr4;
  $56 = $55;
  HEAP32[$56>>2] = $41;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $44;
  $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr5>>2] = $46;
  $vararg_ptr6 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr6>>2] = $48;
  $vararg_ptr7 = ((($vararg_buffer1)) + 24|0);
  HEAP32[$vararg_ptr7>>2] = $50;
  (_snprintf($value,256,18688,$vararg_buffer1)|0);
  $59 = HEAP32[$inspector>>2]|0;
  $60 = ((($59)) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_viiii[$61 & 1023]($inspector,$name,$value,0);
  $62 = (($i$01) + 1)|0;
  $63 = HEAP32[$26>>2]|0;
  $64 = ($62>>>0)<($63>>>0);
  if ($64) {
   $i$01 = $62;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TfraAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18472);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (18568);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_TfraAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18472);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (18568);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18568);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18568);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_AvccAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$sum = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor$0$lcssa = 0, $cursor$09 = 0, $cursor$17 = 0, $i$010 = 0, $i1$08 = 0, $or$cond = 0, $payload_data = 0, $sext = 0, $sext4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp;
 $0 = (($size) + -8)|0;
 __ZN14AP4_DataBufferC2Ej($payload_data,$0);
 $1 = ((($payload_data)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(788,($stream|0),($2|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 3;
  } else {
   $6 = ($3|0)==(0);
   L3: do {
    if ($6) {
     $9 = HEAP32[$1>>2]|0;
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)!=(1);
     $12 = ($0>>>0)<(6);
     $or$cond = $12 | $11;
     if ($or$cond) {
      $$0 = 0;
     } else {
      $13 = ((($9)) + 5|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = $14&255;
      $16 = $15 & 31;
      $17 = ($16|0)==(0);
      if ($17) {
       $cursor$0$lcssa = 6;
      } else {
       $cursor$09 = 6;$i$010 = 0;
       while(1) {
        $20 = (($cursor$09) + 2)|0;
        $21 = ($20>>>0)>($0>>>0);
        if ($21) {
         $$0 = 0;
         break L3;
        }
        $22 = (($9) + ($cursor$09)|0);
        $23 = HEAP8[$22>>0]|0;
        $24 = $23&255;
        $25 = $24 << 8;
        $$sum3 = (($cursor$09) + 1)|0;
        $26 = (($9) + ($$sum3)|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $25 | $28;
        $sext4 = $29 << 16;
        $30 = $sext4 >> 16;
        $31 = (($20) + ($30))|0;
        $32 = ($31>>>0)>($0>>>0);
        $18 = (($i$010) + 1)|0;
        if ($32) {
         $$0 = 0;
         break L3;
        }
        $19 = ($18>>>0)<($16>>>0);
        if ($19) {
         $cursor$09 = $31;$i$010 = $18;
        } else {
         $cursor$0$lcssa = $31;
         break;
        }
       }
      }
      $33 = (($cursor$0$lcssa) + 1)|0;
      $34 = (($9) + ($cursor$0$lcssa)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = $35&255;
      $37 = ($33>>>0)>($0>>>0);
      if ($37) {
       $$0 = 0;
      } else {
       $38 = ($35<<24>>24)==(0);
       if (!($38)) {
        $cursor$17 = $33;$i1$08 = 0;
        while(1) {
         $41 = (($cursor$17) + 2)|0;
         $42 = ($41>>>0)>($0>>>0);
         if ($42) {
          $$0 = 0;
          break L3;
         }
         $43 = (($9) + ($cursor$17)|0);
         $44 = HEAP8[$43>>0]|0;
         $45 = $44&255;
         $46 = $45 << 8;
         $$sum = (($cursor$17) + 1)|0;
         $47 = (($9) + ($$sum)|0);
         $48 = HEAP8[$47>>0]|0;
         $49 = $48&255;
         $50 = $46 | $49;
         $sext = $50 << 16;
         $51 = $sext >> 16;
         $52 = (($41) + ($51))|0;
         $53 = ($52>>>0)>($0>>>0);
         $39 = (($i1$08) + 1)|0;
         if ($53) {
          $$0 = 0;
          break L3;
         }
         $40 = ($39>>>0)<($36>>>0);
         if ($40) {
          $cursor$17 = $52;$i1$08 = $39;
         } else {
          break;
         }
        }
       }
       __THREW__ = 0;
       $54 = (invoke_ii(752,96)|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 3;
        break L1;
       }
       __THREW__ = 0;
       invoke_viii(870,($54|0),($size|0),($9|0));
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $59 = ___cxa_find_matching_catch()|0;
        $60 = tempRet0;
        __ZdlPv($54);
        $$01 = $59;$$02 = $60;
        break L1;
       } else {
        $$0 = $54;
       }
      }
     }
    } else {
     $$0 = 0;
    }
   } while(0);
   __ZN14AP4_DataBufferD2Ev($payload_data);
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $$01 = $7;$$02 = $8;
 }
 __THREW__ = 0;
 invoke_vi(279,($payload_data|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $63 = ___cxa_find_matching_catch(0|0)|0;
  $64 = tempRet0;
  ___clang_call_terminate($63);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_AvccAtomC2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, $i$01$i$i3 = 0;
 var $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1635148611,8);
 HEAP32[$this>>2] = (18824);
 $0 = ((($this)) + 36|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 37|0);
 $2 = ((($this)) + 44|0);
 HEAP8[$1>>0]=0&255;HEAP8[$1+1>>0]=(0>>8)&255;HEAP8[$1+2>>0]=(0>>16)&255;HEAP8[$1+3>>0]=0>>24;
 HEAP32[$2>>2] = (13440);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 60|0);
 HEAP32[$6>>2] = (13440);
 $7 = ((($this)) + 64|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 68|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 72|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 76|0);
 __THREW__ = 0;
 invoke_vi(837,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $$0 = $21;$$01 = $20;
 } else {
  __THREW__ = 0;
  invoke_vi(871,($this|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($this)) + 92|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($this)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($16))|0;
   HEAP32[$17>>2] = $19;
   return;
  }
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($10|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $54 = ___cxa_find_matching_catch(0|0)|0;
   $55 = tempRet0;
   $lpad$phi$index = $54;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  } else {
   $$0 = $23;$$01 = $22;
  }
 }
 HEAP32[$6>>2] = (13440);
 $26 = HEAP32[$8>>2]|0;
 $27 = ($26|0)==(0);
 L10: do {
  if (!($27)) {
   $i$01$i$i3 = 0;
   while(1) {
    $28 = HEAP32[$9>>2]|0;
    $29 = (($28) + (($i$01$i$i3*20)|0)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    invoke_vi($31|0,($29|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     break;
    }
    $34 = (($i$01$i$i3) + 1)|0;
    $35 = HEAP32[$8>>2]|0;
    $36 = ($34>>>0)<($35>>>0);
    if ($36) {
     $i$01$i$i3 = $34;
    } else {
     break L10;
    }
   }
   $52 = ___cxa_find_matching_catch(0|0)|0;
   $53 = tempRet0;
   $lpad$phi$index = $52;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  }
 } while(0);
 HEAP32[$8>>2] = 0;
 $37 = HEAP32[$9>>2]|0;
 __ZdlPv($37);
 HEAP32[$2>>2] = (13440);
 $38 = HEAP32[$4>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  HEAP32[$4>>2] = 0;
  $49 = HEAP32[$5>>2]|0;
  __ZdlPv($49);
  ___resumeException($$01|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $40 = HEAP32[$5>>2]|0;
  $41 = (($40) + (($i$01$i$i*20)|0)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vi($43|0,($41|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   break;
  }
  $46 = (($i$01$i$i) + 1)|0;
  $47 = HEAP32[$4>>2]|0;
  $48 = ($46>>>0)<($47>>>0);
  if ($48) {
   $i$01$i$i = $46;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$4>>2] = 0;
  $49 = HEAP32[$5>>2]|0;
  __ZdlPv($49);
  ___resumeException($$01|0);
  // unreachable;
 }
 $50 = ___cxa_find_matching_catch(0|0)|0;
 $51 = tempRet0;
 $lpad$phi$index = $50;
 ___clang_call_terminate($lpad$phi$index);
 // unreachable;
}
function __ZN12AP4_AvccAtom14UpdateRawBytesEv($this) {
 $this = $this|0;
 var $$lcssa33 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $cursor$0$lcssa = 0, $cursor$05 = 0;
 var $cursor$13 = 0, $i$017 = 0, $i1$010 = 0, $i2$06 = 0, $i3$04 = 0, $payload_size$0$lcssa = 0, $payload_size$018 = 0, $payload_size$1$lcssa = 0, $payload_size$111 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $payload_size$0$lcssa = 7;
 } else {
  $3 = ((($this)) + 56|0);
  $4 = HEAP32[$3>>2]|0;
  $i$017 = 0;$payload_size$018 = 6;
  while(1) {
   $5 = (((($4) + (($i$017*20)|0)|0)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($payload_size$018) + 2)|0;
   $8 = (($7) + ($6))|0;
   $9 = (($i$017) + 1)|0;
   $10 = ($9>>>0)<($1>>>0);
   if ($10) {
    $i$017 = $9;$payload_size$018 = $8;
   } else {
    $$lcssa33 = $8;
    break;
   }
  }
  $phitmp = (($$lcssa33) + 1)|0;
  $payload_size$0$lcssa = $phitmp;
 }
 $11 = ((($this)) + 68|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $payload_size$1$lcssa = $payload_size$0$lcssa;
 } else {
  $14 = ((($this)) + 72|0);
  $15 = HEAP32[$14>>2]|0;
  $i1$010 = 0;$payload_size$111 = $payload_size$0$lcssa;
  while(1) {
   $16 = (((($15) + (($i1$010*20)|0)|0)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($payload_size$111) + 2)|0;
   $19 = (($18) + ($17))|0;
   $20 = (($i1$010) + 1)|0;
   $21 = ($20>>>0)<($12>>>0);
   if ($21) {
    $i1$010 = $20;$payload_size$111 = $19;
   } else {
    $payload_size$1$lcssa = $19;
    break;
   }
  }
 }
 $22 = ((($this)) + 76|0);
 (__ZN14AP4_DataBuffer11SetDataSizeEj($22,$payload_size$1$lcssa)|0);
 $23 = ((($this)) + 84|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($this)) + 36|0);
 $26 = HEAP8[$25>>0]|0;
 HEAP8[$24>>0] = $26;
 $27 = ((($this)) + 37|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ((($24)) + 1|0);
 HEAP8[$29>>0] = $28;
 $30 = ((($this)) + 39|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ((($24)) + 2|0);
 HEAP8[$32>>0] = $31;
 $33 = ((($this)) + 38|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ((($24)) + 3|0);
 HEAP8[$35>>0] = $34;
 $36 = ((($this)) + 40|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = (($38) + 3)|0;
 $40 = $39 | 252;
 $41 = $40&255;
 $42 = ((($24)) + 4|0);
 HEAP8[$42>>0] = $41;
 $43 = HEAP32[$0>>2]|0;
 $44 = $43 | 224;
 $45 = $44&255;
 $46 = ((($24)) + 5|0);
 HEAP8[$46>>0] = $45;
 $47 = HEAP32[$0>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  $cursor$0$lcssa = 6;
 } else {
  $49 = ((($this)) + 56|0);
  $cursor$05 = 6;$i2$06 = 0;
  while(1) {
   $50 = HEAP32[$49>>2]|0;
   $51 = (((($50) + (($i2$06*20)|0)|0)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52&65535;
   $54 = (($24) + ($cursor$05)|0);
   $55 = ($53&65535) >>> 8;
   $56 = $55&255;
   HEAP8[$54>>0] = $56;
   $57 = $52&255;
   $$sum1 = (($cursor$05) + 1)|0;
   $58 = (($24) + ($$sum1)|0);
   HEAP8[$58>>0] = $57;
   $59 = (($cursor$05) + 2)|0;
   $60 = (($24) + ($59)|0);
   $61 = HEAP32[$49>>2]|0;
   $62 = (((($61) + (($i2$06*20)|0)|0)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $52 & 65535;
   _memcpy(($60|0),($63|0),($64|0))|0;
   $65 = (($64) + ($59))|0;
   $66 = (($i2$06) + 1)|0;
   $67 = HEAP32[$0>>2]|0;
   $68 = ($66>>>0)<($67>>>0);
   if ($68) {
    $cursor$05 = $65;$i2$06 = $66;
   } else {
    $cursor$0$lcssa = $65;
    break;
   }
  }
 }
 $69 = HEAP32[$11>>2]|0;
 $70 = $69&255;
 $71 = (($24) + ($cursor$0$lcssa)|0);
 HEAP8[$71>>0] = $70;
 $72 = HEAP32[$11>>2]|0;
 $73 = ($72|0)==(0);
 if ($73) {
  return;
 }
 $74 = (($cursor$0$lcssa) + 1)|0;
 $75 = ((($this)) + 72|0);
 $cursor$13 = $74;$i3$04 = 0;
 while(1) {
  $76 = HEAP32[$75>>2]|0;
  $77 = (((($76) + (($i3$04*20)|0)|0)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78&65535;
  $80 = (($24) + ($cursor$13)|0);
  $81 = ($79&65535) >>> 8;
  $82 = $81&255;
  HEAP8[$80>>0] = $82;
  $83 = $78&255;
  $$sum = (($cursor$13) + 1)|0;
  $84 = (($24) + ($$sum)|0);
  HEAP8[$84>>0] = $83;
  $85 = (($cursor$13) + 2)|0;
  $86 = (($24) + ($85)|0);
  $87 = HEAP32[$75>>2]|0;
  $88 = (((($87) + (($i3$04*20)|0)|0)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $78 & 65535;
  _memcpy(($86|0),($89|0),($90|0))|0;
  $91 = (($90) + ($85))|0;
  $92 = (($i3$04) + 1)|0;
  $93 = HEAP32[$11>>2]|0;
  $94 = ($92>>>0)<($93>>>0);
  if ($94) {
   $cursor$13 = $91;$i3$04 = $92;
  } else {
   break;
  }
 }
 return;
}
function __ZN12AP4_AvccAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $i$01$i$i = 0, $i$01$i$i3 = 0, $i$018 = 0, $i$117 = 0, $lpad$phi$index = 0, $lpad$phi15$index = 0, $lpad$phi15$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($other)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __ZN8AP4_AtomC2Ejj($this,1635148611,$1);
 HEAP32[$this>>2] = (18824);
 $2 = ((($this)) + 36|0);
 $3 = ((($other)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 HEAP8[$2>>0] = $4;
 $5 = ((($this)) + 37|0);
 $6 = ((($other)) + 37|0);
 $7 = HEAP8[$6>>0]|0;
 HEAP8[$5>>0] = $7;
 $8 = ((($this)) + 38|0);
 $9 = ((($other)) + 38|0);
 $10 = HEAP8[$9>>0]|0;
 HEAP8[$8>>0] = $10;
 $11 = ((($this)) + 39|0);
 $12 = ((($other)) + 39|0);
 $13 = HEAP8[$12>>0]|0;
 HEAP8[$11>>0] = $13;
 $14 = ((($this)) + 40|0);
 $15 = ((($other)) + 40|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$14>>0] = $16;
 $17 = ((($this)) + 44|0);
 HEAP32[$17>>2] = (13440);
 $18 = ((($this)) + 48|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($this)) + 52|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($this)) + 56|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($this)) + 60|0);
 HEAP32[$21>>2] = (13440);
 $22 = ((($this)) + 64|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($this)) + 68|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($this)) + 72|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($this)) + 76|0);
 $26 = ((($other)) + 76|0);
 __THREW__ = 0;
 invoke_vii(842,($25|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $$0 = $45;$$01 = $44;
 } else {
  $29 = ((($other)) + 52|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  L3: do {
   if ($31) {
    label = 4;
   } else {
    $32 = ((($other)) + 56|0);
    $i$018 = 0;
    while(1) {
     $37 = HEAP32[$32>>2]|0;
     $38 = (($37) + (($i$018*20)|0)|0);
     __THREW__ = 0;
     (invoke_iii(872,($17|0),($38|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break;
     }
     $41 = (($i$018) + 1)|0;
     $42 = HEAP32[$29>>2]|0;
     $43 = ($41>>>0)<($42>>>0);
     if ($43) {
      $i$018 = $41;
     } else {
      label = 4;
      break L3;
     }
    }
    $48 = ___cxa_find_matching_catch()|0;
    $49 = tempRet0;
    $lpad$phi15$index = $48;$lpad$phi15$index2 = $49;
   }
  } while(0);
  do {
   if ((label|0) == 4) {
    $33 = ((($other)) + 68|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0);
    if ($35) {
     return;
    }
    $36 = ((($other)) + 72|0);
    $i$117 = 0;
    while(1) {
     $52 = HEAP32[$36>>2]|0;
     $53 = (($52) + (($i$117*20)|0)|0);
     __THREW__ = 0;
     (invoke_iii(872,($21|0),($53|0))|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      label = 9;
      break;
     }
     $56 = (($i$117) + 1)|0;
     $57 = HEAP32[$33>>2]|0;
     $58 = ($56>>>0)<($57>>>0);
     if ($58) {
      $i$117 = $56;
     } else {
      label = 14;
      break;
     }
    }
    if ((label|0) == 9) {
     $46 = ___cxa_find_matching_catch()|0;
     $47 = tempRet0;
     $lpad$phi15$index = $46;$lpad$phi15$index2 = $47;
     break;
    }
    else if ((label|0) == 14) {
     return;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(279,($25|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   $lpad$phi$index = $87;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  } else {
   $$0 = $lpad$phi15$index2;$$01 = $lpad$phi15$index;
  }
 }
 HEAP32[$21>>2] = (13440);
 $59 = HEAP32[$23>>2]|0;
 $60 = ($59|0)==(0);
 L25: do {
  if (!($60)) {
   $i$01$i$i3 = 0;
   while(1) {
    $61 = HEAP32[$24>>2]|0;
    $62 = (($61) + (($i$01$i$i3*20)|0)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$63>>2]|0;
    __THREW__ = 0;
    invoke_vi($64|0,($62|0));
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     break;
    }
    $67 = (($i$01$i$i3) + 1)|0;
    $68 = HEAP32[$23>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $i$01$i$i3 = $67;
    } else {
     break L25;
    }
   }
   $85 = ___cxa_find_matching_catch(0|0)|0;
   $86 = tempRet0;
   $lpad$phi$index = $85;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  }
 } while(0);
 HEAP32[$23>>2] = 0;
 $70 = HEAP32[$24>>2]|0;
 __ZdlPv($70);
 HEAP32[$17>>2] = (13440);
 $71 = HEAP32[$19>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  HEAP32[$19>>2] = 0;
  $82 = HEAP32[$20>>2]|0;
  __ZdlPv($82);
  ___resumeException($$01|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $73 = HEAP32[$20>>2]|0;
  $74 = (($73) + (($i$01$i$i*20)|0)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  __THREW__ = 0;
  invoke_vi($76|0,($74|0));
  $77 = __THREW__; __THREW__ = 0;
  $78 = $77&1;
  if ($78) {
   break;
  }
  $79 = (($i$01$i$i) + 1)|0;
  $80 = HEAP32[$19>>2]|0;
  $81 = ($79>>>0)<($80>>>0);
  if ($81) {
   $i$01$i$i = $79;
  } else {
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  HEAP32[$19>>2] = 0;
  $82 = HEAP32[$20>>2]|0;
  __ZdlPv($82);
  ___resumeException($$01|0);
  // unreachable;
 }
 $83 = ___cxa_find_matching_catch(0|0)|0;
 $84 = tempRet0;
 $lpad$phi$index = $83;
 ___clang_call_terminate($lpad$phi$index);
 // unreachable;
}
function __ZN12AP4_AvccAtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$i11 = 0, $$pre$i4 = 0, $$pre3$i = 0, $$pre3$i14 = 0, $$sum = 0, $$sum26 = 0, $$sum27 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cursor$0$lcssa = 0, $cursor$050 = 0, $cursor$147 = 0, $i$01$i = 0, $i$01$i$i = 0, $i$01$i$i22 = 0, $i$01$i9 = 0, $i$049 = 0, $i1$048 = 0, $lpad$phi$index = 0, $lpad$phi36$index = 0, $lpad$phi36$index5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = sp;
 __ZN8AP4_AtomC2Ejj($this,1635148611,$size);
 HEAP32[$this>>2] = (18824);
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = (13440);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 60|0);
 HEAP32[$6>>2] = (13440);
 $7 = ((($this)) + 64|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 68|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 72|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 76|0);
 __THREW__ = 0;
 invoke_vi(837,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   $86 = ___cxa_find_matching_catch()|0;
   $87 = tempRet0;
   $$1 = $86;$$12 = $87;
  } else {
   $13 = (($size) + -8)|0;
   __THREW__ = 0;
   (invoke_iiii(855,($10|0),($payload|0),($13|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   L3: do {
    if ($15) {
     label = 25;
    } else {
     $16 = HEAP8[$payload>>0]|0;
     $17 = ((($this)) + 36|0);
     HEAP8[$17>>0] = $16;
     $18 = ((($payload)) + 1|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ((($this)) + 37|0);
     HEAP8[$20>>0] = $19;
     $21 = ((($payload)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ((($this)) + 39|0);
     HEAP8[$23>>0] = $22;
     $24 = ((($payload)) + 3|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ((($this)) + 38|0);
     HEAP8[$26>>0] = $25;
     $27 = ((($payload)) + 4|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28&255;
     $30 = $29 & 3;
     $31 = (($30) + 1)|0;
     $32 = $31&255;
     $33 = ((($this)) + 40|0);
     HEAP8[$33>>0] = $32;
     $34 = ((($payload)) + 5|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = $36 & 31;
     $38 = HEAP32[$3>>2]|0;
     $39 = ($38>>>0)<($37>>>0);
     if ($39) {
      $40 = ($37*20)|0;
      __THREW__ = 0;
      $41 = (invoke_ii(752,($40|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       label = 25;
       break;
      }
      $44 = ($41|0)==(0|0);
      if (!($44)) {
       $45 = HEAP32[$4>>2]|0;
       $46 = ($45|0)==(0);
       do {
        if (!($46)) {
         $47 = HEAP32[$5>>2]|0;
         $48 = ($47|0)==(0|0);
         if (!($48)) {
          $51 = $47;$i$01$i = 0;
          while(1) {
           $49 = (($41) + (($i$01$i*20)|0)|0);
           $50 = (($51) + (($i$01$i*20)|0)|0);
           __THREW__ = 0;
           invoke_vii(842,($49|0),($50|0));
           $52 = __THREW__; __THREW__ = 0;
           $53 = $52&1;
           if ($53) {
            label = 24;
            break;
           }
           $54 = HEAP32[$5>>2]|0;
           $55 = (($54) + (($i$01$i*20)|0)|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = HEAP32[$56>>2]|0;
           __THREW__ = 0;
           invoke_vi($57|0,($55|0));
           $58 = __THREW__; __THREW__ = 0;
           $59 = $58&1;
           if ($59) {
            label = 24;
            break;
           }
           $60 = (($i$01$i) + 1)|0;
           $61 = HEAP32[$4>>2]|0;
           $62 = ($60>>>0)<($61>>>0);
           if (!($62)) {
            label = 12;
            break;
           }
           $$pre$i4 = HEAP32[$5>>2]|0;
           $51 = $$pre$i4;$i$01$i = $60;
          }
          if ((label|0) == 12) {
           $$pre3$i = HEAP32[$5>>2]|0;
           __ZdlPv($$pre3$i);
           break;
          }
          else if ((label|0) == 24) {
           $94 = ___cxa_find_matching_catch()|0;
           $95 = tempRet0;
           $lpad$phi36$index = $94;$lpad$phi36$index5 = $95;
           label = 26;
           break L3;
          }
         }
        }
       } while(0);
       HEAP32[$5>>2] = $41;
       HEAP32[$3>>2] = $37;
      }
     }
     $63 = ($37|0)==(0);
     L21: do {
      if ($63) {
       $cursor$0$lcssa = 6;
      } else {
       $cursor$050 = 6;$i$049 = 0;
       while(1) {
        __THREW__ = 0;
        invoke_vi(837,($0|0));
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         label = 23;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(872,($2|0),($0|0))|0);
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         label = 27;
         break;
        }
        __THREW__ = 0;
        invoke_vi(279,($0|0));
        $68 = __THREW__; __THREW__ = 0;
        $69 = $68&1;
        if ($69) {
         label = 23;
         break;
        }
        $70 = (($payload) + ($cursor$050)|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $73 = $72 << 8;
        $$sum27 = (($cursor$050) + 1)|0;
        $74 = (($payload) + ($$sum27)|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = $73 | $76;
        $78 = HEAP32[$5>>2]|0;
        $79 = (($78) + (($i$049*20)|0)|0);
        $$sum3 = (($cursor$050) + 2)|0;
        $80 = (($payload) + ($$sum3)|0);
        __THREW__ = 0;
        (invoke_iiii(855,($79|0),($80|0),($77|0))|0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         label = 23;
         break;
        }
        $83 = (($$sum3) + ($77))|0;
        $84 = (($i$049) + 1)|0;
        $85 = ($84>>>0)<($37>>>0);
        if ($85) {
         $cursor$050 = $83;$i$049 = $84;
        } else {
         $cursor$0$lcssa = $83;
         break L21;
        }
       }
       if ((label|0) == 23) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $lpad$phi36$index = $92;$lpad$phi36$index5 = $93;
        label = 26;
        break L3;
       }
       else if ((label|0) == 27) {
        $98 = ___cxa_find_matching_catch()|0;
        $99 = tempRet0;
        __THREW__ = 0;
        invoke_vi(279,($0|0));
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         break L3;
        } else {
         $$0 = $98;$$01 = $99;
         label = 48;
         break L3;
        }
       }
      }
     } while(0);
     $102 = (($payload) + ($cursor$0$lcssa)|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103&255;
     $105 = HEAP32[$7>>2]|0;
     $106 = ($105>>>0)<($104>>>0);
     if ($106) {
      $107 = ($104*20)|0;
      __THREW__ = 0;
      $108 = (invoke_ii(752,($107|0))|0);
      $109 = __THREW__; __THREW__ = 0;
      $110 = $109&1;
      if ($110) {
       label = 25;
       break;
      }
      $111 = ($108|0)==(0|0);
      if (!($111)) {
       $112 = HEAP32[$8>>2]|0;
       $113 = ($112|0)==(0);
       do {
        if (!($113)) {
         $114 = HEAP32[$9>>2]|0;
         $115 = ($114|0)==(0|0);
         if (!($115)) {
          $118 = $114;$i$01$i9 = 0;
          while(1) {
           $116 = (($108) + (($i$01$i9*20)|0)|0);
           $117 = (($118) + (($i$01$i9*20)|0)|0);
           __THREW__ = 0;
           invoke_vii(842,($116|0),($117|0));
           $119 = __THREW__; __THREW__ = 0;
           $120 = $119&1;
           if ($120) {
            label = 22;
            break;
           }
           $121 = HEAP32[$9>>2]|0;
           $122 = (($121) + (($i$01$i9*20)|0)|0);
           $123 = HEAP32[$122>>2]|0;
           $124 = HEAP32[$123>>2]|0;
           __THREW__ = 0;
           invoke_vi($124|0,($122|0));
           $125 = __THREW__; __THREW__ = 0;
           $126 = $125&1;
           if ($126) {
            label = 22;
            break;
           }
           $127 = (($i$01$i9) + 1)|0;
           $128 = HEAP32[$8>>2]|0;
           $129 = ($127>>>0)<($128>>>0);
           if (!($129)) {
            label = 37;
            break;
           }
           $$pre$i11 = HEAP32[$9>>2]|0;
           $118 = $$pre$i11;$i$01$i9 = $127;
          }
          if ((label|0) == 22) {
           $90 = ___cxa_find_matching_catch()|0;
           $91 = tempRet0;
           $lpad$phi36$index = $90;$lpad$phi36$index5 = $91;
           label = 26;
           break L3;
          }
          else if ((label|0) == 37) {
           $$pre3$i14 = HEAP32[$9>>2]|0;
           __ZdlPv($$pre3$i14);
           break;
          }
         }
        }
       } while(0);
       HEAP32[$9>>2] = $108;
       HEAP32[$7>>2] = $104;
      }
     }
     $130 = ($103<<24>>24)==(0);
     if ($130) {
      STACKTOP = sp;return;
     }
     $131 = (($cursor$0$lcssa) + 1)|0;
     $cursor$147 = $131;$i1$048 = 0;
     while(1) {
      __THREW__ = 0;
      invoke_vi(837,($1|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       label = 21;
       break;
      }
      __THREW__ = 0;
      (invoke_iii(872,($6|0),($1|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 46;
       break;
      }
      __THREW__ = 0;
      invoke_vi(279,($1|0));
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 21;
       break;
      }
      $138 = (($payload) + ($cursor$147)|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139&255;
      $141 = $140 << 8;
      $$sum26 = (($cursor$147) + 1)|0;
      $142 = (($payload) + ($$sum26)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = $141 | $144;
      $146 = HEAP32[$9>>2]|0;
      $147 = (($146) + (($i1$048*20)|0)|0);
      $$sum = (($cursor$147) + 2)|0;
      $148 = (($payload) + ($$sum)|0);
      __THREW__ = 0;
      (invoke_iiii(855,($147|0),($148|0),($145|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       label = 21;
       break;
      }
      $151 = (($$sum) + ($145))|0;
      $152 = (($i1$048) + 1)|0;
      $153 = ($152>>>0)<($104>>>0);
      if ($153) {
       $cursor$147 = $151;$i1$048 = $152;
      } else {
       label = 47;
       break;
      }
     }
     if ((label|0) == 21) {
      $88 = ___cxa_find_matching_catch()|0;
      $89 = tempRet0;
      $lpad$phi36$index = $88;$lpad$phi36$index5 = $89;
      label = 26;
      break;
     }
     else if ((label|0) == 46) {
      $154 = ___cxa_find_matching_catch()|0;
      $155 = tempRet0;
      __THREW__ = 0;
      invoke_vi(279,($1|0));
      $156 = __THREW__; __THREW__ = 0;
      $157 = $156&1;
      if ($157) {
       break;
      } else {
       $$0 = $154;$$01 = $155;
       label = 48;
       break;
      }
     }
     else if ((label|0) == 47) {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 25) {
    $96 = ___cxa_find_matching_catch()|0;
    $97 = tempRet0;
    $lpad$phi36$index = $96;$lpad$phi36$index5 = $97;
    label = 26;
   }
   if ((label|0) == 26) {
    $$0 = $lpad$phi36$index;$$01 = $lpad$phi36$index5;
    label = 48;
   }
   if ((label|0) == 48) {
    __THREW__ = 0;
    invoke_vi(279,($10|0));
    $158 = __THREW__; __THREW__ = 0;
    $159 = $158&1;
    if (!($159)) {
     $$1 = $$0;$$12 = $$01;
     break;
    }
   }
   $188 = ___cxa_find_matching_catch(0|0)|0;
   $189 = tempRet0;
   $lpad$phi$index = $188;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  }
 } while(0);
 HEAP32[$6>>2] = (13440);
 $160 = HEAP32[$8>>2]|0;
 $161 = ($160|0)==(0);
 L71: do {
  if (!($161)) {
   $i$01$i$i22 = 0;
   while(1) {
    $162 = HEAP32[$9>>2]|0;
    $163 = (($162) + (($i$01$i$i22*20)|0)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = HEAP32[$164>>2]|0;
    __THREW__ = 0;
    invoke_vi($165|0,($163|0));
    $166 = __THREW__; __THREW__ = 0;
    $167 = $166&1;
    if ($167) {
     break;
    }
    $168 = (($i$01$i$i22) + 1)|0;
    $169 = HEAP32[$8>>2]|0;
    $170 = ($168>>>0)<($169>>>0);
    if ($170) {
     $i$01$i$i22 = $168;
    } else {
     break L71;
    }
   }
   $186 = ___cxa_find_matching_catch(0|0)|0;
   $187 = tempRet0;
   $lpad$phi$index = $186;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  }
 } while(0);
 HEAP32[$8>>2] = 0;
 $171 = HEAP32[$9>>2]|0;
 __ZdlPv($171);
 HEAP32[$2>>2] = (13440);
 $172 = HEAP32[$4>>2]|0;
 $173 = ($172|0)==(0);
 if ($173) {
  HEAP32[$4>>2] = 0;
  $183 = HEAP32[$5>>2]|0;
  __ZdlPv($183);
  ___resumeException($$1|0);
  // unreachable;
 } else {
  $i$01$i$i = 0;
 }
 while(1) {
  $174 = HEAP32[$5>>2]|0;
  $175 = (($174) + (($i$01$i$i*20)|0)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = HEAP32[$176>>2]|0;
  __THREW__ = 0;
  invoke_vi($177|0,($175|0));
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   break;
  }
  $180 = (($i$01$i$i) + 1)|0;
  $181 = HEAP32[$4>>2]|0;
  $182 = ($180>>>0)<($181>>>0);
  if ($182) {
   $i$01$i$i = $180;
  } else {
   label = 55;
   break;
  }
 }
 if ((label|0) == 55) {
  HEAP32[$4>>2] = 0;
  $183 = HEAP32[$5>>2]|0;
  __ZdlPv($183);
  ___resumeException($$1|0);
  // unreachable;
 }
 $184 = ___cxa_find_matching_catch(0|0)|0;
 $185 = tempRet0;
 $lpad$phi$index = $184;
 ___clang_call_terminate($lpad$phi$index);
 // unreachable;
}
function __ZN12AP4_AvccAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 return ($4|0);
}
function __ZN12AP4_AvccAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$0$i$ph = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i1$02 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,19000,$5,0,0);
 $6 = ((($this)) + 37|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 switch ($8|0) {
 case 77:  {
  $$0$i$ph = 18976;
  label = 8;
  break;
 }
 case 88:  {
  $$0$i$ph = 18960;
  label = 8;
  break;
 }
 case 122:  {
  $$0$i$ph = 18928;
  label = 8;
  break;
 }
 case 144:  {
  $$0$i$ph = 18912;
  label = 8;
  break;
 }
 case 110:  {
  $$0$i$ph = 18944;
  label = 8;
  break;
 }
 case 100:  {
  $$0$i$ph = 18952;
  label = 8;
  break;
 }
 case 66:  {
  $$0$i$ph = 18984;
  label = 8;
  break;
 }
 default: {
  $12 = HEAP32[$inspector>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $7&255;
  FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,19024,$15,0,0);
 }
 }
 if ((label|0) == 8) {
  $9 = HEAP32[$inspector>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 1023]($inspector,19024,$$0$i$ph,0);
 }
 $16 = HEAP32[$inspector>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this)) + 39|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 FUNCTION_TABLE_viiiii[$18 & 1023]($inspector,19032,$21,0,1);
 $22 = HEAP32[$inspector>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($this)) + 38|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 FUNCTION_TABLE_viiiii[$24 & 1023]($inspector,19056,$27,0,0);
 $28 = HEAP32[$inspector>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($this)) + 40|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 FUNCTION_TABLE_viiiii[$30 & 1023]($inspector,19064,$33,0,0);
 $34 = ((($this)) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  return 0;
 }
 $37 = ((($this)) + 56|0);
 $i$03 = 0;
 while(1) {
  $39 = HEAP32[$inspector>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$37>>2]|0;
  $43 = (((($42) + (($i$03*20)|0)|0)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (((($42) + (($i$03*20)|0)|0)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_viiiii[$41 & 1023]($inspector,19088,$44,$46,0);
  $47 = (($i$03) + 1)|0;
  $48 = HEAP32[$34>>2]|0;
  $49 = ($47>>>0)<($48>>>0);
  if ($49) {
   $i$03 = $47;
  } else {
   $$lcssa = $48;
   break;
  }
 }
 $phitmp = ($$lcssa|0)==(0);
 if ($phitmp) {
  return 0;
 }
 $38 = ((($this)) + 72|0);
 $i1$02 = 0;
 while(1) {
  $50 = HEAP32[$inspector>>2]|0;
  $51 = ((($50)) + 36|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$38>>2]|0;
  $54 = (((($53) + (($i1$02*20)|0)|0)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (((($53) + (($i1$02*20)|0)|0)) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_viiiii[$52 & 1023]($inspector,19112,$55,$57,0);
  $58 = (($i1$02) + 1)|0;
  $59 = HEAP32[$34>>2]|0;
  $60 = ($58>>>0)<($59>>>0);
  if ($60) {
   $i1$02 = $58;
  } else {
   break;
  }
 }
 return 0;
}
function __ZN9AP4_ArrayI14AP4_DataBufferE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$i = 0, $$pre$pre = 0, $$pre3$i = 0, $$pre6$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ($1|0)==(0);
  $7 = $1 << 1;
  $$ = $6 ? 64 : $7;
  $8 = ($$>>>0)<($4>>>0);
  $new_count$0 = $8 ? $4 : $$;
  $9 = ($1>>>0)<($new_count$0>>>0);
  if ($9) {
   $10 = ($new_count$0*20)|0;
   $11 = (__Znwj($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = -2;
    return ($$0|0);
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)==(0);
   $$pre6$i = ((($this)) + 12|0);
   if ($14) {
    $$pre = 0;
   } else {
    $15 = HEAP32[$$pre6$i>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$pre = $13;
    } else {
     __ZN14AP4_DataBufferC2ERKS_($11,$15);
     $17 = HEAP32[$$pre6$i>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vi[$19 & 1023]($17);
     $20 = HEAP32[$2>>2]|0;
     $21 = ($20>>>0)>(1);
     if ($21) {
      $23 = 1;
      while(1) {
       $$pre$i = HEAP32[$$pre6$i>>2]|0;
       $22 = (($11) + (($23*20)|0)|0);
       $24 = (($$pre$i) + (($23*20)|0)|0);
       __ZN14AP4_DataBufferC2ERKS_($22,$24);
       $25 = HEAP32[$$pre6$i>>2]|0;
       $26 = (($25) + (($23*20)|0)|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = HEAP32[$27>>2]|0;
       FUNCTION_TABLE_vi[$28 & 1023]($26);
       $29 = (($23) + 1)|0;
       $30 = HEAP32[$2>>2]|0;
       $31 = ($29>>>0)<($30>>>0);
       if ($31) {
        $23 = $29;
       } else {
        break;
       }
      }
     }
     $$pre3$i = HEAP32[$$pre6$i>>2]|0;
     __ZdlPv($$pre3$i);
     $$pre$pre = HEAP32[$2>>2]|0;
     $$pre = $$pre$pre;
    }
   }
   HEAP32[$$pre6$i>>2] = $11;
   HEAP32[$0>>2] = $new_count$0;
   $33 = $$pre;
  } else {
   $33 = $3;
  }
 } else {
  $33 = $3;
 }
 $32 = (($33) + 1)|0;
 HEAP32[$2>>2] = $32;
 $34 = ((($this)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($33*20)|0)|0);
 __ZN14AP4_DataBufferC2ERKS_($36,$item);
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_AvccAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$i = 0, $$pre$i13 = 0, $$pre$i3 = 0, $$pre$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i$i = 0, $i$01$i$i14 = 0, $i$01$i$i4 = 0;
 var $i$01$i$i9 = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (18824);
 $0 = ((($this)) + 76|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   $31 = ___cxa_find_matching_catch()|0;
   $32 = tempRet0;
   $33 = ((($this)) + 60|0);
   HEAP32[$33>>2] = (13440);
   $34 = ((($this)) + 68|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   $$pre$i8 = ((($this)) + 72|0);
   L19: do {
    if (!($36)) {
     $i$01$i$i9 = 0;
     while(1) {
      $37 = HEAP32[$$pre$i8>>2]|0;
      $38 = (($37) + (($i$01$i$i9*20)|0)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = HEAP32[$39>>2]|0;
      __THREW__ = 0;
      invoke_vi($40|0,($38|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break;
      }
      $43 = (($i$01$i$i9) + 1)|0;
      $44 = HEAP32[$34>>2]|0;
      $45 = ($43>>>0)<($44>>>0);
      if ($45) {
       $i$01$i$i9 = $43;
      } else {
       break L19;
      }
     }
     $67 = ___cxa_find_matching_catch(0|0)|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;
     ___clang_call_terminate($lpad$phi$index);
     // unreachable;
    }
   } while(0);
   HEAP32[$34>>2] = 0;
   $46 = HEAP32[$$pre$i8>>2]|0;
   __ZdlPv($46);
   $$0 = $32;$$01 = $31;
  } else {
   $3 = ((($this)) + 60|0);
   HEAP32[$3>>2] = (13440);
   $4 = ((($this)) + 68|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   $$pre$i = ((($this)) + 72|0);
   L3: do {
    if (!($6)) {
     $i$01$i$i = 0;
     while(1) {
      $7 = HEAP32[$$pre$i>>2]|0;
      $8 = (($7) + (($i$01$i$i*20)|0)|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = HEAP32[$9>>2]|0;
      __THREW__ = 0;
      invoke_vi($10|0,($8|0));
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       break;
      }
      $13 = (($i$01$i$i) + 1)|0;
      $14 = HEAP32[$4>>2]|0;
      $15 = ($13>>>0)<($14>>>0);
      if ($15) {
       $i$01$i$i = $13;
      } else {
       break L3;
      }
     }
     $47 = ___cxa_find_matching_catch()|0;
     $48 = tempRet0;
     $$0 = $48;$$01 = $47;
     break L1;
    }
   } while(0);
   HEAP32[$4>>2] = 0;
   $16 = HEAP32[$$pre$i>>2]|0;
   __ZdlPv($16);
   $17 = ((($this)) + 44|0);
   HEAP32[$17>>2] = (13440);
   $18 = ((($this)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   $$pre$i3 = ((($this)) + 56|0);
   if ($20) {
    HEAP32[$18>>2] = 0;
    $30 = HEAP32[$$pre$i3>>2]|0;
    __ZdlPv($30);
    return;
   } else {
    $i$01$i$i4 = 0;
   }
   while(1) {
    $21 = HEAP32[$$pre$i3>>2]|0;
    $22 = (($21) + (($i$01$i$i4*20)|0)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    invoke_vi($24|0,($22|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    $27 = (($i$01$i$i4) + 1)|0;
    $28 = HEAP32[$18>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if ($29) {
     $i$01$i$i4 = $27;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    HEAP32[$18>>2] = 0;
    $30 = HEAP32[$$pre$i3>>2]|0;
    __ZdlPv($30);
    return;
   }
   $49 = ___cxa_find_matching_catch()|0;
   $50 = tempRet0;
   $$1 = $50;$$12 = $49;
   ___resumeException($$12|0);
   // unreachable;
  }
 } while(0);
 $51 = ((($this)) + 44|0);
 HEAP32[$51>>2] = (13440);
 $52 = ((($this)) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 $$pre$i13 = ((($this)) + 56|0);
 L27: do {
  if (!($54)) {
   $i$01$i$i14 = 0;
   while(1) {
    $55 = HEAP32[$$pre$i13>>2]|0;
    $56 = (($55) + (($i$01$i$i14*20)|0)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$57>>2]|0;
    __THREW__ = 0;
    invoke_vi($58|0,($56|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
    $61 = (($i$01$i$i14) + 1)|0;
    $62 = HEAP32[$52>>2]|0;
    $63 = ($61>>>0)<($62>>>0);
    if ($63) {
     $i$01$i$i14 = $61;
    } else {
     break L27;
    }
   }
   $65 = ___cxa_find_matching_catch(0|0)|0;
   $66 = tempRet0;
   $lpad$phi$index = $65;
   ___clang_call_terminate($lpad$phi$index);
   // unreachable;
  }
 } while(0);
 HEAP32[$52>>2] = 0;
 $64 = HEAP32[$$pre$i13>>2]|0;
 __ZdlPv($64);
 $$1 = $$0;$$12 = $$01;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZN12AP4_AvccAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(469,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_HmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1752000612,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (19144);
  $8 = ((($4)) + 36|0);
  $9 = ((($4)) + 40|0);
  $10 = ((($4)) + 44|0);
  $11 = ((($4)) + 48|0);
  ;HEAP16[$8>>1]=0|0;HEAP16[$8+2>>1]=0|0;HEAP16[$8+4>>1]=0|0;HEAP16[$8+6>>1]=0|0;HEAP16[$8+8>>1]=0|0;HEAP16[$8+10>>1]=0|0;HEAP16[$8+12>>1]=0|0;HEAP16[$8+14>>1]=0|0;
  __THREW__ = 0;
  (invoke_iii(794,($stream|0),($8|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $14 = ((($4)) + 38|0);
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($14|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($9|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($10|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($11|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $$0 = $4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 __ZdlPv($4);
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_HmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 38|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ((($this)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  return ($$0|0);
 }
 $16 = ((($this)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$17)|0);
 $$0 = $18;
 return ($$0|0);
}
function __ZN12AP4_HmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,19232,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 38|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,19248,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,19264,$16,0,0);
 $17 = HEAP32[$inspector>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viiiii[$19 & 1023]($inspector,19280,$21,0,0);
 return 0;
}
function __ZN12AP4_HmhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_OddaAtom6CreateEyR14AP4_ByteStream($0,$1,$stream) {
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $2 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $3 = ($2|0)==(0);
 $4 = HEAP8[$version>>0]|0;
 $5 = ($4<<24>>24)==(0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (__Znwj(56)|0);
 $7 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(873,($6|0),($0|0),($1|0),0,($7|0),($stream|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZdlPv($6);
  ___resumeException($10|0);
  // unreachable;
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_OddaAtomC2EyhjR14AP4_ByteStream($this,$0,$1,$version,$flags,$stream) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $position = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $position = sp;
 __ZN8AP4_AtomC2Ejybhj($this,1868850273,$0,$1,1,$version,$flags);
 HEAP32[$this>>2] = (19304);
 $2 = ((($this)) + 40|0);
 __THREW__ = 0;
 (invoke_iii(840,($stream|0),($2|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = HEAP32[$stream>>2]|0;
   $6 = ((($5)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   (invoke_iii($7|0,($stream|0),($position|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    __THREW__ = 0;
    $10 = (invoke_ii(752,40)|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if (!($12)) {
     $13 = $position;
     $14 = $13;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($13) + 4)|0;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = $2;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $22 = (($19) + 4)|0;
     $23 = $22;
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii(808,($10|0),($stream|0),($15|0),($18|0),($21|0),($24|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $49 = ___cxa_find_matching_catch()|0;
      $50 = tempRet0;
      __ZdlPv($10);
      $$0 = $50;$$01 = $49;
      ___resumeException($$01|0);
      // unreachable;
     } else {
      $27 = ((($this)) + 48|0);
      HEAP32[$27>>2] = $10;
      $28 = HEAP32[$stream>>2]|0;
      $29 = ((($28)) + 24|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $position;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = $2;
      $38 = $37;
      $39 = HEAP32[$38>>2]|0;
      $40 = (($37) + 4)|0;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (_i64Add(($39|0),($42|0),($33|0),($36|0))|0);
      $44 = tempRet0;
      __THREW__ = 0;
      (invoke_iiii($30|0,($stream|0),($43|0),($44|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break;
      }
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 $$0 = $48;$$01 = $47;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN12AP4_OddaAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19304);
 $0 = ((($this)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($1);
 return;
}
function __ZN12AP4_OddaAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19304);
 $0 = ((($this)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_OddaAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$3,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  return ($$0|0);
 }
 $9 = ((($this)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = -1;
  return ($$0|0);
 }
 $12 = ((($this)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = ((($this)) + 16|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21;$24 = $18;
 } else {
  $22 = 0;$24 = $13;
 }
 $23 = ($22>>>0)<(0);
 $25 = ($24>>>0)<(8);
 $26 = ($22|0)==(0);
 $27 = $26 & $25;
 $28 = $23 | $27;
 if ($28) {
  $$0 = -1;
  return ($$0|0);
 }
 $29 = HEAP32[$10>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_iiii[$31 & 1023]($10,0,0)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  return ($$0|0);
 }
 $34 = HEAP32[$9>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiiii[$37 & 1023]($34,$stream,$40,$43)|0);
 $$0 = $44;
 return ($$0|0);
}
function __ZN12AP4_OddaAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,19392,$6,0,0);
 return 0;
}
function __ZN12AP4_IodsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor$i = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor$i = sp + 4|0;
 $version = sp + 8|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1768907891,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  __ZdlPv($4);
  ___resumeException($24|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (19424);
 HEAP32[$descriptor$i>>2] = 0;
 __THREW__ = 0;
 $8 = (invoke_iii(795,($stream|0),($descriptor$i|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  __ZdlPv($4);
  ___resumeException($24|0);
  // unreachable;
 }
 $11 = ($8|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$descriptor$i>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = ((($4)) + 36|0);
    HEAP32[$14>>2] = 0;
    break;
   }
   $15 = (___dynamic_cast($12,10880,4928,0)|0);
   $16 = ((($4)) + 36|0);
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)==(0|0);
   if ($17) {
    $18 = HEAP32[$12>>2]|0;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    invoke_vi($20|0,($12|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $24 = ___cxa_find_matching_catch()|0;
     $25 = tempRet0;
     __ZdlPv($4);
     ___resumeException($24|0);
     // unreachable;
    }
   }
  } else {
   $23 = ((($4)) + 36|0);
   HEAP32[$23>>2] = 0;
  }
 } while(0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_IodsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19424);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($1);
 return;
}
function __ZN12AP4_IodsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19424);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_IodsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 1023]($1,$stream)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN12AP4_IodsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 (FUNCTION_TABLE_iii[$5 & 1023]($1,$inspector)|0);
 return 0;
}
function __ZN12AP4_StsdAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(72)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(874,($4|0),($size|0),($2|0),($5|0),($stream|0),($atom_factory|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StsdAtomC2EP15AP4_SampleTable($this,$sample_table) {
 $this = $this|0;
 $sample_table = $sample_table|0;
 var $$$i = 0, $$pre$i1 = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$05 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejhj($this,1937011556,0,0);
 HEAP32[$this>>2] = (19520);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (19608);
 $1 = ((($this)) + 56|0);
 HEAP32[$1>>2] = (19696);
 $2 = ((($this)) + 60|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 64|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 68|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$sample_table>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_ii($10|0,($sample_table|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if ($13) {
   label = 28;
  } else {
   $14 = HEAP32[$2>>2]|0;
   $15 = ($14>>>0)<($11>>>0);
   if ($15) {
    $16 = $11 << 2;
    __THREW__ = 0;
    $17 = (invoke_ii(752,($16|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 28;
     break;
    }
    $20 = ($17|0)==(0|0);
    if (!($20)) {
     $21 = HEAP32[$3>>2]|0;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $23 = HEAP32[$4>>2]|0;
      $24 = ($23|0)==(0|0);
      if (!($24)) {
       $i$01$i = 0;
       while(1) {
        $25 = (($17) + ($i$01$i<<2)|0);
        $26 = (($23) + ($i$01$i<<2)|0);
        $27 = HEAP32[$26>>2]|0;
        HEAP32[$25>>2] = $27;
        $28 = (($i$01$i) + 1)|0;
        $exitcond = ($28|0)==($21|0);
        if ($exitcond) {
         break;
        } else {
         $i$01$i = $28;
        }
       }
       __ZdlPv($23);
      }
     }
     HEAP32[$4>>2] = $17;
     HEAP32[$2>>2] = $11;
    }
   }
   $29 = ($11|0)==(0);
   if ($29) {
    return;
   }
   $i$05 = 0;
   while(1) {
    $30 = HEAP32[$2>>2]|0;
    $31 = HEAP32[$3>>2]|0;
    $32 = (($31) + 1)|0;
    $33 = ($30>>>0)<($32>>>0);
    if ($33) {
     $34 = ($30|0)==(0);
     $35 = $30 << 1;
     $$$i = $34 ? 64 : $35;
     $36 = ($$$i>>>0)<($32>>>0);
     $new_count$0$i = $36 ? $32 : $$$i;
     $37 = ($30>>>0)<($new_count$0$i>>>0);
     if ($37) {
      $38 = $new_count$0$i << 2;
      __THREW__ = 0;
      $39 = (invoke_ii(752,($38|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 27;
       break;
      }
      $42 = ($39|0)==(0|0);
      if (!($42)) {
       $43 = HEAP32[$3>>2]|0;
       $44 = ($43|0)==(0);
       if ($44) {
        $$pre$i1 = 0;
       } else {
        $45 = HEAP32[$4>>2]|0;
        $46 = ($45|0)==(0|0);
        if ($46) {
         $$pre$i1 = $43;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $47 = (($39) + ($i$01$i$i<<2)|0);
          $48 = (($45) + ($i$01$i$i<<2)|0);
          $49 = HEAP32[$48>>2]|0;
          HEAP32[$47>>2] = $49;
          $50 = (($i$01$i$i) + 1)|0;
          $exitcond$i = ($50|0)==($43|0);
          if ($exitcond$i) {
           break;
          } else {
           $i$01$i$i = $50;
          }
         }
         __ZdlPv($45);
         $$pre$pre$i = HEAP32[$3>>2]|0;
         $$pre$i1 = $$pre$pre$i;
        }
       }
       HEAP32[$4>>2] = $39;
       HEAP32[$2>>2] = $new_count$0$i;
       $52 = $$pre$i1;
       label = 21;
      }
     } else {
      $52 = $31;
      label = 21;
     }
    } else {
     $52 = $31;
     label = 21;
    }
    if ((label|0) == 21) {
     label = 0;
     $51 = (($52) + 1)|0;
     HEAP32[$3>>2] = $51;
     $53 = HEAP32[$4>>2]|0;
     $54 = (($53) + ($52<<2)|0);
     HEAP32[$54>>2] = 0;
    }
    $55 = HEAP32[$sample_table>>2]|0;
    $56 = ((($55)) + 28|0);
    $57 = HEAP32[$56>>2]|0;
    __THREW__ = 0;
    $58 = (invoke_iii($57|0,($sample_table|0),($i$05|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     label = 27;
     break;
    }
    $61 = HEAP32[$58>>2]|0;
    $62 = ((($61)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($58|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 27;
     break;
    }
    $67 = HEAP32[$0>>2]|0;
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    __THREW__ = 0;
    (invoke_iiii($69|0,($0|0),($64|0),-1)|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 27;
     break;
    }
    $72 = (($i$05) + 1)|0;
    $73 = ($72>>>0)<($11>>>0);
    if ($73) {
     $i$05 = $72;
    } else {
     label = 26;
     break;
    }
   }
   if ((label|0) == 26) {
    return;
   }
   else if ((label|0) == 27) {
    $74 = ___cxa_find_matching_catch()|0;
    $75 = tempRet0;
    $$pre$phiZ2D = $4;$lpad$phi$index = $74;$lpad$phi$index2 = $75;
    break;
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $$pre$phiZ2D = $4;$lpad$phi$index = $76;$lpad$phi$index2 = $77;
 }
 HEAP32[$1>>2] = (19696);
 HEAP32[$3>>2] = 0;
 $78 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZdlPv($78);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $81 = ___cxa_find_matching_catch(0|0)|0;
  $82 = tempRet0;
  ___clang_call_terminate($81);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
}
function __ZN12AP4_StsdAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$$i = 0, $$pr = 0, $$pre$i3 = 0, $$pre$phiZ2D = 0, $$pre$pre$i = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0, $exitcond = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i$i = 0, $i$010 = 0, $i1$09 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index7 = 0, $lpad$phi8$index = 0, $lpad$phi8$index2 = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 12|0;
 $bytes_available = sp;
 $atom = sp + 8|0;
 __ZN17AP4_ContainerAtomC2Ejybhj($this,1937011556,$size,0,0,$version,$flags);
 HEAP32[$this>>2] = (19520);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (19608);
 $1 = ((($this)) + 56|0);
 HEAP32[$1>>2] = (19696);
 $2 = ((($this)) + 60|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 64|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 68|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if ($6) {
   label = 40;
  } else {
   $7 = ((($this)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_vii(875,($atom_factory|0),($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    label = 40;
   } else {
    $11 = (($size) + -16)|0;
    $12 = $bytes_available;
    $13 = $12;
    HEAP32[$13>>2] = $11;
    $14 = (($12) + 4)|0;
    $15 = $14;
    HEAP32[$15>>2] = 0;
    $16 = HEAP32[$entry_count>>2]|0;
    $17 = ($16|0)==(0);
    L4: do {
     if (!($17)) {
      $18 = ((($this)) + 52|0);
      $19 = ((($this)) + 48|0);
      $20 = ((($this)) + 44|0);
      $i$010 = 0;
      while(1) {
       __THREW__ = 0;
       $21 = (invoke_iiiii(876,($atom_factory|0),($stream|0),($bytes_available|0),($atom|0))|0);
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        break;
       }
       $24 = ($21|0)==(0);
       if ($24) {
        $25 = HEAP32[$atom>>2]|0;
        $26 = HEAP32[$25>>2]|0;
        $27 = ((($26)) + 36|0);
        $28 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        (invoke_iii($28|0,($25|0),($0|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         break;
        }
        $31 = HEAP32[$atom>>2]|0;
        __THREW__ = 0;
        $32 = (invoke_ii(752,12)|0);
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         break;
        }
        HEAP32[$32>>2] = $31;
        $35 = ((($32)) + 4|0);
        HEAP32[$35>>2] = 0;
        $36 = ((($32)) + 8|0);
        HEAP32[$36>>2] = 0;
        $37 = HEAP32[$18>>2]|0;
        $38 = ($37|0)==(0|0);
        if ($38) {
         HEAP32[$19>>2] = $32;
         HEAP32[$18>>2] = $32;
         HEAP32[$35>>2] = 0;
         $$sink$i$i = 0;
        } else {
         HEAP32[$35>>2] = 0;
         $39 = ((($37)) + 4|0);
         HEAP32[$39>>2] = $32;
         HEAP32[$18>>2] = $32;
         $$sink$i$i = $37;
        }
        HEAP32[$36>>2] = $$sink$i$i;
        $40 = HEAP32[$20>>2]|0;
        $41 = (($40) + 1)|0;
        HEAP32[$20>>2] = $41;
       }
       $42 = (($i$010) + 1)|0;
       $43 = HEAP32[$entry_count>>2]|0;
       $44 = ($42>>>0)<($43>>>0);
       if ($44) {
        $i$010 = $42;
       } else {
        break L4;
       }
      }
      $96 = ___cxa_find_matching_catch()|0;
      $97 = tempRet0;
      $lpad$phi8$index = $96;$lpad$phi8$index2 = $97;
      label = 41;
      break L1;
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(877,($atom_factory|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     label = 40;
    } else {
     $47 = ((($this)) + 44|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP32[$2>>2]|0;
     $50 = ($49>>>0)<($48>>>0);
     if ($50) {
      $51 = $48 << 2;
      __THREW__ = 0;
      $52 = (invoke_ii(752,($51|0))|0);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       label = 40;
       break;
      }
      $55 = ($52|0)==(0|0);
      if (!($55)) {
       $56 = HEAP32[$3>>2]|0;
       $57 = ($56|0)==(0);
       if (!($57)) {
        $58 = HEAP32[$4>>2]|0;
        $59 = ($58|0)==(0|0);
        if (!($59)) {
         $i$01$i = 0;
         while(1) {
          $60 = (($52) + ($i$01$i<<2)|0);
          $61 = (($58) + ($i$01$i<<2)|0);
          $62 = HEAP32[$61>>2]|0;
          HEAP32[$60>>2] = $62;
          $63 = (($i$01$i) + 1)|0;
          $exitcond = ($63|0)==($56|0);
          if ($exitcond) {
           break;
          } else {
           $i$01$i = $63;
          }
         }
         __ZdlPv($58);
        }
       }
       HEAP32[$4>>2] = $52;
       HEAP32[$2>>2] = $48;
      }
      $$pr = HEAP32[$47>>2]|0;
      $64 = $$pr;
     } else {
      $64 = $48;
     }
     $65 = ($64|0)==(0);
     if ($65) {
      STACKTOP = sp;return;
     }
     $i1$09 = 0;
     while(1) {
      $66 = HEAP32[$2>>2]|0;
      $67 = HEAP32[$3>>2]|0;
      $68 = (($67) + 1)|0;
      $69 = ($66>>>0)<($68>>>0);
      if ($69) {
       $70 = ($66|0)==(0);
       $71 = $66 << 1;
       $$$i = $70 ? 64 : $71;
       $72 = ($$$i>>>0)<($68>>>0);
       $new_count$0$i = $72 ? $68 : $$$i;
       $73 = ($66>>>0)<($new_count$0$i>>>0);
       if ($73) {
        $74 = $new_count$0$i << 2;
        __THREW__ = 0;
        $75 = (invoke_ii(752,($74|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 38;
         break;
        }
        $78 = ($75|0)==(0|0);
        if (!($78)) {
         $79 = HEAP32[$3>>2]|0;
         $80 = ($79|0)==(0);
         if ($80) {
          $$pre$i3 = 0;
         } else {
          $81 = HEAP32[$4>>2]|0;
          $82 = ($81|0)==(0|0);
          if ($82) {
           $$pre$i3 = $79;
          } else {
           $i$01$i$i = 0;
           while(1) {
            $83 = (($75) + ($i$01$i$i<<2)|0);
            $84 = (($81) + ($i$01$i$i<<2)|0);
            $85 = HEAP32[$84>>2]|0;
            HEAP32[$83>>2] = $85;
            $86 = (($i$01$i$i) + 1)|0;
            $exitcond$i = ($86|0)==($79|0);
            if ($exitcond$i) {
             break;
            } else {
             $i$01$i$i = $86;
            }
           }
           __ZdlPv($81);
           $$pre$pre$i = HEAP32[$3>>2]|0;
           $$pre$i3 = $$pre$pre$i;
          }
         }
         HEAP32[$4>>2] = $75;
         HEAP32[$2>>2] = $new_count$0$i;
         $88 = $$pre$i3;
         label = 35;
        }
       } else {
        $88 = $67;
        label = 35;
       }
      } else {
       $88 = $67;
       label = 35;
      }
      if ((label|0) == 35) {
       label = 0;
       $87 = (($88) + 1)|0;
       HEAP32[$3>>2] = $87;
       $89 = HEAP32[$4>>2]|0;
       $90 = (($89) + ($88<<2)|0);
       HEAP32[$90>>2] = 0;
      }
      $91 = (($i1$09) + 1)|0;
      $92 = HEAP32[$47>>2]|0;
      $93 = ($91>>>0)<($92>>>0);
      if ($93) {
       $i1$09 = $91;
      } else {
       label = 37;
       break;
      }
     }
     if ((label|0) == 37) {
      STACKTOP = sp;return;
     }
     else if ((label|0) == 38) {
      $94 = ___cxa_find_matching_catch()|0;
      $95 = tempRet0;
      $$pre$phiZ2D = $4;$lpad$phi$index = $94;$lpad$phi$index7 = $95;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 40) {
  $98 = ___cxa_find_matching_catch()|0;
  $99 = tempRet0;
  $lpad$phi8$index = $98;$lpad$phi8$index2 = $99;
  label = 41;
 }
 if ((label|0) == 41) {
  $$pre$phiZ2D = $4;$lpad$phi$index = $lpad$phi8$index;$lpad$phi$index7 = $lpad$phi8$index2;
 }
 HEAP32[$1>>2] = (19696);
 HEAP32[$3>>2] = 0;
 $100 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZdlPv($100);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $103 = ___cxa_find_matching_catch(0|0)|0;
  $104 = tempRet0;
  ___clang_call_terminate($103);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
}
function __ZN12AP4_StsdAtomD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19520);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (19608);
 $1 = ((($this)) + 56|0);
 $2 = ((($this)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre10 = ((($this)) + 68|0);
 if ($4) {
  HEAP32[$1>>2] = (19696);
  HEAP32[$2>>2] = 0;
  $17 = HEAP32[$$pre10>>2]|0;
  __ZdlPv($17);
  $18 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($18);
  return;
 } else {
  $27 = $3;$i$06 = 0;
 }
 while(1) {
  $5 = HEAP32[$$pre10>>2]|0;
  $6 = (($5) + ($i$06<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $16 = $27;
  } else {
   $9 = HEAP32[$7>>2]|0;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   invoke_vi($11|0,($7|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    break;
   }
   $$pre = HEAP32[$2>>2]|0;
   $16 = $$pre;
  }
  $14 = (($i$06) + 1)|0;
  $15 = ($14>>>0)<($16>>>0);
  if ($15) {
   $27 = $16;$i$06 = $14;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$1>>2] = (19696);
  HEAP32[$2>>2] = 0;
  $17 = HEAP32[$$pre10>>2]|0;
  __ZdlPv($17);
  $18 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($18);
  return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 HEAP32[$1>>2] = (19696);
 HEAP32[$2>>2] = 0;
 $21 = HEAP32[$$pre10>>2]|0;
 __ZdlPv($21);
 $22 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_StsdAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __ZN12AP4_StsdAtomD2Ev($0);
 return;
}
function __ZN12AP4_StsdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(484,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_StsdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(484,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN12AP4_StsdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0;
 var $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = (11232);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $stream;
 $6 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$6>>2]|0;
 $7 = ($item$01$i|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[(11240)>>2]|0;
 $9 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$8 & 1023]($0,$9)|0);
 $10 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$10>>2]|0;
 $11 = ($item$0$i1|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $12 = ((($$pre)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$13 & 1023]($0,$14)|0);
  $15 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$15>>2]|0;
  $16 = ($item$0$i|0)==(0|0);
  if ($16) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_StsdAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$off0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i3 = 0, $item$0$i4 = 0, $item$01$i = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($this)|0);
 $6 = (($5) + 4)|0;
 $7 = $size;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $11 = ((($1)) + 4|0);
 HEAP32[$11>>2] = $size;
 $12 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$12>>2]|0;
 $13 = ($item$01$i|0)==(0|0);
 if ($13) {
  $$off0 = $6;
 } else {
  $14 = HEAP32[$item$01$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$14)|0);
  $15 = ((($item$01$i)) + 4|0);
  $item$0$i3 = HEAP32[$15>>2]|0;
  $16 = ($item$0$i3|0)==(0|0);
  if (!($16)) {
   $item$0$i4 = $item$0$i3;
   while(1) {
    $$pre = HEAP32[$1>>2]|0;
    $17 = ((($$pre)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$item$0$i4>>2]|0;
    (FUNCTION_TABLE_iii[$18 & 1023]($1,$19)|0);
    $20 = ((($item$0$i4)) + 4|0);
    $item$0$i = HEAP32[$20>>2]|0;
    $21 = ($item$0$i|0)==(0|0);
    if ($21) {
     break;
    } else {
     $item$0$i4 = $item$0$i;
    }
   }
  }
  $22 = $size;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $$off0 = $24;
 }
 $28 = ((($this)) + 8|0);
 HEAP32[$28>>2] = $$off0;
 $29 = ((($this)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$30>>2]|0;
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vii[$34 & 1023]($30,$this);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_StsdAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$off0$i = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i$i = 0, $item$0$i$i1 = 0, $item$0$i$i2 = 0;
 var $item$01$i$i = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $1 = sp + 8|0;
 $2 = ((($this)) + -36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = (($6) + 4)|0;
 $8 = $size$i;
 $9 = $8;
 HEAP32[$9>>2] = $7;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $12 = ((($1)) + 4|0);
 HEAP32[$12>>2] = $size$i;
 $13 = ((($2)) + 48|0);
 $item$01$i$i = HEAP32[$13>>2]|0;
 $14 = ($item$01$i$i|0)==(0|0);
 if ($14) {
  $$off0$i = $7;
 } else {
  $15 = HEAP32[$item$01$i$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$15)|0);
  $16 = ((($item$01$i$i)) + 4|0);
  $item$0$i$i1 = HEAP32[$16>>2]|0;
  $17 = ($item$0$i$i1|0)==(0|0);
  if (!($17)) {
   $item$0$i$i2 = $item$0$i$i1;
   while(1) {
    $$pre$i = HEAP32[$1>>2]|0;
    $18 = ((($$pre$i)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$item$0$i$i2>>2]|0;
    (FUNCTION_TABLE_iii[$19 & 1023]($1,$20)|0);
    $21 = ((($item$0$i$i2)) + 4|0);
    $item$0$i$i = HEAP32[$21>>2]|0;
    $22 = ($item$0$i$i|0)==(0|0);
    if ($22) {
     break;
    } else {
     $item$0$i$i2 = $item$0$i$i;
    }
   }
  }
  $23 = $size$i;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $$off0$i = $25;
 }
 $29 = ((($this)) + -28|0);
 HEAP32[$29>>2] = $$off0$i;
 $30 = ((($2)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$31>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_vii[$35 & 1023]($31,$2);
 STACKTOP = sp;return;
}
function __ZN12AP4_StsdAtom20GetSampleDescriptionEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $$0 = 0, $$013$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$lcssa$i = 0, $item$02$i = 0, $item$04$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($index>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($this)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($index<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 48|0);
 $item$02$i = HEAP32[$8>>2]|0;
 $9 = ($index|0)==(0);
 if ($9) {
  $item$0$lcssa$i = $item$02$i;
 } else {
  $$013$i = $index;$item$04$i = $item$02$i;
  while(1) {
   $10 = (($$013$i) + -1)|0;
   $11 = ((($item$04$i)) + 4|0);
   $item$0$i = HEAP32[$11>>2]|0;
   $12 = ($10|0)==(0);
   if ($12) {
    $item$0$lcssa$i = $item$0$i;
    break;
   } else {
    $$013$i = $10;$item$04$i = $item$0$i;
   }
  }
 }
 $13 = HEAP32[$item$0$lcssa$i>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  label = 7;
 } else {
  $15 = (___dynamic_cast($13,11216,22840,0)|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   label = 7;
  } else {
   $24 = HEAP32[$15>>2]|0;
   $25 = ((($24)) + 68|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (FUNCTION_TABLE_ii[$26 & 1023]($15)|0);
   $28 = HEAP32[$3>>2]|0;
   $29 = (($28) + ($index<<2)|0);
   HEAP32[$29>>2] = $27;
  }
 }
 do {
  if ((label|0) == 7) {
   $17 = (__Znwj(36)|0);
   __THREW__ = 0;
   invoke_vii(878,($17|0),($13|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $22 = ___cxa_find_matching_catch()|0;
    $23 = tempRet0;
    __ZdlPv($17);
    ___resumeException($22|0);
    // unreachable;
   } else {
    $20 = HEAP32[$3>>2]|0;
    $21 = (($20) + ($index<<2)|0);
    HEAP32[$21>>2] = $17;
    break;
   }
  }
 } while(0);
 $30 = HEAP32[$3>>2]|0;
 $31 = (($30) + ($index<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $$0 = $32;
 return ($$0|0);
}
function __ZN12AP4_StsdAtom14GetSampleEntryEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $$0 = 0, $$013$i = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$lcssa$i = 0, $item$02$i = 0, $item$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($index>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($this)) + 48|0);
 $item$02$i = HEAP32[$3>>2]|0;
 $4 = ($index|0)==(0);
 if ($4) {
  $item$0$lcssa$i = $item$02$i;
 } else {
  $$013$i = $index;$item$04$i = $item$02$i;
  while(1) {
   $5 = (($$013$i) + -1)|0;
   $6 = ((($item$04$i)) + 4|0);
   $item$0$i = HEAP32[$6>>2]|0;
   $7 = ($5|0)==(0);
   if ($7) {
    $item$0$lcssa$i = $item$0$i;
    break;
   } else {
    $$013$i = $5;$item$04$i = $item$0$i;
   }
  }
 }
 $8 = HEAP32[$item$0$lcssa$i>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (___dynamic_cast($8,11216,22840,0)|0);
 $$0 = $10;
 return ($$0|0);
}
function __ZN12AP4_StsdAtom25GetSampleDescriptionCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12AP4_StsdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0;
 var $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,25024,$5,0,0);
 HEAP32[$0>>2] = (2392);
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $inspector;
 $7 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$7>>2]|0;
 $8 = ($item$01$i|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return 0;
 }
 $9 = HEAP32[$item$01$i>>2]|0;
 (__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($0,$9)|0);
 $10 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$10>>2]|0;
 $11 = ($item$0$i1|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $12 = ((($$pre)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$13 & 1023]($0,$14)|0);
  $15 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$15>>2]|0;
  $16 = ($item$0$i|0)==(0|0);
  if ($16) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19696);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19696);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_Dec3Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $payload_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp;
 $0 = (($size) + -8)|0;
 __ZN14AP4_DataBufferC2Ej($payload_data,$0);
 $1 = ((($payload_data)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(788,($stream|0),($2|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 3;
  } else {
   $6 = ($3|0)==(0);
   if (!($6)) {
    $$0 = 0;
    __ZN14AP4_DataBufferD2Ev($payload_data);
    STACKTOP = sp;return ($$0|0);
   }
   $9 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   $10 = (invoke_ii(752,80)|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    label = 3;
   } else {
    __THREW__ = 0;
    invoke_viii(879,($10|0),($size|0),($9|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $15 = ___cxa_find_matching_catch()|0;
     $16 = tempRet0;
     __ZdlPv($10);
     $$01 = $16;$$02 = $15;
     break;
    } else {
     $$0 = $10;
     __ZN14AP4_DataBufferD2Ev($payload_data);
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $$01 = $8;$$02 = $7;
 }
 __THREW__ = 0;
 invoke_vi(279,($payload_data|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_Dec3AtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $$1 = 0, $$masked = 0, $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond3$i = 0, $i$01$i$i = 0, $i$05 = 0;
 var $i1$02$i = 0, $payload_size$03 = 0, $payload_size$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1684366131,$size);
 HEAP32[$this>>2] = (19760);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = (19856);
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(837,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $$01 = $13;$$02 = $12;
  HEAP32[$1>>2] = (19856);
  HEAP32[$3>>2] = 0;
  $105 = HEAP32[$4>>2]|0;
  __ZdlPv($105);
  ___resumeException($$02|0);
  // unreachable;
 }
 $8 = (($size) + -8)|0;
 __THREW__ = 0;
 (invoke_iiii(855,($5|0),($payload|0),($8|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L5: do {
  if (!($10)) {
   $11 = ($8>>>0)<(2);
   if ($11) {
    return;
   }
   $18 = HEAP8[$payload>>0]|0;
   $19 = $18&255;
   $20 = $19 << 5;
   $21 = ((($payload)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 >>> 3;
   $25 = $24 | $20;
   HEAP32[$0>>2] = $25;
   $26 = HEAP8[$21>>0]|0;
   $27 = $26&255;
   $28 = $27 & 7;
   $29 = (($28) + 1)|0;
   $30 = HEAP32[$3>>2]|0;
   $31 = ($30|0)==($29|0);
   do {
    if (!($31)) {
     $32 = ($30>>>0)>($29>>>0);
     if ($32) {
      HEAP32[$3>>2] = $29;
      break;
     }
     $33 = HEAP32[$2>>2]|0;
     $34 = ($33>>>0)<($29>>>0);
     if ($34) {
      $35 = ($29*28)|0;
      __THREW__ = 0;
      $36 = (invoke_ii(752,($35|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break L5;
      }
      $39 = ($36|0)==(0|0);
      if ($39) {
       break;
      }
      $40 = HEAP32[$3>>2]|0;
      $41 = ($40|0)==(0);
      if ($41) {
       $$pre$i = 0;
      } else {
       $42 = HEAP32[$4>>2]|0;
       $43 = ($42|0)==(0|0);
       if ($43) {
        $$pre$i = $40;
       } else {
        $i$01$i$i = 0;
        while(1) {
         $44 = (($36) + (($i$01$i$i*28)|0)|0);
         $45 = (($42) + (($i$01$i$i*28)|0)|0);
         ;HEAP32[$44>>2]=HEAP32[$45>>2]|0;HEAP32[$44+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$45+12>>2]|0;HEAP32[$44+16>>2]=HEAP32[$45+16>>2]|0;HEAP32[$44+20>>2]=HEAP32[$45+20>>2]|0;HEAP32[$44+24>>2]=HEAP32[$45+24>>2]|0;
         $46 = (($i$01$i$i) + 1)|0;
         $exitcond3$i = ($46|0)==($40|0);
         if ($exitcond3$i) {
          break;
         } else {
          $i$01$i$i = $46;
         }
        }
        __ZdlPv($42);
        $$pre$pre$i = HEAP32[$3>>2]|0;
        $$pre$i = $$pre$pre$i;
       }
      }
      HEAP32[$4>>2] = $36;
      HEAP32[$2>>2] = $29;
      $47 = $$pre$i;
     } else {
      $47 = $30;
     }
     $48 = ($47>>>0)<($29>>>0);
     if ($48) {
      $i1$02$i = $47;
      while(1) {
       $49 = HEAP32[$4>>2]|0;
       $50 = (($49) + (($i1$02$i*28)|0)|0);
       ;HEAP32[$50>>2]=0|0;HEAP32[$50+4>>2]=0|0;HEAP32[$50+8>>2]=0|0;HEAP32[$50+12>>2]=0|0;HEAP32[$50+16>>2]=0|0;HEAP32[$50+20>>2]=0|0;HEAP32[$50+24>>2]=0|0;
       $51 = (($i1$02$i) + 1)|0;
       $exitcond$i = ($51|0)==($29|0);
       if ($exitcond$i) {
        break;
       } else {
        $i1$02$i = $51;
       }
      }
     }
     HEAP32[$3>>2] = $29;
    }
   } while(0);
   $52 = (($size) + -10)|0;
   $53 = ((($payload)) + 2|0);
   $54 = $26&255;
   $55 = $54 & 7;
   $$04 = $53;$i$05 = 0;$payload_size$03 = $52;
   while(1) {
    $56 = ($payload_size$03>>>0)<(3);
    do {
     if ($56) {
      $57 = HEAP32[$4>>2]|0;
      $58 = (($57) + (($i$05*28)|0)|0);
      ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;HEAP32[$58+12>>2]=0|0;HEAP32[$58+16>>2]=0|0;HEAP32[$58+20>>2]=0|0;HEAP32[$58+24>>2]=0|0;
      $$1 = $$04;$payload_size$1 = $payload_size$03;
     } else {
      $59 = HEAP8[$$04>>0]|0;
      $60 = $59&255;
      $61 = $60 >>> 6;
      $62 = HEAP32[$4>>2]|0;
      $63 = (($62) + (($i$05*28)|0)|0);
      HEAP32[$63>>2] = $61;
      $64 = HEAP8[$$04>>0]|0;
      $65 = $64&255;
      $66 = $65 >>> 1;
      $67 = $66 & 31;
      $68 = (((($62) + (($i$05*28)|0)|0)) + 4|0);
      HEAP32[$68>>2] = $67;
      $69 = HEAP8[$$04>>0]|0;
      $70 = $69&255;
      $71 = $70 << 4;
      $72 = ((($$04)) + 1|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = $73&255;
      $75 = $74 >>> 4;
      $$masked = $71 & 16;
      $76 = $$masked | $75;
      $77 = (((($62) + (($i$05*28)|0)|0)) + 8|0);
      HEAP32[$77>>2] = $76;
      $78 = HEAP8[$72>>0]|0;
      $79 = $78&255;
      $80 = $79 >>> 1;
      $81 = $80 & 7;
      $82 = (((($62) + (($i$05*28)|0)|0)) + 12|0);
      HEAP32[$82>>2] = $81;
      $83 = HEAP8[$72>>0]|0;
      $84 = $83&255;
      $85 = $84 & 1;
      $86 = (((($62) + (($i$05*28)|0)|0)) + 16|0);
      HEAP32[$86>>2] = $85;
      $87 = ((($$04)) + 2|0);
      $88 = HEAP8[$87>>0]|0;
      $89 = $88&255;
      $90 = $89 >>> 1;
      $91 = $90 & 15;
      $92 = (((($62) + (($i$05*28)|0)|0)) + 20|0);
      HEAP32[$92>>2] = $91;
      $93 = ($91|0)==(0);
      if ($93) {
       $101 = (((($62) + (($i$05*28)|0)|0)) + 24|0);
       HEAP32[$101>>2] = 0;
       $102 = ((($$04)) + 3|0);
       $103 = (($payload_size$03) + -3)|0;
       $$1 = $102;$payload_size$1 = $103;
       break;
      } else {
       $94 = ((($$04)) + 3|0);
       $95 = HEAP8[$94>>0]|0;
       $96 = $95&255;
       $97 = $96 & 31;
       $98 = (((($62) + (($i$05*28)|0)|0)) + 24|0);
       HEAP32[$98>>2] = $97;
       $99 = ((($$04)) + 4|0);
       $100 = (($payload_size$03) + -4)|0;
       $$1 = $99;$payload_size$1 = $100;
       break;
      }
     }
    } while(0);
    $104 = (($i$05) + 1)|0;
    $exitcond = ($i$05|0)==($55|0);
    if ($exitcond) {
     break;
    } else {
     $$04 = $$1;$i$05 = $104;$payload_size$03 = $payload_size$1;
    }
   }
   return;
  }
 } while(0);
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($5|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $106 = ___cxa_find_matching_catch(0|0)|0;
  $107 = tempRet0;
  ___clang_call_terminate($106);
  // unreachable;
 } else {
  $$01 = $15;$$02 = $14;
  HEAP32[$1>>2] = (19856);
  HEAP32[$3>>2] = 0;
  $105 = HEAP32[$4>>2]|0;
  __ZdlPv($105);
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN12AP4_Dec3Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$1,$3)|0);
 return ($4|0);
}
function __ZN12AP4_Dec3Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $name = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 296|0;
 $value = sp + 40|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,19864,$4,0,0);
 $5 = ((($this)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = ((($this)) + 52|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($name,16,19880,$vararg_buffer)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + (($i$01*28)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($9) + (($i$01*28)|0)|0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (((($9) + (($i$01*28)|0)|0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($9) + (($i$01*28)|0)|0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($9) + (($i$01*28)|0)|0)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (((($9) + (($i$01*28)|0)|0)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (((($9) + (($i$01*28)|0)|0)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $11;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $13;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $15;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $17;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $19;
  $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $21;
  $vararg_ptr9 = ((($vararg_buffer1)) + 24|0);
  HEAP32[$vararg_ptr9>>2] = $23;
  (_snprintf($value,256,19888,$vararg_buffer1)|0);
  $24 = HEAP32[$inspector>>2]|0;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_viiii[$26 & 1023]($inspector,$name,$value,0);
  $27 = (($i$01) + 1)|0;
  $28 = HEAP32[$5>>2]|0;
  $29 = ($27>>>0)<($28>>>0);
  if ($29) {
   $i$01 = $27;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_Dec3AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19760);
 $0 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = (19856);
  $10 = ((($this)) + 48|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($this)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  __ZdlPv($12);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = ((($this)) + 40|0);
  HEAP32[$3>>2] = (19856);
  $4 = ((($this)) + 48|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($this)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  __ZdlPv($6);
  return;
 }
}
function __ZN12AP4_Dec3AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19760);
 $0 = ((($this)) + 56|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 40|0);
  HEAP32[$9>>2] = (19856);
  $10 = ((($this)) + 48|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($this)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  __ZdlPv($12);
  __ZdlPv($this);
  ___resumeException($7|0);
  // unreachable;
 } else {
  $3 = ((($this)) + 40|0);
  HEAP32[$3>>2] = (19856);
  $4 = ((($this)) + 48|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($this)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  __ZdlPv($6);
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_Dec3Atom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(80)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_viii(879,($0|0),($2|0),($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __ZdlPv($0);
  ___resumeException($7|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19856);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (19856);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN10AP4_SampleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 32|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 44|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 HEAP8[$7>>0] = 1;
 return;
}
function __ZN10AP4_SampleD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$this>>2] = 0;
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($0);
 HEAP32[$this>>2] = 0;
 return;
}
function __ZN10AP4_Sample13SetDataStreamER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 1023]($0);
 }
 HEAP32[$this>>2] = $stream;
 $5 = HEAP32[$stream>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($stream);
 return;
}
function __ZN12AP4_NmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1852663908,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (20024);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_NmhdAtom11WriteFieldsER14AP4_ByteStream($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN12AP4_NmhdAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_AinfAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(72)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(880,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_AinfAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $payload = 0, $size$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1634299494,$size,$version,$flags);
 HEAP32[$this>>2] = (20120);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $$2 = $36;$$24 = $37;
  ___resumeException($$2|0);
  // unreachable;
 }
 $3 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(837,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $$1 = $38;$$13 = $39;
 } else {
  $6 = ((($this)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($6|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  L7: do {
   if ($8) {
    label = 14;
   } else {
    $size$off = (($size) + -17)|0;
    $9 = ($size$off>>>0)<(16777199);
    if (!($9)) {
     STACKTOP = sp;return;
    }
    __THREW__ = 0;
    invoke_vi(837,($payload|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 14;
    } else {
     $12 = (($size) + -16)|0;
     $13 = (($size) + -15)|0;
     __THREW__ = 0;
     (invoke_iii(757,($payload|0),($13|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     do {
      if (!($15)) {
       $16 = ((($payload)) + 8|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + ($12)|0);
       HEAP8[$18>>0] = 0;
       $19 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       (invoke_iiii(788,($stream|0),($19|0),($12|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        $22 = HEAP32[$16>>2]|0;
        __THREW__ = 0;
        (invoke_iii(791,($0|0),($22|0))|0);
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if (!($24)) {
         $25 = ((($this)) + 44|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = (($26) + 1)|0;
         $28 = ($12>>>0)>($27>>>0);
         if ($28) {
          $29 = (($12) - ($26))|0;
          $30 = (($29) + -1)|0;
          __THREW__ = 0;
          (invoke_iii(757,($3|0),($30|0))|0);
          $31 = __THREW__; __THREW__ = 0;
          $32 = $31&1;
          if ($32) {
           break;
          }
          $33 = ((($this)) + 56|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = HEAP32[$16>>2]|0;
          _memcpy(($34|0),($35|0),($30|0))|0;
         }
         __THREW__ = 0;
         invoke_vi(279,($payload|0));
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          label = 14;
          break L7;
         }
         STACKTOP = sp;return;
        }
       }
      }
     } while(0);
     $42 = ___cxa_find_matching_catch()|0;
     $43 = tempRet0;
     __THREW__ = 0;
     invoke_vi(279,($payload|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $52 = ___cxa_find_matching_catch(0|0)|0;
      $53 = tempRet0;
      ___clang_call_terminate($52);
      // unreachable;
     } else {
      $$0 = $42;$$02 = $43;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $40 = ___cxa_find_matching_catch()|0;
   $41 = tempRet0;
   $$0 = $40;$$02 = $41;
  }
  __THREW__ = 0;
  invoke_vi(279,($3|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $52 = ___cxa_find_matching_catch(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  } else {
   $$1 = $$0;$$13 = $$02;
  }
 }
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $$2 = $$1;$$24 = $$13;
  ___resumeException($$2|0);
  // unreachable;
 }
}
function __ZN12AP4_AinfAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = ((($this)) + 16|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;$16 = $10;
 } else {
  $14 = 0;$16 = $5;
 }
 $15 = ($14>>>0)<(0);
 $17 = ($16>>>0)<(17);
 $18 = ($14|0)==(0);
 $19 = $18 & $17;
 $20 = $15 | $19;
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ((($this)) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 $26 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$22,$25)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  return ($$0|0);
 }
 $28 = ((($this)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  return ($$0|0);
 }
 $31 = ((($this)) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 (__ZN14AP4_ByteStream5WriteEPKvj($stream,$32,$29)|0);
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_AinfAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($v,$1);
 $2 = ((($v)) + 4|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP32[$inspector>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiii[$5 & 1023]($inspector,20208,$v,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 1023]($inspector,20224,$10,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_AinfAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20120);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 40|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0 = $7;$$01 = $6;
   ___resumeException($$01|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0 = $12;$$01 = $11;
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN12AP4_AinfAtomD0Ev($this) {
 $this = $this|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20120);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $8 = ((($this)) + 40|0);
  __THREW__ = 0;
  invoke_vi(792,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $$0$i = $7;$$01$i = $6;
   __ZdlPv($this);
   ___resumeException($$01$i|0);
   // unreachable;
  }
 }
 $3 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($this);
  return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $$0$i = $12;$$01$i = $11;
 __ZdlPv($this);
 ___resumeException($$01$i|0);
 // unreachable;
}
function __ZN12AP4_StscAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(881,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_StscAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejjhj($this,1937011555,16,0,0);
 HEAP32[$this>>2] = (20240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (20344);
 $1 = ((($this)) + 40|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function __ZN12AP4_StscAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entry_count = 0, $exitcond$i = 0, $exitcond3$i = 0, $first_sample$010 = 0, $first_sample$1 = 0, $i$01$i$i = 0, $i$09 = 0, $i1$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1937011555,$size,$version,$flags);
 HEAP32[$this>>2] = (20240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (20344);
 $1 = ((($this)) + 40|0);
 $2 = ((($this)) + 44|0);
 $3 = ((($this)) + 48|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $116 = ___cxa_find_matching_catch()|0;
  $117 = tempRet0;
  HEAP32[$0>>2] = (20344);
  HEAP32[$2>>2] = 0;
  $118 = HEAP32[$3>>2]|0;
  __ZdlPv($118);
  ___resumeException($116|0);
  // unreachable;
 }
 $6 = HEAP32[$entry_count>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ($7|0)==($6|0);
 do {
  if (!($8)) {
   $9 = ($7>>>0)>($6>>>0);
   if ($9) {
    HEAP32[$2>>2] = $6;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10>>>0)<($6>>>0);
   if ($11) {
    $12 = ($6*20)|0;
    __THREW__ = 0;
    $13 = (invoke_ii(752,($12|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $116 = ___cxa_find_matching_catch()|0;
     $117 = tempRet0;
     HEAP32[$0>>2] = (20344);
     HEAP32[$2>>2] = 0;
     $118 = HEAP32[$3>>2]|0;
     __ZdlPv($118);
     ___resumeException($116|0);
     // unreachable;
    }
    $16 = ($13|0)==(0|0);
    if ($16) {
     break;
    }
    $17 = HEAP32[$2>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$pre$i = 0;
    } else {
     $19 = HEAP32[$3>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$pre$i = $17;
     } else {
      $i$01$i$i = 0;
      while(1) {
       $21 = (($13) + (($i$01$i$i*20)|0)|0);
       $22 = (($19) + (($i$01$i$i*20)|0)|0);
       ;HEAP32[$21>>2]=HEAP32[$22>>2]|0;HEAP32[$21+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$22+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[$22+16>>2]|0;
       $23 = (($i$01$i$i) + 1)|0;
       $exitcond3$i = ($23|0)==($17|0);
       if ($exitcond3$i) {
        break;
       } else {
        $i$01$i$i = $23;
       }
      }
      __ZdlPv($19);
      $$pre$pre$i = HEAP32[$2>>2]|0;
      $$pre$i = $$pre$pre$i;
     }
    }
    HEAP32[$3>>2] = $13;
    HEAP32[$1>>2] = $6;
    $24 = $$pre$i;
   } else {
    $24 = $7;
   }
   $25 = ($24>>>0)<($6>>>0);
   if ($25) {
    $i1$02$i = $24;
    while(1) {
     $26 = HEAP32[$3>>2]|0;
     $27 = (($26) + (($i1$02$i*20)|0)|0);
     ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;
     $28 = (($i1$02$i) + 1)|0;
     $exitcond$i = ($28|0)==($6|0);
     if ($exitcond$i) {
      break;
     } else {
      $i1$02$i = $28;
     }
    }
   }
   HEAP32[$2>>2] = $6;
  }
 } while(0);
 $29 = HEAP32[$entry_count>>2]|0;
 $30 = ($29*12)|0;
 __THREW__ = 0;
 $31 = (invoke_ii(787,($30|0))|0);
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $116 = ___cxa_find_matching_catch()|0;
  $117 = tempRet0;
  HEAP32[$0>>2] = (20344);
  HEAP32[$2>>2] = 0;
  $118 = HEAP32[$3>>2]|0;
  __ZdlPv($118);
  ___resumeException($116|0);
  // unreachable;
 }
 __THREW__ = 0;
 $34 = (invoke_iiii(788,($stream|0),($31|0),($30|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $116 = ___cxa_find_matching_catch()|0;
  $117 = tempRet0;
  HEAP32[$0>>2] = (20344);
  HEAP32[$2>>2] = 0;
  $118 = HEAP32[$3>>2]|0;
  __ZdlPv($118);
  ___resumeException($116|0);
  // unreachable;
 }
 $37 = ($34|0)==(0);
 if (!($37)) {
  __ZdaPv($31);
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$entry_count>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $40 = HEAP32[$3>>2]|0;
  $first_sample$010 = 1;$i$09 = 0;
  while(1) {
   $41 = ($i$09*12)|0;
   $42 = (($31) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $44 << 24;
   $$sum1 = $41 | 1;
   $46 = (($31) + ($$sum1)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $48 << 16;
   $50 = $49 | $45;
   $$sum2 = $41 | 2;
   $51 = (($31) + ($$sum2)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 8;
   $55 = $50 | $54;
   $$sum3 = $41 | 3;
   $56 = (($31) + ($$sum3)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $55 | $58;
   $60 = (($41) + 4)|0;
   $61 = (($31) + ($60)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 << 24;
   $$sum = (($41) + 5)|0;
   $65 = (($31) + ($$sum)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $67 << 16;
   $69 = $68 | $64;
   $$sum4 = (($41) + 6)|0;
   $70 = (($31) + ($$sum4)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 << 8;
   $74 = $69 | $73;
   $$sum5 = (($41) + 7)|0;
   $75 = (($31) + ($$sum5)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $74 | $77;
   $79 = (($41) + 8)|0;
   $80 = (($31) + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $82 << 24;
   $$sum6 = (($41) + 9)|0;
   $84 = (($31) + ($$sum6)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = $86 << 16;
   $88 = $87 | $83;
   $$sum7 = (($41) + 10)|0;
   $89 = (($31) + ($$sum7)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 << 8;
   $93 = $88 | $92;
   $$sum8 = (($41) + 11)|0;
   $94 = (($31) + ($$sum8)|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $93 | $96;
   $98 = ($i$09|0)==(0);
   if ($98) {
    $first_sample$1 = $first_sample$010;
   } else {
    $99 = (($i$09) + -1)|0;
    $100 = (($40) + (($99*20)|0)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($59) - ($101))|0;
    $103 = (((($40) + (($99*20)|0)|0)) + 8|0);
    HEAP32[$103>>2] = $102;
    $104 = (((($40) + (($99*20)|0)|0)) + 12|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = Math_imul($105, $102)|0;
    $107 = (($106) + ($first_sample$010))|0;
    $first_sample$1 = $107;
   }
   $108 = (((($40) + (($i$09*20)|0)|0)) + 8|0);
   HEAP32[$108>>2] = 0;
   $109 = (($40) + (($i$09*20)|0)|0);
   HEAP32[$109>>2] = $59;
   $110 = (((($40) + (($i$09*20)|0)|0)) + 4|0);
   HEAP32[$110>>2] = $first_sample$1;
   $111 = (((($40) + (($i$09*20)|0)|0)) + 12|0);
   HEAP32[$111>>2] = $78;
   $112 = (((($40) + (($i$09*20)|0)|0)) + 16|0);
   HEAP32[$112>>2] = $97;
   $113 = (($i$09) + 1)|0;
   $114 = HEAP32[$entry_count>>2]|0;
   $115 = ($113>>>0)<($114>>>0);
   if ($115) {
    $first_sample$010 = $first_sample$1;$i$09 = $113;
   } else {
    break;
   }
  }
 }
 __ZdaPv($31);
 STACKTOP = sp;return;
}
function __ZN12AP4_StscAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ((($this)) + 48|0);
 $4 = ($1|0)==(0);
 if ($4) {
  return ($2|0);
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $i$01$us = 0;
  while(1) {
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + (($i$01$us*20)|0)|0);
   $8 = HEAP32[$7>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$8)|0);
   $9 = HEAP32[$3>>2]|0;
   $10 = (((($9) + (($i$01$us*20)|0)|0)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$11)|0);
   $12 = HEAP32[$3>>2]|0;
   $13 = (((($12) + (($i$01$us*20)|0)|0)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$14)|0);
   $15 = (($i$01$us) + 1)|0;
   $16 = ($15>>>0)<($1>>>0);
   if ($16) {
    $i$01$us = $15;
   } else {
    break;
   }
  }
  return ($2|0);
 } else {
  $17 = HEAP32[$3>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$18)|0);
  return ($2|0);
 }
 return (0)|0;
}
function __ZN12AP4_StscAtom8AddEntryEjjj($this,$chunk_count,$samples_per_chunk,$sample_description_index) {
 $this = $this|0;
 $chunk_count = $chunk_count|0;
 $samples_per_chunk = $samples_per_chunk|0;
 $sample_description_index = $sample_description_index|0;
 var $$$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $first_chunk$0 = 0, $first_sample$0 = 0, $i$01$i$i = 0, $new_count$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $first_chunk$0 = 1;$first_sample$0 = 1;
 } else {
  $3 = (($1) + -1)|0;
  $4 = ((($this)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + (($3*20)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($5) + (($3*20)|0)|0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($7))|0;
  $11 = (((($5) + (($3*20)|0)|0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (((($5) + (($3*20)|0)|0)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = Math_imul($14, $9)|0;
  $16 = (($15) + ($12))|0;
  $first_chunk$0 = $10;$first_sample$0 = $16;
 }
 $17 = ((($this)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($1) + 1)|0;
 $20 = ($18>>>0)<($19>>>0);
 if ($20) {
  $21 = ($18|0)==(0);
  $22 = $18 << 1;
  $$$i = $21 ? 64 : $22;
  $23 = ($$$i>>>0)<($19>>>0);
  $new_count$0$i = $23 ? $19 : $$$i;
  $24 = ($18>>>0)<($new_count$0$i>>>0);
  if ($24) {
   $25 = ($new_count$0$i*20)|0;
   $26 = (__Znwj($25)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 12)|0;
    HEAP32[$44>>2] = $46;
    return 0;
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ($28|0)==(0);
   $$pre$i$i = ((($this)) + 48|0);
   if ($29) {
    $$pre$i = 0;
   } else {
    $30 = HEAP32[$$pre$i$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$pre$i = $28;
    } else {
     $i$01$i$i = 0;
     while(1) {
      $32 = (($26) + (($i$01$i$i*20)|0)|0);
      $33 = (($30) + (($i$01$i$i*20)|0)|0);
      ;HEAP32[$32>>2]=HEAP32[$33>>2]|0;HEAP32[$32+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$32+16>>2]=HEAP32[$33+16>>2]|0;
      $34 = (($i$01$i$i) + 1)|0;
      $exitcond$i = ($34|0)==($28|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i$i = $34;
      }
     }
     __ZdlPv($30);
     $$pre$pre$i = HEAP32[$0>>2]|0;
     $$pre$i = $$pre$pre$i;
    }
   }
   HEAP32[$$pre$i$i>>2] = $26;
   HEAP32[$17>>2] = $new_count$0$i;
   $36 = $$pre$i;
  } else {
   $36 = $1;
  }
 } else {
  $36 = $1;
 }
 $35 = (($36) + 1)|0;
 HEAP32[$0>>2] = $35;
 $37 = ((($this)) + 48|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + (($36*20)|0)|0);
 HEAP32[$39>>2] = $first_chunk$0;
 $40 = (((($38) + (($36*20)|0)|0)) + 4|0);
 HEAP32[$40>>2] = $first_sample$0;
 $41 = (((($38) + (($36*20)|0)|0)) + 8|0);
 HEAP32[$41>>2] = $chunk_count;
 $42 = (((($38) + (($36*20)|0)|0)) + 12|0);
 HEAP32[$42>>2] = $samples_per_chunk;
 $43 = (((($38) + (($36*20)|0)|0)) + 16|0);
 HEAP32[$43>>2] = $sample_description_index;
 $44 = ((($this)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 12)|0;
 HEAP32[$44>>2] = $46;
 return 0;
}
function __ZN12AP4_StscAtom17GetChunkForSampleEjRjS0_S0_($this,$sample,$chunk,$skip,$sample_description_index) {
 $this = $this|0;
 $sample = $sample|0;
 $chunk = $chunk|0;
 $skip = $skip|0;
 $sample_description_index = $sample_description_index|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa60 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$lcssa65 = 0, $$lcssa66 = 0, $$lcssa68 = 0, $$lcssa69 = 0, $$neg2 = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $group$0$ph = 0, $group$09 = 0, $group$09$lcssa = 0, $group$09$lcssa57 = 0, $group$0959 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sample|0)==(0);
 if ($0) {
  ___assert_fail((20352|0),(20368|0),166,(20400|0));
  // unreachable;
 }
 $1 = ((($this)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($this)) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($7) + (($2*20)|0)|0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)>($sample>>>0);
  $$ = $10 ? 0 : $2;
  $group$0$ph = $$;
 } else {
  $group$0$ph = 0;
 }
 $11 = ($group$0$ph>>>0)<($4>>>0);
 L7: do {
  if ($11) {
   $12 = ((($this)) + 48|0);
   $13 = HEAP32[$12>>2]|0;
   $group$09 = $group$0$ph;
   while(1) {
    $14 = (((($13) + (($group$09*20)|0)|0)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (((($13) + (($group$09*20)|0)|0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = Math_imul($17, $15)|0;
    $19 = ($18|0)==(0);
    $20 = (((($13) + (($group$09*20)|0)|0)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    if ($19) {
     $$lcssa = $16;$$lcssa62 = $17;$$lcssa65 = $20;$$lcssa68 = $21;$group$09$lcssa = $group$09;
     label = 8;
     break;
    }
    $24 = (($21) + ($18))|0;
    $25 = ($24>>>0)>($sample>>>0);
    if ($25) {
     $$lcssa60 = $16;$$lcssa63 = $17;$$lcssa66 = $20;$$lcssa69 = $21;$group$09$lcssa57 = $group$09;
     label = 11;
     break;
    }
    $26 = (($group$09) + 1)|0;
    $27 = ($26>>>0)<($4>>>0);
    if ($27) {
     $group$09 = $26;
    } else {
     break L7;
    }
   }
   if ((label|0) == 8) {
    $22 = ($$lcssa68>>>0)>($sample>>>0);
    $23 = ($$lcssa62|0)==(0);
    $or$cond = $22 | $23;
    if ($or$cond) {
     $$0 = -10;
     return ($$0|0);
    } else {
     $29 = $$lcssa68;$31 = $$lcssa62;$36 = $$lcssa65;$38 = $$lcssa;$group$0959 = $group$09$lcssa;
    }
   }
   else if ((label|0) == 11) {
    $$old = ($$lcssa63|0)==(0);
    if ($$old) {
     $$0 = -10;
     return ($$0|0);
    } else {
     $29 = $$lcssa69;$31 = $$lcssa63;$36 = $$lcssa66;$38 = $$lcssa60;$group$0959 = $group$09$lcssa57;
    }
   }
   $28 = (($sample) - ($29))|0;
   $30 = (($28>>>0) / ($31>>>0))&-1;
   $32 = (($13) + (($group$0959*20)|0)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30))|0;
   HEAP32[$chunk>>2] = $34;
   $35 = HEAP32[$36>>2]|0;
   $37 = HEAP32[$38>>2]|0;
   $39 = Math_imul($37, $30)|0;
   $$neg2 = (($sample) - ($35))|0;
   $40 = (($$neg2) - ($39))|0;
   HEAP32[$skip>>2] = $40;
   $41 = (((($13) + (($group$0959*20)|0)|0)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$sample_description_index>>2] = $42;
   HEAP32[$1>>2] = $group$0959;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 HEAP32[$chunk>>2] = 0;
 HEAP32[$skip>>2] = 0;
 HEAP32[$sample_description_index>>2] = 0;
 $$0 = -12;
 return ($$0|0);
}
function __ZN12AP4_StscAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 288|0;
 $value = sp + 32|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = ((($inspector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($this)) + 48|0);
  $i$01 = 0;
  while(1) {
   HEAP32[$vararg_buffer>>2] = $i$01;
   (_snprintf($header,32,24608,$vararg_buffer)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + (($i$01*20)|0)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($11) + (($i$01*20)|0)|0)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (((($11) + (($i$01*20)|0)|0)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (((($11) + (($i$01*20)|0)|0)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (((($11) + (($i$01*20)|0)|0)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $13;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $15;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $19;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $21;
   (_snprintf($value,256,20424,$vararg_buffer1)|0);
   $22 = HEAP32[$inspector>>2]|0;
   $23 = ((($22)) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiii[$24 & 1023]($inspector,$header,$value,0);
   $25 = (($i$01) + 1)|0;
   $26 = HEAP32[$3>>2]|0;
   $27 = ($25>>>0)<($26>>>0);
   if ($27) {
    $i$01 = $25;
   } else {
    break;
   }
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StscAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (20344);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_StscAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (20344);
 $1 = ((($this)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20344);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20344);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN16AP4_EsDescriptorC2Et($this,$es_id) {
 $this = $this|0;
 $es_id = $es_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,3,0,2,3);
 HEAP32[$this>>2] = (20576);
 $0 = ((($this)) + 20|0);
 HEAP16[$0>>1] = $es_id;
 $1 = ((($this)) + 22|0);
 HEAP16[$1>>1] = 0;
 $2 = ((($this)) + 24|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 28|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($this)) + 30|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($this)) + 32|0);
 __ZN10AP4_StringC2Ev($5);
 $6 = ((($this)) + 40|0);
 HEAP32[$6>>2] = (5000);
 $7 = ((($this)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 48|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 52|0);
 HEAP32[$9>>2] = 0;
 return;
}
function __ZN16AP4_EsDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre = 0, $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bits = 0, $descriptor = 0, $item$01$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $offset = 0, $start = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 21|0;
 $url_length = sp + 20|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,3,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (20576);
 $0 = ((($this)) + 32|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $$1 = $29;$$12 = $30;
  ___resumeException($$1|0);
  // unreachable;
 }
 $3 = ((($this)) + 40|0);
 HEAP32[$3>>2] = (5000);
 $4 = ((($this)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$stream>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 (invoke_iii($9|0,($stream|0),($start|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if ($11) {
   label = 10;
  } else {
   $12 = ((($this)) + 20|0);
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($12|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 10;
   } else {
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($bits|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     label = 10;
    } else {
     $17 = HEAP8[$bits>>0]|0;
     $18 = $17&255;
     $19 = $18 >>> 5;
     $20 = ((($this)) + 24|0);
     HEAP32[$20>>2] = $19;
     $21 = $18 & 31;
     $22 = $21&255;
     $23 = ((($this)) + 28|0);
     HEAP8[$23>>0] = $22;
     $24 = $19 & 1;
     $25 = ($24|0)==(0);
     $26 = ((($this)) + 30|0);
     if ($25) {
      HEAP16[$26>>1] = 0;
      $36 = $19;
     } else {
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($26|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       label = 10;
       break;
      }
      $$pre = HEAP32[$20>>2]|0;
      $36 = $$pre;
     }
     $35 = $36 & 2;
     $37 = ($35|0)==(0);
     if (!($37)) {
      __THREW__ = 0;
      (invoke_iii(786,($stream|0),($url_length|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 10;
       break;
      }
      $40 = HEAP8[$url_length>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if (!($41)) {
       $42 = $40&255;
       $43 = (($42) + 1)|0;
       __THREW__ = 0;
       $44 = (invoke_ii(787,($43|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 10;
        break;
       }
       __THREW__ = 0;
       (invoke_iiii(788,($stream|0),($44|0),($42|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 10;
        break;
       }
       $49 = HEAP8[$url_length>>0]|0;
       $50 = $49&255;
       $51 = (($44) + ($50)|0);
       HEAP8[$51>>0] = 0;
       __THREW__ = 0;
       (invoke_iii(791,($0|0),($44|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 10;
        break;
       }
       __ZdaPv($44);
      }
     }
     $54 = HEAP32[$20>>2]|0;
     $55 = $54 & 2;
     $56 = ($55|0)==(0);
     $57 = ((($this)) + 22|0);
     if ($56) {
      HEAP16[$57>>1] = 0;
     } else {
      __THREW__ = 0;
      (invoke_iii(794,($stream|0),($57|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 10;
       break;
      }
     }
     $60 = HEAP32[$stream>>2]|0;
     $61 = ((($60)) + 28|0);
     $62 = HEAP32[$61>>2]|0;
     __THREW__ = 0;
     (invoke_iii($62|0,($stream|0),($offset|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 10;
     } else {
      __THREW__ = 0;
      $65 = (invoke_ii(752,40)|0);
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       label = 10;
      } else {
       $68 = $offset;
       $69 = $68;
       $70 = HEAP32[$69>>2]|0;
       $71 = (($68) + 4)|0;
       $72 = $71;
       $73 = HEAP32[$72>>2]|0;
       $74 = $start;
       $75 = $74;
       $76 = HEAP32[$75>>2]|0;
       $77 = (($74) + 4)|0;
       $78 = $77;
       $79 = HEAP32[$78>>2]|0;
       $80 = (_i64Subtract(($70|0),($73|0),($76|0),($79|0))|0);
       $81 = tempRet0;
       $82 = (($payload_size) - ($80))|0;
       __THREW__ = 0;
       invoke_viiiiii(808,($65|0),($stream|0),($70|0),($73|0),($82|0),0);
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       if ($84) {
        $100 = ___cxa_find_matching_catch()|0;
        $101 = tempRet0;
        __ZdlPv($65);
        $$0 = $100;$$01 = $101;
        break;
       }
       HEAP32[$descriptor>>2] = 0;
       while(1) {
        __THREW__ = 0;
        $85 = (invoke_iii(795,($65|0),($descriptor|0))|0);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         label = 9;
         break;
        }
        $88 = ($85|0)==(0);
        if (!($88)) {
         break;
        }
        $89 = HEAP32[$descriptor>>2]|0;
        __THREW__ = 0;
        $90 = (invoke_ii(752,12)|0);
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 9;
         break;
        }
        HEAP32[$90>>2] = $89;
        $93 = ((($90)) + 4|0);
        HEAP32[$93>>2] = 0;
        $94 = ((($90)) + 8|0);
        HEAP32[$94>>2] = 0;
        $95 = HEAP32[$6>>2]|0;
        $96 = ($95|0)==(0|0);
        if ($96) {
         HEAP32[$5>>2] = $90;
         HEAP32[$6>>2] = $90;
         HEAP32[$93>>2] = 0;
         $$sink$i$i = 0;
        } else {
         HEAP32[$93>>2] = 0;
         $97 = ((($95)) + 4|0);
         HEAP32[$97>>2] = $90;
         HEAP32[$6>>2] = $90;
         $$sink$i$i = $95;
        }
        HEAP32[$94>>2] = $$sink$i$i;
        $98 = HEAP32[$4>>2]|0;
        $99 = (($98) + 1)|0;
        HEAP32[$4>>2] = $99;
       }
       if ((label|0) == 9) {
        $31 = ___cxa_find_matching_catch()|0;
        $32 = tempRet0;
        $lpad$phi$index = $31;$lpad$phi$index2 = $32;
        label = 11;
        break;
       }
       $102 = HEAP32[$65>>2]|0;
       $103 = ((($102)) + 12|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       invoke_vi($104|0,($65|0));
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if ($106) {
        label = 10;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $lpad$phi$index = $33;$lpad$phi$index2 = $34;
  label = 11;
 }
 if ((label|0) == 11) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 }
 HEAP32[$3>>2] = (5000);
 $107 = HEAP32[$5>>2]|0;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  $item$01$i$i = $107;
  while(1) {
   $109 = ((($item$01$i$i)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   __ZdlPv($item$01$i$i);
   $111 = ($110|0)==(0|0);
   if ($111) {
    break;
   } else {
    $item$01$i$i = $110;
   }
  }
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$6>>2] = 0;
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $112 = __THREW__; __THREW__ = 0;
 $113 = $112&1;
 if ($113) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 } else {
  $$1 = $$0;$$12 = $$01;
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZN16AP4_EsDescriptorD2Ev($this) {
 $this = $this|0;
 var $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01$i = 0, $item$01$i$i3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20576);
 $0 = ((($this)) + 40|0);
 $1 = ((($this)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if (!($3)) {
   $item$01$i = $2;
   while(1) {
    $4 = ((($item$01$i)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$item$01$i>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $8 = HEAP32[$6>>2]|0;
     $9 = ((($8)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_vi($10|0,($6|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break;
     }
    }
    __ZdlPv($item$01$i);
    $13 = ($5|0)==(0|0);
    if ($13) {
     break L1;
    } else {
     $item$01$i = $5;
    }
   }
   $19 = ___cxa_find_matching_catch()|0;
   $20 = tempRet0;
   HEAP32[$0>>2] = (5000);
   $21 = HEAP32[$1>>2]|0;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $item$01$i$i3 = $21;
    while(1) {
     $23 = ((($item$01$i$i3)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     __ZdlPv($item$01$i$i3);
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     } else {
      $item$01$i$i3 = $24;
     }
    }
   }
   $28 = ((($this)) + 44|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($this)) + 52|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$1>>2] = 0;
   $30 = ((($this)) + 32|0);
   __THREW__ = 0;
   invoke_vi(792,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $33 = ___cxa_find_matching_catch(0|0)|0;
    $34 = tempRet0;
    ___clang_call_terminate($33);
    // unreachable;
   } else {
    $$1 = $20;$$12 = $19;
    ___resumeException($$12|0);
    // unreachable;
   }
  }
 } while(0);
 $14 = ((($this)) + 52|0);
 $15 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (5000);
 HEAP32[$15>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$1>>2] = 0;
 $16 = ((($this)) + 32|0);
 __THREW__ = 0;
 invoke_vi(792,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  return;
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $$1 = $27;$$12 = $26;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZN16AP4_EsDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(518,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN16AP4_EsDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i4 = 0;
 var $item$0$i5 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 20|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($this)) + 28|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($this)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 5;
 $11 = $10 | $7;
 $12 = $11&255;
 $13 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = $15 & 1;
 $17 = ($16|0)==(0);
 do {
  if ($17) {
   $23 = $15;
  } else {
   $18 = ((($this)) + 30|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$19)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $$pre = HEAP32[$8>>2]|0;
    $23 = $$pre;
    break;
   } else {
    $$0 = $20;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $22 = $23 & 2;
 $24 = ($22|0)==(0);
 do {
  if ($24) {
   $37 = $23;
  } else {
   $25 = ((($this)) + 36|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26&255;
   $28 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$27)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $$0 = $28;
    STACKTOP = sp;return ($$0|0);
   }
   $30 = ((($this)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (__ZN14AP4_ByteStream11WriteStringEPKc($stream,$31)|0);
   $33 = ($32|0)==(0);
   if (!($33)) {
    $$0 = $32;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$pre2 = HEAP32[$8>>2]|0;
    $37 = $$pre2;
    break;
   } else {
    $$0 = $34;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $36 = $37 & 4;
 $38 = ($36|0)==(0);
 if (!($38)) {
  $39 = ((($this)) + 22|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$40)|0);
  $42 = ($41|0)==(0);
  if (!($42)) {
   $$0 = $41;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$0>>2] = (5040);
 $43 = ((($0)) + 4|0);
 HEAP32[$43>>2] = $stream;
 $44 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$44>>2]|0;
 $45 = ($item$01$i|0)==(0|0);
 if ($45) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[$item$01$i>>2]|0;
 (__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($0,$46)|0);
 $47 = ((($item$01$i)) + 4|0);
 $item$0$i4 = HEAP32[$47>>2]|0;
 $48 = ($item$0$i4|0)==(0|0);
 if ($48) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i5 = $item$0$i4;
 }
 while(1) {
  $$pre3 = HEAP32[$0>>2]|0;
  $49 = ((($$pre3)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$item$0$i5>>2]|0;
  (FUNCTION_TABLE_iii[$50 & 1023]($0,$51)|0);
  $52 = ((($item$0$i5)) + 4|0);
  $item$0$i = HEAP32[$52>>2]|0;
  $53 = ($item$0$i|0)==(0|0);
  if ($53) {
   $$0 = 0;
   break;
  } else {
   $item$0$i5 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN16AP4_EsDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,20792,$5,$8,0);
 $9 = HEAP32[$inspector>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,20808,$14,0,0);
 $15 = HEAP32[$inspector>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 28|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 FUNCTION_TABLE_viiiii[$17 & 1023]($inspector,20816,$20,0,0);
 HEAP32[$0>>2] = (5096);
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $inspector;
 $22 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$22>>2]|0;
 $23 = ($item$01$i|0)==(0|0);
 if (!($23)) {
  $24 = HEAP32[$item$01$i>>2]|0;
  (__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($0,$24)|0);
  $25 = ((($item$01$i)) + 4|0);
  $item$0$i1 = HEAP32[$25>>2]|0;
  $26 = ($item$0$i1|0)==(0|0);
  if (!($26)) {
   $item$0$i2 = $item$0$i1;
   while(1) {
    $$pre = HEAP32[$0>>2]|0;
    $27 = ((($$pre)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$item$0$i2>>2]|0;
    (FUNCTION_TABLE_iii[$28 & 1023]($0,$29)|0);
    $30 = ((($item$0$i2)) + 4|0);
    $item$0$i = HEAP32[$30>>2]|0;
    $31 = ($item$0$i|0)==(0|0);
    if ($31) {
     break;
    } else {
     $item$0$i2 = $item$0$i;
    }
   }
  }
 }
 $32 = HEAP32[$inspector>>2]|0;
 $33 = ((($32)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vi[$34 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN16AP4_EsDescriptor16AddSubDescriptorEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 HEAP32[$0>>2] = $descriptor;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = ((($this)) + 48|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$3>>2] = $0;
  HEAP32[$1>>2] = 0;
  $$sink$i$i = 0;
 } else {
  HEAP32[$1>>2] = 0;
  $6 = ((($4)) + 4|0);
  HEAP32[$6>>2] = $0;
  HEAP32[$3>>2] = $0;
  $$sink$i$i = $4;
 }
 HEAP32[$2>>2] = $$sink$i$i;
 $8 = ((($this)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($descriptor)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($descriptor)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12))|0;
 $16 = ((($this)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + ($17))|0;
 HEAP32[$16>>2] = $18;
 return 0;
}
function __ZNK16AP4_EsDescriptor26GetDecoderConfigDescriptorEv($this) {
 $this = $this|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $item$0$i = 0, $item$01$i = 0, $item$02$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = (5016);
 $1 = ((($0)) + 4|0);
 HEAP8[$1>>0] = 4;
 $2 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$2>>2]|0;
 $3 = ($item$01$i|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$item$01$i>>2]|0;
 $5 = (__ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor($0,$4)|0);
 $6 = ($5|0)==(0);
 L4: do {
  if ($6) {
   $$lcssa = $item$01$i;
  } else {
   $item$02$i5 = $item$01$i;
   while(1) {
    $7 = ((($item$02$i5)) + 4|0);
    $item$0$i = HEAP32[$7>>2]|0;
    $8 = ($item$0$i|0)==(0|0);
    if ($8) {
     $$0 = 0;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $9 = ((($$pre)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$item$0$i>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($0,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$lcssa = $item$0$i;
     break L4;
    } else {
     $item$02$i5 = $item$0$i;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = HEAP32[$$lcssa>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (___dynamic_cast($14,10880,8728,0)|0);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function __ZN21AP4_EsIdIncDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,14,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (20616);
 $0 = ((($this)) + 20|0);
 HEAP32[$0>>2] = 0;
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$0)|0);
 return;
}
function __ZN21AP4_EsIdIncDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return ($2|0);
}
function __ZN21AP4_EsIdIncDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,20832,$4,$7,0);
 $8 = HEAP32[$inspector>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,20848,$12,0,0);
 $13 = HEAP32[$inspector>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($inspector);
 return 0;
}
function __ZN21AP4_EsIdRefDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,15,0,$header_size,$payload_size);
 HEAP32[$this>>2] = (20648);
 $0 = ((($this)) + 20|0);
 HEAP16[$0>>1] = 0;
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$0)|0);
 return;
}
function __ZN21AP4_EsIdRefDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$1)|0);
 return ($2|0);
}
function __ZN21AP4_EsIdRefDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,20864,$4,$7,0);
 $8 = HEAP32[$inspector>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 20|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 FUNCTION_TABLE_viiiii[$10 & 1023]($inspector,20880,$13,0,0);
 $14 = HEAP32[$inspector>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 1023]($inspector);
 return 0;
}
function __ZN21AP4_EsIdIncDescriptorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN21AP4_EsIdRefDescriptorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_SaioAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2&255)>(1);
 $or$cond = $1 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(882,($4|0),($size|0),($2|0),($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SaioAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$pre$i = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entry = 0, $entry1 = 0, $entry_count = 0, $exitcond$i = 0, $i$01$i$i = 0, $i$02 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $remains$0 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 12|0;
 $entry = sp + 8|0;
 $entry1 = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1935763823,$size,$version,$flags);
 HEAP32[$this>>2] = (20904);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 44|0);
 HEAP32[$2>>2] = (21000);
 $3 = ((($this)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 56|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 $6 = (invoke_ii(5,($this|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $9 = (($size) - ($6))|0;
   $10 = $flags & 1;
   $11 = ($10|0)==(0);
   if ($11) {
    $remains$0 = $9;
   } else {
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($0|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($1|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
    $16 = (($9) + -8)|0;
    $remains$0 = $16;
   }
   HEAP32[$entry_count>>2] = 0;
   __THREW__ = 0;
   $17 = (invoke_iii(755,($stream|0),($entry_count|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = ($17|0)==(0);
    if (!($20)) {
     STACKTOP = sp;return;
    }
    $21 = (($remains$0) + -4)|0;
    $22 = HEAP32[$entry_count>>2]|0;
    $23 = ((($this)) + 25|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    $26 = $25 ? 4 : 8;
    $27 = Math_imul($26, $22)|0;
    $28 = ($21>>>0)<($27>>>0);
    if ($28) {
     STACKTOP = sp;return;
    }
    $29 = HEAP32[$4>>2]|0;
    $30 = ($29|0)==($22|0);
    do {
     if (!($30)) {
      $31 = ($29>>>0)>($22>>>0);
      if ($31) {
       HEAP32[$4>>2] = $22;
       break;
      }
      $32 = HEAP32[$3>>2]|0;
      $33 = ($32>>>0)<($22>>>0);
      if ($33) {
       $34 = $22 << 3;
       __THREW__ = 0;
       $35 = (invoke_ii(752,($34|0))|0);
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if ($37) {
        break L1;
       }
       $38 = ($35|0)==(0|0);
       if ($38) {
        break;
       }
       $39 = HEAP32[$4>>2]|0;
       $40 = ($39|0)==(0);
       if ($40) {
        $$pre$i = 0;
       } else {
        $41 = HEAP32[$5>>2]|0;
        $42 = ($41|0)==(0|0);
        if ($42) {
         $$pre$i = $39;
        } else {
         $i$01$i$i = 0;
         while(1) {
          $43 = (($35) + ($i$01$i$i<<3)|0);
          $44 = (($41) + ($i$01$i$i<<3)|0);
          $45 = $44;
          $46 = $45;
          $47 = HEAP32[$46>>2]|0;
          $48 = (($45) + 4)|0;
          $49 = $48;
          $50 = HEAP32[$49>>2]|0;
          $51 = $43;
          $52 = $51;
          HEAP32[$52>>2] = $47;
          $53 = (($51) + 4)|0;
          $54 = $53;
          HEAP32[$54>>2] = $50;
          $55 = (($i$01$i$i) + 1)|0;
          $exitcond$i = ($55|0)==($39|0);
          if ($exitcond$i) {
           break;
          } else {
           $i$01$i$i = $55;
          }
         }
         __ZdlPv($41);
         $$pre$pre$i = HEAP32[$4>>2]|0;
         $$pre$i = $$pre$pre$i;
        }
       }
       HEAP32[$5>>2] = $35;
       HEAP32[$3>>2] = $22;
       $57 = $$pre$i;
      } else {
       $57 = $29;
      }
      $56 = ($22>>>0)>($57>>>0);
      if ($56) {
       $58 = HEAP32[$5>>2]|0;
       $scevgep$i = (($58) + ($57<<3)|0);
       $59 = (($22) - ($57))|0;
       $60 = $59 << 3;
       _memset(($scevgep$i|0),0,($60|0))|0;
      }
      HEAP32[$4>>2] = $22;
     }
    } while(0);
    $61 = HEAP32[$entry_count>>2]|0;
    $62 = ($61|0)==(0);
    if ($62) {
     STACKTOP = sp;return;
    } else {
     $i$02 = 0;
    }
    while(1) {
     $63 = HEAP8[$23>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      HEAP32[$entry>>2] = 0;
      __THREW__ = 0;
      $65 = (invoke_iii(755,($stream|0),($entry|0))|0);
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       label = 33;
       break;
      }
      $68 = ($65|0)==(0);
      if (!($68)) {
       label = 32;
       break;
      }
      $69 = HEAP32[$entry>>2]|0;
      $70 = HEAP32[$5>>2]|0;
      $71 = (($70) + ($i$02<<3)|0);
      $72 = $71;
      $73 = $72;
      HEAP32[$73>>2] = $69;
      $74 = (($72) + 4)|0;
      $75 = $74;
      HEAP32[$75>>2] = 0;
     } else {
      $76 = $entry1;
      $77 = $76;
      HEAP32[$77>>2] = 0;
      $78 = (($76) + 4)|0;
      $79 = $78;
      HEAP32[$79>>2] = 0;
      __THREW__ = 0;
      $80 = (invoke_iii(840,($stream|0),($entry1|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 33;
       break;
      }
      $83 = ($80|0)==(0);
      if (!($83)) {
       label = 32;
       break;
      }
      $84 = $entry1;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = (($84) + 4)|0;
      $88 = $87;
      $89 = HEAP32[$88>>2]|0;
      $90 = HEAP32[$5>>2]|0;
      $91 = (($90) + ($i$02<<3)|0);
      $92 = $91;
      $93 = $92;
      HEAP32[$93>>2] = $86;
      $94 = (($92) + 4)|0;
      $95 = $94;
      HEAP32[$95>>2] = $89;
     }
     $96 = (($i$02) + 1)|0;
     $97 = HEAP32[$entry_count>>2]|0;
     $98 = ($96>>>0)<($97>>>0);
     if ($98) {
      $i$02 = $96;
     } else {
      label = 32;
      break;
     }
    }
    if ((label|0) == 32) {
     STACKTOP = sp;return;
    }
    else if ((label|0) == 33) {
     $99 = ___cxa_find_matching_catch()|0;
     $100 = tempRet0;
     $lpad$phi$index = $99;$lpad$phi$index2 = $100;
     HEAP32[$2>>2] = (21000);
     HEAP32[$4>>2] = 0;
     $103 = HEAP32[$5>>2]|0;
     __ZdlPv($103);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $101 = ___cxa_find_matching_catch()|0;
 $102 = tempRet0;
 $lpad$phi$index = $101;$lpad$phi$index2 = $102;
 HEAP32[$2>>2] = (21000);
 HEAP32[$4>>2] = 0;
 $103 = HEAP32[$5>>2]|0;
 __ZdlPv($103);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN12AP4_SaioAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$5)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = $6;
   return ($$0|0);
  }
  $8 = ((($this)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   return ($$0|0);
  }
 }
 $12 = ((($this)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  return ($$0|0);
 }
 $16 = HEAP32[$12>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($this)) + 25|0);
 $19 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  $20 = HEAP8[$18>>0]|0;
  $21 = ($20<<24>>24)==(0);
  $22 = HEAP32[$19>>2]|0;
  $23 = (($22) + ($i$01<<3)|0);
  $24 = $23;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  if ($21) {
   $30 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$26)|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    $$0 = $30;
    label = 11;
    break;
   }
  } else {
   $32 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$26,$29)|0);
   $33 = ($32|0)==(0);
   if (!($33)) {
    $$0 = $32;
    label = 11;
    break;
   }
  }
  $34 = (($i$01) + 1)|0;
  $35 = HEAP32[$12>>2]|0;
  $36 = ($34>>>0)<($35>>>0);
  if ($36) {
   $i$01 = $34;
  } else {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_SaioAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0;
 var $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = ((($this)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$inspector>>2]|0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($this)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_viiiii[$6 & 1023]($inspector,21008,$8,0,1);
  $9 = HEAP32[$inspector>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($this)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiii[$11 & 1023]($inspector,21024,$13,0,1);
 }
 $14 = HEAP32[$inspector>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($this)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_viiiii[$16 & 1023]($inspector,21048,$18,0,0);
 $19 = ((($inspector)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>(1);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = HEAP32[$17>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return 0;
 }
 $24 = ((($this)) + 56|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $25 = HEAP32[$inspector>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$24>>2]|0;
  $29 = (($28) + ($i$01<<3)|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  FUNCTION_TABLE_viiiii[$27 & 1023]($inspector,$header,$32,$35,0);
  $36 = (($i$01) + 1)|0;
  $37 = HEAP32[$17>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $i$01 = $36;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SaioAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20904);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (21000);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 return;
}
function __ZN12AP4_SaioAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (20904);
 $0 = ((($this)) + 44|0);
 HEAP32[$0>>2] = (21000);
 $1 = ((($this)) + 52|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 __ZdlPv($3);
 __ZdlPv($this);
 return;
}
function __ZN9AP4_ArrayIyED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21000);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function __ZN9AP4_ArrayIyED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21000);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __ZN15AP4_SampleEntryC2Ej($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 HEAP32[$this>>2] = (21096);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21188);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function __ZN15AP4_SampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,$format,$size,0,0);
 HEAP32[$this>>2] = (21096);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21188);
 $1 = ((($this)) + 56|0);
 __THREW__ = 0;
 (invoke_iiii(788,($stream|0),($1|0),6)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($this)) + 62|0);
  __THREW__ = 0;
  (invoke_iii(794,($stream|0),($4|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = ((($this)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = ((($this)) + 16|0);
    $11 = $10;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $23 = $13;$24 = $16;
   } else {
    $23 = $8;$24 = 0;
   }
   $17 = HEAP32[$this>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   __THREW__ = 0;
   $20 = (invoke_ii($19|0,($this|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    $25 = (_i64Subtract(($23|0),($24|0),($20|0),0)|0);
    $26 = tempRet0;
    $27 = HEAP32[$this>>2]|0;
    $28 = ((($27)) + 76|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    $30 = (invoke_ii($29|0,($this|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = ($25>>>0)>($30>>>0);
     if (!($33)) {
      return;
     }
     $34 = (($25) - ($30))|0;
     __THREW__ = 0;
     invoke_viiiii(747,($this|0),($atom_factory|0),($stream|0),($34|0),0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      return;
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 $39 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($39|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $42 = ___cxa_find_matching_catch(0|0)|0;
  $43 = tempRet0;
  ___clang_call_terminate($42);
  // unreachable;
 } else {
  ___resumeException($37|0);
  // unreachable;
 }
}
function __ZN15AP4_SampleEntry5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN8AP4_Atom5CloneEv($this)|0);
 return ($0|0);
}
function __ZN15AP4_SampleEntry4ReadER14AP4_ByteStreamR15AP4_AtomFactory($this,$stream,$atom_factory) {
 $this = $this|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 1023]($this,$stream)|0);
 $3 = ((($this)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = ((($this)) + 16|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $17 = $9;$18 = $12;
 } else {
  $17 = $4;$18 = 0;
 }
 $13 = HEAP32[$this>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 1023]($this)|0);
 $19 = (_i64Subtract(($17|0),($18|0),($16|0),0)|0);
 $20 = tempRet0;
 $21 = HEAP32[$this>>2]|0;
 $22 = ((($21)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1023]($this)|0);
 $25 = ($19>>>0)>($24>>>0);
 if (!($25)) {
  return;
 }
 $26 = (($19) - ($24))|0;
 __ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy($this,$atom_factory,$stream,$26,0);
 return;
}
function __ZN15AP4_SampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function __ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 return 0;
}
function __ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $$0 = $5;
 return ($$0|0);
}
function __ZN15AP4_SampleEntry5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 1023]($this,$stream)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 1023]($this,$stream)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = (11232);
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $stream;
 $12 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$12>>2]|0;
 $13 = ($item$01$i|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[(11240)>>2]|0;
 $15 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$14 & 1023]($0,$15)|0);
 $16 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$16>>2]|0;
 $17 = ($item$0$i1|0)==(0|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $18 = ((($$pre)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$19 & 1023]($0,$20)|0);
  $21 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$21>>2]|0;
  $22 = ($item$0$i|0)==(0|0);
  if ($22) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23344,$5,0,0);
 return 0;
}
function __ZN15AP4_SampleEntry7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iii[$3 & 1023]($this,$inspector)|0);
 $4 = HEAP32[$this>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 (FUNCTION_TABLE_iii[$6 & 1023]($this,$inspector)|0);
 HEAP32[$0>>2] = (2392);
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $inspector;
 $8 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$8>>2]|0;
 $9 = ($item$01$i|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$item$01$i>>2]|0;
  (__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($0,$10)|0);
  $11 = ((($item$01$i)) + 4|0);
  $item$0$i1 = HEAP32[$11>>2]|0;
  $12 = ($item$0$i1|0)==(0|0);
  if (!($12)) {
   $item$0$i2 = $item$0$i1;
   while(1) {
    $$pre = HEAP32[$0>>2]|0;
    $13 = ((($$pre)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$item$0$i2>>2]|0;
    (FUNCTION_TABLE_iii[$14 & 1023]($0,$15)|0);
    $16 = ((($item$0$i2)) + 4|0);
    $item$0$i = HEAP32[$16>>2]|0;
    $17 = ($item$0$i|0)==(0|0);
    if ($17) {
     break;
    } else {
     $item$0$i2 = $item$0$i;
    }
   }
  }
 }
 $18 = HEAP32[$inspector>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 1023]($inspector);
 STACKTOP = sp;return 0;
}
function __ZN15AP4_SampleEntry14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$off0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $item$0$i = 0, $item$0$i3 = 0, $item$0$i4 = 0, $item$01$i = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($this)|0);
 $6 = HEAP32[$this>>2]|0;
 $7 = ((($6)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($this)|0);
 $10 = (($9) + ($5))|0;
 $11 = $size;
 $12 = $11;
 HEAP32[$12>>2] = $10;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $15 = ((($1)) + 4|0);
 HEAP32[$15>>2] = $size;
 $16 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$16>>2]|0;
 $17 = ($item$01$i|0)==(0|0);
 if ($17) {
  $$off0 = $10;
 } else {
  $18 = HEAP32[$item$01$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$18)|0);
  $19 = ((($item$01$i)) + 4|0);
  $item$0$i3 = HEAP32[$19>>2]|0;
  $20 = ($item$0$i3|0)==(0|0);
  if (!($20)) {
   $item$0$i4 = $item$0$i3;
   while(1) {
    $$pre = HEAP32[$1>>2]|0;
    $21 = ((($$pre)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$item$0$i4>>2]|0;
    (FUNCTION_TABLE_iii[$22 & 1023]($1,$23)|0);
    $24 = ((($item$0$i4)) + 4|0);
    $item$0$i = HEAP32[$24>>2]|0;
    $25 = ($item$0$i|0)==(0|0);
    if ($25) {
     break;
    } else {
     $item$0$i4 = $item$0$i;
    }
   }
  }
  $26 = $size;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $$off0 = $28;
 }
 $32 = ((($this)) + 8|0);
 HEAP32[$32>>2] = $$off0;
 $33 = ((($this)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$34>>2]|0;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vii[$38 & 1023]($34,$this);
 STACKTOP = sp;return;
}
function __ZThn36_N15AP4_SampleEntry14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$off0$i = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $item$0$i$i = 0, $item$0$i$i1 = 0, $item$0$i$i2 = 0, $item$01$i$i = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $1 = sp + 8|0;
 $2 = ((($this)) + -36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($2)|0);
 $11 = (($10) + ($6))|0;
 $12 = $size$i;
 $13 = $12;
 HEAP32[$13>>2] = $11;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 HEAP32[$1>>2] = (2416);
 $16 = ((($1)) + 4|0);
 HEAP32[$16>>2] = $size$i;
 $17 = ((($2)) + 48|0);
 $item$01$i$i = HEAP32[$17>>2]|0;
 $18 = ($item$01$i$i|0)==(0|0);
 if ($18) {
  $$off0$i = $11;
 } else {
  $19 = HEAP32[$item$01$i$i>>2]|0;
  (__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($1,$19)|0);
  $20 = ((($item$01$i$i)) + 4|0);
  $item$0$i$i1 = HEAP32[$20>>2]|0;
  $21 = ($item$0$i$i1|0)==(0|0);
  if (!($21)) {
   $item$0$i$i2 = $item$0$i$i1;
   while(1) {
    $$pre$i = HEAP32[$1>>2]|0;
    $22 = ((($$pre$i)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$item$0$i$i2>>2]|0;
    (FUNCTION_TABLE_iii[$23 & 1023]($1,$24)|0);
    $25 = ((($item$0$i$i2)) + 4|0);
    $item$0$i$i = HEAP32[$25>>2]|0;
    $26 = ($item$0$i$i|0)==(0|0);
    if ($26) {
     break;
    } else {
     $item$0$i$i2 = $item$0$i$i;
    }
   }
  }
  $27 = $size$i;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $$off0$i = $29;
 }
 $33 = ((($2)) + 8|0);
 HEAP32[$33>>2] = $$off0$i;
 $34 = ((($2)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$35>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vii[$39 & 1023]($35,$2);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(32)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_viiii(817,($0|0),0,($2|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZdlPv($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntryC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,$type,$size,0,0);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 HEAP32[$this>>2] = (21240);
 HEAP32[$0>>2] = (21332);
 $3 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(837,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $$0 = $16;$$01 = $15;
 } else {
  $6 = ($size>>>0)>(16);
  if (!($6)) {
   return;
  }
  $7 = (($size) + -16)|0;
  __THREW__ = 0;
  (invoke_iii(757,($3|0),($7|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = HEAP32[$this>>2]|0;
   $11 = ((($10)) + 80|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iii($12|0,($this|0),($stream|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    return;
   }
  }
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($3|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $24 = ___cxa_find_matching_catch(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  } else {
   $$0 = $18;$$01 = $17;
  }
 }
 $21 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN22AP4_UnknownSampleEntry5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(88)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vii(821,($0|0),($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $eh$lpad$body$index2Z2D = $26;$eh$lpad$body$indexZ2D = $25;
  __ZdlPv($0);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $5 = ((($this)) + 64|0);
 $6 = ((($0)) + 36|0);
 $7 = ((($0)) + 62|0);
 HEAP16[$7>>1] = 1;
 $8 = ((($0)) + 56|0);
 $9 = ((($0)) + 8|0);
 ;HEAP8[$8>>0]=0|0;HEAP8[$8+1>>0]=0|0;HEAP8[$8+2>>0]=0|0;HEAP8[$8+3>>0]=0|0;HEAP8[$8+4>>0]=0|0;HEAP8[$8+5>>0]=0|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 8)|0;
 HEAP32[$9>>2] = $11;
 HEAP32[$0>>2] = (21240);
 HEAP32[$6>>2] = (21332);
 $12 = ((($0)) + 64|0);
 __THREW__ = 0;
 invoke_vii(842,($12|0),($5|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $21 = ((($this)) + 80|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  $24 = (($23) + ($22))|0;
  HEAP32[$9>>2] = $24;
  return ($0|0);
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($6|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $eh$lpad$body$index2Z2D = $16;$eh$lpad$body$indexZ2D = $15;
  __ZdlPv($0);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(36)|0);
 __THREW__ = 0;
 invoke_vii(878,($0|0),($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8)|0;
 return ($2|0);
}
function __ZN22AP4_UnknownSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 $2 = ((($this)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream4ReadEPvj($stream,$3,$5)|0);
 return ($6|0);
}
function __ZN22AP4_UnknownSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = ((($this)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$8,$10)|0);
 $$0 = $11;
 return ($$0|0);
}
function __ZN25AP4_MpegSystemSampleEntryC2EjP16AP4_EsDescriptor($this,$type,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $descriptor = $descriptor|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$type);
 $0 = ((($this)) + 62|0);
 HEAP16[$0>>1] = 1;
 $1 = ((($this)) + 56|0);
 $2 = ((($this)) + 8|0);
 ;HEAP8[$1>>0]=0|0;HEAP8[$1+1>>0]=0|0;HEAP8[$1+2>>0]=0|0;HEAP8[$1+3>>0]=0|0;HEAP8[$1+4>>0]=0|0;HEAP8[$1+5>>0]=0|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8)|0;
 HEAP32[$2>>2] = $4;
 HEAP32[$this>>2] = (21384);
 $5 = ((($this)) + 36|0);
 HEAP32[$5>>2] = (21476);
 $6 = ($descriptor|0)==(0|0);
 if ($6) {
  return;
 }
 __THREW__ = 0;
 $7 = (invoke_ii(752,40)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   label = 5;
  } else {
   __THREW__ = 0;
   invoke_vii(883,($7|0),($descriptor|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    __ZdlPv($7);
    $$0 = $17;$$01 = $16;
    break;
   }
   __THREW__ = 0;
   (invoke_iiii(22,($5|0),($7|0),-1)|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 5;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $$0 = $15;$$01 = $14;
 }
 __THREW__ = 0;
 invoke_vi(314,($5|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN25AP4_MpegSystemSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(72)|0);
 $1 = ((($this)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $5 = (invoke_iiii($4|0,($1|0),1702061171,0)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ($5|0)==(0|0);
  if ($8) {
   $12 = 0;
  } else {
   $9 = (___dynamic_cast($5,11216,3984,0)|0);
   $12 = $9;
  }
  __THREW__ = 0;
  invoke_vii(884,($0|0),($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   return ($0|0);
  }
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 __ZdlPv($0);
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_Mp4sSampleEntryC2EP16AP4_EsDescriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN25AP4_MpegSystemSampleEntryC2EjP16AP4_EsDescriptor($this,1836070003,$descriptor);
 HEAP32[$this>>2] = (21528);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21620);
 return;
}
function __ZN19AP4_Mp4sSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15AP4_SampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1836070003,$size,$stream,$atom_factory);
 $0 = ((($this)) + 36|0);
 HEAP32[$this>>2] = (21528);
 HEAP32[$0>>2] = (21620);
 return;
}
function __ZN19AP4_Mp4sSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(72)|0);
 $1 = ((($this)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $5 = (invoke_iiii($4|0,($1|0),1702061171,0)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ($5|0)==(0|0);
  if ($8) {
   $12 = 0;
  } else {
   $9 = (___dynamic_cast($5,11216,3984,0)|0);
   $12 = $9;
  }
  __THREW__ = 0;
  invoke_vii(884,($0|0),($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   return ($0|0);
  }
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 __ZdlPv($0);
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntryC2Ejjtt($this,$format,$sample_rate,$sample_size,$channel_count) {
 $this = $this|0;
 $format = $format|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21672);
 HEAP32[$0>>2] = (21764);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 68|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 72|0);
 HEAP16[$9>>1] = $channel_count;
 $10 = ((($this)) + 74|0);
 HEAP16[$10>>1] = $sample_size;
 $11 = ((($this)) + 76|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($this)) + 78|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($this)) + 80|0);
 HEAP32[$13>>2] = $sample_rate;
 $14 = ((($this)) + 84|0);
 $15 = ((($this)) + 136|0);
 dest=$14; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vi(837,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) + 20)|0;
  HEAP32[$3>>2] = $19;
  return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $22 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,$format,$size,0,0);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 HEAP32[$this>>2] = (21672);
 HEAP32[$0>>2] = (21764);
 $3 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(837,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $$0 = $12;$$01 = $11;
 } else {
  $6 = HEAP32[$this>>2]|0;
  $7 = ((($6)) + 72|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  invoke_viii($8|0,($this|0),($stream|0),($atom_factory|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   return;
  }
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($3|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $20 = ___cxa_find_matching_catch(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   $$0 = $14;$$01 = $13;
  }
 }
 $17 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN20AP4_AudioSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(1);
 if ($2) {
  $size$0 = 44;
 } else {
  $3 = ($1<<16>>16)==(2);
  if ($3) {
   $4 = ((($this)) + 152|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 64)|0;
   $size$0 = $6;
  } else {
   $size$0 = 28;
  }
 }
 return ($size$0|0);
}
function __ZN20AP4_AudioSampleEntry13GetSampleRateEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(2);
 if ($2) {
  $3 = ((($this)) + 104|0);
  $4 = +HEAPF64[$3>>3];
  $5 = (~~(($4))>>>0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = ((($this)) + 80|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 16;
  $$0 = $8;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry15GetChannelCountEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 64|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(2);
 if ($2) {
  $3 = ((($this)) + 112|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4&65535;
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = ((($this)) + 72|0);
  $7 = HEAP16[$6>>1]|0;
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 $2 = ((($this)) + 64|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$2)|0);
 $3 = ((($this)) + 66|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$3)|0);
 $4 = ((($this)) + 68|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$4)|0);
 $5 = ((($this)) + 72|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$5)|0);
 $6 = ((($this)) + 74|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$6)|0);
 $7 = ((($this)) + 76|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$7)|0);
 $8 = ((($this)) + 78|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$8)|0);
 $9 = ((($this)) + 80|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$9)|0);
 $10 = HEAP16[$2>>1]|0;
 if ((($10<<16>>16) == 1)) {
  $11 = ((($this)) + 84|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$11)|0);
  $12 = ((($this)) + 88|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$12)|0);
  $13 = ((($this)) + 92|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$13)|0);
  $14 = ((($this)) + 96|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$14)|0);
  return 0;
 } else if ((($10<<16>>16) == 2)) {
  $15 = ((($this)) + 100|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$15)|0);
  $16 = ((($this)) + 104|0);
  (__ZN14AP4_ByteStream10ReadDoubleERd($stream,$16)|0);
  $17 = ((($this)) + 112|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$17)|0);
  $18 = ((($this)) + 116|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$18)|0);
  $19 = ((($this)) + 120|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$19)|0);
  $20 = ((($this)) + 124|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$20)|0);
  $21 = ((($this)) + 128|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$21)|0);
  $22 = ((($this)) + 132|0);
  (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$22)|0);
  $23 = HEAP32[$15>>2]|0;
  $24 = ($23>>>0)>(72);
  if ($24) {
   $25 = (($23) + -72)|0;
   $26 = ((($this)) + 136|0);
   (__ZN14AP4_DataBuffer11SetDataSizeEj($26,$25)|0);
   $27 = ((($this)) + 144|0);
   $28 = HEAP32[$27>>2]|0;
   (__ZN14AP4_ByteStream4ReadEPvj($stream,$28,$25)|0);
  }
  $29 = ((($this)) + 84|0);
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;
  return 0;
 } else {
  $30 = ((($this)) + 84|0);
  dest=$30; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  return 0;
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = ((($this)) + 64|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = ((($this)) + 66|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($this)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  return ($$0|0);
 }
 $19 = ((($this)) + 72|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  return ($$0|0);
 }
 $23 = ((($this)) + 74|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$24)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $$0 = $25;
  return ($$0|0);
 }
 $27 = ((($this)) + 76|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$28)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $$0 = $29;
  return ($$0|0);
 }
 $31 = ((($this)) + 78|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$32)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $$0 = $33;
  return ($$0|0);
 }
 $35 = ((($this)) + 80|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$36)|0);
 $38 = ($37|0)==(0);
 if (!($38)) {
  $$0 = $37;
  return ($$0|0);
 }
 $39 = HEAP16[$7>>1]|0;
 if ((($39<<16>>16) == 1)) {
  $40 = ((($this)) + 84|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$41)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $$0 = $42;
   return ($$0|0);
  }
  $44 = ((($this)) + 88|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$45)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   $$0 = $46;
   return ($$0|0);
  }
  $48 = ((($this)) + 92|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$49)|0);
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = ((($this)) + 96|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$53)|0);
   return ($54|0);
  } else {
   $$0 = $50;
   return ($$0|0);
  }
 } else if ((($39<<16>>16) == 2)) {
  $55 = ((($this)) + 100|0);
  $56 = HEAP32[$55>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$56)|0);
  $57 = ((($this)) + 104|0);
  $58 = +HEAPF64[$57>>3];
  (__ZN14AP4_ByteStream11WriteDoubleEd($stream,$58)|0);
  $59 = ((($this)) + 112|0);
  $60 = HEAP32[$59>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$60)|0);
  $61 = ((($this)) + 116|0);
  $62 = HEAP32[$61>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$62)|0);
  $63 = ((($this)) + 120|0);
  $64 = HEAP32[$63>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$64)|0);
  $65 = ((($this)) + 124|0);
  $66 = HEAP32[$65>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$66)|0);
  $67 = ((($this)) + 128|0);
  $68 = HEAP32[$67>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$68)|0);
  $69 = ((($this)) + 132|0);
  $70 = HEAP32[$69>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$70)|0);
  $71 = ((($this)) + 152|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==(0);
  if ($73) {
   $$0 = 0;
   return ($$0|0);
  }
  $74 = ((($this)) + 144|0);
  $75 = HEAP32[$74>>2]|0;
  (__ZN14AP4_ByteStream5WriteEPKvj($stream,$75,$72)|0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23344,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 64|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(2);
 if ($11) {
  $12 = ((($this)) + 112|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13&65535;
  $$0$i = $14;
 } else {
  $15 = ((($this)) + 72|0);
  $16 = HEAP16[$15>>1]|0;
  $$0$i = $16;
 }
 $17 = $$0$i&65535;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,23368,$17,0,0);
 $18 = HEAP32[$inspector>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($this)) + 74|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 FUNCTION_TABLE_viiiii[$20 & 1023]($inspector,23384,$23,0,0);
 $24 = HEAP32[$inspector>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP16[$9>>1]|0;
 $28 = ($27<<16>>16)==(2);
 if ($28) {
  $29 = ((($this)) + 104|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (~~(($30))>>>0);
  $$0$i1 = $31;
 } else {
  $32 = ((($this)) + 80|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 16;
  $$0$i1 = $34;
 }
 FUNCTION_TABLE_viiiii[$26 & 1023]($inspector,23400,$$0$i1,0,0);
 $35 = HEAP16[$9>>1]|0;
 $36 = ($35<<16>>16)==(0);
 if ($36) {
  return 0;
 }
 $37 = HEAP32[$inspector>>2]|0;
 $38 = ((($37)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $35&65535;
 FUNCTION_TABLE_viiiii[$39 & 1023]($inspector,23416,$40,0,0);
 return 0;
}
function __ZN20AP4_AudioSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(44)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 64|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(2);
 if ($5) {
  $6 = ((($this)) + 104|0);
  $7 = +HEAPF64[$6>>3];
  $8 = (~~(($7))>>>0);
  $9 = ((($this)) + 112|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10&65535;
  $$0$i1 = $11;$$0$i2 = $8;
 } else {
  $12 = ((($this)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 >>> 16;
  $15 = ((($this)) + 72|0);
  $16 = HEAP16[$15>>1]|0;
  $$0$i1 = $16;$$0$i2 = $14;
 }
 $$in = ((($this)) + 74|0);
 $17 = HEAP16[$$in>>1]|0;
 $18 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_viiii(817,($0|0),0,($2|0),($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  __ZdlPv($0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = ((($0)) + 32|0);
  $22 = ((($0)) + 36|0);
  HEAP32[$22>>2] = $$0$i2;
  $23 = ((($0)) + 40|0);
  HEAP16[$23>>1] = $17;
  $24 = ((($0)) + 42|0);
  HEAP16[$24>>1] = $$0$i1;
  HEAP32[$0>>2] = (26136);
  HEAP32[$21>>2] = (26160);
  return ($0|0);
 }
 return (0)|0;
}
function __ZN24AP4_MpegAudioSampleEntryC2EjjttP16AP4_EsDescriptor($this,$type,$sample_rate,$sample_size,$channel_count,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $descriptor = $descriptor|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$type);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21672);
 HEAP32[$0>>2] = (21764);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 68|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($this)) + 72|0);
 HEAP16[$9>>1] = $channel_count;
 $10 = ((($this)) + 74|0);
 HEAP16[$10>>1] = $sample_size;
 $11 = ((($this)) + 76|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($this)) + 78|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($this)) + 80|0);
 HEAP32[$13>>2] = $sample_rate;
 $14 = ((($this)) + 84|0);
 $15 = ((($this)) + 136|0);
 dest=$14; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vi(837,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $20 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  } else {
   ___resumeException($18|0);
   // unreachable;
  }
 }
 $25 = HEAP32[$3>>2]|0;
 $26 = (($25) + 20)|0;
 HEAP32[$3>>2] = $26;
 HEAP32[$this>>2] = (21816);
 $27 = ((($this)) + 36|0);
 HEAP32[$27>>2] = (21908);
 $28 = ($descriptor|0)==(0|0);
 if ($28) {
  return;
 }
 __THREW__ = 0;
 $29 = (invoke_ii(752,40)|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 do {
  if ($31) {
   label = 9;
  } else {
   __THREW__ = 0;
   invoke_vii(883,($29|0),($descriptor|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    __ZdlPv($29);
    $$0 = $39;$$01 = $38;
    break;
   }
   __THREW__ = 0;
   (invoke_iiii(22,($27|0),($29|0),-1)|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    label = 9;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $$0 = $37;$$01 = $36;
 }
 HEAP32[$this>>2] = (21672);
 HEAP32[$0>>2] = (21764);
 __THREW__ = 0;
 invoke_vi(279,($15|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $44 = ___cxa_find_matching_catch(0|0)|0;
  $45 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($27|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   $48 = ___cxa_find_matching_catch(0|0)|0;
   $49 = tempRet0;
   ___clang_call_terminate($48);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $44;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($27|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $50 = ___cxa_find_matching_catch(0|0)|0;
 $51 = tempRet0;
 $eh$lpad$body$indexZ2D = $50;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN24AP4_MpegAudioSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $esds$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($0,1702061171,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  label = 4;
 } else {
  $6 = (___dynamic_cast($4,11216,3984,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 4;
  } else {
   $$pre = ((($this)) + 64|0);
   $$pre$phiZ2D = $$pre;$esds$0 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ((($this)) + 64|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $$pre$phiZ2D = $8;$esds$0 = 0;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiiii[$13 & 1023]($0,23432,0,0)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$pre$phiZ2D = $8;$esds$0 = 0;
   } else {
    $16 = (___dynamic_cast($14,11216,3984,0)|0);
    $$pre$phiZ2D = $8;$esds$0 = $16;
   }
  }
 }
 $17 = (__Znwj(84)|0);
 $18 = HEAP16[$$pre$phiZ2D>>1]|0;
 $19 = ($18<<16>>16)==(2);
 if ($19) {
  $20 = ((($this)) + 104|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (~~(($21))>>>0);
  $23 = ((($this)) + 112|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24&65535;
  $$0$i1 = $25;$$0$i2 = $22;
 } else {
  $26 = ((($this)) + 80|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> 16;
  $29 = ((($this)) + 72|0);
  $30 = HEAP16[$29>>1]|0;
  $$0$i1 = $30;$$0$i2 = $28;
 }
 $$in = ((($this)) + 74|0);
 $31 = HEAP16[$$in>>1]|0;
 __THREW__ = 0;
 invoke_viiiii(816,($17|0),($$0$i2|0),($31|0),($$0$i1|0),($esds$0|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZdlPv($17);
  ___resumeException($34|0);
  // unreachable;
 } else {
  return ($17|0);
 }
 return (0)|0;
}
function __ZN19AP4_Mp4aSampleEntryC2EjttP16AP4_EsDescriptor($this,$sample_rate,$sample_size,$channel_count,$descriptor) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $descriptor = $descriptor|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN24AP4_MpegAudioSampleEntryC2EjjttP16AP4_EsDescriptor($this,1836069985,$sample_rate,$sample_size,$channel_count,$descriptor);
 HEAP32[$this>>2] = (23456);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (23548);
 return;
}
function __ZN19AP4_Mp4aSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1836069985,$size,$stream,$atom_factory);
 $0 = ((($this)) + 36|0);
 HEAP32[$this>>2] = (23456);
 HEAP32[$0>>2] = (23548);
 return;
}
function __ZN21AP4_VisualSampleEntryC2EjtttPKc($this,$format,$width,$height,$depth,$compressor_name) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 80|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 82|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 84|0);
 HEAP32[$10>>2] = 4718592;
 $11 = ((($this)) + 88|0);
 HEAP32[$11>>2] = 4718592;
 $12 = ((($this)) + 92|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 96|0);
 HEAP16[$13>>1] = 1;
 $14 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vii(812,($14|0),($compressor_name|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($this)) + 108|0);
  HEAP16[$17>>1] = $depth;
  $18 = ((($this)) + 110|0);
  HEAP16[$18>>1] = -1;
  $19 = ((($this)) + 68|0);
  dest=$19; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $20 = HEAP32[$3>>2]|0;
  $21 = (($20) + 70)|0;
  HEAP32[$3>>2] = $21;
  return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $24 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,$format,$size,0,0);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 $3 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(790,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $$0 = $12;$$01 = $11;
 } else {
  $6 = HEAP32[$this>>2]|0;
  $7 = ((($6)) + 72|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  invoke_viii($8|0,($this|0),($stream|0),($atom_factory|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   return;
  }
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  __THREW__ = 0;
  invoke_vi(792,($3|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $20 = ___cxa_find_matching_catch(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   $$0 = $14;$$01 = $13;
  }
 }
 $17 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZN21AP4_VisualSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 78;
}
function __ZN21AP4_VisualSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $compressor_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compressor_name = sp;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 $2 = ((($this)) + 64|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$2)|0);
 $3 = ((($this)) + 66|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$3)|0);
 $4 = ((($this)) + 68|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$4,12)|0);
 $5 = ((($this)) + 80|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$5)|0);
 $6 = ((($this)) + 82|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$6)|0);
 $7 = ((($this)) + 84|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$7)|0);
 $8 = ((($this)) + 88|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$8)|0);
 $9 = ((($this)) + 92|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$9)|0);
 $10 = ((($this)) + 96|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$10)|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$compressor_name,32)|0);
 $11 = HEAP8[$compressor_name>>0]|0;
 $12 = ($11<<24>>24)<(32);
 if (!($12)) {
  $18 = ((($this)) + 108|0);
  (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$18)|0);
  $19 = ((($this)) + 110|0);
  (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$19)|0);
  STACKTOP = sp;return 0;
 }
 $13 = $11 << 24 >> 24;
 $14 = (($13) + 1)|0;
 $15 = (($compressor_name) + ($14)|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($this)) + 100|0);
 $17 = ((($compressor_name)) + 1|0);
 (__ZN10AP4_StringaSEPKc($16,$17)|0);
 $18 = ((($this)) + 108|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$18)|0);
 $19 = ((($this)) + 110|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$19)|0);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_VisualSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $$op7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $compressor_name = 0, $exitcond = 0, $i$03 = 0, $i1$01 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compressor_name = sp;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($this)) + 64|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($this)) + 66|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($this)) + 68|0);
 $16 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$15,12)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ((($this)) + 80|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$19)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ((($this)) + 82|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$23)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ((($this)) + 84|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$27)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = ((($this)) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$31)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($this)) + 92|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$35)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($this)) + 96|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$39)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $$0 = $40;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ((($this)) + 104|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43>>>0)>(31);
 $$ = $44 ? 31 : $43;
 $45 = $$&255;
 HEAP8[$compressor_name>>0] = $45;
 $46 = ($$|0)==(0);
 if ($46) {
  label = 15;
 } else {
  $47 = ((($this)) + 100|0);
  $48 = ($43>>>0)<(31);
  $49 = $48 ? $43 : 31;
  $$pre = HEAP32[$47>>2]|0;
  $i$03 = 0;
  while(1) {
   $55 = (($$pre) + ($i$03)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = (($i$03) + 1)|0;
   $58 = (($compressor_name) + ($57)|0);
   HEAP8[$58>>0] = $56;
   $exitcond = ($57|0)==($49|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $57;
   }
  }
  $i1$01 = (($$) + 1)|0;
  $50 = ($i1$01>>>0)<(32);
  if ($50) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $51 = ($43>>>0)<(31);
  $$op7 = $43 ^ -1;
  $52 = $51 ? $$op7 : -32;
  $53 = (0 - ($52))|0;
  $scevgep = (($compressor_name) + ($53)|0);
  $54 = (($52) + 32)|0;
  _memset(($scevgep|0),0,($54|0))|0;
 }
 $59 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$compressor_name,32)|0);
 $60 = ($59|0)==(0);
 if (!($60)) {
  $$0 = $59;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = ((($this)) + 108|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$62)|0);
 $64 = ($63|0)==(0);
 if (!($64)) {
  $$0 = $63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = ((($this)) + 110|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$66)|0);
 $$0 = $67;
 STACKTOP = sp;return ($$0|0);
}
function __ZN21AP4_VisualSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23344,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 80|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,23592,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 82|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,23600,$17,0,0);
 $18 = HEAP32[$inspector>>2]|0;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($this)) + 100|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_viiii[$20 & 1023]($inspector,23608,$22,0);
 return 0;
}
function __ZN21AP4_VisualSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(52)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 80|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 82|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 108|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_viiii(817,($0|0),0,($2|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $eh$lpad$body$index2Z2D = $29;$eh$lpad$body$indexZ2D = $28;
  __ZdlPv($0);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $14 = ((($0)) + 32|0);
 HEAP32[$14>>2] = (7184);
 $15 = ((($0)) + 36|0);
 HEAP16[$15>>1] = $4;
 $16 = ((($0)) + 38|0);
 HEAP16[$16>>1] = $6;
 $17 = ((($0)) + 40|0);
 HEAP16[$17>>1] = $8;
 $18 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vii(812,($18|0),($10|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  HEAP32[$0>>2] = (26248);
  HEAP32[$14>>2] = (26272);
  return ($0|0);
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 HEAP32[$0>>2] = (25848);
 $23 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $eh$lpad$body$index2Z2D = $22;$eh$lpad$body$indexZ2D = $21;
  __ZdlPv($0);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN24AP4_MpegVideoSampleEntryC2EjtttPKcP16AP4_EsDescriptor($this,$type,$width,$height,$depth,$compressor_name,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $descriptor = $descriptor|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$type);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 80|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 82|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 84|0);
 HEAP32[$10>>2] = 4718592;
 $11 = ((($this)) + 88|0);
 HEAP32[$11>>2] = 4718592;
 $12 = ((($this)) + 92|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 96|0);
 HEAP16[$13>>1] = 1;
 $14 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vii(812,($14|0),($compressor_name|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  } else {
   ___resumeException($17|0);
   // unreachable;
  }
 }
 $24 = ((($this)) + 108|0);
 HEAP16[$24>>1] = $depth;
 $25 = ((($this)) + 110|0);
 HEAP16[$25>>1] = -1;
 $26 = ((($this)) + 68|0);
 dest=$26; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $27 = HEAP32[$3>>2]|0;
 $28 = (($27) + 70)|0;
 HEAP32[$3>>2] = $28;
 HEAP32[$this>>2] = (22104);
 $29 = ((($this)) + 36|0);
 HEAP32[$29>>2] = (22196);
 $30 = ($descriptor|0)==(0|0);
 if ($30) {
  return;
 }
 __THREW__ = 0;
 $31 = (invoke_ii(752,40)|0);
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 do {
  if ($33) {
   label = 9;
  } else {
   __THREW__ = 0;
   invoke_vii(883,($31|0),($descriptor|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $40 = ___cxa_find_matching_catch()|0;
    $41 = tempRet0;
    __ZdlPv($31);
    $$0 = $41;$$01 = $40;
    break;
   }
   __THREW__ = 0;
   (invoke_iiii(22,($29|0),($31|0),-1)|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 9;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $$0 = $39;$$01 = $38;
 }
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 __THREW__ = 0;
 invoke_vi(792,($14|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $46 = ___cxa_find_matching_catch(0|0)|0;
  $47 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($29|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $50 = ___cxa_find_matching_catch(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $46;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($29|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if (!($45)) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $52 = ___cxa_find_matching_catch(0|0)|0;
 $53 = tempRet0;
 $eh$lpad$body$indexZ2D = $52;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN24AP4_MpegVideoSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(92)|0);
 $1 = ((($this)) + 80|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($this)) + 82|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 108|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii($12|0,($9|0),1702061171,0)|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZdlPv($0);
  ___resumeException($18|0);
  // unreachable;
 }
 $16 = ($13|0)==(0|0);
 if ($16) {
  $20 = 0;
 } else {
  $17 = (___dynamic_cast($13,11216,3984,0)|0);
  $20 = $17;
 }
 __THREW__ = 0;
 invoke_viiiiii(820,($0|0),($2|0),($4|0),($6|0),($8|0),($20|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  __ZdlPv($0);
  ___resumeException($18|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN19AP4_Mp4vSampleEntryC2EtttPKcP16AP4_EsDescriptor($this,$width,$height,$depth,$compressor_name,$descriptor) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $descriptor = $descriptor|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN24AP4_MpegVideoSampleEntryC2EjtttPKcP16AP4_EsDescriptor($this,1836070006,$width,$height,$depth,$compressor_name,$descriptor);
 HEAP32[$this>>2] = (23632);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (23724);
 return;
}
function __ZN19AP4_Mp4vSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,1836070006,$size,$stream,$atom_factory);
 $0 = ((($this)) + 36|0);
 HEAP32[$this>>2] = (23632);
 HEAP32[$0>>2] = (23724);
 return;
}
function __ZN18AP4_AvcSampleEntryC2EjtttPKcRK12AP4_AvccAtom($this,$format,$width,$height,$depth,$compressor_name,$avcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $avcc = $avcc|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 80|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 82|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 84|0);
 HEAP32[$10>>2] = 4718592;
 $11 = ((($this)) + 88|0);
 HEAP32[$11>>2] = 4718592;
 $12 = ((($this)) + 92|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 96|0);
 HEAP16[$13>>1] = 1;
 $14 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vii(812,($14|0),($compressor_name|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  } else {
   ___resumeException($17|0);
   // unreachable;
  }
 }
 $24 = ((($this)) + 108|0);
 HEAP16[$24>>1] = $depth;
 $25 = ((($this)) + 110|0);
 HEAP16[$25>>1] = -1;
 $26 = ((($this)) + 68|0);
 dest=$26; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $27 = HEAP32[$3>>2]|0;
 $28 = (($27) + 70)|0;
 HEAP32[$3>>2] = $28;
 HEAP32[$this>>2] = (22248);
 $29 = ((($this)) + 36|0);
 HEAP32[$29>>2] = (22340);
 __THREW__ = 0;
 $30 = (invoke_ii(752,96)|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 do {
  if ($32) {
   label = 9;
  } else {
   __THREW__ = 0;
   invoke_vii(885,($30|0),($avcc|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $39 = ___cxa_find_matching_catch()|0;
    $40 = tempRet0;
    __ZdlPv($30);
    $$0 = $40;$$01 = $39;
    break;
   }
   __THREW__ = 0;
   (invoke_iiii(22,($29|0),($30|0),-1)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    label = 9;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $$0 = $38;$$01 = $37;
 }
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 __THREW__ = 0;
 invoke_vi(792,($14|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($29|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch(0|0)|0;
   $50 = tempRet0;
   ___clang_call_terminate($49);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $45;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($29|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if (!($44)) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $51 = ___cxa_find_matching_catch(0|0)|0;
 $52 = tempRet0;
 $eh$lpad$body$indexZ2D = $51;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN18AP4_AvcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory);
 HEAP32[$this>>2] = (22248);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22340);
 return;
}
function __ZN19AP4_HevcSampleEntryC2EjtttPKcRK12AP4_HvccAtom($this,$format,$width,$height,$depth,$compressor_name,$hvcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $hvcc = $hvcc|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 $6 = ((($this)) + 64|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($this)) + 66|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($this)) + 80|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 82|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 84|0);
 HEAP32[$10>>2] = 4718592;
 $11 = ((($this)) + 88|0);
 HEAP32[$11>>2] = 4718592;
 $12 = ((($this)) + 92|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($this)) + 96|0);
 HEAP16[$13>>1] = 1;
 $14 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vii(812,($14|0),($compressor_name|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $19 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  } else {
   ___resumeException($17|0);
   // unreachable;
  }
 }
 $24 = ((($this)) + 108|0);
 HEAP16[$24>>1] = $depth;
 $25 = ((($this)) + 110|0);
 HEAP16[$25>>1] = -1;
 $26 = ((($this)) + 68|0);
 dest=$26; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $27 = HEAP32[$3>>2]|0;
 $28 = (($27) + 70)|0;
 HEAP32[$3>>2] = $28;
 HEAP32[$this>>2] = (22392);
 $29 = ((($this)) + 36|0);
 HEAP32[$29>>2] = (22484);
 __THREW__ = 0;
 $30 = (invoke_ii(752,120)|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 do {
  if ($32) {
   label = 9;
  } else {
   __THREW__ = 0;
   invoke_vii(886,($30|0),($hvcc|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $39 = ___cxa_find_matching_catch()|0;
    $40 = tempRet0;
    __ZdlPv($30);
    $$0 = $40;$$01 = $39;
    break;
   }
   __THREW__ = 0;
   (invoke_iiii(22,($29|0),($30|0),-1)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    label = 9;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $$0 = $38;$$01 = $37;
 }
 HEAP32[$this>>2] = (21960);
 HEAP32[$0>>2] = (22052);
 __THREW__ = 0;
 invoke_vi(792,($14|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($29|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch(0|0)|0;
   $50 = tempRet0;
   ___clang_call_terminate($49);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $45;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($29|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if (!($44)) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $51 = ___cxa_find_matching_catch(0|0)|0;
 $52 = tempRet0;
 $eh$lpad$body$indexZ2D = $51;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN18AP4_AvcSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 80|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 82|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 108|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_iiii($14|0,($11|0),1635148611,0)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 }
 $18 = ($15|0)==(0|0);
 if ($18) {
  $22 = 0;
 } else {
  $19 = (___dynamic_cast($15,11216,18896,0)|0);
  $22 = $19;
 }
 __THREW__ = 0;
 invoke_viiiiiii(887,($0|0),($2|0),($4|0),($6|0),($8|0),($10|0),($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN19AP4_HevcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory);
 HEAP32[$this>>2] = (22392);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22484);
 return;
}
function __ZN19AP4_HevcSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 80|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 82|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 108|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 $15 = (invoke_iiii($14|0,($11|0),1752589123,0)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 }
 $18 = ($15|0)==(0|0);
 if ($18) {
  $22 = 0;
 } else {
  $19 = (___dynamic_cast($15,11216,13360,0)|0);
  $22 = $19;
 }
 __THREW__ = 0;
 invoke_viiiiiii(888,($0|0),($2|0),($4|0),($6|0),($8|0),($10|0),($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  __ZdlPv($0);
  ___resumeException($20|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN22AP4_RtpHintSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,1920233504,$size,0,0);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 HEAP32[$this>>2] = (22536);
 HEAP32[$0>>2] = (22628);
 __THREW__ = 0;
 (invoke_iiii(788,($stream|0),($2|0),6)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   __THREW__ = 0;
   (invoke_iii(794,($stream|0),($1|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $7 = ((($this)) + 64|0);
    __THREW__ = 0;
    $8 = (invoke_iii(794,($stream|0),($7|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = ($8|0)==(0);
     if ($11) {
      $12 = ((($this)) + 66|0);
      __THREW__ = 0;
      $13 = (invoke_iii(794,($stream|0),($12|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       break;
      }
      $16 = ($13|0)==(0);
      if ($16) {
       $17 = ((($this)) + 68|0);
       __THREW__ = 0;
       (invoke_iii(755,($stream|0),($17|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if ($19) {
        break;
       }
      }
     }
     $20 = ((($this)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(1);
     if ($22) {
      $23 = ((($this)) + 16|0);
      $24 = $23;
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = (($24) + 4)|0;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $36 = $26;$37 = $29;
     } else {
      $36 = $21;$37 = 0;
     }
     $30 = HEAP32[$this>>2]|0;
     $31 = ((($30)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     $33 = (invoke_ii($32|0,($this|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      $38 = (_i64Subtract(($36|0),($37|0),($33|0),0)|0);
      $39 = tempRet0;
      $40 = HEAP32[$this>>2]|0;
      $41 = ((($40)) + 76|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      $43 = (invoke_ii($42|0,($this|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if (!($45)) {
       $46 = ($38>>>0)>($43>>>0);
       if (!($46)) {
        return;
       }
       $47 = (($38) - ($43))|0;
       __THREW__ = 0;
       invoke_viiiii(747,($this|0),($atom_factory|0),($stream|0),($47|0),0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if (!($49)) {
        return;
       }
      }
     }
    }
   }
  }
 } while(0);
 $50 = ___cxa_find_matching_catch()|0;
 $51 = tempRet0;
 $52 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $55 = ___cxa_find_matching_catch(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 } else {
  ___resumeException($50|0);
  // unreachable;
 }
}
function __ZN22AP4_RtpHintSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 16;
}
function __ZN22AP4_RtpHintSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 $2 = ((($this)) + 64|0);
 $3 = (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  return ($$0|0);
 }
 $5 = ((($this)) + 66|0);
 $6 = (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 68|0);
 $9 = (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$8)|0);
 $$0 = $9;
 return ($$0|0);
}
function __ZN22AP4_RtpHintSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = ((($this)) + 64|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = ((($this)) + 66|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $13;
  return ($$0|0);
 }
 $15 = ((($this)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$16)|0);
 $$0 = $17;
 return ($$0|0);
}
function __ZN22AP4_RtpHintSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23344,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 64|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,23768,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 66|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,23792,$17,0,0);
 $18 = HEAP32[$inspector>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($this)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_viiiii[$20 & 1023]($inspector,23824,$22,0,0);
 return 0;
}
function __ZN23AP4_SubtitleSampleEntryC2EjPKcS1_S1_($this,$format,$namespce,$schema_location,$image_mime_type) {
 $this = $this|0;
 $format = $format|0;
 $namespce = $namespce|0;
 $schema_location = $schema_location|0;
 $image_mime_type = $image_mime_type|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ej($this,$format);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 $3 = ((($this)) + 8|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8)|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$this>>2] = (22680);
 HEAP32[$0>>2] = (22772);
 $6 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vii(812,($6|0),($namespce|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $$2 = $29;$$23 = $28;
 } else {
  $9 = ((($this)) + 72|0);
  __THREW__ = 0;
  invoke_vii(812,($9|0),($schema_location|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $30 = ___cxa_find_matching_catch()|0;
   $31 = tempRet0;
   $$1 = $31;$$12 = $30;
  } else {
   $12 = ((($this)) + 80|0);
   __THREW__ = 0;
   invoke_vii(812,($12|0),($image_mime_type|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $$0 = $33;$$01 = $32;
   } else {
    $15 = HEAP32[$3>>2]|0;
    $16 = ((($this)) + 68|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($this)) + 76|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($this)) + 84|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($15) + 3)|0;
    $23 = (($22) + ($17))|0;
    $24 = (($23) + ($19))|0;
    $25 = (($24) + ($21))|0;
    __THREW__ = 0;
    invoke_viiii(889,($this|0),($25|0),0,0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     return;
    }
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    __THREW__ = 0;
    invoke_vi(792,($12|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     $45 = ___cxa_find_matching_catch(0|0)|0;
     $46 = tempRet0;
     ___clang_call_terminate($45);
     // unreachable;
    } else {
     $$0 = $35;$$01 = $34;
    }
   }
   __THREW__ = 0;
   invoke_vi(792,($9|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    $$1 = $$0;$$12 = $$01;
   }
  }
  __THREW__ = 0;
  invoke_vi(792,($6|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $45 = ___cxa_find_matching_catch(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  } else {
   $$2 = $$1;$$23 = $$12;
  }
 }
 $42 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($42|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($$23|0);
  // unreachable;
 }
}
function __ZN23AP4_SubtitleSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejyb($this,$format,$size,0,0);
 $0 = ((($this)) + 36|0);
 $1 = ((($this)) + 62|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($this)) + 56|0);
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;
 HEAP32[$this>>2] = (22680);
 HEAP32[$0>>2] = (22772);
 $3 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(790,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $$2 = $18;$$23 = $17;
 } else {
  $6 = ((($this)) + 72|0);
  __THREW__ = 0;
  invoke_vi(790,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $19 = ___cxa_find_matching_catch()|0;
   $20 = tempRet0;
   $$1 = $20;$$12 = $19;
  } else {
   $9 = ((($this)) + 80|0);
   __THREW__ = 0;
   invoke_vi(790,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $$0 = $22;$$01 = $21;
   } else {
    $12 = HEAP32[$this>>2]|0;
    $13 = ((($12)) + 72|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    invoke_viii($14|0,($this|0),($stream|0),($atom_factory|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     return;
    }
    $23 = ___cxa_find_matching_catch()|0;
    $24 = tempRet0;
    __THREW__ = 0;
    invoke_vi(792,($9|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $34 = ___cxa_find_matching_catch(0|0)|0;
     $35 = tempRet0;
     ___clang_call_terminate($34);
     // unreachable;
    } else {
     $$0 = $24;$$01 = $23;
    }
   }
   __THREW__ = 0;
   invoke_vi(792,($6|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $34 = ___cxa_find_matching_catch(0|0)|0;
    $35 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable;
   } else {
    $$1 = $$0;$$12 = $$01;
   }
  }
  __THREW__ = 0;
  invoke_vi(792,($3|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $34 = ___cxa_find_matching_catch(0|0)|0;
   $35 = tempRet0;
   ___clang_call_terminate($34);
   // unreachable;
  } else {
   $$2 = $$1;$$23 = $$12;
  }
 }
 $31 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($31|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  ___resumeException($$23|0);
  // unreachable;
 }
}
function __ZN23AP4_SubtitleSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 11)|0;
 $3 = ((($this)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4))|0;
 $6 = ((($this)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7))|0;
 return ($8|0);
}
function __ZN23AP4_SubtitleSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($stream,$0,6)|0);
 $1 = ((($this)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($stream,$1)|0);
 $2 = ((($this)) + 64|0);
 $3 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  return ($$0|0);
 }
 $5 = ((($this)) + 72|0);
 $6 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($stream,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($this)) + 80|0);
 $9 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($stream,$8)|0);
 $$0 = $9;
 return ($$0|0);
}
function __ZN23AP4_SubtitleSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 56|0);
 $1 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$0,6)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = ((($this)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN14AP4_ByteStream11WriteStringEPKc($stream,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 $11 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = $11;
  return ($$0|0);
 }
 $13 = ((($this)) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZN14AP4_ByteStream11WriteStringEPKc($stream,$14)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $15;
  return ($$0|0);
 }
 $17 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $17;
  return ($$0|0);
 }
 $19 = ((($this)) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN14AP4_ByteStream11WriteStringEPKc($stream,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  return ($$0|0);
 }
 $23 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
 $$0 = $23;
 return ($$0|0);
}
function __ZN23AP4_SubtitleSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 62|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,23344,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 1023]($inspector,23840,$10,0);
 $11 = HEAP32[$inspector>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_viiii[$13 & 1023]($inspector,23856,$15,0);
 $16 = HEAP32[$inspector>>2]|0;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this)) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_viiii[$18 & 1023]($inspector,23872,$20,0);
 return 0;
}
function __ZN23AP4_SubtitleSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(890,($0|0),($2|0),($4|0),($6|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($0);
  ___resumeException($11|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN15AP4_SampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N15AP4_SampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N15AP4_SampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN22AP4_UnknownSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21332);
 $1 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($this)) + 36|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 $7 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN22AP4_UnknownSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21240);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21332);
 $1 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N22AP4_UnknownSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21240);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21332);
 $2 = ((($0)) + 64|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N22AP4_UnknownSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21240);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21332);
 $2 = ((($0)) + 64|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN25AP4_MpegSystemSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N25AP4_MpegSystemSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N25AP4_MpegSystemSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN19AP4_Mp4sSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N19AP4_Mp4sSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N19AP4_Mp4sSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN20AP4_AudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N20AP4_AudioSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N20AP4_AudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN24AP4_MpegAudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N24AP4_MpegAudioSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N24AP4_MpegAudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN21AP4_VisualSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N21AP4_VisualSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N21AP4_VisualSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN24AP4_MpegVideoSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N24AP4_MpegVideoSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N24AP4_MpegVideoSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN18AP4_AvcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N18AP4_AvcSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N18AP4_AvcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN19AP4_HevcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_HevcSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_HevcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN22AP4_RtpHintSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N22AP4_RtpHintSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn36_N22AP4_RtpHintSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 $1 = ((($0)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN23AP4_SubtitleSampleEntryD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (22680);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22772);
 $1 = ((($this)) + 80|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $13 = ((($this)) + 72|0);
   __THREW__ = 0;
   invoke_vi(792,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   } else {
    $$0 = $12;$$01 = $11;
    label = 8;
   }
  } else {
   $4 = ((($this)) + 72|0);
   __THREW__ = 0;
   invoke_vi(792,($4|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $$0 = $17;$$01 = $16;
    label = 8;
    break;
   }
   $7 = ((($this)) + 64|0);
   __THREW__ = 0;
   invoke_vi(792,($7|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $18 = ___cxa_find_matching_catch()|0;
    $19 = tempRet0;
    $$1 = $19;$$12 = $18;
    break;
   } else {
    $10 = ((($this)) + 36|0);
    __ZN14AP4_AtomParentD2Ev($10);
    return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $20 = ((($this)) + 64|0);
  __THREW__ = 0;
  invoke_vi(792,($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $26 = ___cxa_find_matching_catch(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 $23 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN23AP4_SubtitleSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(592,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N23AP4_SubtitleSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __ZN23AP4_SubtitleSampleEntryD2Ev($0);
 return;
}
function __ZThn36_N23AP4_SubtitleSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(592,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN19AP4_Mp4vSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21960);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (22052);
 $1 = ((($this)) + 100|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_Mp4vSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_Mp4vSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21960);
 $1 = ($this);
 HEAP32[$1>>2] = (22052);
 $2 = ((($this)) + 64|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN19AP4_Mp4aSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (21672);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (21764);
 $1 = ((($this)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $9 = ((($this)) + 36|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $4 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn36_N19AP4_Mp4aSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __ZN14AP4_AtomParentD2Ev($1);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_Mp4aSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 HEAP32[$0>>2] = (21672);
 $1 = ((($0)) + 36|0);
 HEAP32[$1>>2] = (21764);
 $2 = ((($0)) + 136|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __THREW__ = 0;
  invoke_vi(314,($1|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $8;$eh$lpad$body$i$indexZ2D = $7;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($0);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $14;$eh$lpad$body$i$indexZ2D = $13;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN12AP4_OhdrAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(112)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(891,($4|0),($size|0),0,($5|0),($stream|0),($atom_factory|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_OhdrAtomC2EhhyPKcS1_PKhj($this,$encryption_method,$padding_scheme,$0,$1,$content_id,$rights_issuer_url,$textual_headers,$textual_headers_size) {
 $this = $this|0;
 $encryption_method = $encryption_method|0;
 $padding_scheme = $padding_scheme|0;
 $0 = $0|0;
 $1 = $1|0;
 $content_id = $content_id|0;
 $rights_issuer_url = $rights_issuer_url|0;
 $textual_headers = $textual_headers|0;
 $textual_headers_size = $textual_headers_size|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17AP4_ContainerAtomC2Ejhj($this,1869112434,0,0);
 $2 = ((($this)) + 56|0);
 HEAP32[$this>>2] = (23976);
 $3 = ((($this)) + 36|0);
 HEAP32[$3>>2] = (24064);
 HEAP32[$2>>2] = (24116);
 $4 = ((($this)) + 60|0);
 HEAP8[$4>>0] = $encryption_method;
 $5 = ((($this)) + 61|0);
 HEAP8[$5>>0] = $padding_scheme;
 $6 = ((($this)) + 64|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = ((($this)) + 72|0);
 __THREW__ = 0;
 invoke_vii(812,($11|0),($content_id|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $$1 = $31;$$12 = $30;
 } else {
  $14 = ((($this)) + 80|0);
  __THREW__ = 0;
  invoke_vii(812,($14|0),($rights_issuer_url|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   $$0 = $33;$$01 = $32;
  } else {
   $17 = ((($this)) + 88|0);
   __THREW__ = 0;
   invoke_viii(850,($17|0),($textual_headers|0),($textual_headers_size|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = ((($this)) + 76|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($this)) + 84|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($textual_headers_size) + 16)|0;
    $27 = (($26) + ($21))|0;
    $28 = (($27) + ($23))|0;
    $29 = (($28) + ($25))|0;
    HEAP32[$24>>2] = $29;
    return;
   }
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   __THREW__ = 0;
   invoke_vi(792,($14|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $43 = ___cxa_find_matching_catch(0|0)|0;
    $44 = tempRet0;
    ___clang_call_terminate($43);
    // unreachable;
   } else {
    $$0 = $35;$$01 = $34;
   }
  }
  __THREW__ = 0;
  invoke_vi(792,($11|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $43 = ___cxa_find_matching_catch(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 $40 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($40|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN12AP4_OhdrAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $content_id_length = 0, $rights_issuer_url_length = 0, $textual_headers_length = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $content_id_length = sp + 4|0;
 $rights_issuer_url_length = sp + 2|0;
 $textual_headers_length = sp;
 __ZN17AP4_ContainerAtomC2Ejybhj($this,1869112434,$size,0,0,$version,$flags);
 $0 = ((($this)) + 56|0);
 HEAP32[$this>>2] = (23976);
 $1 = ((($this)) + 36|0);
 HEAP32[$1>>2] = (24064);
 HEAP32[$0>>2] = (24116);
 $2 = ((($this)) + 72|0);
 __THREW__ = 0;
 invoke_vi(790,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $72 = ___cxa_find_matching_catch()|0;
  $73 = tempRet0;
  $$2 = $72;$$23 = $73;
 } else {
  $5 = ((($this)) + 80|0);
  __THREW__ = 0;
  invoke_vi(790,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $74 = ___cxa_find_matching_catch()|0;
   $75 = tempRet0;
   $$1 = $74;$$12 = $75;
  } else {
   $8 = ((($this)) + 88|0);
   __THREW__ = 0;
   invoke_vi(837,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $$0 = $76;$$01 = $77;
   } else {
    $11 = ((($this)) + 60|0);
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($11|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    do {
     if (!($13)) {
      $14 = ((($this)) + 61|0);
      __THREW__ = 0;
      (invoke_iii(786,($stream|0),($14|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       $17 = ((($this)) + 64|0);
       __THREW__ = 0;
       (invoke_iii(840,($stream|0),($17|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(794,($stream|0),($content_id_length|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(794,($stream|0),($rights_issuer_url_length|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(794,($stream|0),($textual_headers_length|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           $26 = HEAP16[$content_id_length>>1]|0;
           $27 = $26&65535;
           __THREW__ = 0;
           $28 = (invoke_ii(787,($27|0))|0);
           $29 = __THREW__; __THREW__ = 0;
           $30 = $29&1;
           if (!($30)) {
            __THREW__ = 0;
            (invoke_iiii(788,($stream|0),($28|0),($27|0))|0);
            $31 = __THREW__; __THREW__ = 0;
            $32 = $31&1;
            if (!($32)) {
             $33 = HEAP16[$content_id_length>>1]|0;
             $34 = $33&65535;
             __THREW__ = 0;
             invoke_viii(758,($2|0),($28|0),($34|0));
             $35 = __THREW__; __THREW__ = 0;
             $36 = $35&1;
             if (!($36)) {
              __ZdaPv($28);
              $37 = HEAP16[$rights_issuer_url_length>>1]|0;
              $38 = $37&65535;
              __THREW__ = 0;
              $39 = (invoke_ii(787,($38|0))|0);
              $40 = __THREW__; __THREW__ = 0;
              $41 = $40&1;
              if (!($41)) {
               __THREW__ = 0;
               (invoke_iiii(788,($stream|0),($39|0),($38|0))|0);
               $42 = __THREW__; __THREW__ = 0;
               $43 = $42&1;
               if (!($43)) {
                $44 = HEAP16[$rights_issuer_url_length>>1]|0;
                $45 = $44&65535;
                __THREW__ = 0;
                invoke_viii(758,($5|0),($39|0),($45|0));
                $46 = __THREW__; __THREW__ = 0;
                $47 = $46&1;
                if (!($47)) {
                 __ZdaPv($39);
                 $48 = HEAP16[$textual_headers_length>>1]|0;
                 $49 = $48&65535;
                 __THREW__ = 0;
                 $50 = (invoke_ii(787,($49|0))|0);
                 $51 = __THREW__; __THREW__ = 0;
                 $52 = $51&1;
                 if (!($52)) {
                  __THREW__ = 0;
                  (invoke_iiii(788,($stream|0),($50|0),($49|0))|0);
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   break;
                  }
                  $55 = HEAP16[$textual_headers_length>>1]|0;
                  $56 = $55&65535;
                  __THREW__ = 0;
                  (invoke_iiii(855,($8|0),($50|0),($56|0))|0);
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   break;
                  }
                  __ZdaPv($50);
                  $59 = HEAP16[$content_id_length>>1]|0;
                  $60 = $59&65535;
                  $61 = (($60) + 28)|0;
                  $62 = HEAP16[$rights_issuer_url_length>>1]|0;
                  $63 = $62&65535;
                  $64 = (($61) + ($63))|0;
                  $65 = HEAP16[$textual_headers_length>>1]|0;
                  $66 = $65&65535;
                  $67 = (($64) + ($66))|0;
                  $68 = ($67>>>0)>($size>>>0);
                  if ($68) {
                   STACKTOP = sp;return;
                  }
                  $69 = (($size) - ($67))|0;
                  __THREW__ = 0;
                  invoke_viiiii(747,($this|0),($atom_factory|0),($stream|0),($69|0),0);
                  $70 = __THREW__; __THREW__ = 0;
                  $71 = $70&1;
                  if ($71) {
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $78 = ___cxa_find_matching_catch()|0;
    $79 = tempRet0;
    __THREW__ = 0;
    invoke_vi(279,($8|0));
    $80 = __THREW__; __THREW__ = 0;
    $81 = $80&1;
    if ($81) {
     $89 = ___cxa_find_matching_catch(0|0)|0;
     $90 = tempRet0;
     ___clang_call_terminate($89);
     // unreachable;
    } else {
     $$0 = $78;$$01 = $79;
    }
   }
   __THREW__ = 0;
   invoke_vi(792,($5|0));
   $82 = __THREW__; __THREW__ = 0;
   $83 = $82&1;
   if ($83) {
    $89 = ___cxa_find_matching_catch(0|0)|0;
    $90 = tempRet0;
    ___clang_call_terminate($89);
    // unreachable;
   } else {
    $$1 = $$0;$$12 = $$01;
   }
  }
  __THREW__ = 0;
  invoke_vi(792,($2|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if ($85) {
   $89 = ___cxa_find_matching_catch(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  } else {
   $$2 = $$1;$$23 = $$12;
  }
 }
 $86 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($86|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $89 = ___cxa_find_matching_catch(0|0)|0;
  $90 = tempRet0;
  ___clang_call_terminate($89);
  // unreachable;
 } else {
  ___resumeException($$2|0);
  // unreachable;
 }
}
function __ZN12AP4_OhdrAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 60|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($this)) + 61|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($this)) + 64|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$12,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ((($this)) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19&65535;
 $21 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ((($this)) + 84|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24&65535;
 $26 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$25)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = ((($this)) + 104|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 $31 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$30)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = ((($this)) + 72|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$18>>2]|0;
 $36 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$34,$35)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($this)) + 80|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$23>>2]|0;
 $41 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$39,$40)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  $$0 = $41;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = ((($this)) + 96|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$28>>2]|0;
 $46 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$44,$45)|0);
 $47 = ($46|0)==(0);
 if (!($47)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = (11232);
 $48 = ((($0)) + 4|0);
 HEAP32[$48>>2] = $stream;
 $49 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$49>>2]|0;
 $50 = ($item$01$i|0)==(0|0);
 if ($50) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = HEAP32[(11240)>>2]|0;
 $52 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$51 & 1023]($0,$52)|0);
 $53 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$53>>2]|0;
 $54 = ($item$0$i1|0)==(0|0);
 if ($54) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $55 = ((($$pre)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$56 & 1023]($0,$57)|0);
  $58 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$58>>2]|0;
  $59 = ($item$0$i|0)==(0|0);
  if ($59) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_OhdrAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $curr$01 = 0, $output_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $output_buffer = sp;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 60|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24184,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 61|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,24208,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 64|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,24224,$18,0,0);
 $22 = HEAP32[$inspector>>2]|0;
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($this)) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiii[$24 & 1023]($inspector,24248,$26,0);
 $27 = HEAP32[$inspector>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($this)) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_viiii[$29 & 1023]($inspector,24264,$31,0);
 __ZN14AP4_DataBufferC2Ev($output_buffer);
 $32 = ((($this)) + 104|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 __THREW__ = 0;
 $35 = (invoke_iii(892,($output_buffer|0),($34|0))|0);
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 do {
  if (!($37)) {
   $38 = ($35|0)==(0);
   if (!($38)) {
    $39 = HEAP32[$inspector>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($this)) + 96|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    invoke_viiiii($41|0,($inspector|0),(24288|0),($43|0),($44|0),1);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    }
    __ZN14AP4_DataBufferD2Ev($output_buffer);
    $71 = HEAP32[$this>>2]|0;
    $72 = ((($71)) + 52|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_iii[$73 & 1023]($this,$inspector)|0);
    STACKTOP = sp;return ($74|0);
   }
   $51 = HEAP32[$32>>2]|0;
   $52 = ((($this)) + 96|0);
   $53 = HEAP32[$52>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(855,($output_buffer|0),($53|0),($51|0))|0);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if (!($55)) {
    $56 = ((($output_buffer)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = HEAP32[$32>>2]|0;
    $59 = (($57) + ($58)|0);
    HEAP8[$59>>0] = 0;
    $60 = (($57) + ($51)|0);
    $61 = ($51|0)>(0);
    if ($61) {
     $curr$01 = $57;
     while(1) {
      $62 = HEAP8[$curr$01>>0]|0;
      $63 = ($62<<24>>24)==(0);
      if ($63) {
       HEAP8[$curr$01>>0] = 10;
      }
      $64 = ((($curr$01)) + 1|0);
      $65 = ($64>>>0)<($60>>>0);
      if ($65) {
       $curr$01 = $64;
      } else {
       break;
      }
     }
    }
    $66 = HEAP32[$inspector>>2]|0;
    $67 = ((($66)) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    invoke_viiii($68|0,($inspector|0),(24288|0),($57|0),0);
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if (!($70)) {
     __ZN14AP4_DataBufferD2Ev($output_buffer);
     $71 = HEAP32[$this>>2]|0;
     $72 = ((($71)) + 52|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (FUNCTION_TABLE_iii[$73 & 1023]($this,$inspector)|0);
     STACKTOP = sp;return ($74|0);
    }
   }
  }
 } while(0);
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 __THREW__ = 0;
 invoke_vi(279,($output_buffer|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $75 = ___cxa_find_matching_catch(0|0)|0;
  $76 = tempRet0;
  ___clang_call_terminate($75);
  // unreachable;
 } else {
  ___resumeException($47|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_OhdrAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $child_item$0 = 0, $child_item$01 = 0;
 var $child_item$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(112)|0);
 $1 = ((($this)) + 60|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($this)) + 61|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ((($this)) + 64|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($this)) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiiiii(893,($0|0),($2|0),($4|0),($8|0),($11|0),($13|0),($15|0),($17|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZdlPv($0);
  ___resumeException($34|0);
  // unreachable;
 }
 $22 = ((($this)) + 48|0);
 $child_item$01 = HEAP32[$22>>2]|0;
 $23 = ($child_item$01|0)==(0|0);
 if ($23) {
  return ($0|0);
 }
 $24 = ((($0)) + 36|0);
 $child_item$02 = $child_item$01;
 while(1) {
  $25 = HEAP32[$child_item$02>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   $31 = HEAP32[$24>>2]|0;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   (FUNCTION_TABLE_iiii[$33 & 1023]($24,$29,-1)|0);
  }
  $36 = ((($child_item$02)) + 4|0);
  $child_item$0 = HEAP32[$36>>2]|0;
  $37 = ($child_item$0|0)==(0|0);
  if ($37) {
   break;
  } else {
   $child_item$02 = $child_item$0;
  }
 }
 return ($0|0);
}
function __ZN12AP4_OhdrAtomD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (23976);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (24064);
 $1 = ((($this)) + 56|0);
 HEAP32[$1>>2] = (24116);
 $2 = ((($this)) + 88|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ((($this)) + 80|0);
   __THREW__ = 0;
   invoke_vi(792,($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    $$0 = $13;$$01 = $12;
    label = 8;
   }
  } else {
   $5 = ((($this)) + 80|0);
   __THREW__ = 0;
   invoke_vi(792,($5|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $17 = ___cxa_find_matching_catch()|0;
    $18 = tempRet0;
    $$0 = $18;$$01 = $17;
    label = 8;
    break;
   }
   $8 = ((($this)) + 72|0);
   __THREW__ = 0;
   invoke_vi(792,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $$1 = $20;$$12 = $19;
    break;
   } else {
    $11 = ((($this)) + 36|0);
    __ZN14AP4_AtomParentD2Ev($11);
    return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $21 = ((($this)) + 72|0);
  __THREW__ = 0;
  invoke_vi(792,($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 $24 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(607,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZNK12AP4_OhdrAtom12GetContentIdEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 72|0);
 return ($0|0);
}
function __ZNK12AP4_OhdrAtom18GetRightsIssuerUrlEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 80|0);
 return ($0|0);
}
function __ZNK12AP4_OhdrAtom17GetTextualHeadersEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 88|0);
 return ($0|0);
}
function __ZThn36_N12AP4_OhdrAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __ZN12AP4_OhdrAtomD2Ev($0);
 return;
}
function __ZThn36_N12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(607,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZThn56_N12AP4_OhdrAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -56|0);
 __ZN12AP4_OhdrAtomD2Ev($0);
 return;
}
function __ZThn56_N12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -56|0);
 __THREW__ = 0;
 invoke_vi(607,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZThn56_NK12AP4_OhdrAtom12GetContentIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -56|0);
 $1 = ((($0)) + 72|0);
 return ($1|0);
}
function __ZThn56_NK12AP4_OhdrAtom18GetRightsIssuerUrlEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -56|0);
 $1 = ((($0)) + 80|0);
 return ($1|0);
}
function __ZThn56_NK12AP4_OhdrAtom17GetTextualHeadersEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -56|0);
 $1 = ((($0)) + 88|0);
 return ($1|0);
}
function __ZN12AP4_IsfmAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$lobit$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $s$i = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s$i = sp + 5|0;
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1767065165,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (24344);
  $8 = ((($4)) + 37|0);
  HEAP8[$8>>0] = 0;
  $9 = ((($4)) + 38|0);
  HEAP8[$9>>0] = 0;
  __THREW__ = 0;
  (invoke_iii(786,($stream|0),($s$i|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = HEAP8[$s$i>>0]|0;
   $13 = ((($4)) + 36|0);
   $$lobit$i = ($12&255) >>> 7;
   HEAP8[$13>>0] = $$lobit$i;
   __THREW__ = 0;
   (invoke_iii(786,($stream|0),($8|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    (invoke_iii(786,($stream|0),($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$0 = $4;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 __ZdlPv($4);
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_IsfmAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(40)|0);
 $1 = ((($this)) + 36|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($this)) + 37|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ((($this)) + 38|0);
 $6 = HEAP8[$5>>0]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($0|0),1767065165,15,0,0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  __ZdlPv($0);
  ___resumeException($12|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (24344);
  $9 = ((($0)) + 36|0);
  HEAP8[$9>>0] = $2;
  $10 = ((($0)) + 37|0);
  HEAP8[$10>>0] = $4;
  $11 = ((($0)) + 38|0);
  HEAP8[$11>>0] = $6;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN12AP4_IsfmAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = $2 ? -128 : 0;
 $4 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 37|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($this)) + 38|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$11)|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN12AP4_IsfmAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24432,$5,0,0);
 $6 = HEAP32[$inspector>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($this)) + 37|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiiii[$8 & 1023]($inspector,24456,$11,0,0);
 $12 = HEAP32[$inspector>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 38|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 FUNCTION_TABLE_viiiii[$14 & 1023]($inspector,24480,$17,0,0);
 return 0;
}
function __ZN12AP4_IsfmAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_Co64Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$arith = 0, $$overflow = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $i$01$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(48)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(749,($4|0),1668232756,($size|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$4>>2] = (24504);
  $8 = ((($4)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(755,($stream|0),($8|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$8>>2]|0;
   $12 = (($size) + -16)|0;
   $13 = $12 >>> 3;
   $14 = ($11>>>0)>($13>>>0);
   if ($14) {
    HEAP32[$8>>2] = $13;
    $15 = $13;
   } else {
    $15 = $11;
   }
   $$arith = $15<<3;
   $$overflow = ($15>>>0)>(536870911);
   $16 = $$overflow ? -1 : $$arith;
   __THREW__ = 0;
   $17 = (invoke_ii(787,($16|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = ((($4)) + 36|0);
    HEAP32[$20>>2] = $17;
    $21 = ($15|0)==(0);
    if ($21) {
     $$0 = $4;
     STACKTOP = sp;return ($$0|0);
    }
    $23 = $17;$i$01$i = 0;
    while(1) {
     $22 = (($23) + ($i$01$i<<3)|0);
     __THREW__ = 0;
     (invoke_iii(840,($stream|0),($22|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      break;
     }
     $26 = (($i$01$i) + 1)|0;
     $27 = HEAP32[$8>>2]|0;
     $28 = ($26>>>0)<($27>>>0);
     if (!($28)) {
      $$0 = $4;
      label = 15;
      break;
     }
     $$pre$i = HEAP32[$20>>2]|0;
     $23 = $$pre$i;$i$01$i = $26;
    }
    if ((label|0) == 15) {
     STACKTOP = sp;return ($$0|0);
    }
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    __ZdlPv($4);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZdlPv($4);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_Co64AtomC2EPyj($this,$entries,$entry_count) {
 $this = $this|0;
 $entries = $entries|0;
 $entry_count = $entry_count|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $entry_count << 3;
 $1 = (($0) + 16)|0;
 __ZN8AP4_AtomC2Ejjhj($this,1668232756,$1,0,0);
 HEAP32[$this>>2] = (24504);
 $2 = ((($this)) + 36|0);
 $$arith = $entry_count<<3;
 $$overflow = ($entry_count>>>0)>(536870911);
 $3 = $$overflow ? -1 : $$arith;
 $4 = (__Znaj($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = ((($this)) + 40|0);
 HEAP32[$5>>2] = $entry_count;
 _memcpy(($4|0),($entries|0),($0|0))|0;
 return;
}
function __ZN12AP4_Co64AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (24504);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __ZdaPv($1);
 return;
}
function __ZN12AP4_Co64AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (24504);
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  __ZdlPv($this);
  return;
 }
 __ZdaPv($1);
 __ZdlPv($this);
 return;
}
function __ZN12AP4_Co64Atom14GetChunkOffsetEjRy($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($chunk) + -1)|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $$0 = -12;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<3)|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $chunk_offset;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_Co64Atom14SetChunkOffsetEjy($this,$chunk,$0,$1) {
 $this = $this|0;
 $chunk = $chunk|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($chunk) + -1)|0;
 $5 = ($4>>>0)<($3>>>0);
 if (!($5)) {
  $$0 = -12;
  return ($$0|0);
 }
 $6 = ((($this)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<3)|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function __ZN12AP4_Co64Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + ($i$01<<3)|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI64Ey($stream,$14,$17)|0);
  $19 = ($18|0)==(0);
  $8 = (($i$01) + 1)|0;
  if (!($19)) {
   $$0 = $18;
   label = 5;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $9 = ($8>>>0)<($7>>>0);
  if ($9) {
   $i$01 = $8;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_Co64Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 8|0;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24592,$4,0,0);
 $5 = ((($inspector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return 0;
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return 0;
 }
 $10 = ((($this)) + 36|0);
 $i$01 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $i$01;
  (_snprintf($header,32,24608,$vararg_buffer)|0);
  $11 = HEAP32[$inspector>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + ($i$01<<3)|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiiii[$13 & 1023]($inspector,$header,$18,$21,0);
  $22 = (($i$01) + 1)|0;
  $23 = HEAP32[$3>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $i$01 = $22;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TimsAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1953066355,$size);
 HEAP32[$this>>2] = (24632);
 $0 = ((($this)) + 36|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($stream,$0)|0);
 return;
}
function __ZN12AP4_TimsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 return ($2|0);
}
function __ZN12AP4_TimsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$inspector>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiiii[$2 & 1023]($inspector,24720,$4,0,0);
 return 0;
}
function __ZN12AP4_TimsAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12AP4_TimsAtom12GetTimeScaleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12AP4_HdlrAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(64)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(894,($4|0),($size|0),0,($5|0),($stream|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_HdlrAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $predefined = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $predefined = sp;
 __ZN8AP4_AtomC2Ejjhj($this,1751411826,$size,$version,$flags);
 HEAP32[$this>>2] = (24744);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $$0 = $19;$$01 = $20;
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($predefined|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ((($this)) + 36|0);
   __THREW__ = 0;
   (invoke_iii(755,($stream|0),($5|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $8 = ((($this)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(755,($stream|0),($8|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = ((($this)) + 44|0);
     __THREW__ = 0;
     (invoke_iii(755,($stream|0),($11|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      $14 = ((($this)) + 48|0);
      __THREW__ = 0;
      (invoke_iii(755,($stream|0),($14|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       $17 = (($size) + -32)|0;
       $18 = ($17|0)==(0);
       if ($18) {
        STACKTOP = sp;return;
       }
       $25 = (($size) + -31)|0;
       $26 = ($25|0)>(-1);
       $27 = $26 ? $25 : -1;
       __THREW__ = 0;
       $28 = (invoke_ii(787,($27|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if (!($30)) {
        __THREW__ = 0;
        (invoke_iiii(788,($stream|0),($28|0),($17|0))|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         $33 = (($28) + ($17)|0);
         HEAP8[$33>>0] = 0;
         $34 = HEAP8[$28>>0]|0;
         $35 = $34 << 24 >> 24;
         $36 = (($size) + -33)|0;
         $37 = ($35|0)==($36|0);
         if ($37) {
          $38 = ((($28)) + 1|0);
          __THREW__ = 0;
          (invoke_iii(791,($0|0),($38|0))|0);
          $39 = __THREW__; __THREW__ = 0;
          $40 = $39&1;
          if ($40) {
           break;
          }
         } else {
          __THREW__ = 0;
          (invoke_iii(791,($0|0),($28|0))|0);
          $41 = __THREW__; __THREW__ = 0;
          $42 = $41&1;
          if ($42) {
           break;
          }
         }
         __ZdaPv($28);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  $$0 = $21;$$01 = $22;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN12AP4_HdlrAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $$neg1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $name_size$0 = 0, $padding$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = ((($this)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($this)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($this)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = ((($this)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $16;
  return ($$0|0);
 }
 $18 = ((($this)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 255;
 $21 = (($20) + 32)|0;
 $22 = ((($this)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($21>>>0)>($23>>>0);
 $25 = (($23) + 8)|0;
 $$ = $24 ? $25 : $19;
 $name_size$0 = $$&255;
 $26 = ($name_size$0<<24>>24)==(0);
 do {
  if ($26) {
   $$pre4 = $$ & 255;
   $$pre$phiZ2D = $$pre4;$33 = $23;
  } else {
   $27 = ((($this)) + 52|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $$ & 255;
   $30 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$28,$29)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $$pre = HEAP32[$22>>2]|0;
    $$pre$phiZ2D = $29;$33 = $$pre;
    break;
   } else {
    $$0 = $30;
    return ($$0|0);
   }
  }
 } while(0);
 $$neg1 = (-32 - ($$pre$phiZ2D))|0;
 $32 = (($$neg1) + ($33))|0;
 $34 = ($32|0)==(0);
 if ($34) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $padding$02 = $32;
 }
 while(1) {
  $35 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $35;
  }
 }
 return ($$0|0);
}
function __ZN12AP4_HdlrAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($type,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,24832,$type,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiii[$7 & 1023]($inspector,24848,$9,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_HdlrAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (24744);
 $0 = ((($this)) + 52|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN12AP4_HdlrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (24744);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN12AP4_IproAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(895,($4|0),($size|0),0,($5|0),($stream|0),($atom_factory|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_IproAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0, $i$02 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 12|0;
 $bytes_available = sp;
 $atom = sp + 8|0;
 __ZN17AP4_ContainerAtomC2Ejybhj($this,1768977007,$size,0,0,$version,$flags);
 HEAP32[$this>>2] = (24872);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (24948);
 __THREW__ = 0;
 (invoke_iii(794,($stream|0),($entry_count|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $lpad$phi$index = $36;$lpad$phi$index2 = $37;
  } else {
   $3 = (($size) + -14)|0;
   $4 = $bytes_available;
   $5 = $4;
   HEAP32[$5>>2] = $3;
   $6 = (($4) + 4)|0;
   $7 = $6;
   HEAP32[$7>>2] = 0;
   $8 = HEAP16[$entry_count>>1]|0;
   $9 = ($8<<16>>16)==(0);
   if ($9) {
    STACKTOP = sp;return;
   }
   $10 = ((($this)) + 52|0);
   $11 = ((($this)) + 48|0);
   $12 = ((($this)) + 44|0);
   $i$02 = 0;
   while(1) {
    __THREW__ = 0;
    $13 = (invoke_iiiii(876,($atom_factory|0),($stream|0),($bytes_available|0),($atom|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 12;
     break;
    }
    $16 = ($13|0)==(0);
    if ($16) {
     $17 = HEAP32[$atom>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($18)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     (invoke_iii($20|0,($17|0),($0|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      label = 12;
      break;
     }
     $23 = HEAP32[$atom>>2]|0;
     __THREW__ = 0;
     $24 = (invoke_ii(752,12)|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 12;
      break;
     }
     HEAP32[$24>>2] = $23;
     $27 = ((($24)) + 4|0);
     HEAP32[$27>>2] = 0;
     $28 = ((($24)) + 8|0);
     HEAP32[$28>>2] = 0;
     $29 = HEAP32[$10>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      HEAP32[$11>>2] = $24;
      HEAP32[$10>>2] = $24;
      HEAP32[$27>>2] = 0;
      $$sink$i$i = 0;
     } else {
      HEAP32[$27>>2] = 0;
      $31 = ((($29)) + 4|0);
      HEAP32[$31>>2] = $24;
      HEAP32[$10>>2] = $24;
      $$sink$i$i = $29;
     }
     HEAP32[$28>>2] = $$sink$i$i;
     $32 = HEAP32[$12>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[$12>>2] = $33;
    }
    $40 = (($i$02) + 1)|0;
    $41 = HEAP16[$entry_count>>1]|0;
    $42 = $41&65535;
    $43 = ($40>>>0)<($42>>>0);
    if ($43) {
     $i$02 = $40;
    } else {
     label = 16;
     break;
    }
   }
   if ((label|0) == 12) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $lpad$phi$index = $34;$lpad$phi$index2 = $35;
    break;
   }
   else if ((label|0) == 16) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $44 = ___cxa_find_matching_catch(0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
}
function __ZN12AP4_IproAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $item$0$i = 0, $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2&65535;
 $4 = (__ZN14AP4_ByteStream9WriteUI16Et($stream,$3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = (11232);
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $stream;
 $7 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$7>>2]|0;
 $8 = ($item$01$i|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[(11240)>>2]|0;
 $10 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$9 & 1023]($0,$10)|0);
 $11 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$11>>2]|0;
 $12 = ($item$0$i1|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $13 = ((($$pre)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$14 & 1023]($0,$15)|0);
  $16 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$16>>2]|0;
  $17 = ($item$0$i|0)==(0|0);
  if ($17) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_IproAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$0$i1 = 0;
 var $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$inspector>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiiii[$3 & 1023]($inspector,25024,$5,0,0);
 HEAP32[$0>>2] = (2392);
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $inspector;
 $7 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$7>>2]|0;
 $8 = ($item$01$i|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return 0;
 }
 $9 = HEAP32[$item$01$i>>2]|0;
 (__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($0,$9)|0);
 $10 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$10>>2]|0;
 $11 = ($item$0$i1|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return 0;
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $12 = ((($$pre)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$13 & 1023]($0,$14)|0);
  $15 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$15>>2]|0;
  $16 = ($item$0$i|0)==(0|0);
  if ($16) {
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_IproAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_IproAtomD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_AtomParentD2Ev($this);
 return;
}
function __ZThn36_N12AP4_IproAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(314,($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN12AP4_DrefAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(56)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(896,($4|0),($size|0),0,($5|0),($stream|0),($atom_factory|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZdlPv($4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN12AP4_DrefAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $$sink$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 12|0;
 $bytes_available = sp;
 $atom = sp + 8|0;
 __ZN17AP4_ContainerAtomC2Ejybhj($this,1685218662,$size,0,0,$version,$flags);
 HEAP32[$this>>2] = (25048);
 $0 = ((($this)) + 36|0);
 HEAP32[$0>>2] = (25124);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($entry_count|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $lpad$phi$index = $34;$lpad$phi$index2 = $35;
  } else {
   $3 = (($size) + -16)|0;
   $4 = $bytes_available;
   $5 = $4;
   HEAP32[$5>>2] = $3;
   $6 = (($4) + 4)|0;
   $7 = $6;
   HEAP32[$7>>2] = 0;
   $8 = HEAP32[$entry_count>>2]|0;
   $9 = (($8) + -1)|0;
   HEAP32[$entry_count>>2] = $9;
   $10 = ($8|0)==(0);
   if ($10) {
    STACKTOP = sp;return;
   }
   $11 = ((($this)) + 52|0);
   $12 = ((($this)) + 48|0);
   $13 = ((($this)) + 44|0);
   while(1) {
    __THREW__ = 0;
    $17 = (invoke_iiiii(876,($atom_factory|0),($stream|0),($bytes_available|0),($atom|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 12;
     break;
    }
    $20 = ($17|0)==(0);
    if (!($20)) {
     $14 = HEAP32[$entry_count>>2]|0;
     $15 = (($14) + -1)|0;
     HEAP32[$entry_count>>2] = $15;
     $16 = ($14|0)==(0);
     if ($16) {
      label = 15;
      break;
     } else {
      continue;
     }
    }
    $21 = HEAP32[$atom>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_ii(752,12)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 12;
     break;
    }
    HEAP32[$22>>2] = $21;
    $25 = ((($22)) + 4|0);
    HEAP32[$25>>2] = 0;
    $26 = ((($22)) + 8|0);
    HEAP32[$26>>2] = 0;
    $27 = HEAP32[$11>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     HEAP32[$12>>2] = $22;
     HEAP32[$11>>2] = $22;
     HEAP32[$25>>2] = 0;
     $$sink$i$i = 0;
    } else {
     HEAP32[$25>>2] = 0;
     $29 = ((($27)) + 4|0);
     HEAP32[$29>>2] = $22;
     HEAP32[$11>>2] = $22;
     $$sink$i$i = $27;
    }
    HEAP32[$26>>2] = $$sink$i$i;
    $30 = HEAP32[$13>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$13>>2] = $31;
   }
   if ((label|0) == 12) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $lpad$phi$index = $32;$lpad$phi$index2 = $33;
    break;
   }
   else if ((label|0) == 15) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $36 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($36|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
}
function __ZN12AP4_DrefAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0$i = 0;
 var $item$0$i1 = 0, $item$0$i2 = 0, $item$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = (11232);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $stream;
 $6 = ((($this)) + 48|0);
 $item$01$i = HEAP32[$6>>2]|0;
 $7 = ($item$01$i|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[(11240)>>2]|0;
 $9 = HEAP32[$item$01$i>>2]|0;
 (FUNCTION_TABLE_iii[$8 & 1023]($0,$9)|0);
 $10 = ((($item$01$i)) + 4|0);
 $item$0$i1 = HEAP32[$10>>2]|0;
 $11 = ($item$0$i1|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $item$0$i2 = $item$0$i1;
 }
 while(1) {
  $$pre = HEAP32[$0>>2]|0;
  $12 = ((($$pre)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$item$0$i2>>2]|0;
  (FUNCTION_TABLE_iii[$13 & 1023]($0,$14)|0);
  $15 = ((($item$0$i2)) + 4|0);
  $item$0$i = HEAP32[$15>>2]|0;
  $16 = ($item$0$i|0)==(0|0);
  if ($16) {
   $$0 = 0;
   break;
  } else {
   $item$0$i2 = $item$0$i;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN12AP4_DrefAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn36_N12AP4_DrefAtomD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_AtomParentD2Ev($this);
 return;
}
function __ZThn36_N12AP4_DrefAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -36|0);
 __THREW__ = 0;
 invoke_vi(314,($this|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN27AP4_PiffTrackEncryptionAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(80)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(897,($4|0),($size|0),0,(25200|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 $8 = ((($4)) + 52|0);
 __THREW__ = 0;
 invoke_vii(847,($8|0),($stream|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (25240);
 HEAP32[$8>>2] = (25300);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN27AP4_PiffTrackEncryptionAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = (__ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($0,$inspector)|0);
 return ($1|0);
}
function __ZN27AP4_PiffTrackEncryptionAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = (__ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($0,$stream)|0);
 return ($1|0);
}
function __ZN28AP4_PiffSampleEncryptionAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $or$cond = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 4|0;
 $flags = sp;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $0 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP8[$version>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (__Znwj(112)|0);
 $5 = HEAP32[$flags>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(897,($4|0),($size|0),0,(25216|0),0,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (25320);
 $8 = ((($4)) + 52|0);
 HEAP32[$8>>2] = (25380);
 __THREW__ = 0;
 invoke_viiii(827,($8|0),($4|0),($size|0),($stream|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($4);
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[$4>>2] = (25320);
 HEAP32[$8>>2] = (25380);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function __ZN28AP4_PiffSampleEncryptionAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = (__ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($0,$inspector)|0);
 return ($1|0);
}
function __ZN28AP4_PiffSampleEncryptionAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 $1 = (__ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($0,$stream)|0);
 return ($1|0);
}
function __ZN27AP4_PiffTrackEncryptionAtomD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN27AP4_PiffTrackEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZThn52_N27AP4_PiffTrackEncryptionAtomD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZThn52_N27AP4_PiffTrackEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -52|0);
 __ZdlPv($0);
 return;
}
function __ZN28AP4_PiffSampleEncryptionAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 HEAP32[$0>>2] = (8336);
 $1 = ((($this)) + 88|0);
 __ZN14AP4_DataBufferD2Ev($1);
 return;
}
function __ZN28AP4_PiffSampleEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 52|0);
 HEAP32[$0>>2] = (8336);
 $1 = ((($this)) + 88|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($this);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn52_N28AP4_PiffSampleEncryptionAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -52|0);
 $1 = ((($0)) + 52|0);
 HEAP32[$1>>2] = (8336);
 $2 = ((($0)) + 88|0);
 __ZN14AP4_DataBufferD2Ev($2);
 return;
}
function __ZThn52_N28AP4_PiffSampleEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -52|0);
 $1 = ((($0)) + 52|0);
 HEAP32[$1>>2] = (8336);
 $2 = ((($0)) + 88|0);
 __THREW__ = 0;
 invoke_vi(279,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZdlPv($0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN11AP4_RtpAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8AP4_AtomC2Ejj($this,1920233504,$size);
 HEAP32[$this>>2] = (25528);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(790,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $$0 = $19;$$01 = $20;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = ((($this)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(755,($stream|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($size) + -12)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   return;
  }
  $8 = (($size) + -11)|0;
  $9 = ($8|0)>(-1);
  $10 = $9 ? $8 : -1;
  __THREW__ = 0;
  $11 = (invoke_ii(787,($10|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   (invoke_iiii(788,($stream|0),($11|0),($6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = (($11) + ($6)|0);
    HEAP8[$16>>0] = 0;
    __THREW__ = 0;
    (invoke_iii(791,($0|0),($11|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     __ZdaPv($11);
     return;
    }
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  $$0 = $21;$$01 = $22;
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZN11AP4_RtpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN14AP4_ByteStream9WriteUI32Ej($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($this)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($stream,$5,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($this)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$6>>2]|0;
 $$neg1 = (($11) + -12)|0;
 $13 = ($$neg1|0)==($12|0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = (($$neg1) - ($12))|0;
 $padding$02 = $14;
 while(1) {
  $15 = (($padding$02) + -1)|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($stream,0)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = 0;
   break;
  } else {
   $padding$02 = $15;
  }
 }
 return ($$0|0);
}
function __ZN11AP4_RtpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $format_string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $format_string = sp;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 __Z19AP4_FormatFourCharsPcj($format_string,$1);
 $2 = HEAP32[$inspector>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$4 & 1023]($inspector,25616,$format_string,0);
 $5 = HEAP32[$inspector>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiii[$7 & 1023]($inspector,25640,$9,0);
 STACKTOP = sp;return 0;
}
function __ZN11AP4_RtpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25528);
 $0 = ((($this)) + 40|0);
 __ZN10AP4_StringD2Ev($0);
 return;
}
function __ZN11AP4_RtpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25528);
 $0 = ((($this)) + 40|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN19AP4_AtomSampleTableC2EP17AP4_ContainerAtomR14AP4_ByteStream($this,$stbl,$sample_stream) {
 $this = $this|0;
 $stbl = $stbl|0;
 $sample_stream = $sample_stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25664);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $sample_stream;
 $1 = ((($stbl)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,1937011555,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $9 = 0;
 } else {
  $7 = (___dynamic_cast($5,11216,20320,0)|0);
  $9 = $7;
 }
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$12 & 1023]($1,1937007471,0)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $17 = 0;
 } else {
  $15 = (___dynamic_cast($13,11216,13000,0)|0);
  $17 = $15;
 }
 $16 = ((($this)) + 12|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($1,1937011578,0)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  $25 = 0;
 } else {
  $23 = (___dynamic_cast($21,11216,8008,0)|0);
  $25 = $23;
 }
 $24 = ((($this)) + 16|0);
 HEAP32[$24>>2] = $25;
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_iiii[$28 & 1023]($1,1937013298,0)|0);
 $30 = ($29|0)==(0|0);
 if ($30) {
  $33 = 0;
 } else {
  $31 = (___dynamic_cast($29,11216,18272,0)|0);
  $33 = $31;
 }
 $32 = ((($this)) + 20|0);
 HEAP32[$32>>2] = $33;
 $34 = HEAP32[$1>>2]|0;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (FUNCTION_TABLE_iiii[$36 & 1023]($1,1668576371,0)|0);
 $38 = ($37|0)==(0|0);
 if ($38) {
  $41 = 0;
 } else {
  $39 = (___dynamic_cast($37,11216,6112,0)|0);
  $41 = $39;
 }
 $40 = ((($this)) + 28|0);
 HEAP32[$40>>2] = $41;
 $42 = HEAP32[$1>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($1,1937011827,0)|0);
 $46 = ($45|0)==(0|0);
 if ($46) {
  $49 = 0;
 } else {
  $47 = (___dynamic_cast($45,11216,14008,0)|0);
  $49 = $47;
 }
 $48 = ((($this)) + 24|0);
 HEAP32[$48>>2] = $49;
 $50 = HEAP32[$1>>2]|0;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($1,1937011571,0)|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  $57 = 0;
 } else {
  $55 = (___dynamic_cast($53,11216,8424,0)|0);
  $57 = $55;
 }
 $56 = ((($this)) + 36|0);
 HEAP32[$56>>2] = $57;
 $58 = HEAP32[$1>>2]|0;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (FUNCTION_TABLE_iiii[$60 & 1023]($1,1937011556,0)|0);
 $62 = ($61|0)==(0|0);
 if ($62) {
  $65 = 0;
 } else {
  $63 = (___dynamic_cast($61,11216,19672,0)|0);
  $65 = $63;
 }
 $64 = ((($this)) + 32|0);
 HEAP32[$64>>2] = $65;
 $66 = HEAP32[$1>>2]|0;
 $67 = ((($66)) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (FUNCTION_TABLE_iiii[$68 & 1023]($1,1668232756,0)|0);
 $70 = ($69|0)==(0|0);
 if ($70) {
  $73 = 0;
  $72 = ((($this)) + 40|0);
  HEAP32[$72>>2] = $73;
  $74 = HEAP32[$0>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vi[$77 & 1023]($74);
  return;
 }
 $71 = (___dynamic_cast($69,11216,24576,0)|0);
 $73 = $71;
 $72 = ((($this)) + 40|0);
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$0>>2]|0;
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 FUNCTION_TABLE_vi[$77 & 1023]($74);
 return;
}
function __ZN19AP4_AtomSampleTableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25664);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($1);
 return;
}
function __ZN19AP4_AtomSampleTableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25664);
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi($4|0,($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  __ZdlPv($this);
  ___resumeException($7|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN19AP4_AtomSampleTable9GetSampleEjR10AP4_Sample($this,$index,$sample) {
 $this = $this|0;
 $index = $index|0;
 $sample = $sample|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk = 0;
 var $cts_offset = 0, $desc = 0, $dts = 0, $duration = 0, $i$02 = 0, $offset = 0, $offset_32 = 0, $result$0 = 0, $result$1 = 0, $result$2 = 0, $sample_size = 0, $size = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk = sp + 44|0;
 $skip = sp + 40|0;
 $desc = sp + 36|0;
 $offset = sp + 8|0;
 $offset_32 = sp + 32|0;
 $size = sp + 28|0;
 $cts_offset = sp + 24|0;
 $dts = sp;
 $duration = sp + 20|0;
 $sample_size = sp + 16|0;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($this)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = -10;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $6 = (($index) + 1)|0;
 $7 = ((($this)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiiii[$11 & 1023]($8,$6,$chunk,$skip,$desc)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$skip>>2]|0;
 $15 = ($14>>>0)>($6>>>0);
 if ($15) {
  $$0 = -13;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $25 = ((($this)) + 40|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$chunk>>2]|0;
  $28 = (__ZN12AP4_Co64Atom14GetChunkOffsetEjRy($26,$27,$offset)|0);
  $result$0 = $28;
 } else {
  $18 = HEAP32[$chunk>>2]|0;
  $19 = (__ZN12AP4_StcoAtom14GetChunkOffsetEjRj($16,$18,$offset_32)|0);
  $20 = HEAP32[$offset_32>>2]|0;
  $21 = $offset;
  $22 = $21;
  HEAP32[$22>>2] = $20;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $result$0 = $19;
 }
 $29 = ($result$0|0)==(0);
 if (!($29)) {
  $$0 = $result$0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP32[$skip>>2]|0;
 $31 = (($6) - ($30))|0;
 $32 = ($31>>>0)<($6>>>0);
 L18: do {
  if ($32) {
   $33 = ((($this)) + 16|0);
   $34 = ((($this)) + 20|0);
   $i$02 = $31;
   while(1) {
    HEAP32[$size>>2] = 0;
    $35 = HEAP32[$33>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     $41 = HEAP32[$34>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      $$0 = -10;
      label = 30;
      break;
     }
     $43 = HEAP32[$41>>2]|0;
     $44 = ((($43)) + 56|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (FUNCTION_TABLE_iiii[$45 & 1023]($41,$i$02,$size)|0);
     $result$1 = $46;
    } else {
     $37 = HEAP32[$35>>2]|0;
     $38 = ((($37)) + 56|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($35,$i$02,$size)|0);
     $result$1 = $40;
    }
    $47 = ($result$1|0)==(0);
    if (!($47)) {
     $$0 = $result$1;
     label = 30;
     break;
    }
    $48 = HEAP32[$size>>2]|0;
    $49 = $offset;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (_i64Add(($51|0),($54|0),($48|0),0)|0);
    $56 = tempRet0;
    $57 = $offset;
    $58 = $57;
    HEAP32[$58>>2] = $55;
    $59 = (($57) + 4)|0;
    $60 = $59;
    HEAP32[$60>>2] = $56;
    $61 = (($i$02) + 1)|0;
    $62 = ($61>>>0)<($6>>>0);
    if ($62) {
     $i$02 = $61;
    } else {
     break L18;
    }
   }
   if ((label|0) == 30) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = HEAP32[$desc>>2]|0;
 $64 = (($63) + -1)|0;
 $65 = ((($sample)) + 24|0);
 HEAP32[$65>>2] = $64;
 HEAP32[$cts_offset>>2] = 0;
 $66 = $dts;
 $67 = $66;
 HEAP32[$67>>2] = 0;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = 0;
 HEAP32[$duration>>2] = 0;
 $70 = ((($this)) + 24|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 52|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (FUNCTION_TABLE_iiiii[$74 & 1023]($71,$6,$dts,$duration)|0);
 $76 = ($75|0)==(0);
 if (!($76)) {
  $$0 = $75;
  STACKTOP = sp;return ($$0|0);
 }
 $77 = HEAP32[$duration>>2]|0;
 $78 = ((($sample)) + 20|0);
 HEAP32[$78>>2] = $77;
 $79 = $dts;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($sample)) + 32|0);
 $86 = $85;
 $87 = $86;
 HEAP32[$87>>2] = $81;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $84;
 $90 = ((($this)) + 28|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0|0);
 do {
  if ($92) {
   $93 = ((($sample)) + 40|0);
   HEAP32[$93>>2] = 0;
  } else {
   $94 = (__ZN12AP4_CttsAtom12GetCtsOffsetEjRj($91,$6,$cts_offset)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $96 = HEAP32[$cts_offset>>2]|0;
    $97 = ((($sample)) + 40|0);
    HEAP32[$97>>2] = $96;
    break;
   } else {
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$sample_size>>2] = 0;
 $98 = ((($this)) + 16|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0|0);
 do {
  if ($100) {
   $105 = ((($this)) + 20|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0|0);
   if ($107) {
    $$0 = -10;
    STACKTOP = sp;return ($$0|0);
   } else {
    $108 = HEAP32[$106>>2]|0;
    $109 = ((($108)) + 56|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (FUNCTION_TABLE_iiii[$110 & 1023]($106,$6,$sample_size)|0);
    $result$2 = $111;
    break;
   }
  } else {
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($101)) + 56|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($99,$6,$sample_size)|0);
   $result$2 = $104;
  }
 } while(0);
 $112 = ($result$2|0)==(0);
 if (!($112)) {
  $$0 = $result$2;
  STACKTOP = sp;return ($$0|0);
 }
 $113 = HEAP32[$sample_size>>2]|0;
 $114 = ((($sample)) + 16|0);
 HEAP32[$114>>2] = $113;
 $115 = ((($this)) + 36|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 if ($117) {
  $$sink = 1;
 } else {
  $118 = HEAP32[$116>>2]|0;
  $119 = ((($118)) + 52|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (FUNCTION_TABLE_iii[$120 & 1023]($116,$6)|0);
  $122 = $121&1;
  $$sink = $122;
 }
 $123 = ((($sample)) + 44|0);
 HEAP8[$123>>0] = $$sink;
 $124 = $offset;
 $125 = $124;
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + 4)|0;
 $128 = $127;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($sample)) + 8|0);
 $131 = $130;
 $132 = $131;
 HEAP32[$132>>2] = $126;
 $133 = (($131) + 4)|0;
 $134 = $133;
 HEAP32[$134>>2] = $129;
 $135 = ((($this)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 __ZN10AP4_Sample13SetDataStreamER14AP4_ByteStream($sample,$136);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN19AP4_AtomSampleTable14GetSampleCountEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 52|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$5 & 1023]($1)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ((($this)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$8>>2]|0;
 $11 = ((($10)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 1023]($8)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZN19AP4_AtomSampleTable20GetSampleDescriptionEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $7 = 0;
  return ($7|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 1023]($1,$index)|0);
 $7 = $6;
 return ($7|0);
}
function __ZN19AP4_AtomSampleTable25GetSampleDescriptionCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $7 = 0;
  return ($7|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($1)|0);
 $7 = $6;
 return ($7|0);
}
function __ZN19AP4_AtomSampleTable22GetSampleChunkPositionEjRjS0_($this,$sample_index,$chunk_index,$position_in_chunk) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $chunk_index = $chunk_index|0;
 $position_in_chunk = $position_in_chunk|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sample_description_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample_description_index = sp;
 HEAP32[$chunk_index>>2] = 0;
 HEAP32[$position_in_chunk>>2] = 0;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiiii[$2 & 1023]($this,$sample_index,$chunk_index,$position_in_chunk,$sample_description_index)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN19AP4_AtomSampleTable17GetChunkForSampleEjRjS0_S0_($this,$sample_index,$chunk_index,$position_in_chunk,$sample_description_index) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $chunk_index = $chunk_index|0;
 $position_in_chunk = $position_in_chunk|0;
 $sample_description_index = $sample_description_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk = sp;
 HEAP32[$chunk_index>>2] = 0;
 HEAP32[$position_in_chunk>>2] = 0;
 HEAP32[$sample_description_index>>2] = 0;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -14;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$chunk>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($sample_index) + 1)|0;
 $7 = (FUNCTION_TABLE_iiiiii[$5 & 1023]($1,$6,$chunk,$position_in_chunk,$sample_description_index)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$chunk>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = -13;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($9) + -1)|0;
 HEAP32[$chunk_index>>2] = $11;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN19AP4_AtomSampleTable14GetChunkOffsetEjRy($this,$chunk_index,$offset) {
 $this = $this|0;
 $chunk_index = $chunk_index|0;
 $offset = $offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $offset_32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset_32 = sp;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($chunk_index) + 1)|0;
  $4 = (__ZN12AP4_StcoAtom14GetChunkOffsetEjRj($1,$3,$offset_32)|0);
  $5 = ($4|0)==(0);
  $6 = HEAP32[$offset_32>>2]|0;
  $7 = $5 ? $6 : 0;
  $8 = $5 ? 0 : 0;
  $9 = $offset;
  $10 = $9;
  HEAP32[$10>>2] = $7;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($this)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $18 = $offset;
  $19 = $18;
  HEAP32[$19>>2] = 0;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $16 = (($chunk_index) + 1)|0;
  $17 = (__ZN12AP4_Co64Atom14GetChunkOffsetEjRy($14,$16,$offset)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable14SetChunkOffsetEjy($this,$chunk_index,$0,$1) {
 $this = $this|0;
 $chunk_index = $chunk_index|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $12 = ((($this)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = -1;
   return ($$0|0);
  }
  $15 = (($chunk_index) + 1)|0;
  $16 = (__ZN12AP4_Co64Atom14SetChunkOffsetEjy($13,$15,$0,$1)|0);
  $$0 = $16;
  return ($$0|0);
 } else {
  $5 = ($1>>>0)>(0);
  $6 = ($0>>>0)>(4294967295);
  $7 = ($1|0)==(0);
  $8 = $7 & $6;
  $9 = $5 | $8;
  if ($9) {
   $$0 = -12;
   return ($$0|0);
  }
  $10 = (($chunk_index) + 1)|0;
  $11 = (__ZN12AP4_StcoAtom14SetChunkOffsetEjj($3,$10,$0)|0);
  $$0 = $11;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable13SetSampleSizeEjj($this,$sample_index,$size) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($sample_index) + 1)|0;
  $7 = (FUNCTION_TABLE_iiii[$5 & 1023]($1,$6,$size)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($sample_index) + 1)|0;
 $15 = (FUNCTION_TABLE_iiii[$13 & 1023]($9,$14,$size)|0);
 $$0 = $15;
 return ($$0|0);
}
function __ZN19AP4_AtomSampleTable26GetSampleIndexForTimeStampEyRj($this,$0,$1,$sample_index) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $sample_index = $sample_index|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($this)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $9 = -1;
  return ($9|0);
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$7 & 1023]($3,$0,$1,$sample_index)|0);
 $9 = $8;
 return ($9|0);
}
function __ZN19AP4_AtomSampleTable25GetNearestSyncSampleIndexEjb($this,$sample_index,$before) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $before = $before|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor$0$ = 0, $cursor$02 = 0, $i$03 = 0, $i1$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = $sample_index;
  return ($$0|0);
 }
 $3 = (($sample_index) + 1)|0;
 $4 = ((($1)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($before) {
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($1)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $cursor$02 = 0;$i$03 = 0;
  while(1) {
   $11 = (($10) + ($i$03<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12>>>0)<($3>>>0);
   if (!($13)) {
    $$0 = $cursor$02;
    label = 13;
    break;
   }
   $14 = ($12|0)==(0);
   $15 = (($12) + -1)|0;
   $cursor$0$ = $14 ? $cursor$02 : $15;
   $16 = (($i$03) + 1)|0;
   $17 = ($16>>>0)<($5>>>0);
   if ($17) {
    $cursor$02 = $cursor$0$;$i$03 = $16;
   } else {
    $$0 = $cursor$0$;
    label = 13;
    break;
   }
  }
  if ((label|0) == 13) {
   return ($$0|0);
  }
 }
 L16: do {
  if (!($6)) {
   $7 = ((($1)) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   $i1$06 = 0;
   while(1) {
    $20 = (($8) + ($i1$06<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21>>>0)<($3>>>0);
    $18 = (($i1$06) + 1)|0;
    if (!($22)) {
     $$lcssa = $21;
     break;
    }
    $19 = ($18>>>0)<($5>>>0);
    if ($19) {
     $i1$06 = $18;
    } else {
     break L16;
    }
   }
   $23 = ($$lcssa|0)==(0);
   $$ = $23 ? $3 : $$lcssa;
   $24 = (($$) + -1)|0;
   $$0 = $24;
   return ($$0|0);
  }
 } while(0);
 $25 = HEAP32[$this>>2]|0;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_ii[$27 & 1023]($this)|0);
 $$0 = $28;
 return ($$0|0);
}
function __ZN22AP4_SLConfigDescriptorC2Ej($this,$header_size) {
 $this = $this|0;
 $header_size = $header_size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,6,0,$header_size,1);
 HEAP32[$this>>2] = (25768);
 $0 = ((($this)) + 20|0);
 HEAP8[$0>>0] = 2;
 return;
}
function __ZN22AP4_SLConfigDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($stream,$1)|0);
 return 0;
}
function __ZN22AP4_SLConfigDescriptorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($this,$type,$format,$details) {
 $this = $this|0;
 $type = $type|0;
 $format = $format|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01 = 0, $item$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $type;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ($details|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($details)) + 12|0);
 $item$01 = HEAP32[$8>>2]|0;
 $9 = ($item$01|0)==(0|0);
 if ($9) {
  return;
 } else {
  $item$02 = $item$01;
 }
 while(1) {
  $10 = HEAP32[$item$02>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$10>>2]|0;
   $13 = ((($12)) + 48|0);
   $14 = HEAP32[$13>>2]|0;
   __THREW__ = 0;
   $15 = (invoke_ii($14|0,($10|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    break;
   }
   $18 = ($15|0)==(0|0);
   if (!($18)) {
    __THREW__ = 0;
    (invoke_iiii(22,($2|0),($15|0),-1)|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
   }
  }
  $25 = ((($item$02)) + 4|0);
  $item$0 = HEAP32[$25>>2]|0;
  $26 = ($item$0|0)==(0|0);
  if ($26) {
   label = 9;
   break;
  } else {
   $item$02 = $item$0;
  }
 }
 if ((label|0) == 9) {
  return;
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  ___resumeException($21|0);
  // unreachable;
 }
}
function __ZN21AP4_SampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $$0 = 0, $$off0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $atom_clone = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom_clone = sp;
 $0 = ($result|0)!=(0|0);
 if ($0) {
  HEAP32[$result>>2] = 0;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($this)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  if (!($0)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$result>>2] = -1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (__Znwj(32)|0);
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  $10 = ((($4)) + 16|0);
  $11 = $10;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $$off0 = $13;
 } else {
  $$off0 = $8;
 }
 __THREW__ = 0;
 invoke_vii(841,($6|0),($$off0|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $62 = ___cxa_find_matching_catch()|0;
  $63 = tempRet0;
  __ZdlPv($6);
  ___resumeException($62|0);
  // unreachable;
 }
 $19 = HEAP32[$4>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 (FUNCTION_TABLE_iii[$21 & 1023]($4,$6)|0);
 $22 = HEAP32[$4>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_vi[$24 & 1023]($4);
 $25 = HEAP32[$6>>2]|0;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 (FUNCTION_TABLE_iiii[$27 & 1023]($6,0,0)|0);
 $28 = (__Znwj(36)|0);
 HEAP32[$28>>2] = (3208);
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = (2152);
 $30 = ((($28)) + 8|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($28)) + 12|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($28)) + 16|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($28)) + 20|0);
 HEAP32[$33>>2] = (3304);
 $34 = ((($28)) + 24|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($28)) + 28|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($28)) + 32|0);
 HEAP32[$36>>2] = 0;
 __ZN15AP4_AtomFactory11PushContextEj($28,1937011556);
 HEAP32[$atom_clone>>2] = 0;
 $37 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom($28,$6,$atom_clone)|0);
 __ZN15AP4_AtomFactory10PopContextEv($28);
 $38 = HEAP32[$28>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 FUNCTION_TABLE_vi[$40 & 1023]($28);
 if ($0) {
  HEAP32[$result>>2] = $37;
 }
 $41 = HEAP32[$6>>2]|0;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_vi[$43 & 1023]($6);
 $44 = ($37|0)==(0);
 if (!($44)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$atom_clone>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  $47 = (___dynamic_cast($45,11216,22840,0)|0);
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   $52 = HEAP32[$47>>2]|0;
   $53 = ((($52)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($47)|0);
   $56 = ($55|0)==(0|0);
   $or$cond = $0 & $56;
   if ($or$cond) {
    HEAP32[$result>>2] = -13;
   }
   $57 = HEAP32[$atom_clone>>2]|0;
   $58 = ($57|0)==(0|0);
   if ($58) {
    $$0 = $55;
    STACKTOP = sp;return ($$0|0);
   }
   $59 = HEAP32[$57>>2]|0;
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   FUNCTION_TABLE_vi[$61 & 1023]($57);
   $$0 = $55;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if ($0) {
  HEAP32[$result>>2] = -13;
 }
 if ($46) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP32[$45>>2]|0;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 1023]($45);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK21AP4_SampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(64)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vii(898,($0|0),($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZdlPv($0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN28AP4_UnknownSampleDescriptionC2EP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atom)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 8|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($this)) + 12|0);
 HEAP32[$4>>2] = (11152);
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = (2376);
 $6 = ((($this)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 24|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($this)) + 28|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$this>>2] = (25872);
 $9 = HEAP32[$atom>>2]|0;
 $10 = ((($9)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 $12 = (invoke_ii($11|0,($atom|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = ((($this)) + 32|0);
  HEAP32[$15>>2] = $12;
  return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN28AP4_UnknownSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25872);
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$this>>2] = (25848);
  $8 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($8);
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($5|0,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  HEAP32[$this>>2] = (25848);
  $8 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($8);
  return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $11 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  ___resumeException($9|0);
  // unreachable;
 }
}
function __ZN28AP4_UnknownSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25872);
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vi($5|0,($1|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   HEAP32[$this>>2] = (25848);
   $13 = ((($this)) + 12|0);
   __THREW__ = 0;
   invoke_vi(314,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   } else {
    $eh$lpad$body$index2Z2D = $12;$eh$lpad$body$indexZ2D = $11;
    __ZdlPv($this);
    ___resumeException($eh$lpad$body$indexZ2D|0);
    // unreachable;
   }
  }
 }
 HEAP32[$this>>2] = (25848);
 $8 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __ZdlPv($this);
  return;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $eh$lpad$body$index2Z2D = $19;$eh$lpad$body$indexZ2D = $18;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN28AP4_UnknownSampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom_clone$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $atom_clone$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$5 & 1023]($1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = ($result|0)==(0|0);
   if ($8) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$result>>2] = -1;
   $$0 = 0;
   return ($$0|0);
  } else {
   $atom_clone$0 = $6;
  }
 }
 $9 = ($result|0)==(0|0);
 if (!($9)) {
  HEAP32[$result>>2] = 0;
 }
 $10 = (__Znwj(36)|0);
 $11 = ((($atom_clone$0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($10)) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = ((($10)) + 12|0);
 HEAP32[$15>>2] = (11152);
 $16 = ((($10)) + 16|0);
 HEAP32[$16>>2] = (2376);
 $17 = ((($10)) + 20|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($10)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($10)) + 28|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$10>>2] = (25872);
 $20 = HEAP32[$atom_clone$0>>2]|0;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 $23 = (invoke_ii($22|0,($atom_clone$0|0))|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $32 = ((($10)) + 32|0);
  HEAP32[$32>>2] = $23;
  $$0 = $10;
  return ($$0|0);
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 HEAP32[$10>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($15|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  __ZdlPv($10);
  ___resumeException($26|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNK28AP4_UnknownSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($1)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZNK33AP4_GenericAudioSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01 = 0, $item$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(160)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 40|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 42|0);
 $8 = HEAP16[$7>>1]|0;
 __THREW__ = 0;
 invoke_viiiii(899,($0|0),($2|0),($4|0),($6|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  __ZdlPv($0);
  ___resumeException($24|0);
  // unreachable;
 }
 $11 = ((($this)) + 24|0);
 $item$01 = HEAP32[$11>>2]|0;
 $12 = ($item$01|0)==(0|0);
 if ($12) {
  return ($0|0);
 }
 $13 = ((($0)) + 36|0);
 $item$02 = $item$01;
 while(1) {
  $14 = HEAP32[$item$02>>2]|0;
  $15 = HEAP32[$13>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$14>>2]|0;
  $19 = ((($18)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_ii[$20 & 1023]($14)|0);
  (FUNCTION_TABLE_iiii[$17 & 1023]($13,$21,-1)|0);
  $22 = ((($item$02)) + 4|0);
  $item$0 = HEAP32[$22>>2]|0;
  $23 = ($item$0|0)==(0|0);
  if ($23) {
   break;
  } else {
   $item$02 = $item$0;
  }
 }
 return ($0|0);
}
function __ZNK33AP4_GenericVideoSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$0 = 0, $item$01 = 0, $item$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(112)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 38|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 40|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viiiiii(900,($0|0),($2|0),($4|0),($6|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  __ZdlPv($0);
  ___resumeException($26|0);
  // unreachable;
 }
 $13 = ((($this)) + 24|0);
 $item$01 = HEAP32[$13>>2]|0;
 $14 = ($item$01|0)==(0|0);
 if ($14) {
  return ($0|0);
 }
 $15 = ((($0)) + 36|0);
 $item$02 = $item$01;
 while(1) {
  $16 = HEAP32[$item$02>>2]|0;
  $17 = HEAP32[$15>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$16>>2]|0;
  $21 = ((($20)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_ii[$22 & 1023]($16)|0);
  (FUNCTION_TABLE_iiii[$19 & 1023]($15,$23,-1)|0);
  $24 = ((($item$02)) + 4|0);
  $item$0 = HEAP32[$24>>2]|0;
  $25 = ($item$0|0)==(0|0);
  if ($25) {
   break;
  } else {
   $item$02 = $item$0;
  }
 }
 return ($0|0);
}
function __ZN24AP4_AvcSampleDescriptionC2EjtttPKcPK12AP4_AvccAtom($this,$format,$width,$height,$depth,$compressor_name,$avcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $avcc = $avcc|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 3;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 32|0);
 HEAP32[$7>>2] = (7184);
 $8 = ((($this)) + 36|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 38|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 40|0);
 HEAP16[$10>>1] = $depth;
 $11 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vii(812,($11|0),($compressor_name|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $$1 = $22;$$12 = $21;
 } else {
  HEAP32[$this>>2] = (25896);
  HEAP32[$7>>2] = (25920);
  $14 = ($avcc|0)==(0|0);
  __THREW__ = 0;
  $15 = (invoke_ii(752,96)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if ($14) {
    if ($17) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vi(901,($15|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $30 = ___cxa_find_matching_catch()|0;
      $31 = tempRet0;
      __ZdlPv($15);
      $$0 = $31;$$01 = $30;
      break;
     } else {
      $29 = ((($this)) + 52|0);
      HEAP32[$29>>2] = $15;
      $$in = $15;
      label = 13;
      break;
     }
    }
   } else {
    if ($17) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vii(885,($15|0),($avcc|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $25 = ___cxa_find_matching_catch()|0;
      $26 = tempRet0;
      __ZdlPv($15);
      $$0 = $26;$$01 = $25;
      break;
     } else {
      $20 = ((($this)) + 52|0);
      HEAP32[$20>>2] = $15;
      $$in = $15;
      label = 13;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 13) {
   __THREW__ = 0;
   (invoke_iiii(22,($2|0),($$in|0),-1)|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 7;
   } else {
    return;
   }
  }
  if ((label|0) == 7) {
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $$0 = $24;$$01 = $23;
  }
  HEAP32[$7>>2] = (7184);
  __THREW__ = 0;
  invoke_vi(792,($11|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $38 = ___cxa_find_matching_catch(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN24AP4_AvcSampleDescriptionC2EjtttPKcP14AP4_AtomParent($this,$format,$width,$height,$depth,$compressor_name,$details) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $details = $details|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i = 0, $item$02$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 3;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ($details|0)==(0|0);
 L1: do {
  if (!($7)) {
   $8 = ((($details)) + 12|0);
   $item$01$i = HEAP32[$8>>2]|0;
   $9 = ($item$01$i|0)==(0|0);
   if (!($9)) {
    $item$02$i = $item$01$i;
    while(1) {
     $10 = HEAP32[$item$02$i>>2]|0;
     $11 = ($10|0)==(0|0);
     if (!($11)) {
      $12 = HEAP32[$10>>2]|0;
      $13 = ((($12)) + 48|0);
      $14 = HEAP32[$13>>2]|0;
      __THREW__ = 0;
      $15 = (invoke_ii($14|0,($10|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break;
      }
      $18 = ($15|0)==(0|0);
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iiii(22,($2|0),($15|0),-1)|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        break;
       }
      }
     }
     $25 = ((($item$02$i)) + 4|0);
     $item$0$i = HEAP32[$25>>2]|0;
     $26 = ($item$0$i|0)==(0|0);
     if ($26) {
      break L1;
     } else {
      $item$02$i = $item$0$i;
     }
    }
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    __THREW__ = 0;
    invoke_vi(314,($2|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $27 = ___cxa_find_matching_catch(0|0)|0;
     $28 = tempRet0;
     ___clang_call_terminate($27);
     // unreachable;
    } else {
     ___resumeException($21|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $29 = ((($this)) + 32|0);
 HEAP32[$29>>2] = (7184);
 $30 = ((($this)) + 36|0);
 HEAP16[$30>>1] = $width;
 $31 = ((($this)) + 38|0);
 HEAP16[$31>>1] = $height;
 $32 = ((($this)) + 40|0);
 HEAP16[$32>>1] = $depth;
 $33 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vii(812,($33|0),($compressor_name|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $$1 = $44;$$12 = $45;
 } else {
  HEAP32[$this>>2] = (25896);
  HEAP32[$29>>2] = (25920);
  $36 = ((($this)) + 52|0);
  HEAP32[$36>>2] = 0;
  $37 = HEAP32[$details>>2]|0;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  __THREW__ = 0;
  $40 = (invoke_iiii($39|0,($details|0),1635148611,0)|0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  L17: do {
   if ($42) {
    label = 15;
   } else {
    $43 = ($40|0)==(0|0);
    do {
     if ($43) {
      label = 21;
     } else {
      $48 = (___dynamic_cast($40,11216,18896,0)|0);
      $49 = ($48|0)==(0|0);
      if ($49) {
       label = 21;
      } else {
       __THREW__ = 0;
       $50 = (invoke_ii(752,96)|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 15;
        break L17;
       }
       __THREW__ = 0;
       invoke_vii(885,($50|0),($48|0));
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        __ZdlPv($50);
        $$0 = $55;$$01 = $56;
        break L17;
       } else {
        HEAP32[$36>>2] = $50;
        $$in = $50;
        break;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 21) {
      __THREW__ = 0;
      $57 = (invoke_ii(752,96)|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 15;
       break L17;
      }
      __THREW__ = 0;
      invoke_vi(901,($57|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       $62 = ___cxa_find_matching_catch()|0;
       $63 = tempRet0;
       __ZdlPv($57);
       $$0 = $62;$$01 = $63;
       break L17;
      } else {
       HEAP32[$36>>2] = $57;
       $$in = $57;
       break;
      }
     }
    } while(0);
    __THREW__ = 0;
    (invoke_iiii(22,($2|0),($$in|0),-1)|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 15;
    } else {
     return;
    }
   }
  } while(0);
  if ((label|0) == 15) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;
  }
  HEAP32[$29>>2] = (7184);
  __THREW__ = 0;
  invoke_vi(792,($33|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $70 = ___cxa_find_matching_catch(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch(0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZNK24AP4_AvcSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(112)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 38|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 40|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(902,($0|0),($2|0),($4|0),($6|0),($8|0),($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  __ZdlPv($0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN25AP4_HevcSampleDescriptionC2EjtttPKcPK12AP4_HvccAtom($this,$format,$width,$height,$depth,$compressor_name,$hvcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $hvcc = $hvcc|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 4;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($this)) + 32|0);
 HEAP32[$7>>2] = (7184);
 $8 = ((($this)) + 36|0);
 HEAP16[$8>>1] = $width;
 $9 = ((($this)) + 38|0);
 HEAP16[$9>>1] = $height;
 $10 = ((($this)) + 40|0);
 HEAP16[$10>>1] = $depth;
 $11 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vii(812,($11|0),($compressor_name|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $$1 = $22;$$12 = $21;
 } else {
  HEAP32[$this>>2] = (25936);
  HEAP32[$7>>2] = (25960);
  $14 = ($hvcc|0)==(0|0);
  __THREW__ = 0;
  $15 = (invoke_ii(752,120)|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if ($14) {
    if ($17) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vi(903,($15|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $30 = ___cxa_find_matching_catch()|0;
      $31 = tempRet0;
      __ZdlPv($15);
      $$0 = $31;$$01 = $30;
      break;
     } else {
      $29 = ((($this)) + 52|0);
      HEAP32[$29>>2] = $15;
      $$in = $15;
      label = 13;
      break;
     }
    }
   } else {
    if ($17) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vii(886,($15|0),($hvcc|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $25 = ___cxa_find_matching_catch()|0;
      $26 = tempRet0;
      __ZdlPv($15);
      $$0 = $26;$$01 = $25;
      break;
     } else {
      $20 = ((($this)) + 52|0);
      HEAP32[$20>>2] = $15;
      $$in = $15;
      label = 13;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 13) {
   __THREW__ = 0;
   (invoke_iiii(22,($2|0),($$in|0),-1)|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 7;
   } else {
    return;
   }
  }
  if ((label|0) == 7) {
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $$0 = $24;$$01 = $23;
  }
  HEAP32[$7>>2] = (7184);
  __THREW__ = 0;
  invoke_vi(792,($11|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $38 = ___cxa_find_matching_catch(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN25AP4_HevcSampleDescriptionC2EjtttPKcP14AP4_AtomParent($this,$format,$width,$height,$depth,$compressor_name,$details) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $details = $details|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $item$0$i = 0, $item$01$i = 0, $item$02$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 4;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ($details|0)==(0|0);
 L1: do {
  if (!($7)) {
   $8 = ((($details)) + 12|0);
   $item$01$i = HEAP32[$8>>2]|0;
   $9 = ($item$01$i|0)==(0|0);
   if (!($9)) {
    $item$02$i = $item$01$i;
    while(1) {
     $10 = HEAP32[$item$02$i>>2]|0;
     $11 = ($10|0)==(0|0);
     if (!($11)) {
      $12 = HEAP32[$10>>2]|0;
      $13 = ((($12)) + 48|0);
      $14 = HEAP32[$13>>2]|0;
      __THREW__ = 0;
      $15 = (invoke_ii($14|0,($10|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break;
      }
      $18 = ($15|0)==(0|0);
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iiii(22,($2|0),($15|0),-1)|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        break;
       }
      }
     }
     $25 = ((($item$02$i)) + 4|0);
     $item$0$i = HEAP32[$25>>2]|0;
     $26 = ($item$0$i|0)==(0|0);
     if ($26) {
      break L1;
     } else {
      $item$02$i = $item$0$i;
     }
    }
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    __THREW__ = 0;
    invoke_vi(314,($2|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $27 = ___cxa_find_matching_catch(0|0)|0;
     $28 = tempRet0;
     ___clang_call_terminate($27);
     // unreachable;
    } else {
     ___resumeException($21|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $29 = ((($this)) + 32|0);
 HEAP32[$29>>2] = (7184);
 $30 = ((($this)) + 36|0);
 HEAP16[$30>>1] = $width;
 $31 = ((($this)) + 38|0);
 HEAP16[$31>>1] = $height;
 $32 = ((($this)) + 40|0);
 HEAP16[$32>>1] = $depth;
 $33 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vii(812,($33|0),($compressor_name|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $$1 = $44;$$12 = $45;
 } else {
  HEAP32[$this>>2] = (25936);
  HEAP32[$29>>2] = (25960);
  $36 = ((($this)) + 52|0);
  HEAP32[$36>>2] = 0;
  $37 = HEAP32[$details>>2]|0;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  __THREW__ = 0;
  $40 = (invoke_iiii($39|0,($details|0),1752589123,0)|0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  L17: do {
   if ($42) {
    label = 15;
   } else {
    $43 = ($40|0)==(0|0);
    do {
     if ($43) {
      label = 21;
     } else {
      $48 = (___dynamic_cast($40,11216,13360,0)|0);
      $49 = ($48|0)==(0|0);
      if ($49) {
       label = 21;
      } else {
       __THREW__ = 0;
       $50 = (invoke_ii(752,120)|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 15;
        break L17;
       }
       __THREW__ = 0;
       invoke_vii(886,($50|0),($48|0));
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        __ZdlPv($50);
        $$0 = $55;$$01 = $56;
        break L17;
       } else {
        HEAP32[$36>>2] = $50;
        $$in = $50;
        break;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 21) {
      __THREW__ = 0;
      $57 = (invoke_ii(752,120)|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 15;
       break L17;
      }
      __THREW__ = 0;
      invoke_vi(903,($57|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       $62 = ___cxa_find_matching_catch()|0;
       $63 = tempRet0;
       __ZdlPv($57);
       $$0 = $62;$$01 = $63;
       break L17;
      } else {
       HEAP32[$36>>2] = $57;
       $$in = $57;
       break;
      }
     }
    } while(0);
    __THREW__ = 0;
    (invoke_iiii(22,($2|0),($$in|0),-1)|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 15;
    } else {
     return;
    }
   }
  } while(0);
  if ((label|0) == 15) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;
  }
  HEAP32[$29>>2] = (7184);
  __THREW__ = 0;
  invoke_vi(792,($33|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $70 = ___cxa_find_matching_catch(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch(0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($$1|0);
  // unreachable;
 }
}
function __ZNK25AP4_HevcSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(112)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 36|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 38|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 40|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($this)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(904,($0|0),($2|0),($4|0),($6|0),($8|0),($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  __ZdlPv($0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($this,$format,$esds) {
 $this = $this|0;
 $format = $format|0;
 $esds = $esds|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 1;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$this>>2] = (26784);
 $7 = ((($this)) + 36|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($this)) + 37|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($this)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($this)) + 44|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($this)) + 48|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(837,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $$0 = $19;$$01 = $20;
 } else {
  $15 = ($esds|0)==(0|0);
  if ($15) {
   return;
  }
  $16 = ((($esds)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   return;
  }
  $25 = HEAP32[$17>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  __THREW__ = 0;
  $28 = (invoke_ii($27|0,($17|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   $31 = ($28|0)==(0|0);
   if ($31) {
    return;
   }
   $32 = HEAP32[$28>>2]|0;
   $33 = ((($32)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   __THREW__ = 0;
   $35 = (invoke_ii($34|0,($28|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    HEAP8[$7>>0] = $35;
    $38 = HEAP32[$28>>2]|0;
    $39 = ((($38)) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    __THREW__ = 0;
    $41 = (invoke_ii($40|0,($28|0))|0);
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if (!($43)) {
     HEAP8[$8>>0] = $41;
     $44 = HEAP32[$28>>2]|0;
     $45 = ((($44)) + 32|0);
     $46 = HEAP32[$45>>2]|0;
     __THREW__ = 0;
     $47 = (invoke_ii($46|0,($28|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      HEAP32[$9>>2] = $47;
      $50 = HEAP32[$28>>2]|0;
      $51 = ((($50)) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      __THREW__ = 0;
      $53 = (invoke_ii($52|0,($28|0))|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if (!($55)) {
       HEAP32[$10>>2] = $53;
       $56 = HEAP32[$28>>2]|0;
       $57 = ((($56)) + 40|0);
       $58 = HEAP32[$57>>2]|0;
       __THREW__ = 0;
       $59 = (invoke_ii($58|0,($28|0))|0);
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if (!($61)) {
        HEAP32[$11>>2] = $59;
        $62 = HEAP32[$28>>2]|0;
        $63 = ((($62)) + 20|0);
        $64 = HEAP32[$63>>2]|0;
        __THREW__ = 0;
        $65 = (invoke_ii($64|0,($28|0))|0);
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if (!($67)) {
         $68 = ($65|0)==(0|0);
         if ($68) {
          return;
         }
         $69 = HEAP32[$65>>2]|0;
         $70 = ((($69)) + 20|0);
         $71 = HEAP32[$70>>2]|0;
         __THREW__ = 0;
         $72 = (invoke_ii($71|0,($65|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if (!($74)) {
          $75 = ((($72)) + 8|0);
          $76 = HEAP32[$75>>2]|0;
          $77 = HEAP32[$65>>2]|0;
          $78 = ((($77)) + 20|0);
          $79 = HEAP32[$78>>2]|0;
          __THREW__ = 0;
          $80 = (invoke_ii($79|0,($65|0))|0);
          $81 = __THREW__; __THREW__ = 0;
          $82 = $81&1;
          if (!($82)) {
           $83 = ((($80)) + 16|0);
           $84 = HEAP32[$83>>2]|0;
           __THREW__ = 0;
           (invoke_iiii(855,($12|0),($76|0),($84|0))|0);
           $85 = __THREW__; __THREW__ = 0;
           $86 = $85&1;
           if (!($86)) {
            return;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  __THREW__ = 0;
  invoke_vi(279,($12|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $89 = ___cxa_find_matching_catch(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  } else {
   $$0 = $21;$$01 = $22;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $89 = ___cxa_find_matching_catch(0|0)|0;
  $90 = tempRet0;
  ___clang_call_terminate($89);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNK25AP4_MpegSampleDescription18CreateEsDescriptorEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dsi_desc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(905,($0|0),0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  __ZdlPv($0);
  $$0 = $10;$$01 = $11;
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = ((($this)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $dsi_desc$0 = 0;
 } else {
  $6 = ((($this)) + 52|0);
  $7 = (__Znwj(40)|0);
  __THREW__ = 0;
  invoke_vii(906,($7|0),($6|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   __ZdlPv($7);
   $$0 = $12;$$01 = $13;
   ___resumeException($$0|0);
   // unreachable;
  } else {
   $dsi_desc$0 = $7;
  }
 }
 $14 = (__Znwj(52)|0);
 $15 = ((($this)) + 36|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ((($this)) + 37|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ((($this)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($this)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(907,($14|0),($16|0),($18|0),($20|0),($22|0),($24|0),($dsi_desc$0|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  __ZdlPv($14);
  $$0 = $36;$$01 = $37;
  ___resumeException($$0|0);
  // unreachable;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 (FUNCTION_TABLE_iii[$29 & 1023]($0,$14)|0);
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vii(804,($33|0),2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if (!($35)) {
  (FUNCTION_TABLE_iii[$32 & 1023]($0,$33)|0);
  return ($0|0);
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 __ZdlPv($33);
 $$0 = $38;$$01 = $39;
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN31AP4_MpegSystemSampleDescriptionC2EP12AP4_EsdsAtom($this,$esds) {
 $this = $this|0;
 $esds = $esds|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($this,1836070003,$esds);
 HEAP32[$this>>2] = (25976);
 return;
}
function __ZNK31AP4_MpegSystemSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(64)|0);
 __THREW__ = 0;
 $1 = (invoke_ii(908,($this|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(909,($0|0),($1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   return ($0|0);
  }
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 __ZdlPv($0);
 ___resumeException($6|0);
 // unreachable;
 return (0)|0;
}
function __ZN30AP4_MpegAudioSampleDescriptionC2EjttP12AP4_EsdsAtom($this,$sample_rate,$sample_size,$channel_count,$esds) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($this,1836069985,$esds);
 $0 = ((($this)) + 72|0);
 $1 = ((($this)) + 76|0);
 HEAP32[$1>>2] = $sample_rate;
 $2 = ((($this)) + 80|0);
 HEAP16[$2>>1] = $sample_size;
 $3 = ((($this)) + 82|0);
 HEAP16[$3>>1] = $channel_count;
 HEAP32[$this>>2] = (26000);
 HEAP32[$0>>2] = (26024);
 return;
}
function __ZNK30AP4_MpegAudioSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(160)|0);
 $1 = ((($this)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 80|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 82|0);
 $6 = HEAP16[$5>>1]|0;
 __THREW__ = 0;
 $7 = (invoke_ii(908,($this|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $2 << 16;
  __THREW__ = 0;
  invoke_viiiii(910,($0|0),($10|0),($4|0),($6|0),($7|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   return ($0|0);
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 __ZdlPv($0);
 ___resumeException($13|0);
 // unreachable;
 return (0)|0;
}
function __ZN30AP4_MpegVideoSampleDescriptionC2EtttPKcP12AP4_EsdsAtom($this,$width,$height,$depth,$compressor_name,$esds) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($this,1836070006,$esds);
 $0 = ((($this)) + 72|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 76|0);
 HEAP16[$1>>1] = $width;
 $2 = ((($this)) + 78|0);
 HEAP16[$2>>1] = $height;
 $3 = ((($this)) + 80|0);
 HEAP16[$3>>1] = $depth;
 $4 = ((($this)) + 84|0);
 __THREW__ = 0;
 invoke_vii(812,($4|0),($compressor_name|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  HEAP32[$this>>2] = (26040);
  HEAP32[$0>>2] = (26064);
  return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 HEAP32[$this>>2] = (26784);
 $9 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $17 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($17|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $20 = ___cxa_find_matching_catch(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $15;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $12 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  ___resumeException($7|0);
  // unreachable;
 }
 $22 = ___cxa_find_matching_catch(0|0)|0;
 $23 = tempRet0;
 $eh$lpad$body$indexZ2D = $22;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZNK30AP4_MpegVideoSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(112)|0);
 $1 = ((($this)) + 76|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($this)) + 78|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($this)) + 80|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($this)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_ii(908,($this|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZdlPv($0);
  ___resumeException($14|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viiiiii(911,($0|0),($2|0),($4|0),($6|0),($8|0),($9|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZdlPv($0);
  ___resumeException($14|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN29AP4_SubtitleSampleDescriptionC2EjPKcS1_S1_($this,$format,$namespce,$schema_location,$image_mime_type) {
 $this = $this|0;
 $format = $format|0;
 $namespce = $namespce|0;
 $schema_location = $schema_location|0;
 $image_mime_type = $image_mime_type|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 5;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = $format;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = (11152);
 $3 = ((($this)) + 16|0);
 HEAP32[$3>>2] = (2376);
 $4 = ((($this)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($this)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 28|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$this>>2] = (26080);
 $7 = ((($this)) + 32|0);
 __THREW__ = 0;
 invoke_vii(812,($7|0),($namespce|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $$1 = $17;$$12 = $16;
 } else {
  $10 = ((($this)) + 40|0);
  __THREW__ = 0;
  invoke_vii(812,($10|0),($schema_location|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   $13 = ((($this)) + 48|0);
   __THREW__ = 0;
   invoke_vii(812,($13|0),($image_mime_type|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    return;
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   __THREW__ = 0;
   invoke_vi(792,($10|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $28 = ___cxa_find_matching_catch(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   } else {
    $$0 = $21;$$01 = $20;
   }
  }
  __THREW__ = 0;
  invoke_vi(792,($7|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $28 = ___cxa_find_matching_catch(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 __THREW__ = 0;
 invoke_vi(314,($2|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN29AP4_SubtitleSampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($result|0)==(0|0);
 if (!($0)) {
  HEAP32[$result>>2] = 0;
 }
 $1 = (__Znwj(56)|0);
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(890,($1|0),($3|0),($5|0),($7|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  __ZdlPv($1);
  ___resumeException($12|0);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function __ZNK29AP4_SubtitleSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(88)|0);
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(912,($0|0),($2|0),($4|0),($6|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  __ZdlPv($0);
  ___resumeException($11|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN21AP4_SampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 12|0);
 __ZN14AP4_AtomParentD2Ev($0);
 return;
}
function __ZN21AP4_SampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN24AP4_AvcSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  HEAP32[$this>>2] = (25848);
  $4 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $7 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN24AP4_AvcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $9 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $4 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn32_N24AP4_AvcSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  HEAP32[$0>>2] = (25848);
  $12 = ((($0)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($12);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$0>>2] = (25848);
 $7 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn32_N24AP4_AvcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  HEAP32[$0>>2] = (25848);
  $10 = ((($0)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $9;$eh$lpad$body$i$indexZ2D = $8;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (25848);
 $5 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZdlPv($0);
  return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $16;$eh$lpad$body$i$indexZ2D = $15;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN25AP4_HevcSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  HEAP32[$this>>2] = (25848);
  $4 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $7 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN25AP4_HevcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $9 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $4 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn32_N25AP4_HevcSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  HEAP32[$0>>2] = (25848);
  $12 = ((($0)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($12);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$0>>2] = (25848);
 $7 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn32_N25AP4_HevcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  HEAP32[$0>>2] = (25848);
  $10 = ((($0)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $9;$eh$lpad$body$i$indexZ2D = $8;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (25848);
 $5 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZdlPv($0);
  return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $16;$eh$lpad$body$i$indexZ2D = $15;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN25AP4_MpegSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26784);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  HEAP32[$this>>2] = (25848);
  $3 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($3);
  return;
 }
 $4 = ___cxa_find_matching_catch()|0;
 $5 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $6 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
}
function __ZN31AP4_MpegSystemSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26784);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $8 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $7;$eh$lpad$body$indexZ2D = $6;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $3 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($this);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN30AP4_MpegAudioSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26784);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  HEAP32[$this>>2] = (25848);
  $10 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($10);
  return;
 }
 $3 = ___cxa_find_matching_catch()|0;
 $4 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $5 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  ___resumeException($3|0);
  // unreachable;
 }
}
function __ZN30AP4_MpegAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26784);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $5 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch(0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $4;$eh$lpad$body$indexZ2D = $3;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $10 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZdlPv($this);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn72_N30AP4_MpegAudioSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -72|0);
 HEAP32[$0>>2] = (26784);
 $1 = ((($0)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  HEAP32[$0>>2] = (25848);
  $11 = ((($this)) + -60|0);
  __ZN14AP4_AtomParentD2Ev($11);
  return;
 }
 $4 = ___cxa_find_matching_catch()|0;
 $5 = tempRet0;
 HEAP32[$0>>2] = (25848);
 $6 = ((($this)) + -60|0);
 __THREW__ = 0;
 invoke_vi(314,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
}
function __ZThn72_N30AP4_MpegAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -72|0);
 HEAP32[$0>>2] = (26784);
 $1 = ((($0)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  HEAP32[$0>>2] = (25848);
  $6 = ((($this)) + -60|0);
  __THREW__ = 0;
  invoke_vi(314,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $5;$eh$lpad$body$i$indexZ2D = $4;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (25848);
 $11 = ((($this)) + -60|0);
 __THREW__ = 0;
 invoke_vi(314,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  __ZdlPv($0);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $15;$eh$lpad$body$i$indexZ2D = $14;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN30AP4_MpegVideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 72|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 84|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  HEAP32[$this>>2] = (26784);
  $4 = ((($this)) + 52|0);
  __THREW__ = 0;
  invoke_vi(279,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   HEAP32[$this>>2] = (25848);
   $14 = ((($this)) + 12|0);
   __ZN14AP4_AtomParentD2Ev($14);
   return;
  }
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $9 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   ___resumeException($7|0);
   // unreachable;
  }
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 HEAP32[$this>>2] = (26784);
 $17 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $23 = ___cxa_find_matching_catch(0|0)|0;
  $24 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $25 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $28 = ___cxa_find_matching_catch(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  } else {
   $eh$lpad$body$indexZ2D = $23;
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $20 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($20|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if (!($22)) {
  ___resumeException($15|0);
  // unreachable;
 }
 $30 = ___cxa_find_matching_catch(0|0)|0;
 $31 = tempRet0;
 $eh$lpad$body$indexZ2D = $30;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
}
function __ZN30AP4_MpegVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(704,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn72_N30AP4_MpegVideoSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -72|0);
 __ZN30AP4_MpegVideoSampleDescriptionD2Ev($0);
 return;
}
function __ZThn72_N30AP4_MpegVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -72|0);
 __THREW__ = 0;
 invoke_vi(704,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN29AP4_SubtitleSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26080);
 $0 = ((($this)) + 48|0);
 __THREW__ = 0;
 invoke_vi(792,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $10 = ___cxa_find_matching_catch()|0;
   $11 = tempRet0;
   $12 = ((($this)) + 40|0);
   __THREW__ = 0;
   invoke_vi(792,($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   } else {
    $$0 = $11;$$01 = $10;
    label = 8;
   }
  } else {
   $3 = ((($this)) + 40|0);
   __THREW__ = 0;
   invoke_vi(792,($3|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    $$0 = $16;$$01 = $15;
    label = 8;
    break;
   }
   $6 = ((($this)) + 32|0);
   __THREW__ = 0;
   invoke_vi(792,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $17 = ___cxa_find_matching_catch()|0;
    $18 = tempRet0;
    $$1 = $18;$$12 = $17;
    break;
   } else {
    HEAP32[$this>>2] = (25848);
    $9 = ((($this)) + 12|0);
    __ZN14AP4_AtomParentD2Ev($9);
    return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $19 = ((($this)) + 32|0);
  __THREW__ = 0;
  invoke_vi(792,($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   $$1 = $$0;$$12 = $$01;
  }
 }
 HEAP32[$this>>2] = (25848);
 $22 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  ___resumeException($$12|0);
  // unreachable;
 }
}
function __ZN29AP4_SubtitleSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(709,($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch()|0;
  $3 = tempRet0;
  __ZdlPv($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZN33AP4_GenericAudioSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 12|0);
 __ZN14AP4_AtomParentD2Ev($0);
 return;
}
function __ZN33AP4_GenericAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (25848);
 $0 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZdlPv($this);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZdlPv($this);
  return;
 }
}
function __ZThn32_N33AP4_GenericAudioSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 HEAP32[$0>>2] = (25848);
 $1 = ((($this)) + -20|0);
 __ZN14AP4_AtomParentD2Ev($1);
 return;
}
function __ZThn32_N33AP4_GenericAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 HEAP32[$0>>2] = (25848);
 $1 = ((($this)) + -20|0);
 __THREW__ = 0;
 invoke_vi(314,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN33AP4_GenericVideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  HEAP32[$this>>2] = (25848);
  $4 = ((($this)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($4);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$this>>2] = (25848);
 $7 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZN33AP4_GenericVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 HEAP32[$0>>2] = (7184);
 $1 = ((($this)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $9 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $8;$eh$lpad$body$indexZ2D = $7;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $4 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZdlPv($this);
  return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZThn32_N33AP4_GenericVideoSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  HEAP32[$0>>2] = (25848);
  $12 = ((($0)) + 12|0);
  __ZN14AP4_AtomParentD2Ev($12);
  return;
 }
 $5 = ___cxa_find_matching_catch()|0;
 $6 = tempRet0;
 HEAP32[$0>>2] = (25848);
 $7 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___resumeException($5|0);
  // unreachable;
 }
}
function __ZThn32_N33AP4_GenericVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -32|0);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = (7184);
 $2 = ((($0)) + 44|0);
 __THREW__ = 0;
 invoke_vi(792,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  HEAP32[$0>>2] = (25848);
  $10 = ((($0)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  } else {
   $eh$lpad$body$i$index2Z2D = $9;$eh$lpad$body$i$indexZ2D = $8;
   __ZdlPv($0);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (25848);
 $5 = ((($0)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZdlPv($0);
  return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $eh$lpad$body$i$index2Z2D = $16;$eh$lpad$body$i$indexZ2D = $15;
 __ZdlPv($0);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
}
function __ZN25AP4_MpegSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (26784);
 $0 = ((($this)) + 52|0);
 __THREW__ = 0;
 invoke_vi(279,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  HEAP32[$this>>2] = (25848);
  $8 = ((($this)) + 12|0);
  __THREW__ = 0;
  invoke_vi(314,($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  } else {
   $eh$lpad$body$index2Z2D = $7;$eh$lpad$body$indexZ2D = $6;
   __ZdlPv($this);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 HEAP32[$this>>2] = (25848);
 $3 = ((($this)) + 12|0);
 __THREW__ = 0;
 invoke_vi(314,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($this);
  return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
 __ZdlPv($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __Z9AP4_DebugPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $args = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $args = sp + 8|0;
 $buffer = sp + 24|0;
 HEAP32[$args>>2] = $varargs;
 (_vsnprintf($buffer,1024,$format,$args)|0);
 HEAP32[$vararg_buffer>>2] = $buffer;
 (_printf((26888|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleTable16GenerateStblAtomERP17AP4_ContainerAtom($this,$stbl) {
 $this = $this|0;
 $stbl = $stbl|0;
 var $$$i = 0, $$$i10 = 0, $$0 = 0, $$06 = 0, $$1 = 0, $$17 = 0, $$2 = 0, $$28 = 0, $$all_samples_are_sync$0$off0 = 0, $$arith = 0, $$lcssa = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$lcssa170 = 0, $$lcssa171 = 0, $$lcssa172 = 0, $$lcssa174 = 0, $$lcssa175 = 0, $$lcssa176 = 0, $$lcssa177 = 0;
 var $$overflow = 0, $$ph = 0, $$ph24 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $all_samples_are_sync$0$off0$lcssa110123129 = 0, $all_samples_are_sync$0$off068 = 0, $all_samples_are_sync$1$off0 = 0, $all_samples_are_sync$1$off0$lcssa = 0, $chunk_index = 0, $ctts$0$lcssa107126 = 0, $ctts$0$lcssa107126128 = 0, $ctts$076 = 0;
 var $ctts$1 = 0, $ctts$2 = 0, $ctts$2$lcssa = 0, $current_chunk_index$075 = 0, $current_chunk_index$1 = 0, $current_chunk_size$074 = 0, $current_chunk_size$2 = 0, $current_cts_delta$066 = 0, $current_cts_delta_run$067 = 0, $current_cts_delta_run$1 = 0, $current_duration$071 = 0, $current_duration_run$069 = 0, $current_duration_run$1 = 0, $current_sample_description_index$072 = 0, $current_samples_in_chunk$073 = 0, $current_samples_in_chunk$2 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i14 = 0, $i$01$i$i = 0;
 var $i$01$i$i13 = 0, $i$070 = 0, $i1$065 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $new_count$0$i = 0, $new_count$0$i11 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $phitmp = 0, $phitmp$lcssa = 0, $position_in_chunk = 0, $sample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample = sp;
 $chunk_index = sp + 52|0;
 $position_in_chunk = sp + 48|0;
 $0 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(821,($0|0),1937007212);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  __ZdlPv($0);
  $$2 = $45;$$28 = $46;
  ___resumeException($$2|0);
  // unreachable;
 }
 HEAP32[$stbl>>2] = $0;
 $3 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vii(913,($3|0),($this|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $47 = ___cxa_find_matching_catch()|0;
  $48 = tempRet0;
  __ZdlPv($3);
  $$2 = $47;$$28 = $48;
  ___resumeException($$2|0);
  // unreachable;
 }
 $6 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_vi(914,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $49 = ___cxa_find_matching_catch()|0;
  $50 = tempRet0;
  __ZdlPv($6);
  $$2 = $49;$$28 = $50;
  ___resumeException($$2|0);
  // unreachable;
 }
 $9 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vi(915,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $51 = ___cxa_find_matching_catch()|0;
  $52 = tempRet0;
  __ZdlPv($9);
  $$2 = $51;$$28 = $52;
  ___resumeException($$2|0);
  // unreachable;
 }
 $12 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vi(916,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  __ZdlPv($12);
  $$2 = $53;$$28 = $54;
  ___resumeException($$2|0);
  // unreachable;
 }
 $15 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vi(917,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  __ZdlPv($15);
  $$2 = $55;$$28 = $56;
  ___resumeException($$2|0);
  // unreachable;
 }
 $18 = HEAP32[$this>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 __THREW__ = 0;
 $21 = (invoke_ii($20|0,($this|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 L25: do {
  if ($23) {
   $$ph24 = 0;
   label = 21;
  } else {
   $24 = ($21|0)==(0);
   do {
    if ($24) {
     $258 = 0;$260 = 0;$265 = 0;$272 = 0;$312 = 0;$all_samples_are_sync$0$off0$lcssa110123129 = 0;$ctts$0$lcssa107126128 = 0;
    } else {
     $25 = ((($sample)) + 20|0);
     $26 = ((($sample)) + 40|0);
     $27 = ((($sample)) + 16|0);
     $28 = ((($sample)) + 44|0);
     $29 = ((($sample)) + 24|0);
     $101 = 0;$102 = 0;$114 = 0;$135 = 0;$138 = 0;$all_samples_are_sync$0$off068 = 0;$ctts$076 = 0;$current_chunk_index$075 = 0;$current_chunk_size$074 = 0;$current_cts_delta$066 = 0;$current_cts_delta_run$067 = 0;$current_duration$071 = 0;$current_duration_run$069 = 0;$current_sample_description_index$072 = 1;$current_samples_in_chunk$073 = 0;$i$070 = 0;
     L29: while(1) {
      __THREW__ = 0;
      invoke_vi(918,($sample|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       $$ph = $114;
       label = 20;
       break;
      }
      $32 = HEAP32[$this>>2]|0;
      $33 = ((($32)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      __THREW__ = 0;
      (invoke_iiii($34|0,($this|0),($i$070|0),($sample|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       $313 = $114;
       label = 23;
       break;
      }
      $37 = HEAP32[$25>>2]|0;
      $38 = ($37|0)!=($current_duration$071|0);
      $39 = ($current_duration_run$069|0)!=(0);
      $or$cond = $39 & $38;
      if ($or$cond) {
       $40 = HEAP32[$12>>2]|0;
       $41 = ((($40)) + 56|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       (invoke_iiii($42|0,($12|0),($current_duration_run$069|0),($current_duration$071|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $313 = $114;
        label = 23;
        break;
       } else {
        $current_duration_run$1 = 0;
       }
      } else {
       $current_duration_run$1 = $current_duration_run$069;
      }
      $63 = (($current_duration_run$1) + 1)|0;
      $64 = HEAP32[$26>>2]|0;
      $65 = ($64|0)!=($current_cts_delta$066|0);
      $66 = ($current_cts_delta_run$067|0)!=(0);
      $or$cond3 = $66 & $65;
      if ($or$cond3) {
       $67 = ($ctts$076|0)==(0|0);
       if ($67) {
        __THREW__ = 0;
        $68 = (invoke_ii(752,64)|0);
        $69 = __THREW__; __THREW__ = 0;
        $70 = $69&1;
        if ($70) {
         $313 = $114;
         label = 23;
         break;
        }
        __THREW__ = 0;
        invoke_vi(919,($68|0));
        $71 = __THREW__; __THREW__ = 0;
        $72 = $71&1;
        if ($72) {
         $$lcssa = $68;$$lcssa167 = $114;
         label = 28;
         break;
        } else {
         $ctts$1 = $68;
        }
       } else {
        $ctts$1 = $ctts$076;
       }
       __THREW__ = 0;
       (invoke_iiii(920,($ctts$1|0),($current_cts_delta_run$067|0),($current_cts_delta$066|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        $313 = $114;
        label = 23;
        break;
       } else {
        $ctts$2 = $ctts$1;$current_cts_delta_run$1 = 0;
       }
      } else {
       $ctts$2 = $ctts$076;$current_cts_delta_run$1 = $current_cts_delta_run$067;
      }
      $77 = (($current_cts_delta_run$1) + 1)|0;
      $78 = HEAP32[$6>>2]|0;
      $79 = ((($78)) + 64|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      (invoke_iii($80|0,($6|0),($81|0))|0);
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       $313 = $114;
       label = 23;
       break;
      }
      $84 = HEAP8[$28>>0]|0;
      $85 = ($84<<24>>24)==(0);
      if ($85) {
       $all_samples_are_sync$1$off0 = 0;
      } else {
       $86 = (($i$070) + 1)|0;
       __THREW__ = 0;
       (invoke_iii(921,($15|0),($86|0))|0);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $313 = $114;
        label = 23;
        break;
       }
       $89 = ($i$070|0)==(0);
       $$all_samples_are_sync$0$off0 = $all_samples_are_sync$0$off068 | $89;
       $all_samples_are_sync$1$off0 = $$all_samples_are_sync$0$off0;
      }
      HEAP32[$chunk_index>>2] = 0;
      HEAP32[$position_in_chunk>>2] = 0;
      $90 = HEAP32[$this>>2]|0;
      $91 = ((($90)) + 20|0);
      $92 = HEAP32[$91>>2]|0;
      __THREW__ = 0;
      $93 = (invoke_iiiii($92|0,($this|0),($i$070|0),($chunk_index|0),($position_in_chunk|0))|0);
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      if ($95) {
       $313 = $114;
       label = 23;
       break;
      }
      $96 = ($93|0)==(0);
      do {
       if ($96) {
        $97 = HEAP32[$chunk_index>>2]|0;
        $98 = ($97|0)!=($current_chunk_index$075|0);
        $99 = ($current_samples_in_chunk$073|0)!=(0);
        $or$cond5 = $99 & $98;
        if (!($or$cond5)) {
         $316 = $135;$317 = $138;$318 = $114;$319 = $101;$320 = $102;$current_chunk_index$1 = $97;$current_chunk_size$2 = $current_chunk_size$074;$current_samples_in_chunk$2 = $current_samples_in_chunk$073;
         break;
        }
        $100 = (($101) + 1)|0;
        $103 = ($102>>>0)<($100>>>0);
        do {
         if ($103) {
          $104 = ($102|0)==(0);
          $105 = $102 << 1;
          $$$i = $104 ? 64 : $105;
          $106 = ($$$i>>>0)<($100>>>0);
          $new_count$0$i = $106 ? $100 : $$$i;
          $107 = ($102>>>0)<($new_count$0$i>>>0);
          if (!($107)) {
           $130 = $101;$132 = $114;$321 = $102;
           label = 45;
           break;
          }
          $108 = $new_count$0$i << 3;
          __THREW__ = 0;
          $109 = (invoke_ii(752,($108|0))|0);
          $110 = __THREW__; __THREW__ = 0;
          $111 = $110&1;
          if ($111) {
           $313 = $114;
           label = 23;
           break L29;
          }
          $112 = ($109|0)==(0|0);
          if ($112) {
           $322 = $114;$323 = $101;$324 = $102;
           break;
          }
          $113 = ($101|0)==(0);
          if ($113) {
           $130 = 0;$132 = $109;$321 = $new_count$0$i;
           label = 45;
           break;
          }
          $115 = ($114|0)==(0|0);
          if ($115) {
           $130 = $101;$132 = $109;$321 = $new_count$0$i;
           label = 45;
           break;
          } else {
           $i$01$i$i = 0;
          }
          while(1) {
           $116 = (($109) + ($i$01$i$i<<3)|0);
           $117 = (($114) + ($i$01$i$i<<3)|0);
           $118 = $117;
           $119 = $118;
           $120 = HEAP32[$119>>2]|0;
           $121 = (($118) + 4)|0;
           $122 = $121;
           $123 = HEAP32[$122>>2]|0;
           $124 = $116;
           $125 = $124;
           HEAP32[$125>>2] = $120;
           $126 = (($124) + 4)|0;
           $127 = $126;
           HEAP32[$127>>2] = $123;
           $128 = (($i$01$i$i) + 1)|0;
           $exitcond$i = ($128|0)==($101|0);
           if ($exitcond$i) {
            break;
           } else {
            $i$01$i$i = $128;
           }
          }
          __ZdlPv($114);
          $130 = $101;$132 = $109;$321 = $new_count$0$i;
          label = 45;
         } else {
          $130 = $101;$132 = $114;$321 = $102;
          label = 45;
         }
        } while(0);
        if ((label|0) == 45) {
         label = 0;
         $129 = (($130) + 1)|0;
         $131 = (($132) + ($130<<3)|0);
         $133 = $131;
         $134 = $133;
         HEAP32[$134>>2] = $135;
         $136 = (($133) + 4)|0;
         $137 = $136;
         HEAP32[$137>>2] = $138;
         $322 = $132;$323 = $129;$324 = $321;
        }
        $139 = HEAP32[$9>>2]|0;
        $140 = ((($139)) + 56|0);
        $141 = HEAP32[$140>>2]|0;
        __THREW__ = 0;
        (invoke_iiiii($141|0,($9|0),1,($current_samples_in_chunk$073|0),($current_sample_description_index$072|0))|0);
        $142 = __THREW__; __THREW__ = 0;
        $143 = $142&1;
        if ($143) {
         $313 = $322;
         label = 23;
         break L29;
        }
        $144 = (_i64Add(($current_chunk_size$074|0),0,($135|0),($138|0))|0);
        $145 = tempRet0;
        $$pre = HEAP32[$chunk_index>>2]|0;
        $316 = $144;$317 = $145;$318 = $322;$319 = $323;$320 = $324;$current_chunk_index$1 = $$pre;$current_chunk_size$2 = 0;$current_samples_in_chunk$2 = 0;
       } else {
        $316 = $135;$317 = $138;$318 = $114;$319 = $101;$320 = $102;$current_chunk_index$1 = $current_chunk_index$075;$current_chunk_size$2 = $current_chunk_size$074;$current_samples_in_chunk$2 = $current_samples_in_chunk$073;
       }
      } while(0);
      $146 = HEAP32[$29>>2]|0;
      $147 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      invoke_vi(922,($sample|0));
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if ($149) {
       $$ph = $318;
       label = 20;
       break;
      }
      $150 = (($current_samples_in_chunk$2) + 1)|0;
      $151 = (($147) + ($current_chunk_size$2))|0;
      $152 = (($i$070) + 1)|0;
      $phitmp = (($146) + 1)|0;
      $153 = ($152>>>0)<($21>>>0);
      if ($153) {
       $101 = $319;$102 = $320;$114 = $318;$135 = $316;$138 = $317;$all_samples_are_sync$0$off068 = $all_samples_are_sync$1$off0;$ctts$076 = $ctts$2;$current_chunk_index$075 = $current_chunk_index$1;$current_chunk_size$074 = $151;$current_cts_delta$066 = $64;$current_cts_delta_run$067 = $77;$current_duration$071 = $37;$current_duration_run$069 = $63;$current_sample_description_index$072 = $phitmp;$current_samples_in_chunk$073 = $150;$i$070 = $152;
      } else {
       $$lcssa169 = $37;$$lcssa170 = $63;$$lcssa171 = $64;$$lcssa172 = $77;$$lcssa174 = $318;$$lcssa175 = $319;$$lcssa176 = $320;$$lcssa177 = $150;$199 = $316;$202 = $317;$all_samples_are_sync$1$off0$lcssa = $all_samples_are_sync$1$off0;$ctts$2$lcssa = $ctts$2;$phitmp$lcssa = $phitmp;
       label = 51;
       break;
      }
     }
     if ((label|0) == 20) {
      $57 = ___cxa_find_matching_catch()|0;
      $58 = tempRet0;
      $314 = $$ph;$lpad$phi$index = $57;$lpad$phi$index2 = $58;
      label = 22;
      break L25;
     }
     else if ((label|0) == 23) {
      $61 = ___cxa_find_matching_catch()|0;
      $62 = tempRet0;
      $$0 = $61;$$06 = $62;$315 = $313;
     }
     else if ((label|0) == 28) {
      $73 = ___cxa_find_matching_catch()|0;
      $74 = tempRet0;
      __ZdlPv($$lcssa);
      $$0 = $73;$$06 = $74;$315 = $$lcssa167;
     }
     else if ((label|0) == 51) {
      if (!($24)) {
       $156 = HEAP32[$12>>2]|0;
       $157 = ((($156)) + 56|0);
       $158 = HEAP32[$157>>2]|0;
       __THREW__ = 0;
       (invoke_iiii($158|0,($12|0),($$lcssa170|0),($$lcssa169|0))|0);
       $159 = __THREW__; __THREW__ = 0;
       $160 = $159&1;
       if ($160) {
        $$ph24 = $$lcssa174;
        label = 21;
        break L25;
       }
      }
      $161 = ($ctts$2$lcssa|0)==(0|0);
      do {
       if ($161) {
        $325 = 0;$ctts$0$lcssa107126 = 0;
       } else {
        $162 = ($$lcssa172|0)==(0);
        __THREW__ = 0;
        if ($162) {
         ___assert_fail((26928|0),(26960|0),166,(27000|0));
         $163 = __THREW__; __THREW__ = 0;
         $$ph24 = $$lcssa174;
         label = 21;
         break L25;
        } else {
         (__ZN12AP4_CttsAtom8AddEntryEjj($ctts$2$lcssa,$$lcssa172,$$lcssa171)|0);
         $164 = __THREW__; __THREW__ = 0;
         $165 = $164&1;
         if ($165) {
          $$ph24 = $$lcssa174;
          label = 21;
          break L25;
         } else {
          $325 = 1;$ctts$0$lcssa107126 = $ctts$2$lcssa;
          break;
         }
        }
       }
      } while(0);
      $166 = ($$lcssa177|0)==(0);
      if ($166) {
       $258 = $202;$260 = $199;$265 = $$lcssa175;$272 = $$lcssa174;$312 = $325;$all_samples_are_sync$0$off0$lcssa110123129 = $all_samples_are_sync$1$off0$lcssa;$ctts$0$lcssa107126128 = $ctts$0$lcssa107126;
       break;
      }
      $167 = (($$lcssa175) + 1)|0;
      $168 = ($$lcssa176>>>0)<($167>>>0);
      do {
       if ($168) {
        $169 = ($$lcssa176|0)==(0);
        $170 = $$lcssa176 << 1;
        $$$i10 = $169 ? 64 : $170;
        $171 = ($$$i10>>>0)<($167>>>0);
        $new_count$0$i11 = $171 ? $167 : $$$i10;
        $172 = ($$lcssa176>>>0)<($new_count$0$i11>>>0);
        if ($172) {
         $173 = $new_count$0$i11 << 3;
         __THREW__ = 0;
         $174 = (invoke_ii(752,($173|0))|0);
         $175 = __THREW__; __THREW__ = 0;
         $176 = $175&1;
         if ($176) {
          $$ph24 = $$lcssa174;
          label = 21;
          break L25;
         }
         $177 = ($174|0)==(0|0);
         if ($177) {
          $326 = $$lcssa174;$327 = $$lcssa175;
         } else {
          $178 = ($$lcssa175|0)==(0);
          if ($178) {
           $194 = 0;$196 = $174;
           label = 66;
          } else {
           $179 = ($$lcssa174|0)==(0|0);
           if ($179) {
            $194 = $$lcssa175;$196 = $174;
            label = 66;
            break;
           } else {
            $i$01$i$i13 = 0;
           }
           while(1) {
            $180 = (($174) + ($i$01$i$i13<<3)|0);
            $181 = (($$lcssa174) + ($i$01$i$i13<<3)|0);
            $182 = $181;
            $183 = $182;
            $184 = HEAP32[$183>>2]|0;
            $185 = (($182) + 4)|0;
            $186 = $185;
            $187 = HEAP32[$186>>2]|0;
            $188 = $180;
            $189 = $188;
            HEAP32[$189>>2] = $184;
            $190 = (($188) + 4)|0;
            $191 = $190;
            HEAP32[$191>>2] = $187;
            $192 = (($i$01$i$i13) + 1)|0;
            $exitcond$i14 = ($192|0)==($$lcssa175|0);
            if ($exitcond$i14) {
             break;
            } else {
             $i$01$i$i13 = $192;
            }
           }
           __ZdlPv($$lcssa174);
           $194 = $$lcssa175;$196 = $174;
           label = 66;
          }
         }
        } else {
         $194 = $$lcssa175;$196 = $$lcssa174;
         label = 66;
        }
       } else {
        $194 = $$lcssa175;$196 = $$lcssa174;
        label = 66;
       }
      } while(0);
      if ((label|0) == 66) {
       $193 = (($194) + 1)|0;
       $195 = (($196) + ($194<<3)|0);
       $197 = $195;
       $198 = $197;
       HEAP32[$198>>2] = $199;
       $200 = (($197) + 4)|0;
       $201 = $200;
       HEAP32[$201>>2] = $202;
       $326 = $196;$327 = $193;
      }
      $203 = HEAP32[$9>>2]|0;
      $204 = ((($203)) + 56|0);
      $205 = HEAP32[$204>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($205|0,($9|0),1,($$lcssa177|0),($phitmp$lcssa|0))|0);
      $206 = __THREW__; __THREW__ = 0;
      $207 = $206&1;
      if ($207) {
       $$ph24 = $326;
       label = 21;
       break L25;
      } else {
       $258 = $202;$260 = $199;$265 = $327;$272 = $326;$312 = $325;$all_samples_are_sync$0$off0$lcssa110123129 = $all_samples_are_sync$1$off0$lcssa;$ctts$0$lcssa107126128 = $ctts$0$lcssa107126;
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(922,($sample|0));
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if (!($155)) {
      $$1 = $$0;$$17 = $$06;$309 = $315;
      break L25;
     }
     $310 = ___cxa_find_matching_catch(0|0)|0;
     $311 = tempRet0;
     ___clang_call_terminate($310);
     // unreachable;
    }
   } while(0);
   $208 = HEAP32[$stbl>>2]|0;
   $209 = ((($208)) + 36|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($210)) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($212|0,($209|0),($3|0),-1)|0);
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    $$ph24 = $272;
    label = 21;
   } else {
    $215 = HEAP32[$stbl>>2]|0;
    $216 = ((($215)) + 36|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = ((($217)) + 8|0);
    $219 = HEAP32[$218>>2]|0;
    __THREW__ = 0;
    (invoke_iiii($219|0,($216|0),($6|0),-1)|0);
    $220 = __THREW__; __THREW__ = 0;
    $221 = $220&1;
    if ($221) {
     $$ph24 = $272;
     label = 21;
    } else {
     $222 = HEAP32[$stbl>>2]|0;
     $223 = ((($222)) + 36|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($224)) + 8|0);
     $226 = HEAP32[$225>>2]|0;
     __THREW__ = 0;
     (invoke_iiii($226|0,($223|0),($9|0),-1)|0);
     $227 = __THREW__; __THREW__ = 0;
     $228 = $227&1;
     if ($228) {
      $$ph24 = $272;
      label = 21;
     } else {
      $229 = HEAP32[$stbl>>2]|0;
      $230 = ((($229)) + 36|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = ((($231)) + 8|0);
      $233 = HEAP32[$232>>2]|0;
      __THREW__ = 0;
      (invoke_iiii($233|0,($230|0),($12|0),-1)|0);
      $234 = __THREW__; __THREW__ = 0;
      $235 = $234&1;
      if ($235) {
       $$ph24 = $272;
       label = 21;
      } else {
       if ($312) {
        $236 = HEAP32[$stbl>>2]|0;
        $237 = ((($236)) + 36|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = ((($238)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        __THREW__ = 0;
        (invoke_iiii($240|0,($237|0),($ctts$0$lcssa107126128|0),-1)|0);
        $241 = __THREW__; __THREW__ = 0;
        $242 = $241&1;
        if ($242) {
         $$ph24 = $272;
         label = 21;
         break;
        }
       }
       if ($all_samples_are_sync$0$off0$lcssa110123129) {
        label = 77;
       } else {
        $243 = ((($15)) + 44|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = ($244|0)==(0);
        if ($245) {
         label = 77;
        } else {
         $246 = HEAP32[$stbl>>2]|0;
         $247 = ((($246)) + 36|0);
         $248 = HEAP32[$247>>2]|0;
         $249 = ((($248)) + 8|0);
         $250 = HEAP32[$249>>2]|0;
         __THREW__ = 0;
         (invoke_iiii($250|0,($247|0),($15|0),-1)|0);
         $251 = __THREW__; __THREW__ = 0;
         $252 = $251&1;
         if ($252) {
          $$ph24 = $272;
          label = 21;
          break;
         }
        }
       }
       if ((label|0) == 77) {
        $253 = HEAP32[$15>>2]|0;
        $254 = ((($253)) + 4|0);
        $255 = HEAP32[$254>>2]|0;
        __THREW__ = 0;
        invoke_vi($255|0,($15|0));
        $256 = __THREW__; __THREW__ = 0;
        $257 = $256&1;
        if ($257) {
         $$ph24 = $272;
         label = 21;
         break;
        }
       }
       $259 = ($258>>>0)<(1);
       $261 = ($260>>>0)<(0);
       $262 = ($258|0)==(1);
       $263 = $262 & $261;
       $264 = $259 | $263;
       if (!($264)) {
        __THREW__ = 0;
        $295 = (invoke_ii(752,48)|0);
        $296 = __THREW__; __THREW__ = 0;
        $297 = $296&1;
        if ($297) {
         $$ph24 = $272;
         label = 21;
         break;
        }
        __THREW__ = 0;
        invoke_viii(924,($295|0),($272|0),($265|0));
        $298 = __THREW__; __THREW__ = 0;
        $299 = $298&1;
        if ($299) {
         $307 = ___cxa_find_matching_catch()|0;
         $308 = tempRet0;
         __ZdlPv($295);
         $$1 = $307;$$17 = $308;$309 = $272;
         break;
        }
        $300 = HEAP32[$stbl>>2]|0;
        $301 = ((($300)) + 36|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = ((($302)) + 8|0);
        $304 = HEAP32[$303>>2]|0;
        __THREW__ = 0;
        (invoke_iiii($304|0,($301|0),($295|0),-1)|0);
        $305 = __THREW__; __THREW__ = 0;
        $306 = $305&1;
        if ($306) {
         $$ph24 = $272;
         label = 21;
         break;
        }
        __ZdlPv($272);
        STACKTOP = sp;return 0;
       }
       $$arith = $265<<2;
       $$overflow = ($265>>>0)>(1073741823);
       $266 = $$overflow ? -1 : $$arith;
       __THREW__ = 0;
       $267 = (invoke_ii(787,($266|0))|0);
       $268 = __THREW__; __THREW__ = 0;
       $269 = $268&1;
       if ($269) {
        $$ph24 = $272;
        label = 21;
       } else {
        $270 = ($265|0)==(0);
        if (!($270)) {
         $i1$065 = 0;
         while(1) {
          $271 = (($272) + ($i1$065<<3)|0);
          $273 = $271;
          $274 = $273;
          $275 = HEAP32[$274>>2]|0;
          $276 = (($273) + 4)|0;
          $277 = $276;
          $278 = HEAP32[$277>>2]|0;
          $279 = (($267) + ($i1$065<<2)|0);
          HEAP32[$279>>2] = $275;
          $280 = (($i1$065) + 1)|0;
          $exitcond = ($280|0)==($265|0);
          if ($exitcond) {
           break;
          } else {
           $i1$065 = $280;
          }
         }
        }
        __THREW__ = 0;
        $281 = (invoke_ii(752,48)|0);
        $282 = __THREW__; __THREW__ = 0;
        $283 = $282&1;
        if ($283) {
         $$ph24 = $272;
         label = 21;
        } else {
         __THREW__ = 0;
         invoke_viii(923,($281|0),($267|0),($265|0));
         $284 = __THREW__; __THREW__ = 0;
         $285 = $284&1;
         if ($285) {
          $293 = ___cxa_find_matching_catch()|0;
          $294 = tempRet0;
          __ZdlPv($281);
          $$1 = $293;$$17 = $294;$309 = $272;
          break;
         }
         $286 = HEAP32[$stbl>>2]|0;
         $287 = ((($286)) + 36|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = ((($288)) + 8|0);
         $290 = HEAP32[$289>>2]|0;
         __THREW__ = 0;
         (invoke_iiii($290|0,($287|0),($281|0),-1)|0);
         $291 = __THREW__; __THREW__ = 0;
         $292 = $291&1;
         if ($292) {
          $$ph24 = $272;
          label = 21;
          break;
         }
         __ZdaPv($267);
         __ZdlPv($272);
         STACKTOP = sp;return 0;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $314 = $$ph24;$lpad$phi$index = $59;$lpad$phi$index2 = $60;
  label = 22;
 }
 if ((label|0) == 22) {
  $$1 = $lpad$phi$index;$$17 = $lpad$phi$index2;$309 = $314;
 }
 __ZdlPv($309);
 $$2 = $$1;$$28 = $$17;
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((27608|0),(925|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[27600>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(27616,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (27040);
   ___cxa_throw(($7|0),(27072|0),(725|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27672|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(926,(27688|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(926,(27728|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(927);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(928)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[6756]|0;HEAP32[6756] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[27088>>2]|0;HEAP32[27088>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,27184,27240,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 1023]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L31: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L31;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L31;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L31;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L31;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 1023]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 1023]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 1023]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L3: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L3;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L3;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L3;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L3;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 1023]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,27184,27352,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[27896>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(28000,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[27112>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](27112,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[27896>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(27904,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[27896>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(27952,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(28040,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((27600|0),(929|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(27784,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[27600>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(27840,$vararg_buffer);
  // unreachable;
 }
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $282 = 0;$283 = 0;
  tempRet0 = ($282);
  return ($283|0);
 }
 $3 = ((($f)) + 4|0);
 $4 = ((($f)) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa135 = $13;
   break;
  }
 }
 $16 = ($$lcssa135|0)==(45);
 do {
  if ((($$lcssa135|0) == 43) | (($$lcssa135|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = ((($18)) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa135;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = ((($29)) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$123 = 8;$c$124 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = ((($39)) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (28072 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = ((($52)) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    if ($51) {
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = ((($55)) + -1|0);
    HEAP32[$3>>2] = $56;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   } else {
    $$123 = 16;$c$124 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (28072 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = ((($63)) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$082 = 0;
    while(1) {
     $69 = ($x$082*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = ((($72)) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $82 = $80 & $81;
     if ($82) {
      $71 = $79;$x$082 = $70;
     } else {
      $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $284 = $$lcssa134;$285 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $284 = 0;$285 = 0;$c$2$lcssa = $c$1;
   }
   $83 = (($c$2$lcssa) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $85 = $284;$86 = $285;$89 = $83;$c$371 = $c$2$lcssa;
    while(1) {
     $87 = (___muldi3(($85|0),($86|0),10,0)|0);
     $88 = tempRet0;
     $90 = ($89|0)<(0);
     $91 = $90 << 31 >> 31;
     $92 = $89 ^ -1;
     $93 = $91 ^ -1;
     $94 = ($88>>>0)>($93>>>0);
     $95 = ($87>>>0)>($92>>>0);
     $96 = ($88|0)==($93|0);
     $97 = $96 & $95;
     $98 = $94 | $97;
     if ($98) {
      $$lcssa = $89;$286 = $85;$287 = $86;$c$3$lcssa = $c$371;
      break;
     }
     $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
     $100 = tempRet0;
     $101 = HEAP32[$3>>2]|0;
     $102 = HEAP32[$4>>2]|0;
     $103 = ($101>>>0)<($102>>>0);
     if ($103) {
      $104 = ((($101)) + 1|0);
      HEAP32[$3>>2] = $104;
      $105 = HEAP8[$101>>0]|0;
      $106 = $105&255;
      $c$3$be = $106;
     } else {
      $107 = (___shgetc($f)|0);
      $c$3$be = $107;
     }
     $108 = (($c$3$be) + -48)|0;
     $109 = ($108>>>0)<(10);
     $110 = ($100>>>0)<(429496729);
     $111 = ($99>>>0)<(2576980378);
     $112 = ($100|0)==(429496729);
     $113 = $112 & $111;
     $114 = $110 | $113;
     $or$cond7 = $109 & $114;
     if ($or$cond7) {
      $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
     } else {
      $$lcssa = $108;$286 = $99;$287 = $100;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $115 = ($$lcssa>>>0)>(9);
    if ($115) {
     $255 = $287;$257 = $286;
    } else {
     $$122 = 10;$288 = $286;$289 = $287;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $255 = $285;$257 = $284;
   }
  } else {
   $$123 = $$1;$c$124 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $116 = (($$123) + -1)|0;
   $117 = $116 & $$123;
   $118 = ($117|0)==(0);
   if ($118) {
    $123 = ($$123*23)|0;
    $124 = $123 >>> 5;
    $125 = $124 & 7;
    $126 = (28336 + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $$sum1445 = (($c$124) + 1)|0;
    $129 = (28072 + ($$sum1445)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131>>>0)<($$123>>>0);
    if ($132) {
     $135 = $131;$x$146 = 0;
     while(1) {
      $133 = $x$146 << $128;
      $134 = $135 | $133;
      $136 = HEAP32[$3>>2]|0;
      $137 = HEAP32[$4>>2]|0;
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $139 = ((($136)) + 1|0);
       HEAP32[$3>>2] = $139;
       $140 = HEAP8[$136>>0]|0;
       $141 = $140&255;
       $c$4$be = $141;
      } else {
       $142 = (___shgetc($f)|0);
       $c$4$be = $142;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $143 = (28072 + ($$sum14)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $144&255;
      $146 = ($145>>>0)<($$123>>>0);
      $147 = ($134>>>0)<(134217728);
      $148 = $147 & $146;
      if ($148) {
       $135 = $145;$x$146 = $134;
      } else {
       $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
    }
    $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
    $150 = tempRet0;
    $151 = $152&255;
    $153 = ($151>>>0)>=($$123>>>0);
    $155 = ($154>>>0)>($150>>>0);
    $157 = ($156>>>0)>($149>>>0);
    $158 = ($154|0)==($150|0);
    $159 = $158 & $157;
    $160 = $155 | $159;
    $or$cond40 = $153 | $160;
    if ($or$cond40) {
     $$122 = $$123;$288 = $156;$289 = $154;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;$162 = $154;$166 = $152;
    }
    while(1) {
     $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
     $164 = tempRet0;
     $165 = $166&255;
     $167 = $165 | $163;
     $168 = HEAP32[$3>>2]|0;
     $169 = HEAP32[$4>>2]|0;
     $170 = ($168>>>0)<($169>>>0);
     if ($170) {
      $171 = ((($168)) + 1|0);
      HEAP32[$3>>2] = $171;
      $172 = HEAP8[$168>>0]|0;
      $173 = $172&255;
      $c$5$be = $173;
     } else {
      $174 = (___shgetc($f)|0);
      $c$5$be = $174;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $175 = (28072 + ($$sum15)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176&255;
     $178 = ($177>>>0)>=($$123>>>0);
     $179 = ($164>>>0)>($150>>>0);
     $180 = ($167>>>0)>($149>>>0);
     $181 = ($164|0)==($150|0);
     $182 = $181 & $180;
     $183 = $179 | $182;
     $or$cond = $178 | $183;
     if ($or$cond) {
      $$122 = $$123;$288 = $167;$289 = $164;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $161 = $167;$162 = $164;$166 = $176;
     }
    }
   }
   $$sum1865 = (($c$124) + 1)|0;
   $119 = (28072 + ($$sum1865)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121>>>0)<($$123>>>0);
   if ($122) {
    $186 = $121;$x$266 = 0;
    while(1) {
     $184 = Math_imul($x$266, $$123)|0;
     $185 = (($186) + ($184))|0;
     $187 = HEAP32[$3>>2]|0;
     $188 = HEAP32[$4>>2]|0;
     $189 = ($187>>>0)<($188>>>0);
     if ($189) {
      $190 = ((($187)) + 1|0);
      HEAP32[$3>>2] = $190;
      $191 = HEAP8[$187>>0]|0;
      $192 = $191&255;
      $c$6$be = $192;
     } else {
      $193 = (___shgetc($f)|0);
      $c$6$be = $193;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $194 = (28072 + ($$sum18)|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ($196>>>0)<($$123>>>0);
     $198 = ($185>>>0)<(119304647);
     $199 = $198 & $197;
     if ($199) {
      $186 = $196;$x$266 = $185;
     } else {
      $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $201 = $$lcssa133;$290 = $$lcssa132;$291 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;$290 = 0;$291 = 0;$c$6$lcssa = $c$124;
   }
   $200 = $201&255;
   $202 = ($200>>>0)<($$123>>>0);
   if ($202) {
    $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
    $204 = tempRet0;
    $205 = $291;$207 = $290;$215 = $201;$c$753 = $c$6$lcssa;
    while(1) {
     $206 = ($205>>>0)>($204>>>0);
     $208 = ($207>>>0)>($203>>>0);
     $209 = ($205|0)==($204|0);
     $210 = $209 & $208;
     $211 = $206 | $210;
     if ($211) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
     $213 = tempRet0;
     $214 = $215&255;
     $216 = $214 ^ -1;
     $217 = ($213>>>0)>(4294967295);
     $218 = ($212>>>0)>($216>>>0);
     $219 = ($213|0)==(-1);
     $220 = $219 & $218;
     $221 = $217 | $220;
     if ($221) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
     $223 = tempRet0;
     $224 = HEAP32[$3>>2]|0;
     $225 = HEAP32[$4>>2]|0;
     $226 = ($224>>>0)<($225>>>0);
     if ($226) {
      $227 = ((($224)) + 1|0);
      HEAP32[$3>>2] = $227;
      $228 = HEAP8[$224>>0]|0;
      $229 = $228&255;
      $c$7$be = $229;
     } else {
      $230 = (___shgetc($f)|0);
      $c$7$be = $230;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $231 = (28072 + ($$sum19)|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233>>>0)<($$123>>>0);
     if ($234) {
      $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
     } else {
      $$122 = $$123;$288 = $222;$289 = $223;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$122 = $$123;$288 = $290;$289 = $291;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $235 = (28072 + ($$sum16)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = ($237>>>0)<($$122>>>0);
  if ($238) {
   while(1) {
    $239 = HEAP32[$3>>2]|0;
    $240 = HEAP32[$4>>2]|0;
    $241 = ($239>>>0)<($240>>>0);
    if ($241) {
     $242 = ((($239)) + 1|0);
     HEAP32[$3>>2] = $242;
     $243 = HEAP8[$239>>0]|0;
     $244 = $243&255;
     $c$9$be = $244;
    } else {
     $245 = (___shgetc($f)|0);
     $c$9$be = $245;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $246 = (28072 + ($$sum17)|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = ($248>>>0)<($$122>>>0);
    if (!($249)) {
     break;
    }
   }
   $250 = (___errno_location()|0);
   HEAP32[$250>>2] = 34;
   $255 = $1;$257 = $0;
  } else {
   $255 = $289;$257 = $288;
  }
 }
 $251 = HEAP32[$4>>2]|0;
 $252 = ($251|0)==(0|0);
 if (!($252)) {
  $253 = HEAP32[$3>>2]|0;
  $254 = ((($253)) + -1|0);
  HEAP32[$3>>2] = $254;
 }
 $256 = ($255>>>0)<($1>>>0);
 $258 = ($257>>>0)<($0>>>0);
 $259 = ($255|0)==($1|0);
 $260 = $259 & $258;
 $261 = $256 | $260;
 if (!($261)) {
  $262 = $0 & 1;
  $263 = ($262|0)!=(0);
  $264 = (0)!=(0);
  $265 = $263 | $264;
  $266 = ($neg$0|0)!=(0);
  $or$cond12 = $265 | $266;
  if (!($or$cond12)) {
   $267 = (___errno_location()|0);
   HEAP32[$267>>2] = 34;
   $268 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $269 = tempRet0;
   $282 = $269;$283 = $268;
   tempRet0 = ($282);
   return ($283|0);
  }
  $270 = ($255>>>0)>($1>>>0);
  $271 = ($257>>>0)>($0>>>0);
  $272 = ($255|0)==($1|0);
  $273 = $272 & $271;
  $274 = $270 | $273;
  if ($274) {
   $275 = (___errno_location()|0);
   HEAP32[$275>>2] = 34;
   $282 = $1;$283 = $0;
   tempRet0 = ($282);
   return ($283|0);
  }
 }
 $276 = ($neg$0|0)<(0);
 $277 = $276 << 31 >> 31;
 $278 = $257 ^ $neg$0;
 $279 = $255 ^ $277;
 $280 = (_i64Subtract(($278|0),($279|0),($neg$0|0),($277|0))|0);
 $281 = tempRet0;
 $282 = $281;$283 = $280;
 tempRet0 = ($282);
 return ($283|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
  return;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
  return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
    return ($$0|0);
   }
   $40 = $6&255;
   HEAP8[$36>>0] = $40;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = ((($f)) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=28352; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = ((($s)) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = ((($f$i)) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = ((($f$i)) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,0)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($6|0);
 }
 $9 = ((($f$i)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0;
 var $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0;
 var $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0;
 var $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0;
 var $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre270 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0.0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0.0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $1169$phi = 0, $117 = 0, $1170 = 0, $1170$phi = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0;
 var $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0;
 var $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0;
 var $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0;
 var $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0;
 var $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0;
 var $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0;
 var $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond332 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1169 = 0;$1170 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;$26 = $23;
  }
  while(1) {
   if ((($1171<<24>>24) == 37)) {
    $28 = $26;$z$0163 = $26;
    label = 9;
    break;
   } else if ((($1171<<24>>24) == 0)) {
    $$lcssa106 = $26;$z$0$lcssa = $26;
    break;
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1171 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa106 = $28;$z$0$lcssa = $z$0163;
      break L12;
     }
     $31 = ((($z$0163)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0163 = $31;
      label = 9;
     } else {
      $$lcssa106 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1170$phi = $1170;$1169$phi = $1169;$23 = $$lcssa106;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1170 = $1170$phi;$1169 = $1169$phi;
   continue;
  }
  $39 = ((($$lcssa106)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($$lcssa106)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($$lcssa106)) + 3|0);
   $$92 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre270 = HEAP8[$$92>>0]|0;
   $47 = $$pre270;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0110 = $fl$0170;$storemerge8108 = $storemerge8169;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0170;
     $60 = ((($storemerge8169)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
     } else {
      $65 = $61;$fl$0110 = $59;$storemerge8108 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge8108)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge8108)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge8108)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0110 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa450 = $98;$$lcssa451 = $99;
       break;
      }
     }
     $103 = ($$lcssa450|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $105 = $$lcssa451;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa450;
     }
    } else {
     $105 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = ((($105)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i27 = (($136) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $140 = $107;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $1172 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i30*10)|0;
      $138 = (($137) + ($isdigittmp4$i29))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i31 = (($142) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $140 = $139;$i$03$i30 = $138;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $1172 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = ((($105)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($105)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($105)) + 4|0);
      $1172 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = ((0) + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1172 = $110;$p$0 = $135;
    } else {
     $1172 = $110;$p$0 = 0;
    }
   } else {
    $1172 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1172;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = ((($144)) + 1|0);
   $149 = ((28464 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa455 = $144;$$lcssa457 = $148;$$lcssa458 = $150;$$lcssa459 = $151;$st$0$lcssa456 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa458<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 363;
   break;
  }
  $155 = ($$lcssa458<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1173 = $1169;$1174 = $1170;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa459;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($158)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $1173 = $161;$1174 = $159;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $162 = ($$lcssa458&255)>(20);
    if ($162) {
     $264 = $1170;$291 = $1169;
    } else {
     do {
      switch ($$lcssa459|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $163 = $arglist_current5;
       $164 = ((0) + 4|0);
       $expanded78 = $164;
       $expanded77 = (($expanded78) - 1)|0;
       $165 = (($163) + ($expanded77))|0;
       $166 = ((0) + 4|0);
       $expanded82 = $166;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $167 = $165 & $expanded80;
       $168 = $167;
       $169 = HEAP32[$168>>2]|0;
       $arglist_next6 = ((($168)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $170 = $169;
       $264 = $170;$291 = $1169;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $171 = $arglist_current8;
       $172 = ((0) + 4|0);
       $expanded85 = $172;
       $expanded84 = (($expanded85) - 1)|0;
       $173 = (($171) + ($expanded84))|0;
       $174 = ((0) + 4|0);
       $expanded89 = $174;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $175 = $173 & $expanded87;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $arglist_next9 = ((($176)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $178 = ($177|0)<(0);
       $179 = $178 << 31 >> 31;
       $264 = $177;$291 = $179;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $180 = $arglist_current11;
       $181 = ((0) + 4|0);
       $expanded92 = $181;
       $expanded91 = (($expanded92) - 1)|0;
       $182 = (($180) + ($expanded91))|0;
       $183 = ((0) + 4|0);
       $expanded96 = $183;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $184 = $182 & $expanded94;
       $185 = $184;
       $186 = HEAP32[$185>>2]|0;
       $arglist_next12 = ((($185)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $264 = $186;$291 = 0;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $187 = $arglist_current14;
       $188 = ((0) + 8|0);
       $expanded99 = $188;
       $expanded98 = (($expanded99) - 1)|0;
       $189 = (($187) + ($expanded98))|0;
       $190 = ((0) + 8|0);
       $expanded103 = $190;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $191 = $189 & $expanded101;
       $192 = $191;
       $193 = $192;
       $194 = $193;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 4)|0;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $arglist_next15 = ((($192)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $264 = $195;$291 = $198;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $199 = $arglist_current17;
       $200 = ((0) + 4|0);
       $expanded106 = $200;
       $expanded105 = (($expanded106) - 1)|0;
       $201 = (($199) + ($expanded105))|0;
       $202 = ((0) + 4|0);
       $expanded110 = $202;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $203 = $201 & $expanded108;
       $204 = $203;
       $205 = HEAP32[$204>>2]|0;
       $arglist_next18 = ((($204)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $206 = $205&65535;
       $207 = $206 << 16 >> 16;
       $208 = ($207|0)<(0);
       $209 = $208 << 31 >> 31;
       $sext93 = $205 << 16;
       $210 = $sext93 >> 16;
       $264 = $210;$291 = $209;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $211 = $arglist_current20;
       $212 = ((0) + 4|0);
       $expanded113 = $212;
       $expanded112 = (($expanded113) - 1)|0;
       $213 = (($211) + ($expanded112))|0;
       $214 = ((0) + 4|0);
       $expanded117 = $214;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $215 = $213 & $expanded115;
       $216 = $215;
       $217 = HEAP32[$216>>2]|0;
       $arglist_next21 = ((($216)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $217 & 65535;
       $264 = $$mask1$i37;$291 = 0;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $218 = $arglist_current23;
       $219 = ((0) + 4|0);
       $expanded120 = $219;
       $expanded119 = (($expanded120) - 1)|0;
       $220 = (($218) + ($expanded119))|0;
       $221 = ((0) + 4|0);
       $expanded124 = $221;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $222 = $220 & $expanded122;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $arglist_next24 = ((($223)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $225 = $224&255;
       $226 = $225 << 24 >> 24;
       $227 = ($226|0)<(0);
       $228 = $227 << 31 >> 31;
       $sext = $224 << 24;
       $229 = $sext >> 24;
       $264 = $229;$291 = $228;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $230 = $arglist_current26;
       $231 = ((0) + 4|0);
       $expanded127 = $231;
       $expanded126 = (($expanded127) - 1)|0;
       $232 = (($230) + ($expanded126))|0;
       $233 = ((0) + 4|0);
       $expanded131 = $233;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $234 = $232 & $expanded129;
       $235 = $234;
       $236 = HEAP32[$235>>2]|0;
       $arglist_next27 = ((($235)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $236 & 255;
       $264 = $$mask$i38;$291 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $237 = $arglist_current29;
       $238 = ((0) + 8|0);
       $expanded134 = $238;
       $expanded133 = (($expanded134) - 1)|0;
       $239 = (($237) + ($expanded133))|0;
       $240 = ((0) + 8|0);
       $expanded138 = $240;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $241 = $239 & $expanded136;
       $242 = $241;
       $243 = +HEAPF64[$242>>3];
       $arglist_next30 = ((($242)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $243;$244 = HEAP32[tempDoublePtr>>2]|0;
       $245 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $244;$291 = $245;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $246 = $arglist_current32;
       $247 = ((0) + 8|0);
       $expanded141 = $247;
       $expanded140 = (($expanded141) - 1)|0;
       $248 = (($246) + ($expanded140))|0;
       $249 = ((0) + 8|0);
       $expanded145 = $249;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $250 = $248 & $expanded143;
       $251 = $250;
       $252 = +HEAPF64[$251>>3];
       $arglist_next33 = ((($251)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $252;$253 = HEAP32[tempDoublePtr>>2]|0;
       $254 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $253;$291 = $254;
       break L64;
       break;
      }
      default: {
       $264 = $1170;$291 = $1169;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;$291 = $1173;
   } else {
    $1169 = $1173;$1170 = $1174;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $255 = HEAP8[$$lcssa455>>0]|0;
  $256 = $255 << 24 >> 24;
  $257 = ($st$0$lcssa456|0)!=(0);
  $258 = $256 & 15;
  $259 = ($258|0)==(3);
  $or$cond15 = $257 & $259;
  $260 = $256 & -33;
  $t$0 = $or$cond15 ? $260 : $256;
  $261 = $fl$1 & 8192;
  $262 = ($261|0)==(0);
  $263 = $fl$1 & -65537;
  $fl$1$ = $262 ? $fl$1 : $263;
  L86: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa456|0) {
    case 0:  {
     $265 = $264;
     HEAP32[$265>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $266 = $264;
     HEAP32[$266>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $267 = ($cnt$1|0)<(0);
     $268 = $267 << 31 >> 31;
     $269 = $264;
     $270 = $269;
     $271 = $270;
     HEAP32[$271>>2] = $cnt$1;
     $272 = (($270) + 4)|0;
     $273 = $272;
     HEAP32[$273>>2] = $268;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $274 = $cnt$1&65535;
     $275 = $264;
     HEAP16[$275>>1] = $274;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $276 = $cnt$1&255;
     $277 = $264;
     HEAP8[$277>>0] = $276;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $278 = $264;
     HEAP32[$278>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $279 = ($cnt$1|0)<(0);
     $280 = $279 << 31 >> 31;
     $281 = $264;
     $282 = $281;
     $283 = $282;
     HEAP32[$283>>2] = $cnt$1;
     $284 = (($282) + 4)|0;
     $285 = $284;
     HEAP32[$285>>2] = $280;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 111:  {
    $312 = ($264|0)==(0);
    $313 = ($291|0)==(0);
    $314 = $312 & $313;
    if ($314) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$316 = $264;$320 = $291;
     while(1) {
      $315 = $316 & 7;
      $317 = $315 | 48;
      $318 = $317&255;
      $319 = ((($$03$i48)) + -1|0);
      HEAP8[$319>>0] = $318;
      $321 = (_bitshift64Lshr(($316|0),($320|0),3)|0);
      $322 = tempRet0;
      $323 = ($321|0)==(0);
      $324 = ($322|0)==(0);
      $325 = $323 & $324;
      if ($325) {
       $$0$lcssa$i51 = $319;
       break;
      } else {
       $$03$i48 = $319;$316 = $321;$320 = $322;
      }
     }
    }
    $326 = $fl$1$ & 8;
    $327 = ($326|0)==(0);
    $or$cond19 = $327 | $314;
    $$24 = $or$cond19 ? 28944 : (28949);
    $328 = $or$cond19&1;
    $$25 = $328 ^ 1;
    $366 = $264;$368 = $291;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 112:  {
    $286 = ($p$0>>>0)>(8);
    $287 = $286 ? $p$0 : 8;
    $288 = $fl$1$ | 8;
    $fl$3 = $288;$p$1 = $287;$t$1 = 120;
    label = 73;
    break;
   }
   case 105: case 100:  {
    $329 = ($291|0)<(0);
    if ($329) {
     $330 = (_i64Subtract(0,0,($264|0),($291|0))|0);
     $331 = tempRet0;
     $336 = $331;$338 = $330;$pl$0 = 1;$prefix$0 = 28944;
     label = 84;
     break L86;
    }
    $332 = $fl$1$ & 2048;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = $fl$1$ & 1;
     $335 = ($334|0)==(0);
     $$ = $335 ? 28944 : (28946);
     $336 = $291;$338 = $264;$pl$0 = $334;$prefix$0 = $$;
     label = 84;
    } else {
     $336 = $291;$338 = $264;$pl$0 = 1;$prefix$0 = (28945);
     label = 84;
    }
    break;
   }
   case 117:  {
    $336 = $291;$338 = $264;$pl$0 = 0;$prefix$0 = 28944;
    label = 84;
    break;
   }
   case 99:  {
    $378 = $264&255;
    HEAP8[$4>>0] = $378;
    $1175 = $291;$1176 = $264;$a$2 = $4;$fl$6 = $263;$p$5 = 1;$pl$2 = 0;$prefix$2 = 28944;$z$2 = $2;
    break;
   }
   case 109:  {
    $379 = (___errno_location()|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (_strerror(($380|0))|0);
    $a$1 = $381;
    label = 94;
    break;
   }
   case 115:  {
    $382 = $264;
    $383 = ($264|0)!=(0);
    $384 = $383 ? $382 : 28960;
    $a$1 = $384;
    label = 94;
    break;
   }
   case 83:  {
    $391 = $264;
    $392 = ($p$0|0)==(0);
    if ($392) {
     $1181 = $264;$1182 = $391;$i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;$1180 = $264;$p$4272 = $p$0;
     label = 97;
    }
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $264;
    HEAP32[$5>>2] = 0;
    $1179 = $wc;$1180 = $6;$p$4272 = -1;
    label = 97;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $264;HEAP32[tempDoublePtr+4>>2] = $291;$430 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $431 = ($291|0)<(0);
    if ($431) {
     $432 = -$430;
     $$07$i = $432;$pl$0$i = 1;$prefix$0$i = 28968;
    } else {
     $433 = $fl$1$ & 2048;
     $434 = ($433|0)==(0);
     if ($434) {
      $435 = $fl$1$ & 1;
      $436 = ($435|0)==(0);
      $$$i = $436 ? (28969) : (28974);
      $$07$i = $430;$pl$0$i = $435;$prefix$0$i = $$$i;
     } else {
      $$07$i = $430;$pl$0$i = 1;$prefix$0$i = (28971);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$437 = HEAP32[tempDoublePtr>>2]|0;
    $438 = HEAP32[tempDoublePtr+4>>2]|0;
    $439 = $438 & 2146435072;
    $440 = ($439>>>0)<(2146435072);
    $441 = (0)<(0);
    $442 = ($439|0)==(2146435072);
    $443 = $442 & $441;
    $444 = $440 | $443;
    do {
     if ($444) {
      $471 = (+_frexpl($$07$i,$e2$i));
      $472 = $471 * 2.0;
      $473 = $472 != 0.0;
      if ($473) {
       $474 = HEAP32[$e2$i>>2]|0;
       $475 = (($474) + -1)|0;
       HEAP32[$e2$i>>2] = $475;
      }
      $476 = $t$0 | 32;
      $477 = ($476|0)==(97);
      if ($477) {
       $478 = $t$0 & 32;
       $479 = ($478|0)==(0);
       $480 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $479 ? $prefix$0$i : $480;
       $481 = $pl$0$i | 2;
       $482 = ($p$0>>>0)>(11);
       $483 = (12 - ($p$0))|0;
       $484 = ($483|0)==(0);
       $485 = $482 | $484;
       do {
        if ($485) {
         $$1$i = $472;
        } else {
         $re$1179$i = $483;$round$0178$i = 8.0;
         while(1) {
          $486 = (($re$1179$i) + -1)|0;
          $487 = $round$0178$i * 16.0;
          $488 = ($486|0)==(0);
          if ($488) {
           $$lcssa483 = $487;
           break;
          } else {
           $re$1179$i = $486;$round$0178$i = $487;
          }
         }
         $489 = HEAP8[$prefix$0$$i>>0]|0;
         $490 = ($489<<24>>24)==(45);
         if ($490) {
          $491 = -$472;
          $492 = $491 - $$lcssa483;
          $493 = $$lcssa483 + $492;
          $494 = -$493;
          $$1$i = $494;
          break;
         } else {
          $495 = $472 + $$lcssa483;
          $496 = $495 - $$lcssa483;
          $$1$i = $496;
          break;
         }
        }
       } while(0);
       $497 = HEAP32[$e2$i>>2]|0;
       $498 = ($497|0)<(0);
       $499 = (0 - ($497))|0;
       $500 = $498 ? $499 : $497;
       $501 = ($500|0)<(0);
       if ($501) {
        $502 = ($500|0)<(0);
        $503 = $502 << 31 >> 31;
        $$05$i$i = $7;$504 = $500;$505 = $503;
        while(1) {
         $506 = (___uremdi3(($504|0),($505|0),10,0)|0);
         $507 = tempRet0;
         $508 = $506 | 48;
         $509 = $508&255;
         $510 = ((($$05$i$i)) + -1|0);
         HEAP8[$510>>0] = $509;
         $511 = (___udivdi3(($504|0),($505|0),10,0)|0);
         $512 = tempRet0;
         $513 = ($505>>>0)>(9);
         $514 = ($504>>>0)>(4294967295);
         $515 = ($505|0)==(9);
         $516 = $515 & $514;
         $517 = $513 | $516;
         if ($517) {
          $$05$i$i = $510;$504 = $511;$505 = $512;
         } else {
          $$lcssa484 = $510;$1183 = $511;$1184 = $512;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa484;$$01$lcssa$off0$i$i = $1183;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $500;
       }
       $518 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($518) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $519 = (($y$03$i$i>>>0) % 10)&-1;
         $520 = $519 | 48;
         $521 = $520&255;
         $522 = ((($$12$i$i)) + -1|0);
         HEAP8[$522>>0] = $521;
         $523 = (($y$03$i$i>>>0) / 10)&-1;
         $524 = ($y$03$i$i>>>0)<(10);
         if ($524) {
          $$1$lcssa$i$i = $522;
          break;
         } else {
          $$12$i$i = $522;$y$03$i$i = $523;
         }
        }
       }
       $525 = ($$1$lcssa$i$i|0)==($7|0);
       if ($525) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $526 = HEAP32[$e2$i>>2]|0;
       $527 = $526 >> 31;
       $528 = $527 & 2;
       $529 = (($528) + 43)|0;
       $530 = $529&255;
       $531 = ((($estr$0$i)) + -1|0);
       HEAP8[$531>>0] = $530;
       $532 = (($t$0) + 15)|0;
       $533 = $532&255;
       $534 = ((($estr$0$i)) + -2|0);
       HEAP8[$534>>0] = $533;
       $535 = $fl$1$ & 8;
       $536 = ($535|0)==(0);
       if ($536) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $537 = (~~(($$2$us$us$i)));
          $538 = (28928 + ($537)|0);
          $539 = HEAP8[$538>>0]|0;
          $540 = $539&255;
          $541 = $540 | $478;
          $542 = $541&255;
          $543 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $542;
          $544 = (+($537|0));
          $545 = $$2$us$us$i - $544;
          $546 = $545 * 16.0;
          $547 = $543;
          $548 = (($547) - ($0))|0;
          $549 = ($548|0)!=(1);
          $notlhs$us$us$i = $546 == 0.0;
          $or$cond$i79 = $549 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $543;
          } else {
           $550 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$543>>0] = 46;
           $s$1$us$us$i = $550;
          }
          $551 = $546 != 0.0;
          if ($551) {
           $$2$us$us$i = $546;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $552 = (~~(($$2$us$i)));
          $553 = (28928 + ($552)|0);
          $554 = HEAP8[$553>>0]|0;
          $555 = $554&255;
          $556 = $555 | $478;
          $557 = $556&255;
          $558 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $557;
          $559 = (+($552|0));
          $560 = $$2$us$i - $559;
          $561 = $560 * 16.0;
          $562 = $558;
          $563 = (($562) - ($0))|0;
          $564 = ($563|0)==(1);
          if ($564) {
           $565 = ((($s$0$us$i)) + 2|0);
           HEAP8[$558>>0] = 46;
           $s$1$us$i = $565;
          } else {
           $s$1$us$i = $558;
          }
          $566 = $561 != 0.0;
          if ($566) {
           $$2$us$i = $561;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $567 = (~~(($$2$i)));
         $568 = (28928 + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $570 | $478;
         $572 = $571&255;
         $573 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $572;
         $574 = (+($567|0));
         $575 = $$2$i - $574;
         $576 = $575 * 16.0;
         $577 = $573;
         $578 = (($577) - ($0))|0;
         $579 = ($578|0)==(1);
         if ($579) {
          $580 = ((($s$0$i)) + 2|0);
          HEAP8[$573>>0] = 46;
          $s$1$i = $580;
         } else {
          $s$1$i = $573;
         }
         $581 = $576 != 0.0;
         if ($581) {
          $$2$i = $576;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $582 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $583 = (($11) + ($$pre300$i))|0;
       $584 = ($583|0)<($p$0|0);
       $or$cond332 = $582 & $584;
       $585 = $534;
       $586 = (($12) + ($p$0))|0;
       $587 = (($586) - ($585))|0;
       $588 = $534;
       $589 = (($10) - ($588))|0;
       $590 = (($589) + ($$pre300$i))|0;
       $l$0$i = $or$cond332 ? $587 : $590;
       $591 = (($l$0$i) + ($481))|0;
       $592 = $fl$1$ & 73728;
       $593 = ($592|0)==(0);
       $594 = ($w$1|0)>($591|0);
       $or$cond$i52$i = $593 & $594;
       if ($or$cond$i52$i) {
        $595 = (($w$1) - ($591))|0;
        $596 = ($595>>>0)>(256);
        $597 = $596 ? 256 : $595;
        _memset(($pad$i|0),32,($597|0))|0;
        $598 = ($595>>>0)>(255);
        if ($598) {
         $$01$i54$i = $595;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $599 = (($$01$i54$i) + -256)|0;
          $600 = ($599>>>0)>(255);
          if ($600) {
           $$01$i54$i = $599;
          } else {
           break;
          }
         }
         $601 = $595 & 255;
         $$0$lcssa$i56$i = $601;
        } else {
         $$0$lcssa$i56$i = $595;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$481,$f)|0);
       $602 = ($592|0)==(65536);
       $or$cond$i59$i = $602 & $594;
       if ($or$cond$i59$i) {
        $603 = (($w$1) - ($591))|0;
        $604 = ($603>>>0)>(256);
        $605 = $604 ? 256 : $603;
        _memset(($pad$i|0),48,($605|0))|0;
        $606 = ($603>>>0)>(255);
        if ($606) {
         $$01$i61$i = $603;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $607 = (($$01$i61$i) + -256)|0;
          $608 = ($607>>>0)>(255);
          if ($608) {
           $$01$i61$i = $607;
          } else {
           break;
          }
         }
         $609 = $603 & 255;
         $$0$lcssa$i63$i = $609;
        } else {
         $$0$lcssa$i63$i = $603;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $610 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$610,$f)|0);
       $611 = $534;
       $612 = (($9) - ($611))|0;
       $613 = (($l$0$i) - ($612))|0;
       $614 = (($613) - ($610))|0;
       $615 = ($614|0)>(0);
       if ($615) {
        $616 = ($614>>>0)>(256);
        $617 = $616 ? 256 : $614;
        _memset(($pad$i|0),48,($617|0))|0;
        $618 = ($614>>>0)>(255);
        if ($618) {
         $$01$i67$i = $614;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $619 = (($$01$i67$i) + -256)|0;
          $620 = ($619>>>0)>(255);
          if ($620) {
           $$01$i67$i = $619;
          } else {
           break;
          }
         }
         $621 = $614 & 255;
         $$0$lcssa$i69$i = $621;
        } else {
         $$0$lcssa$i69$i = $614;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($534,$612,$f)|0);
       $622 = ($592|0)==(8192);
       $or$cond$i72$i = $622 & $594;
       if ($or$cond$i72$i) {
        $623 = (($w$1) - ($591))|0;
        $624 = ($623>>>0)>(256);
        $625 = $624 ? 256 : $623;
        _memset(($pad$i|0),32,($625|0))|0;
        $626 = ($623>>>0)>(255);
        if ($626) {
         $$01$i74$i = $623;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $627 = (($$01$i74$i) + -256)|0;
          $628 = ($627>>>0)>(255);
          if ($628) {
           $$01$i74$i = $627;
          } else {
           break;
          }
         }
         $629 = $623 & 255;
         $$0$lcssa$i76$i = $629;
        } else {
         $$0$lcssa$i76$i = $623;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $594 ? $w$1 : $591;
       $$0$i = $w$$i;
       break;
      }
      $630 = ($p$0|0)<(0);
      $$p$i = $630 ? 6 : $p$0;
      if ($473) {
       $631 = $472 * 268435456.0;
       $632 = HEAP32[$e2$i>>2]|0;
       $633 = (($632) + -28)|0;
       HEAP32[$e2$i>>2] = $633;
       $$3$i = $631;$634 = $633;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $472;$634 = $$pre$i;
      }
      $635 = ($634|0)<(0);
      $$31$i = $635 ? $big$i : $13;
      $636 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $637 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $637;
       $638 = ((($z$0$i)) + 4|0);
       $639 = (+($637>>>0));
       $640 = $$4$i - $639;
       $641 = $640 * 1.0E+9;
       $642 = $641 != 0.0;
       if ($642) {
        $$4$i = $641;$z$0$i = $638;
       } else {
        $$lcssa460 = $638;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $643 = ($$pr$i|0)>(0);
      if ($643) {
       $644 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa460;
       while(1) {
        $645 = ($644|0)>(29);
        $646 = $645 ? 29 : $644;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $647 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($647) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $648 = HEAP32[$d$0247$i>>2]|0;
           $649 = (_bitshift64Shl(($648|0),0,($646|0))|0);
           $650 = tempRet0;
           $651 = (_i64Add(($649|0),($650|0),($carry$0246$i|0),0)|0);
           $652 = tempRet0;
           $653 = (___uremdi3(($651|0),($652|0),1000000000,0)|0);
           $654 = tempRet0;
           HEAP32[$d$0247$i>>2] = $653;
           $655 = (___udivdi3(($651|0),($652|0),1000000000,0)|0);
           $656 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $657 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($657) {
            $$lcssa461 = $655;
            break;
           } else {
            $carry$0246$i = $655;$d$0247$i = $d$0$i;
           }
          }
          $658 = ($$lcssa461|0)==(0);
          if ($658) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $659 = ((($a$1253$i)) + -4|0);
          HEAP32[$659>>2] = $$lcssa461;
          $a$2$ph$i = $659;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $660 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($660)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $661 = ((($z$2$i)) + -4|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($662|0)==(0);
         if ($663) {
          $z$2$i = $661;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $664 = HEAP32[$e2$i>>2]|0;
        $665 = (($664) - ($646))|0;
        HEAP32[$e2$i>>2] = $665;
        $666 = ($665|0)>(0);
        if ($666) {
         $644 = $665;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $665;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa460;
      }
      $667 = ($$pr146$i|0)<(0);
      L220: do {
       if ($667) {
        $668 = (($$p$i) + 25)|0;
        $669 = (($668|0) / 9)&-1;
        $670 = (($669) + 1)|0;
        $671 = ($476|0)==(102);
        if (!($671)) {
         $704 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $703 = (0 - ($704))|0;
          $705 = ($703|0)>(9);
          $706 = $705 ? 9 : $703;
          $707 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($707) {
            $711 = 1 << $706;
            $712 = (($711) + -1)|0;
            $713 = 1000000000 >>> $706;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $714 = HEAP32[$d$1233$i>>2]|0;
             $715 = $714 & $712;
             $716 = $714 >>> $706;
             $717 = (($716) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $717;
             $718 = Math_imul($715, $713)|0;
             $719 = ((($d$1233$i)) + 4|0);
             $720 = ($719>>>0)<($z$3239$i>>>0);
             if ($720) {
              $carry3$0234$i = $718;$d$1233$i = $719;
             } else {
              $$lcssa463 = $718;
              break;
             }
            }
            $721 = HEAP32[$a$3240$i>>2]|0;
            $722 = ($721|0)==(0);
            $723 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $722 ? $723 : $a$3240$i;
            $724 = ($$lcssa463|0)==(0);
            if ($724) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $725 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa463;
            $$a$3306$i = $$a$3$i;$z$4$i = $725;
           } else {
            $708 = HEAP32[$a$3240$i>>2]|0;
            $709 = ($708|0)==(0);
            $710 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $709 ? $710 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $726 = $z$4$i;
          $727 = $$a$3306$i;
          $728 = (($726) - ($727))|0;
          $729 = $728 >> 2;
          $730 = ($729|0)>($670|0);
          $731 = (($$a$3306$i) + ($670<<2)|0);
          $$z$4$i = $730 ? $731 : $z$4$i;
          $732 = HEAP32[$e2$i>>2]|0;
          $733 = (($732) + ($706))|0;
          HEAP32[$e2$i>>2] = $733;
          $734 = ($733|0)<(0);
          if ($734) {
           $704 = $733;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L220;
          }
         }
        }
        $672 = (($$31$i) + ($670<<2)|0);
        $674 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $673 = (0 - ($674))|0;
         $675 = ($673|0)>(9);
         $676 = $675 ? 9 : $673;
         $677 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($677) {
           $702 = 1 << $676;
           $695 = (($702) + -1)|0;
           $699 = 1000000000 >>> $676;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $693 = HEAP32[$d$1233$us$i>>2]|0;
            $694 = $693 & $695;
            $696 = $693 >>> $676;
            $697 = (($696) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $697;
            $698 = Math_imul($694, $699)|0;
            $700 = ((($d$1233$us$i)) + 4|0);
            $701 = ($700>>>0)<($z$3239$us$i>>>0);
            if ($701) {
             $carry3$0234$us$i = $698;$d$1233$us$i = $700;
            } else {
             $$lcssa464 = $698;
             break;
            }
           }
           $681 = HEAP32[$a$3240$us$i>>2]|0;
           $682 = ($681|0)==(0);
           $683 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $682 ? $683 : $a$3240$us$i;
           $684 = ($$lcssa464|0)==(0);
           if ($684) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $685 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa464;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $685;
          } else {
           $678 = HEAP32[$a$3240$us$i>>2]|0;
           $679 = ($678|0)==(0);
           $680 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $679 ? $680 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $686 = $z$4$us$i;
         $687 = (($686) - ($636))|0;
         $688 = $687 >> 2;
         $689 = ($688|0)>($670|0);
         $$z$4$us$i = $689 ? $672 : $z$4$us$i;
         $690 = HEAP32[$e2$i>>2]|0;
         $691 = (($690) + ($676))|0;
         HEAP32[$e2$i>>2] = $691;
         $692 = ($691|0)<(0);
         if ($692) {
          $674 = $691;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $735 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($735) {
        $736 = $a$3$lcssa$i;
        $737 = (($636) - ($736))|0;
        $738 = $737 >> 2;
        $739 = ($738*9)|0;
        $740 = HEAP32[$a$3$lcssa$i>>2]|0;
        $741 = ($740>>>0)<(10);
        if ($741) {
         $e$1$i = $739;
         break;
        } else {
         $e$0229$i = $739;$i$0228$i = 10;
        }
        while(1) {
         $742 = ($i$0228$i*10)|0;
         $743 = (($e$0229$i) + 1)|0;
         $744 = ($740>>>0)<($742>>>0);
         if ($744) {
          $e$1$i = $743;
          break;
         } else {
          $e$0229$i = $743;$i$0228$i = $742;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $745 = ($476|0)!=(102);
      $746 = $745 ? $e$1$i : 0;
      $747 = (($$p$i) - ($746))|0;
      $748 = ($476|0)==(103);
      $749 = ($$p$i|0)!=(0);
      $750 = $749 & $748;
      $$neg151$i = $750 << 31 >> 31;
      $751 = (($747) + ($$neg151$i))|0;
      $752 = $z$3$lcssa$i;
      $753 = (($752) - ($636))|0;
      $754 = $753 >> 2;
      $755 = ($754*9)|0;
      $756 = (($755) + -9)|0;
      $757 = ($751|0)<($756|0);
      if ($757) {
       $758 = (($751) + 9216)|0;
       $759 = (($758|0) / 9)&-1;
       $$sum$i = (($759) + -1023)|0;
       $760 = (($$31$i) + ($$sum$i<<2)|0);
       $761 = (($758|0) % 9)&-1;
       $j$0221$i = (($761) + 1)|0;
       $762 = ($j$0221$i|0)<(9);
       if ($762) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $763 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $763;
          break;
         } else {
          $i$1222$i = $763;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $764 = HEAP32[$760>>2]|0;
       $765 = (($764>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $766 = ($765|0)==(0);
       if ($766) {
        $$sum15$i = (($759) + -1022)|0;
        $767 = (($$31$i) + ($$sum15$i<<2)|0);
        $768 = ($767|0)==($z$3$lcssa$i|0);
        if ($768) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $769 = (($764>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $770 = $769 & 1;
         $771 = ($770|0)==(0);
         $$20$i = $771 ? 9007199254740992.0 : 9007199254740994.0;
         $772 = (($i$1$lcssa$i|0) / 2)&-1;
         $773 = ($765>>>0)<($772>>>0);
         do {
          if ($773) {
           $small$0$i = 0.5;
          } else {
           $774 = ($765|0)==($772|0);
           if ($774) {
            $$sum16$i = (($759) + -1022)|0;
            $775 = (($$31$i) + ($$sum16$i<<2)|0);
            $776 = ($775|0)==($z$3$lcssa$i|0);
            if ($776) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $777 = ($pl$0$i|0)==(0);
         do {
          if ($777) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $778 = HEAP8[$prefix$0$i>>0]|0;
           $779 = ($778<<24>>24)==(45);
           if (!($779)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $780 = -$$20$i;
           $781 = -$small$0$i;
           $round6$1$i = $780;$small$1$i = $781;
          }
         } while(0);
         $782 = (($764) - ($765))|0;
         HEAP32[$760>>2] = $782;
         $783 = $round6$1$i + $small$1$i;
         $784 = $783 != $round6$1$i;
         if (!($784)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
          break;
         }
         $785 = (($782) + ($i$1$lcssa$i))|0;
         HEAP32[$760>>2] = $785;
         $786 = ($785>>>0)>(999999999);
         if ($786) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $760;
          while(1) {
           $787 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $788 = ($787>>>0)<($a$5215$i>>>0);
           if ($788) {
            $789 = ((($a$5215$i)) + -4|0);
            HEAP32[$789>>2] = 0;
            $a$6$i = $789;
           } else {
            $a$6$i = $a$5215$i;
           }
           $790 = HEAP32[$787>>2]|0;
           $791 = (($790) + 1)|0;
           HEAP32[$787>>2] = $791;
           $792 = ($791>>>0)>(999999999);
           if ($792) {
            $a$5215$i = $a$6$i;$d$2214$i = $787;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $787;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $760;
         }
         $793 = $a$5$lcssa$i;
         $794 = (($636) - ($793))|0;
         $795 = $794 >> 2;
         $796 = ($795*9)|0;
         $797 = HEAP32[$a$5$lcssa$i>>2]|0;
         $798 = ($797>>>0)<(10);
         if ($798) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
          break;
         } else {
          $e$2210$i = $796;$i$2209$i = 10;
         }
         while(1) {
          $799 = ($i$2209$i*10)|0;
          $800 = (($e$2210$i) + 1)|0;
          $801 = ($797>>>0)<($799>>>0);
          if ($801) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $800;
           break;
          } else {
           $e$2210$i = $800;$i$2209$i = $799;
          }
         }
        }
       } while(0);
       $802 = ((($d$3$i)) + 4|0);
       $803 = ($z$3$lcssa$i>>>0)>($802>>>0);
       $$z$3$i = $803 ? $802 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $804 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $805 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($805)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $806 = ((($z$6$i)) + -4|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        $z$6$i = $806;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($748) {
        $809 = $749&1;
        $810 = $809 ^ 1;
        $$p$$i = (($810) + ($$p$i))|0;
        $811 = ($$p$$i|0)>($e$4$ph$i|0);
        $812 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $811 & $812;
        if ($or$cond6$i) {
         $813 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $814 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $813;$$210$i = $814;
        } else {
         $815 = (($t$0) + -2)|0;
         $816 = (($$p$$i) + -1)|0;
         $$013$i = $815;$$210$i = $816;
        }
        $817 = $fl$1$ & 8;
        $818 = ($817|0)==(0);
        if (!($818)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $817;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $819 = ((($z$6$i$lcssa)) + -4|0);
          $820 = HEAP32[$819>>2]|0;
          $821 = ($820|0)==(0);
          if ($821) {
           $j$2$i = 9;
           break;
          }
          $822 = (($820>>>0) % 10)&-1;
          $823 = ($822|0)==(0);
          if ($823) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $824 = ($i$3205$i*10)|0;
           $825 = (($j$1206$i) + 1)|0;
           $826 = (($820>>>0) % ($824>>>0))&-1;
           $827 = ($826|0)==(0);
           if ($827) {
            $i$3205$i = $824;$j$1206$i = $825;
           } else {
            $j$2$i = $825;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $828 = $$013$i | 32;
        $829 = ($828|0)==(102);
        $830 = $z$6$i$lcssa;
        $831 = (($830) - ($636))|0;
        $832 = $831 >> 2;
        $833 = ($832*9)|0;
        $834 = (($833) + -9)|0;
        if ($829) {
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$21$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $837 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $838 = (($834) + ($e$4$ph$i))|0;
         $839 = (($838) - ($j$2$i))|0;
         $840 = ($839|0)<(0);
         $$23$i = $840 ? 0 : $839;
         $841 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $841 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $842 = $$311$i | $$pre$phi302$iZ2D;
      $843 = ($842|0)!=(0);
      $844 = $843&1;
      $845 = $$114$i | 32;
      $846 = ($845|0)==(102);
      if ($846) {
       $847 = ($e$4$ph$i|0)>(0);
       $848 = $847 ? $e$4$ph$i : 0;
       $$pn$i = $848;$estr$2$i = 0;
      } else {
       $849 = ($e$4$ph$i|0)<(0);
       $850 = $849 ? $804 : $e$4$ph$i;
       $851 = ($850|0)<(0);
       if ($851) {
        $852 = ($850|0)<(0);
        $853 = $852 << 31 >> 31;
        $$05$i79$i = $7;$854 = $850;$855 = $853;
        while(1) {
         $856 = (___uremdi3(($854|0),($855|0),10,0)|0);
         $857 = tempRet0;
         $858 = $856 | 48;
         $859 = $858&255;
         $860 = ((($$05$i79$i)) + -1|0);
         HEAP8[$860>>0] = $859;
         $861 = (___udivdi3(($854|0),($855|0),10,0)|0);
         $862 = tempRet0;
         $863 = ($855>>>0)>(9);
         $864 = ($854>>>0)>(4294967295);
         $865 = ($855|0)==(9);
         $866 = $865 & $864;
         $867 = $863 | $866;
         if ($867) {
          $$05$i79$i = $860;$854 = $861;$855 = $862;
         } else {
          $$lcssa470 = $860;$1185 = $861;$1186 = $862;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa470;$$01$lcssa$off0$i85$i = $1185;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $850;
       }
       $868 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($868) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $869 = (($y$03$i86$i>>>0) % 10)&-1;
         $870 = $869 | 48;
         $871 = $870&255;
         $872 = ((($$12$i87$i)) + -1|0);
         HEAP8[$872>>0] = $871;
         $873 = (($y$03$i86$i>>>0) / 10)&-1;
         $874 = ($y$03$i86$i>>>0)<(10);
         if ($874) {
          $estr$1$ph$i = $872;
          break;
         } else {
          $$12$i87$i = $872;$y$03$i86$i = $873;
         }
        }
       }
       $875 = $estr$1$ph$i;
       $876 = (($9) - ($875))|0;
       $877 = ($876|0)<(2);
       if ($877) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $878 = ((($estr$1201$i)) + -1|0);
         HEAP8[$878>>0] = 48;
         $879 = $878;
         $880 = (($9) - ($879))|0;
         $881 = ($880|0)<(2);
         if ($881) {
          $estr$1201$i = $878;
         } else {
          $estr$1$lcssa$i = $878;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $882 = $e$4$ph$i >> 31;
       $883 = $882 & 2;
       $884 = (($883) + 43)|0;
       $885 = $884&255;
       $886 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$886>>0] = $885;
       $887 = $$114$i&255;
       $888 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$888>>0] = $887;
       $889 = $888;
       $890 = (($9) - ($889))|0;
       $$pn$i = $890;$estr$2$i = $888;
      }
      $891 = (($pl$0$i) + 1)|0;
      $892 = (($891) + ($$311$i))|0;
      $l$1$i = (($892) + ($844))|0;
      $893 = (($l$1$i) + ($$pn$i))|0;
      $894 = $fl$1$ & 73728;
      $895 = ($894|0)==(0);
      $896 = ($w$1|0)>($893|0);
      $or$cond$i93$i = $895 & $896;
      if ($or$cond$i93$i) {
       $897 = (($w$1) - ($893))|0;
       $898 = ($897>>>0)>(256);
       $899 = $898 ? 256 : $897;
       _memset(($pad$i|0),32,($899|0))|0;
       $900 = ($897>>>0)>(255);
       if ($900) {
        $$01$i95$i = $897;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $901 = (($$01$i95$i) + -256)|0;
         $902 = ($901>>>0)>(255);
         if ($902) {
          $$01$i95$i = $901;
         } else {
          break;
         }
        }
        $903 = $897 & 255;
        $$0$lcssa$i97$i = $903;
       } else {
        $$0$lcssa$i97$i = $897;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $904 = ($894|0)==(65536);
      $or$cond$i100$i = $904 & $896;
      if ($or$cond$i100$i) {
       $905 = (($w$1) - ($893))|0;
       $906 = ($905>>>0)>(256);
       $907 = $906 ? 256 : $905;
       _memset(($pad$i|0),48,($907|0))|0;
       $908 = ($905>>>0)>(255);
       if ($908) {
        $$01$i102$i = $905;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $909 = (($$01$i102$i) + -256)|0;
         $910 = ($909>>>0)>(255);
         if ($910) {
          $$01$i102$i = $909;
         } else {
          break;
         }
        }
        $911 = $905 & 255;
        $$0$lcssa$i104$i = $911;
       } else {
        $$0$lcssa$i104$i = $905;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($846) {
       $912 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $912 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $913 = HEAP32[$d$4191$i>>2]|0;
        $914 = ($913|0)==(0);
        if ($914) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $913;
         while(1) {
          $915 = (($y$03$i109$i>>>0) % 10)&-1;
          $916 = $915 | 48;
          $917 = $916&255;
          $918 = ((($$12$i110$i)) + -1|0);
          HEAP8[$918>>0] = $917;
          $919 = (($y$03$i109$i>>>0) / 10)&-1;
          $920 = ($y$03$i109$i>>>0)<(10);
          if ($920) {
           $$1$lcssa$i112$i = $918;
           break;
          } else {
           $$12$i110$i = $918;$y$03$i109$i = $919;
          }
         }
        }
        $921 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($921) {
          $925 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($925)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $922 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($922) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $923 = ((($s7$0188$i)) + -1|0);
           HEAP8[$923>>0] = 48;
           $924 = ($923>>>0)>($buf$i>>>0);
           if ($924) {
            $s7$0188$i = $923;
           } else {
            $s7$1$i = $923;
            break;
           }
          }
         }
        } while(0);
        $926 = $s7$1$i;
        $927 = (($15) - ($926))|0;
        (___fwritex($s7$1$i,$927,$f)|0);
        $928 = ((($d$4191$i)) + 4|0);
        $929 = ($928>>>0)>($$31$i>>>0);
        if ($929) {
         $$lcssa479 = $928;
         break;
        } else {
         $d$4191$i = $928;
        }
       }
       $930 = ($842|0)==(0);
       if (!($930)) {
        (___fwritex(29024,1,$f)|0);
       }
       $931 = ($$lcssa479>>>0)<($z$6$i$lcssa>>>0);
       $932 = ($$311$i|0)>(0);
       $933 = $932 & $931;
       if ($933) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa479;
        while(1) {
         $934 = HEAP32[$d$5183$i>>2]|0;
         $935 = ($934|0)==(0);
         if ($935) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $934;
          while(1) {
           $936 = (($y$03$i118$i>>>0) % 10)&-1;
           $937 = $936 | 48;
           $938 = $937&255;
           $939 = ((($$12$i119$i)) + -1|0);
           HEAP8[$939>>0] = $938;
           $940 = (($y$03$i118$i>>>0) / 10)&-1;
           $941 = ($y$03$i118$i>>>0)<(10);
           if ($941) {
            $$lcssa480 = $939;
            break;
           } else {
            $$12$i119$i = $939;$y$03$i118$i = $940;
           }
          }
          $942 = ($$lcssa480>>>0)>($buf$i>>>0);
          if ($942) {
           $s8$0180$i = $$lcssa480;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa480;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $943 = ((($s8$0180$i)) + -1|0);
           HEAP8[$943>>0] = 48;
           $944 = ($943>>>0)>($buf$i>>>0);
           if ($944) {
            $s8$0180$i = $943;
            label = 289;
           } else {
            $s8$0$lcssa$i = $943;
            break;
           }
          }
         }
         $945 = ($$412184$i|0)>(9);
         $946 = $945 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$946,$f)|0);
         $947 = ((($d$5183$i)) + 4|0);
         $948 = (($$412184$i) + -9)|0;
         $949 = ($947>>>0)<($z$6$i$lcssa>>>0);
         $950 = $945 & $949;
         if ($950) {
          $$412184$i = $948;$d$5183$i = $947;
         } else {
          $$412$lcssa$i = $948;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $951 = ($$412$lcssa$i|0)>(0);
       if ($951) {
        $952 = ($$412$lcssa$i>>>0)>(256);
        $953 = $952 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($953|0))|0;
        $954 = ($$412$lcssa$i>>>0)>(255);
        if ($954) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $955 = (($$01$i126$i) + -256)|0;
          $956 = ($955>>>0)>(255);
          if ($956) {
           $$01$i126$i = $955;
          } else {
           break;
          }
         }
         $957 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $957;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $958 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $958;
       $959 = ($$311$i|0)>(-1);
       do {
        if ($959) {
         $960 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $961 = HEAP32[$d$6195$i>>2]|0;
          $962 = ($961|0)==(0);
          if ($962) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $961;
           while(1) {
            $963 = (($y$03$i133$i>>>0) % 10)&-1;
            $964 = $963 | 48;
            $965 = $964&255;
            $966 = ((($$12$i134$i)) + -1|0);
            HEAP8[$966>>0] = $965;
            $967 = (($y$03$i133$i>>>0) / 10)&-1;
            $968 = ($y$03$i133$i>>>0)<(10);
            if ($968) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa474 = $966;
             break;
            } else {
             $$12$i134$i = $966;$y$03$i133$i = $967;
            }
           }
           $969 = ($$lcssa474|0)==($14|0);
           if ($969) {
            label = 303;
           } else {
            $1187 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa474;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1187 = $14;$s9$0$i = $16;
          }
          $970 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($970) {
            (___fwritex($s9$0$i,1,$f)|0);
            $974 = ($$5196$i|0)<(1);
            $or$cond29$i = $960 & $974;
            if ($or$cond29$i) {
             $s9$2$i = $1187;
             break;
            }
            (___fwritex(29024,1,$f)|0);
            $s9$2$i = $1187;
           } else {
            $971 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($971) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $972 = ((($s9$1192$i)) + -1|0);
             HEAP8[$972>>0] = 48;
             $973 = ($972>>>0)>($buf$i>>>0);
             if ($973) {
              $s9$1192$i = $972;
             } else {
              $s9$2$i = $972;
              break;
             }
            }
           }
          } while(0);
          $975 = $s9$2$i;
          $976 = (($15) - ($975))|0;
          $977 = ($$5196$i|0)>($976|0);
          $978 = $977 ? $976 : $$5196$i;
          (___fwritex($s9$2$i,$978,$f)|0);
          $979 = (($$5196$i) - ($976))|0;
          $980 = ((($d$6195$i)) + 4|0);
          $981 = ($980>>>0)<($z$6$$i>>>0);
          $982 = ($979|0)>(-1);
          $983 = $981 & $982;
          if ($983) {
           $$5196$i = $979;$d$6195$i = $980;
          } else {
           $$lcssa476 = $979;
           break;
          }
         }
         $984 = ($$lcssa476|0)>(0);
         if (!($984)) {
          break;
         }
         $985 = ($$lcssa476>>>0)>(256);
         $986 = $985 ? 256 : $$lcssa476;
         _memset(($pad$i|0),48,($986|0))|0;
         $987 = ($$lcssa476>>>0)>(255);
         if ($987) {
          $$01$i141$i = $$lcssa476;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $988 = (($$01$i141$i) + -256)|0;
           $989 = ($988>>>0)>(255);
           if ($989) {
            $$01$i141$i = $988;
           } else {
            break;
           }
          }
          $990 = $$lcssa476 & 255;
          $$0$lcssa$i143$i = $990;
         } else {
          $$0$lcssa$i143$i = $$lcssa476;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $991 = $estr$2$i;
       $992 = (($9) - ($991))|0;
       (___fwritex($estr$2$i,$992,$f)|0);
      }
      $993 = ($894|0)==(8192);
      $or$cond$i$i = $993 & $896;
      if ($or$cond$i$i) {
       $994 = (($w$1) - ($893))|0;
       $995 = ($994>>>0)>(256);
       $996 = $995 ? 256 : $994;
       _memset(($pad$i|0),32,($996|0))|0;
       $997 = ($994>>>0)>(255);
       if ($997) {
        $$01$i$i = $994;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $998 = (($$01$i$i) + -256)|0;
         $999 = ($998>>>0)>(255);
         if ($999) {
          $$01$i$i = $998;
         } else {
          break;
         }
        }
        $1000 = $994 & 255;
        $$0$lcssa$i$i = $1000;
       } else {
        $$0$lcssa$i$i = $994;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $896 ? $w$1 : $893;
      $$0$i = $w$30$i;
     } else {
      $445 = $t$0 & 32;
      $446 = ($445|0)!=(0);
      $447 = $446 ? 28992 : 29000;
      $448 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $449 = $446 ? 29008 : 29016;
      $pl$1$i = $448 ? 0 : $pl$0$i;
      $s1$0$i = $448 ? $449 : $447;
      $450 = (($pl$1$i) + 3)|0;
      $451 = $fl$1$ & 8192;
      $452 = ($451|0)==(0);
      $453 = ($w$1|0)>($450|0);
      $or$cond$i35$i = $452 & $453;
      if ($or$cond$i35$i) {
       $454 = (($w$1) - ($450))|0;
       $455 = ($454>>>0)>(256);
       $456 = $455 ? 256 : $454;
       _memset(($pad$i|0),32,($456|0))|0;
       $457 = ($454>>>0)>(255);
       if ($457) {
        $$01$i37$i = $454;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $458 = (($$01$i37$i) + -256)|0;
         $459 = ($458>>>0)>(255);
         if ($459) {
          $$01$i37$i = $458;
         } else {
          break;
         }
        }
        $460 = $454 & 255;
        $$0$lcssa$i39$i = $460;
       } else {
        $$0$lcssa$i39$i = $454;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $461 = $fl$1$ & 73728;
      $462 = ($461|0)==(8192);
      $or$cond$i42$i = $462 & $453;
      if ($or$cond$i42$i) {
       $463 = (($w$1) - ($450))|0;
       $464 = ($463>>>0)>(256);
       $465 = $464 ? 256 : $463;
       _memset(($pad$i|0),32,($465|0))|0;
       $466 = ($463>>>0)>(255);
       if ($466) {
        $$01$i44$i = $463;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $467 = (($$01$i44$i) + -256)|0;
         $468 = ($467>>>0)>(255);
         if ($468) {
          $$01$i44$i = $467;
         } else {
          break;
         }
        }
        $469 = $463 & 255;
        $$0$lcssa$i46$i = $469;
       } else {
        $$0$lcssa$i46$i = $463;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $470 = $453 ? $w$1 : $450;
      $$0$i = $470;
     }
    } while(0);
    $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1175 = $291;$1176 = $264;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 28944;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   $290 = ($264|0)==(0);
   $292 = ($291|0)==(0);
   $293 = $290 & $292;
   if ($293) {
    $366 = $264;$368 = $291;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 28944;
    label = 89;
   } else {
    $$012$i = $2;$295 = $264;$302 = $291;
    while(1) {
     $294 = $295 & 15;
     $296 = (28928 + ($294)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $298 | $289;
     $300 = $299&255;
     $301 = ((($$012$i)) + -1|0);
     HEAP8[$301>>0] = $300;
     $303 = (_bitshift64Lshr(($295|0),($302|0),4)|0);
     $304 = tempRet0;
     $305 = ($303|0)==(0);
     $306 = ($304|0)==(0);
     $307 = $305 & $306;
     if ($307) {
      $$lcssa491 = $301;
      break;
     } else {
      $$012$i = $301;$295 = $303;$302 = $304;
     }
    }
    $308 = $fl$3 & 8;
    $309 = ($308|0)==(0);
    if ($309) {
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 28944;
     label = 89;
    } else {
     $310 = $t$1 >> 4;
     $311 = (28944 + ($310)|0);
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $311;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $337 = ($336>>>0)>(0);
   $339 = ($338>>>0)>(4294967295);
   $340 = ($336|0)==(0);
   $341 = $340 & $339;
   $342 = $337 | $341;
   if ($342) {
    $$05$i = $2;$343 = $338;$344 = $336;
    while(1) {
     $345 = (___uremdi3(($343|0),($344|0),10,0)|0);
     $346 = tempRet0;
     $347 = $345 | 48;
     $348 = $347&255;
     $349 = ((($$05$i)) + -1|0);
     HEAP8[$349>>0] = $348;
     $350 = (___udivdi3(($343|0),($344|0),10,0)|0);
     $351 = tempRet0;
     $352 = ($344>>>0)>(9);
     $353 = ($343>>>0)>(4294967295);
     $354 = ($344|0)==(9);
     $355 = $354 & $353;
     $356 = $352 | $355;
     if ($356) {
      $$05$i = $349;$343 = $350;$344 = $351;
     } else {
      $$lcssa487 = $349;$1177 = $350;$1178 = $351;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;$$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $338;
   }
   $357 = ($$01$lcssa$off0$i|0)==(0);
   if ($357) {
    $366 = $338;$368 = $336;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $358 = (($y$03$i>>>0) % 10)&-1;
     $359 = $358 | 48;
     $360 = $359&255;
     $361 = ((($$12$i)) + -1|0);
     HEAP8[$361>>0] = $360;
     $362 = (($y$03$i>>>0) / 10)&-1;
     $363 = ($y$03$i>>>0)<(10);
     if ($363) {
      $366 = $338;$368 = $336;$a$0 = $361;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;$y$03$i = $362;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $385 = (_memchr($a$1,0,$p$0)|0);
   $386 = ($385|0)==(0|0);
   $387 = $385;
   $388 = $a$1;
   $389 = (($387) - ($388))|0;
   $390 = (($a$1) + ($p$0)|0);
   $z$1 = $386 ? $390 : $385;
   $p$3 = $386 ? $p$0 : $389;
   $1175 = $291;$1176 = $264;$a$2 = $a$1;$fl$6 = $263;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 28944;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1179;
   while(1) {
    $393 = HEAP32[$ws$0176>>2]|0;
    $394 = ($393|0)==(0);
    if ($394) {
     $i$0$lcssa = $i$0175;$l$2 = $l$1174;
     break;
    }
    $395 = (_wctomb($mb,$393)|0);
    $396 = ($395|0)<(0);
    $397 = (($p$4272) - ($i$0175))|0;
    $398 = ($395>>>0)>($397>>>0);
    $or$cond22 = $396 | $398;
    if ($or$cond22) {
     $i$0$lcssa = $i$0175;$l$2 = $395;
     break;
    }
    $399 = ((($ws$0176)) + 4|0);
    $400 = (($395) + ($i$0175))|0;
    $401 = ($p$4272>>>0)>($400>>>0);
    if ($401) {
     $i$0175 = $400;$l$1174 = $395;$ws$0176 = $399;
    } else {
     $i$0$lcssa = $400;$l$2 = $395;
     break;
    }
   }
   $402 = ($l$2|0)<(0);
   if ($402) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;$1182 = $1179;$i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $364 = ($p$2|0)>(-1);
   $365 = $fl$4 & -65537;
   $$fl$4 = $364 ? $365 : $fl$4;
   $367 = ($366|0)!=(0);
   $369 = ($368|0)!=(0);
   $370 = $367 | $369;
   $371 = ($p$2|0)!=(0);
   $or$cond = $370 | $371;
   if ($or$cond) {
    $372 = $a$0;
    $373 = (($3) - ($372))|0;
    $374 = $370&1;
    $375 = $374 ^ 1;
    $376 = (($375) + ($373))|0;
    $377 = ($p$2|0)>($376|0);
    $p$2$ = $377 ? $p$2 : $376;
    $1175 = $368;$1176 = $366;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1175 = $368;$1176 = $366;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $404 = ($403|0)==(0);
   $405 = ($w$1|0)>($i$0$lcssa273|0);
   $or$cond$i64 = $404 & $405;
   if ($or$cond$i64) {
    $406 = (($w$1) - ($i$0$lcssa273))|0;
    $407 = ($406>>>0)>(256);
    $408 = $407 ? 256 : $406;
    _memset(($pad$i|0),32,($408|0))|0;
    $409 = ($406>>>0)>(255);
    if ($409) {
     $$01$i66 = $406;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $410 = (($$01$i66) + -256)|0;
      $411 = ($410>>>0)>(255);
      if ($411) {
       $$01$i66 = $410;
      } else {
       break;
      }
     }
     $412 = $406 & 255;
     $$0$lcssa$i68 = $412;
    } else {
     $$0$lcssa$i68 = $406;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $413 = ($i$0$lcssa273|0)==(0);
   L465: do {
    if (!($413)) {
     $i$1186 = 0;$ws$1187 = $1182;
     while(1) {
      $414 = HEAP32[$ws$1187>>2]|0;
      $415 = ($414|0)==(0);
      if ($415) {
       break L465;
      }
      $416 = (_wctomb($mb,$414)|0);
      $417 = (($416) + ($i$1186))|0;
      $418 = ($417|0)>($i$0$lcssa273|0);
      if ($418) {
       break L465;
      }
      $419 = ((($ws$1187)) + 4|0);
      (___fwritex($mb,$416,$f)|0);
      $420 = ($417>>>0)<($i$0$lcssa273>>>0);
      if ($420) {
       $i$1186 = $417;$ws$1187 = $419;
      } else {
       break;
      }
     }
    }
   } while(0);
   $421 = ($403|0)==(8192);
   $or$cond$i71 = $421 & $405;
   if ($or$cond$i71) {
    $422 = (($w$1) - ($i$0$lcssa273))|0;
    $423 = ($422>>>0)>(256);
    $424 = $423 ? 256 : $422;
    _memset(($pad$i|0),32,($424|0))|0;
    $425 = ($422>>>0)>(255);
    if ($425) {
     $$01$i73 = $422;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $426 = (($$01$i73) + -256)|0;
      $427 = ($426>>>0)>(255);
      if ($427) {
       $$01$i73 = $426;
      } else {
       break;
      }
     }
     $428 = $422 & 255;
     $$0$lcssa$i75 = $428;
    } else {
     $$0$lcssa$i75 = $422;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $429 = $405 ? $w$1 : $i$0$lcssa273;
   $1169 = $291;$1170 = $1181;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $429;$l10n$0 = $l10n$3;
   continue;
  }
  $1001 = $z$2;
  $1002 = $a$2;
  $1003 = (($1001) - ($1002))|0;
  $1004 = ($p$5|0)<($1003|0);
  $$p$5 = $1004 ? $1003 : $p$5;
  $1005 = (($pl$2) + ($$p$5))|0;
  $1006 = ($w$1|0)<($1005|0);
  $w$2 = $1006 ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1008 = ($1007|0)==(0);
  $1009 = ($w$2|0)>($1005|0);
  $or$cond$i81 = $1008 & $1009;
  if ($or$cond$i81) {
   $1010 = (($w$2) - ($1005))|0;
   $1011 = ($1010>>>0)>(256);
   $1012 = $1011 ? 256 : $1010;
   _memset(($pad$i|0),32,($1012|0))|0;
   $1013 = ($1010>>>0)>(255);
   if ($1013) {
    $$01$i83 = $1010;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1014 = (($$01$i83) + -256)|0;
     $1015 = ($1014>>>0)>(255);
     if ($1015) {
      $$01$i83 = $1014;
     } else {
      break;
     }
    }
    $1016 = $1010 & 255;
    $$0$lcssa$i85 = $1016;
   } else {
    $$0$lcssa$i85 = $1010;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1017 = ($1007|0)==(65536);
  $or$cond$i57 = $1017 & $1009;
  if ($or$cond$i57) {
   $1018 = (($w$2) - ($1005))|0;
   $1019 = ($1018>>>0)>(256);
   $1020 = $1019 ? 256 : $1018;
   _memset(($pad$i|0),48,($1020|0))|0;
   $1021 = ($1018>>>0)>(255);
   if ($1021) {
    $$01$i59 = $1018;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1022 = (($$01$i59) + -256)|0;
     $1023 = ($1022>>>0)>(255);
     if ($1023) {
      $$01$i59 = $1022;
     } else {
      break;
     }
    }
    $1024 = $1018 & 255;
    $$0$lcssa$i61 = $1024;
   } else {
    $$0$lcssa$i61 = $1018;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1025 = ($$p$5|0)>($1003|0);
  if ($1025) {
   $1026 = (($$p$5) - ($1003))|0;
   $1027 = ($1026>>>0)>(256);
   $1028 = $1027 ? 256 : $1026;
   _memset(($pad$i|0),48,($1028|0))|0;
   $1029 = ($1026>>>0)>(255);
   if ($1029) {
    $$01$i44 = $1026;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1030 = (($$01$i44) + -256)|0;
     $1031 = ($1030>>>0)>(255);
     if ($1031) {
      $$01$i44 = $1030;
     } else {
      break;
     }
    }
    $1032 = $1026 & 255;
    $$0$lcssa$i46 = $1032;
   } else {
    $$0$lcssa$i46 = $1026;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$1003,$f)|0);
  $1033 = ($1007|0)==(8192);
  $or$cond$i = $1033 & $1009;
  if ($or$cond$i) {
   $1034 = (($w$2) - ($1005))|0;
   $1035 = ($1034>>>0)>(256);
   $1036 = $1035 ? 256 : $1034;
   _memset(($pad$i|0),32,($1036|0))|0;
   $1037 = ($1034>>>0)>(255);
   if ($1037) {
    $$01$i = $1034;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1038 = (($$01$i) + -256)|0;
     $1039 = ($1038>>>0)>(255);
     if ($1039) {
      $$01$i = $1038;
     } else {
      break;
     }
    }
    $1040 = $1034 & 255;
    $$0$lcssa$i = $1040;
   } else {
    $$0$lcssa$i = $1034;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1169 = $1175;$1170 = $1176;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1041 = ($f|0)==(0|0);
  if (!($1041)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($l10n$0$lcssa|0)==(0);
  if ($1042) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2162 = 1;
  }
  while(1) {
   $1043 = (($nl_type) + ($i$2162<<2)|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = ($1044|0)==(0);
   if ($1045) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = (($nl_arg) + ($i$2162<<3)|0);
   $1048 = ($1044>>>0)>(20);
   L522: do {
    if (!($1048)) {
     do {
      switch ($1044|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1049 = $arglist_current35;
       $1050 = ((0) + 4|0);
       $expanded148 = $1050;
       $expanded147 = (($expanded148) - 1)|0;
       $1051 = (($1049) + ($expanded147))|0;
       $1052 = ((0) + 4|0);
       $expanded152 = $1052;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1053 = $1051 & $expanded150;
       $1054 = $1053;
       $1055 = HEAP32[$1054>>2]|0;
       $arglist_next36 = ((($1054)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1047>>2] = $1055;
       break L522;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1056 = $arglist_current38;
       $1057 = ((0) + 4|0);
       $expanded155 = $1057;
       $expanded154 = (($expanded155) - 1)|0;
       $1058 = (($1056) + ($expanded154))|0;
       $1059 = ((0) + 4|0);
       $expanded159 = $1059;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1060 = $1058 & $expanded157;
       $1061 = $1060;
       $1062 = HEAP32[$1061>>2]|0;
       $arglist_next39 = ((($1061)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1063 = ($1062|0)<(0);
       $1064 = $1063 << 31 >> 31;
       $1065 = $1047;
       $1066 = $1065;
       HEAP32[$1066>>2] = $1062;
       $1067 = (($1065) + 4)|0;
       $1068 = $1067;
       HEAP32[$1068>>2] = $1064;
       break L522;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1069 = $arglist_current41;
       $1070 = ((0) + 4|0);
       $expanded162 = $1070;
       $expanded161 = (($expanded162) - 1)|0;
       $1071 = (($1069) + ($expanded161))|0;
       $1072 = ((0) + 4|0);
       $expanded166 = $1072;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1073 = $1071 & $expanded164;
       $1074 = $1073;
       $1075 = HEAP32[$1074>>2]|0;
       $arglist_next42 = ((($1074)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1076 = $1047;
       $1077 = $1076;
       HEAP32[$1077>>2] = $1075;
       $1078 = (($1076) + 4)|0;
       $1079 = $1078;
       HEAP32[$1079>>2] = 0;
       break L522;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1080 = $arglist_current44;
       $1081 = ((0) + 8|0);
       $expanded169 = $1081;
       $expanded168 = (($expanded169) - 1)|0;
       $1082 = (($1080) + ($expanded168))|0;
       $1083 = ((0) + 8|0);
       $expanded173 = $1083;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1084 = $1082 & $expanded171;
       $1085 = $1084;
       $1086 = $1085;
       $1087 = $1086;
       $1088 = HEAP32[$1087>>2]|0;
       $1089 = (($1086) + 4)|0;
       $1090 = $1089;
       $1091 = HEAP32[$1090>>2]|0;
       $arglist_next45 = ((($1085)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1092 = $1047;
       $1093 = $1092;
       HEAP32[$1093>>2] = $1088;
       $1094 = (($1092) + 4)|0;
       $1095 = $1094;
       HEAP32[$1095>>2] = $1091;
       break L522;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1096 = $arglist_current47;
       $1097 = ((0) + 4|0);
       $expanded176 = $1097;
       $expanded175 = (($expanded176) - 1)|0;
       $1098 = (($1096) + ($expanded175))|0;
       $1099 = ((0) + 4|0);
       $expanded180 = $1099;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1100 = $1098 & $expanded178;
       $1101 = $1100;
       $1102 = HEAP32[$1101>>2]|0;
       $arglist_next48 = ((($1101)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1103 = $1102&65535;
       $1104 = $1103 << 16 >> 16;
       $1105 = ($1104|0)<(0);
       $1106 = $1105 << 31 >> 31;
       $1107 = $1047;
       $1108 = $1107;
       HEAP32[$1108>>2] = $1104;
       $1109 = (($1107) + 4)|0;
       $1110 = $1109;
       HEAP32[$1110>>2] = $1106;
       break L522;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1111 = $arglist_current50;
       $1112 = ((0) + 4|0);
       $expanded183 = $1112;
       $expanded182 = (($expanded183) - 1)|0;
       $1113 = (($1111) + ($expanded182))|0;
       $1114 = ((0) + 4|0);
       $expanded187 = $1114;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1115 = $1113 & $expanded185;
       $1116 = $1115;
       $1117 = HEAP32[$1116>>2]|0;
       $arglist_next51 = ((($1116)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1117 & 65535;
       $1118 = $1047;
       $1119 = $1118;
       HEAP32[$1119>>2] = $$mask1$i;
       $1120 = (($1118) + 4)|0;
       $1121 = $1120;
       HEAP32[$1121>>2] = 0;
       break L522;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1122 = $arglist_current53;
       $1123 = ((0) + 4|0);
       $expanded190 = $1123;
       $expanded189 = (($expanded190) - 1)|0;
       $1124 = (($1122) + ($expanded189))|0;
       $1125 = ((0) + 4|0);
       $expanded194 = $1125;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1126 = $1124 & $expanded192;
       $1127 = $1126;
       $1128 = HEAP32[$1127>>2]|0;
       $arglist_next54 = ((($1127)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1129 = $1128&255;
       $1130 = $1129 << 24 >> 24;
       $1131 = ($1130|0)<(0);
       $1132 = $1131 << 31 >> 31;
       $1133 = $1047;
       $1134 = $1133;
       HEAP32[$1134>>2] = $1130;
       $1135 = (($1133) + 4)|0;
       $1136 = $1135;
       HEAP32[$1136>>2] = $1132;
       break L522;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1137 = $arglist_current56;
       $1138 = ((0) + 4|0);
       $expanded197 = $1138;
       $expanded196 = (($expanded197) - 1)|0;
       $1139 = (($1137) + ($expanded196))|0;
       $1140 = ((0) + 4|0);
       $expanded201 = $1140;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1141 = $1139 & $expanded199;
       $1142 = $1141;
       $1143 = HEAP32[$1142>>2]|0;
       $arglist_next57 = ((($1142)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1143 & 255;
       $1144 = $1047;
       $1145 = $1144;
       HEAP32[$1145>>2] = $$mask$i;
       $1146 = (($1144) + 4)|0;
       $1147 = $1146;
       HEAP32[$1147>>2] = 0;
       break L522;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1148 = $arglist_current59;
       $1149 = ((0) + 8|0);
       $expanded204 = $1149;
       $expanded203 = (($expanded204) - 1)|0;
       $1150 = (($1148) + ($expanded203))|0;
       $1151 = ((0) + 8|0);
       $expanded208 = $1151;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1152 = $1150 & $expanded206;
       $1153 = $1152;
       $1154 = +HEAPF64[$1153>>3];
       $arglist_next60 = ((($1153)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1047>>3] = $1154;
       break L522;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1155 = $arglist_current62;
       $1156 = ((0) + 8|0);
       $expanded211 = $1156;
       $expanded210 = (($expanded211) - 1)|0;
       $1157 = (($1155) + ($expanded210))|0;
       $1158 = ((0) + 8|0);
       $expanded215 = $1158;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1159 = $1157 & $expanded213;
       $1160 = $1159;
       $1161 = +HEAPF64[$1160>>3];
       $arglist_next63 = ((($1160)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1047>>3] = $1161;
       break L522;
       break;
      }
      default: {
       break L522;
      }
      }
     } while(0);
    }
   } while(0);
   $1162 = (($i$2162) + 1)|0;
   $1163 = ($1162|0)<(10);
   if ($1163) {
    $i$2162 = $1162;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1046 = ($i$2162$lcssa|0)<(10);
  if ($1046) {
   $i$3160 = $i$2162$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1166 = (($nl_type) + ($i$3160<<2)|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = ($1167|0)==(0);
   $1164 = (($i$3160) + 1)|0;
   if (!($1168)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1165 = ($1164|0)<(10);
   if ($1165) {
    $i$3160 = $1164;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[29032>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (29072 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (29072 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[29032>>2] = $22;
     } else {
      $23 = HEAP32[(29048)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(29040)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (29072 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (29072 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[29032>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(29048)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(29040)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(29052)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (29072 + ($92<<2)|0);
      $94 = HEAP32[29032>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[29032>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (29072 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (29072 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(29048)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(29040)>>2] = $81;
     HEAP32[(29052)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(29036)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (29336 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(29048)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (29336 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(29036)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(29036)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(29048)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(29048)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(29048)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(29040)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(29052)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (29072 + ($229<<2)|0);
       $231 = HEAP32[29032>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[29032>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (29072 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (29072 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(29048)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(29040)>>2] = $rsize$0$i$lcssa;
      HEAP32[(29052)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(29036)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (29336 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (29336 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(29040)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(29048)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (29336 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(29036)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(29036)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(29048)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(29048)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(29048)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L85: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (29072 + ($424<<2)|0);
          $426 = HEAP32[29032>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[29032>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (29072 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (29072 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(29048)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (29336 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(29036)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(29036)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L103: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L103;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(29048)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L85;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(29048)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(29040)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(29052)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(29052)>>2] = $514;
   HEAP32[(29040)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(29040)>>2] = 0;
   HEAP32[(29052)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(29044)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(29044)>>2] = $528;
  $529 = HEAP32[(29056)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(29056)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[29504>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(29512)>>2] = $538;
    HEAP32[(29508)>>2] = $538;
    HEAP32[(29516)>>2] = -1;
    HEAP32[(29520)>>2] = -1;
    HEAP32[(29524)>>2] = 0;
    HEAP32[(29476)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[29504>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(29512)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(29472)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(29464)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(29476)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(29056)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (29480);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(29044)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(29508)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(29464)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(29472)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(29512)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(29476)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(29476)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(29464)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(29464)>>2] = $632;
  $633 = HEAP32[(29468)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(29468)>>2] = $632;
  }
  $635 = HEAP32[(29056)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(29048)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(29048)>>2] = $tbase$255$i;
    }
    HEAP32[(29480)>>2] = $tbase$255$i;
    HEAP32[(29484)>>2] = $tsize$254$i;
    HEAP32[(29492)>>2] = 0;
    $640 = HEAP32[29504>>2]|0;
    HEAP32[(29068)>>2] = $640;
    HEAP32[(29064)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (29072 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (29072 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (29072 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(29056)>>2] = $654;
    HEAP32[(29044)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(29520)>>2]|0;
    HEAP32[(29060)>>2] = $659;
   } else {
    $sp$084$i = (29480);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(29044)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(29056)>>2] = $684;
       HEAP32[(29044)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(29520)>>2]|0;
       HEAP32[(29060)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(29048)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(29048)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (29480);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (29480);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(29044)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(29044)>>2] = $730;
        HEAP32[(29056)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(29052)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(29040)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(29040)>>2] = $736;
         HEAP32[(29052)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (29072 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[29032>>2]|0;
            $763 = $762 & $761;
            HEAP32[29032>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (29336 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(29036)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(29036)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(29048)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(29048)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(29048)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (29072 + ($840<<2)|0);
         $842 = HEAP32[29032>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[29032>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (29072 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (29072 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(29048)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (29336 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(29036)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(29036)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(29048)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(29048)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (29480);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(29056)>>2] = $953;
    HEAP32[(29044)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(29520)>>2]|0;
    HEAP32[(29060)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(29480)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(29480)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(29480)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(29480)+12>>2]|0;
    HEAP32[(29480)>>2] = $tbase$255$i;
    HEAP32[(29484)>>2] = $tsize$254$i;
    HEAP32[(29492)>>2] = 0;
    HEAP32[(29488)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (29072 + ($977<<2)|0);
      $979 = HEAP32[29032>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[29032>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (29072 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (29072 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(29048)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (29336 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(29036)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(29036)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(29048)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(29048)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(29044)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(29044)>>2] = $1062;
   $1063 = HEAP32[(29056)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(29056)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(29048)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(29052)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(29040)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (29072 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[29032>>2]|0;
     $36 = $35 & $34;
     HEAP32[29032>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (29336 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(29036)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(29036)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(29048)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(29048)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(29048)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(29056)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(29044)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(29044)>>2] = $120;
   HEAP32[(29056)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(29052)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(29052)>>2] = 0;
   HEAP32[(29040)>>2] = 0;
   return;
  }
  $125 = HEAP32[(29052)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(29040)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(29040)>>2] = $128;
   HEAP32[(29052)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (29072 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(29048)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[29032>>2]|0;
     $152 = $151 & $150;
     HEAP32[29032>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(29048)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(29048)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(29048)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (29336 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(29036)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(29036)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(29048)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(29048)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(29048)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(29052)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(29040)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (29072 + ($233<<2)|0);
  $235 = HEAP32[29032>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[29032>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (29072 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (29072 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(29048)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (29336 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(29036)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(29036)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(29048)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(29048)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(29064)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(29064)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (29488);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(29064)>>2] = -1;
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_viidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_viidi[index&0](a1|0,a2|0,+a3,a4|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function b2(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(2); }
function b3(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3); }
function b4() { ; nullFunc_i(4);return 0; }
function b5(p0) { p0 = p0|0; nullFunc_vi(5); }
function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(6); }
function b7(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0; }
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(8); }
function b9(p0) { p0 = p0|0; nullFunc_ii(9);return 0; }
function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(10); }
function b11() { ; nullFunc_v(11); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b12(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_viidi(12); }
function b13(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(13);return 0; }
function b14(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14); }
function b15(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0; }
function b17(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(17); }
function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamjjyRP8AP4_Atom,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN14AP4_AtomParent8AddChildEP8AP4_Atomi,b1,__ZN14AP4_AtomParent11DeleteChildEjj,__ZNK14AP4_AtomParent8GetChildEjj,__ZNK14AP4_AtomParent8GetChildEPKhj,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN13AP4_SubStream4SeekEy,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN20AP4_MemoryByteStream4SeekEy,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_StszAtom13GetSampleSizeEjRj,__ZN12AP4_StszAtom13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_SttsAtom8AddEntryEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN22AP4_StdcFileByteStream4SeekEy,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_Stz2Atom13GetSampleSizeEjRj,__ZN12AP4_Stz2Atom13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,__ZN19AP4_AtomSampleTable9GetSampleEjR10AP4_Sample,b1,b1,b1,b1,__ZN19AP4_AtomSampleTable25GetNearestSyncSampleIndexEjb,b1,__ZN19AP4_AtomSampleTable14GetChunkOffsetEjRy,b1,__ZN19AP4_AtomSampleTable13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_sn_write,b1,b1,b1,b1
,b1,b1,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN14AP4_ByteStream4ReadEPvj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN14AP4_DataBuffer7SetDataEPKhj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_CttsAtom8AddEntryEjj,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN8AP4_AtomC2Ejybhj
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN24AP4_AvcSampleDescriptionC2EjtttPKcP14AP4_AtomParent,__ZN25AP4_HevcSampleDescriptionC2EjtttPKcP14AP4_AtomParent,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN24AP4_AvcSampleDescriptionC2EjtttPKcPK12AP4_AvccAtom,__ZN25AP4_HevcSampleDescriptionC2EjtttPKcPK12AP4_HvccAtom,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZN18AP4_AvcSampleEntryC2EjtttPKcRK12AP4_AvccAtom,b2,__ZN19AP4_HevcSampleEntryC2EjtttPKcRK12AP4_HvccAtom,b2,b2,__ZN27AP4_DecoderConfigDescriptorC2EhhjjjP33AP4_DecoderSpecificInfoDescriptor,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZN8AP4_AtomC2Ejyb,__ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy,b3
,__ZN8AP4_AtomC2Ejjhj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN15AP4_UnknownAtomC2EjyR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,__ZN18AP4_AvcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_HevcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,b3,__ZN23AP4_SubtitleSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,b3,b3,b3,__ZN19AP4_UnknownUuidAtomC2EyPKhR14AP4_ByteStream,__ZN28AP4_NullTerminatedStringAtomC2EjyR14AP4_ByteStream,b3
,b3,b3,b3,b3,b3,b3,__ZN12AP4_SaizAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN11AP4_UrlAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,__ZN12AP4_TrunAtomC2EjhjR14AP4_ByteStream,__ZN20AP4_ObjectDescriptorC2ER14AP4_ByteStreamhjj,__ZN27AP4_InitialObjectDescriptorC2ER14AP4_ByteStreamhjj,b3,b3,b3,b3,b3,b3,b3,b3,__ZN21AP4_UnknownDescriptorC2ER14AP4_ByteStreamhjj,b3
,__ZN12AP4_CttsAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_IkmsAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,__ZN30AP4_MpegAudioSampleDescriptionC2EjttP12AP4_EsdsAtom,b3,b3,b3,b3,b3,b3,__ZN12AP4_SchmAtomC2EjjPKcb,__ZN12AP4_SbgpAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_MvhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_StszAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_StssAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_PdinAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_MkidAtomC2EjhjR14AP4_ByteStream,b3,b3,__ZN12AP4_PsshAtomC2EjhjR14AP4_ByteStream,b3,b3
,__ZN12AP4_SidxAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,__ZN12AP4_TkhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_TfhdAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_StcoAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_GrpiAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_GrpiAtomC2EhPKcPKhj,b3,b3,b3,b3,b3,__ZN12AP4_SttsAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_SgpdAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,__ZN12AP4_ElstAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_MdhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_Stz2AtomC2EjhjR14AP4_ByteStream
,__ZN12AP4_TfraAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_AinfAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_StscAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_SaioAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,__ZN29AP4_SubtitleSampleDescriptionC2EjPKcS1_S1_,b3,b3,b3,__ZN12AP4_HdlrAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3
,__ZN20AP4_AudioSampleEntryC2Ejjtt,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN19AP4_Mp4aSampleEntryC2EjttP16AP4_EsDescriptor,b3,__ZN23AP4_SubtitleSampleEntryC2EjPKcS1_S1_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_i = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,___cxa_get_globals_fast
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,__ZN9AP4_ArrayIjED2Ev,__ZN9AP4_ArrayIjED0Ev,__ZN17AP4_ContainerAtomD2Ev,__ZN17AP4_ContainerAtomD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZThn36_N17AP4_ContainerAtomD1Ev,__ZThn36_N17AP4_ContainerAtomD0Ev,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN8AP4_ListI8AP4_AtomED2Ev,__ZN8AP4_ListI8AP4_AtomED0Ev,__ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev,__ZN21AP4_AtomListInspectorD0Ev,b5,__ZN17AP4_AtomSizeAdderD0Ev,b5,__ZN8AP4_FileD2Ev,__ZN8AP4_FileD0Ev,b5,b5,b5,b5,__ZN8AP4_AtomD2Ev,__ZN12AP4_TrexAtomD0Ev,b5,b5,b5,__ZN13AP4_SubStreamD2Ev,__ZN13AP4_SubStreamD0Ev,__ZN13AP4_SubStream12AddReferenceEv,__ZN13AP4_SubStream7ReleaseEv,b5,b5,b5,b5,b5,b5
,b5,__ZN20AP4_MemoryByteStreamD2Ev,__ZN20AP4_MemoryByteStreamD0Ev,__ZN20AP4_MemoryByteStream12AddReferenceEv,__ZN20AP4_MemoryByteStream7ReleaseEv,b5,b5,b5,b5,b5,__ZN15AP4_AtomFactoryD2Ev,__ZN15AP4_AtomFactoryD0Ev,b5,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED2Ev,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED0Ev,__ZN22AP4_DefaultAtomFactoryD0Ev,__ZN12AP4_SaizAtomD2Ev,__ZN12AP4_SaizAtomD0Ev,b5,b5,__ZN9AP4_ArrayIhED2Ev,__ZN9AP4_ArrayIhED0Ev,__ZN11AP4_UrlAtomD2Ev,__ZN11AP4_UrlAtomD0Ev,b5,b5,__ZN12AP4_SchmAtomD2Ev,__ZN12AP4_SchmAtomD0Ev,b5,b5
,__ZN12AP4_EsdsAtomD2Ev,__ZN12AP4_EsdsAtomD0Ev,b5,b5,__ZN12AP4_TrunAtomD2Ev,__ZN12AP4_TrunAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED0Ev,__ZN12AP4_MoovAtomD2Ev,__ZN12AP4_MoovAtomD0Ev,b5,b5,__ZThn36_N12AP4_MoovAtomD1Ev,__ZThn36_N12AP4_MoovAtomD0Ev,b5,b5,__ZN8AP4_ListI12AP4_TrakAtomED2Ev,__ZN8AP4_ListI12AP4_TrakAtomED0Ev,__ZN21AP4_TrakAtomCollectorD0Ev,b5,__ZN12AP4_SmhdAtomD0Ev,b5,b5,__ZN20AP4_ObjectDescriptorD2Ev,__ZN20AP4_ObjectDescriptorD0Ev,b5,b5,b5
,b5,b5,__ZN27AP4_InitialObjectDescriptorD0Ev,b5,b5,__ZN8AP4_ListI14AP4_DescriptorED2Ev,__ZN8AP4_ListI14AP4_DescriptorED0Ev,__ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD2Ev,__ZN20AP4_DescriptorFinderD0Ev,b5,__ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev,__ZN24AP4_DescriptorListWriterD0Ev,b5,__ZN27AP4_DescriptorListInspectorD0Ev,b5,__ZN11AP4_SdpAtomD2Ev,__ZN11AP4_SdpAtomD0Ev,b5,b5,__ZN12AP4_MfroAtomD0Ev,b5,b5,__ZN14AP4_ExpandableD2Ev,__ZN14AP4_ExpandableD0Ev,b5,b5,__ZN12AP4_CttsAtomD2Ev,__ZN12AP4_CttsAtomD0Ev,b5,b5
,__ZN9AP4_ArrayI18AP4_CttsTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_CttsTableEntryED0Ev,__ZN9AP4_MovieD2Ev,__ZN9AP4_MovieD0Ev,__ZN8AP4_ListI9AP4_TrackED2Ev,__ZN8AP4_ListI9AP4_TrackED0Ev,__ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev,__ZN19AP4_TrackFinderByIdD0Ev,b5,__ZN21AP4_TrackFinderByTypeD0Ev,b5,__ZN12AP4_IkmsAtomD2Ev,__ZN12AP4_IkmsAtomD0Ev,b5,b5,b5,__ZN20AP4_AudioSampleEntryD2Ev,__ZN19AP4_EncaSampleEntryD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZThn36_N19AP4_EncaSampleEntryD1Ev
,__ZThn36_N19AP4_EncaSampleEntryD0Ev,b5,__ZN21AP4_VisualSampleEntryD2Ev,__ZN19AP4_EncvSampleEntryD0Ev,b5,b5,b5,b5,b5,b5,__ZThn36_N19AP4_EncvSampleEntryD1Ev,__ZThn36_N19AP4_EncvSampleEntryD0Ev,__ZN24AP4_ProtectionSchemeInfoD2Ev,__ZN24AP4_ProtectionSchemeInfoD0Ev,__ZN30AP4_ProtectedSampleDescriptionD2Ev,__ZN30AP4_ProtectedSampleDescriptionD0Ev,b5,b5,__ZN26AP4_VideoSampleDescriptionD2Ev,__ZN26AP4_VideoSampleDescriptionD0Ev,__ZN19AP4_DrmsSampleEntryD0Ev,__ZThn36_N19AP4_DrmsSampleEntryD1Ev,__ZThn36_N19AP4_DrmsSampleEntryD0Ev,__ZN19AP4_DrmiSampleEntryD0Ev,__ZThn36_N19AP4_DrmiSampleEntryD1Ev,__ZThn36_N19AP4_DrmiSampleEntryD0Ev,__ZN12AP4_SbgpAtomD2Ev,__ZN12AP4_SbgpAtomD0Ev,b5,b5
,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED0Ev,__ZN12AP4_MvhdAtomD0Ev,b5,b5,__ZN12AP4_StszAtomD2Ev,__ZN12AP4_StszAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZN12AP4_BlocAtomD0Ev,b5,b5,__ZN12AP4_SencAtomD2Ev,__ZN12AP4_SencAtomD0Ev,b5,b5,__ZThn36_N12AP4_SencAtomD1Ev,__ZThn36_N12AP4_SencAtomD0Ev,__ZN24AP4_CencSampleEncryptionD2Ev,__ZN24AP4_CencSampleEncryptionD0Ev,__ZN12AP4_StssAtomD2Ev,__ZN12AP4_StssAtomD0Ev,b5,b5,b5,__ZN12AP4_PdinAtomD2Ev
,__ZN12AP4_PdinAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED0Ev,__ZN27AP4_DecoderConfigDescriptorD2Ev,__ZN27AP4_DecoderConfigDescriptorD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_OdheAtomD2Ev,__ZN12AP4_OdheAtomD0Ev,b5,b5,b5,__ZThn36_N12AP4_OdheAtomD1Ev,__ZThn36_N12AP4_OdheAtomD0Ev,b5,__ZN12AP4_MkidAtomD2Ev,__ZN12AP4_MkidAtomD0Ev,b5,b5,__ZN15AP4_AtomFactory11TypeHandlerD2Ev,__ZN29AP4_MarlinIpmpAtomTypeHandlerD0Ev,b5
,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED0Ev,__ZN25AP4_MarlinIpmpAtomFactoryD0Ev,__ZN12AP4_OdafAtomD0Ev,b5,b5,__ZN12AP4_FtypAtomD2Ev,__ZN12AP4_FtypAtomD0Ev,b5,b5,__ZN14AP4_DataBufferD2Ev,__ZN14AP4_DataBufferD0Ev,__ZN23AP4_CencTrackEncryptionD2Ev,__ZN23AP4_CencTrackEncryptionD0Ev,__ZN12AP4_PsshAtomD2Ev,__ZN12AP4_PsshAtomD0Ev,b5,b5,__ZN12AP4_SidxAtomD2Ev,__ZN12AP4_SidxAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED2Ev,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED0Ev,__ZN25AP4_IpmpDescriptorPointerD0Ev,b5,b5,__ZN18AP4_IpmpDescriptorD2Ev,__ZN18AP4_IpmpDescriptorD0Ev,b5
,b5,__ZN21AP4_UnknownDescriptorD2Ev,__ZN21AP4_UnknownDescriptorD0Ev,b5,b5,__ZN8AP4_AtomD0Ev,b5,__ZN15AP4_UnknownAtomD2Ev,__ZN15AP4_UnknownAtomD0Ev,b5,b5,__ZN28AP4_NullTerminatedStringAtomD2Ev,__ZN28AP4_NullTerminatedStringAtomD0Ev,b5,b5,__ZN14AP4_AtomParentD2Ev,__ZN14AP4_AtomParentD0Ev,__ZN18AP4_AtomListWriterD0Ev,b5,__ZN8AP4_ListI8AP4_AtomE4Item6FinderD2Ev,__ZN14AP4_AtomFinderD0Ev,b5,__ZN9AP4_TrackD2Ev,__ZN9AP4_TrackD0Ev,__ZN12AP4_MehdAtomD0Ev,b5,b5,__ZN12AP4_TkhdAtomD0Ev,b5,b5
,__ZN12AP4_TfhdAtomD0Ev,b5,b5,__ZN12AP4_IsltAtomD0Ev,b5,b5,__ZN12AP4_MfhdAtomD0Ev,b5,b5,__ZN12AP4_TencAtomD2Ev,__ZN12AP4_TencAtomD0Ev,b5,b5,__ZThn36_N12AP4_TencAtomD1Ev,__ZThn36_N12AP4_TencAtomD0Ev,__ZN12AP4_TfdtAtomD0Ev,b5,b5,__ZN12AP4_StcoAtomD2Ev,__ZN12AP4_StcoAtomD0Ev,b5,b5,__ZN12AP4_FrmaAtomD0Ev,b5,b5,__ZN12AP4_GrpiAtomD2Ev,__ZN12AP4_GrpiAtomD0Ev,b5,b5,b5
,__ZN12AP4_HvccAtomD2Ev,__ZN12AP4_HvccAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED2Ev,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED0Ev,__ZN9AP4_ArrayI14AP4_DataBufferED2Ev,__ZN9AP4_ArrayI14AP4_DataBufferED0Ev,__ZN16AP4_TrefTypeAtomD2Ev,__ZN16AP4_TrefTypeAtomD0Ev,b5,b5,__ZN12AP4_SttsAtomD2Ev,__ZN12AP4_SttsAtomD0Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayI18AP4_SttsTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_SttsTableEntryED0Ev,__ZN12AP4_SthdAtomD0Ev,b5,__ZN12AP4_8bdlAtomD2Ev,__ZN12AP4_8bdlAtomD0Ev,b5,b5,__ZN12AP4_SgpdAtomD2Ev,__ZN12AP4_SgpdAtomD0Ev,b5
,b5,__ZN8AP4_ListI14AP4_DataBufferED2Ev,__ZN8AP4_ListI14AP4_DataBufferED0Ev,__ZN12AP4_DataAtomD2Ev,__ZN12AP4_DataAtomD0Ev,b5,b5,__ZN22AP4_MetaDataStringAtomD2Ev,__ZN22AP4_MetaDataStringAtomD0Ev,b5,b5,__ZN27AP4_3GppLocalizedStringAtomD2Ev,__ZN27AP4_3GppLocalizedStringAtomD0Ev,b5,b5,__ZN17AP4_DcfStringAtomD2Ev,__ZN17AP4_DcfStringAtomD0Ev,b5,b5,__ZN12AP4_DcfdAtomD0Ev,b5,b5,__ZN27AP4_MetaDataAtomTypeHandlerD0Ev,b5,__ZN8AP4_ListIN12AP4_MetaData5EntryEED2Ev,__ZN8AP4_ListIN12AP4_MetaData5EntryEED0Ev,__ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED2Ev,__ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED0Ev,__ZN22AP4_StdcFileByteStreamD2Ev,__ZN22AP4_StdcFileByteStreamD0Ev
,__ZN22AP4_StdcFileByteStream12AddReferenceEv,__ZN22AP4_StdcFileByteStream7ReleaseEv,b5,b5,b5,b5,b5,b5,__ZN12AP4_ElstAtomD2Ev,__ZN12AP4_ElstAtomD0Ev,b5,b5,__ZN9AP4_ArrayI13AP4_ElstEntryED2Ev,__ZN9AP4_ArrayI13AP4_ElstEntryED0Ev,__ZN33AP4_DecoderSpecificInfoDescriptorD2Ev,__ZN33AP4_DecoderSpecificInfoDescriptorD0Ev,b5,b5,b5,__ZN12AP4_MdhdAtomD2Ev,__ZN12AP4_MdhdAtomD0Ev,b5,b5,__ZN12AP4_TrakAtomD0Ev,__ZThn36_N12AP4_TrakAtomD1Ev,__ZThn36_N12AP4_TrakAtomD0Ev,__ZN12AP4_UuidAtomD0Ev,b5,b5,b5
,__ZN19AP4_UnknownUuidAtomD2Ev,__ZN19AP4_UnknownUuidAtomD0Ev,b5,__ZN12AP4_Stz2AtomD2Ev,__ZN12AP4_Stz2AtomD0Ev,b5,b5,b5,b5,b5,b5,__ZN12AP4_VmhdAtomD0Ev,b5,b5,__ZN12AP4_TfraAtomD2Ev,__ZN12AP4_TfraAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED0Ev,__ZN12AP4_AvccAtomD2Ev,__ZN12AP4_AvccAtomD0Ev,b5,b5,__ZN12AP4_HmhdAtomD0Ev,b5,b5,__ZN12AP4_OddaAtomD2Ev,__ZN12AP4_OddaAtomD0Ev,b5
,b5,__ZN12AP4_IodsAtomD2Ev,__ZN12AP4_IodsAtomD0Ev,b5,b5,__ZN12AP4_StsdAtomD2Ev,__ZN12AP4_StsdAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZThn36_N12AP4_StsdAtomD1Ev,__ZThn36_N12AP4_StsdAtomD0Ev,b5,__ZN9AP4_ArrayIP21AP4_SampleDescriptionED2Ev,__ZN9AP4_ArrayIP21AP4_SampleDescriptionED0Ev,__ZN12AP4_Dec3AtomD2Ev,__ZN12AP4_Dec3AtomD0Ev,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED2Ev,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED0Ev,__ZN12AP4_NmhdAtomD0Ev,b5,__ZN12AP4_AinfAtomD2Ev,__ZN12AP4_AinfAtomD0Ev,b5
,b5,__ZN12AP4_StscAtomD2Ev,__ZN12AP4_StscAtomD0Ev,b5,b5,b5,b5,__ZN9AP4_ArrayI18AP4_StscTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_StscTableEntryED0Ev,__ZN16AP4_EsDescriptorD2Ev,__ZN16AP4_EsDescriptorD0Ev,b5,b5,b5,b5,__ZN21AP4_EsIdIncDescriptorD0Ev,b5,b5,__ZN21AP4_EsIdRefDescriptorD0Ev,b5,b5,__ZN12AP4_SaioAtomD2Ev,__ZN12AP4_SaioAtomD0Ev,b5,b5,__ZN9AP4_ArrayIyED2Ev,__ZN9AP4_ArrayIyED0Ev,__ZN15AP4_SampleEntryD0Ev,b5,b5
,b5,b5,b5,__ZThn36_N15AP4_SampleEntryD1Ev,__ZThn36_N15AP4_SampleEntryD0Ev,__ZN22AP4_UnknownSampleEntryD2Ev,__ZN22AP4_UnknownSampleEntryD0Ev,b5,b5,b5,b5,b5,__ZThn36_N22AP4_UnknownSampleEntryD1Ev,__ZThn36_N22AP4_UnknownSampleEntryD0Ev,__ZN25AP4_MpegSystemSampleEntryD0Ev,b5,__ZThn36_N25AP4_MpegSystemSampleEntryD1Ev,__ZThn36_N25AP4_MpegSystemSampleEntryD0Ev,__ZN19AP4_Mp4sSampleEntryD0Ev,b5,__ZThn36_N19AP4_Mp4sSampleEntryD1Ev,__ZThn36_N19AP4_Mp4sSampleEntryD0Ev,__ZN20AP4_AudioSampleEntryD0Ev,b5,__ZThn36_N20AP4_AudioSampleEntryD1Ev,__ZThn36_N20AP4_AudioSampleEntryD0Ev,__ZN24AP4_MpegAudioSampleEntryD0Ev,b5,__ZThn36_N24AP4_MpegAudioSampleEntryD1Ev,__ZThn36_N24AP4_MpegAudioSampleEntryD0Ev
,__ZN21AP4_VisualSampleEntryD0Ev,b5,__ZThn36_N21AP4_VisualSampleEntryD1Ev,__ZThn36_N21AP4_VisualSampleEntryD0Ev,__ZN24AP4_MpegVideoSampleEntryD0Ev,b5,__ZThn36_N24AP4_MpegVideoSampleEntryD1Ev,__ZThn36_N24AP4_MpegVideoSampleEntryD0Ev,__ZN18AP4_AvcSampleEntryD0Ev,b5,__ZThn36_N18AP4_AvcSampleEntryD1Ev,__ZThn36_N18AP4_AvcSampleEntryD0Ev,__ZN19AP4_HevcSampleEntryD0Ev,b5,__ZThn36_N19AP4_HevcSampleEntryD1Ev,__ZThn36_N19AP4_HevcSampleEntryD0Ev,__ZN22AP4_RtpHintSampleEntryD0Ev,b5,b5,b5,b5,__ZThn36_N22AP4_RtpHintSampleEntryD1Ev,__ZThn36_N22AP4_RtpHintSampleEntryD0Ev,__ZN23AP4_SubtitleSampleEntryD2Ev,__ZN23AP4_SubtitleSampleEntryD0Ev,b5,b5,b5,b5,b5
,__ZThn36_N23AP4_SubtitleSampleEntryD1Ev,__ZThn36_N23AP4_SubtitleSampleEntryD0Ev,__ZN19AP4_Mp4aSampleEntryD0Ev,__ZThn36_N19AP4_Mp4aSampleEntryD1Ev,__ZThn36_N19AP4_Mp4aSampleEntryD0Ev,__ZN19AP4_Mp4vSampleEntryD0Ev,__ZThn36_N19AP4_Mp4vSampleEntryD1Ev,__ZThn36_N19AP4_Mp4vSampleEntryD0Ev,__ZN12AP4_OhdrAtomD2Ev,__ZN12AP4_OhdrAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZThn36_N12AP4_OhdrAtomD1Ev,__ZThn36_N12AP4_OhdrAtomD0Ev,__ZThn56_N12AP4_OhdrAtomD1Ev,__ZThn56_N12AP4_OhdrAtomD0Ev,b5,b5,b5,__ZN12AP4_IsfmAtomD0Ev,b5,b5,b5,__ZN12AP4_Co64AtomD2Ev,__ZN12AP4_Co64AtomD0Ev,b5
,b5,__ZN12AP4_TimsAtomD0Ev,b5,b5,b5,__ZN12AP4_HdlrAtomD2Ev,__ZN12AP4_HdlrAtomD0Ev,b5,b5,__ZN12AP4_IproAtomD0Ev,b5,b5,__ZThn36_N12AP4_IproAtomD1Ev,__ZThn36_N12AP4_IproAtomD0Ev,__ZN12AP4_DrefAtomD0Ev,b5,__ZThn36_N12AP4_DrefAtomD1Ev,__ZThn36_N12AP4_DrefAtomD0Ev,__ZN27AP4_PiffTrackEncryptionAtomD2Ev,__ZN27AP4_PiffTrackEncryptionAtomD0Ev,b5,b5,__ZThn52_N27AP4_PiffTrackEncryptionAtomD1Ev,__ZThn52_N27AP4_PiffTrackEncryptionAtomD0Ev,__ZN28AP4_PiffSampleEncryptionAtomD2Ev,__ZN28AP4_PiffSampleEncryptionAtomD0Ev,b5,b5,__ZThn52_N28AP4_PiffSampleEncryptionAtomD1Ev,__ZThn52_N28AP4_PiffSampleEncryptionAtomD0Ev
,__ZN11AP4_RtpAtomD2Ev,__ZN11AP4_RtpAtomD0Ev,b5,b5,__ZN19AP4_AtomSampleTableD2Ev,__ZN19AP4_AtomSampleTableD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN22AP4_SLConfigDescriptorD0Ev,b5,__ZN21AP4_SampleDescriptionD2Ev,__ZN21AP4_SampleDescriptionD0Ev,b5,__ZN28AP4_UnknownSampleDescriptionD2Ev,__ZN28AP4_UnknownSampleDescriptionD0Ev,b5,b5,__ZN24AP4_AvcSampleDescriptionD2Ev,__ZN24AP4_AvcSampleDescriptionD0Ev,b5
,__ZThn32_N24AP4_AvcSampleDescriptionD1Ev,__ZThn32_N24AP4_AvcSampleDescriptionD0Ev,__ZN25AP4_HevcSampleDescriptionD2Ev,__ZN25AP4_HevcSampleDescriptionD0Ev,b5,__ZThn32_N25AP4_HevcSampleDescriptionD1Ev,__ZThn32_N25AP4_HevcSampleDescriptionD0Ev,__ZN25AP4_MpegSampleDescriptionD2Ev,__ZN31AP4_MpegSystemSampleDescriptionD0Ev,b5,__ZN30AP4_MpegAudioSampleDescriptionD2Ev,__ZN30AP4_MpegAudioSampleDescriptionD0Ev,b5,__ZThn72_N30AP4_MpegAudioSampleDescriptionD1Ev,__ZThn72_N30AP4_MpegAudioSampleDescriptionD0Ev,__ZN30AP4_MpegVideoSampleDescriptionD2Ev,__ZN30AP4_MpegVideoSampleDescriptionD0Ev,b5,__ZThn72_N30AP4_MpegVideoSampleDescriptionD1Ev,__ZThn72_N30AP4_MpegVideoSampleDescriptionD0Ev,__ZN29AP4_SubtitleSampleDescriptionD2Ev,__ZN29AP4_SubtitleSampleDescriptionD0Ev,b5,b5,__ZN33AP4_GenericAudioSampleDescriptionD2Ev,__ZN33AP4_GenericAudioSampleDescriptionD0Ev,b5,__ZThn32_N33AP4_GenericAudioSampleDescriptionD1Ev,__ZThn32_N33AP4_GenericAudioSampleDescriptionD0Ev,__ZN33AP4_GenericVideoSampleDescriptionD2Ev
,__ZN33AP4_GenericVideoSampleDescriptionD0Ev,b5,__ZThn32_N33AP4_GenericVideoSampleDescriptionD1Ev,__ZThn32_N33AP4_GenericVideoSampleDescriptionD0Ev,__ZN25AP4_MpegSampleDescriptionD0Ev,b5,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b5,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b5,b5,b5,b5,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b5,b5,b5,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__ZN12AP4_MetaDataD2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10AP4_StringC2Ev,b5,__ZN10AP4_StringD2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN14AP4_DataBufferC2Ev,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_MetaData5EntryD2Ev,b5,b5,b5,b5
,b5,b5,__ZN12AP4_AvccAtom14UpdateRawBytesEv,b5,b5,b5,b5,b5,__ZN15AP4_AtomFactory10PopContextEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN12AP4_AvccAtomC2Ev,b5,__ZN12AP4_HvccAtomC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_StszAtomC2Ev,__ZN12AP4_StscAtomC2Ev,__ZN12AP4_SttsAtomC2Ev,__ZN12AP4_StssAtomC2Ev,__ZN10AP4_SampleC2Ev,__ZN12AP4_CttsAtomC2Ev,b5,b5,__ZN10AP4_SampleD2Ev,b5,b5,b5,b5,b5,b5
,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom,__ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom,__ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,__ZThn36_N17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom
,__ZThn36_N17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom,__ZThn36_N17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN14AP4_AtomParent14OnChildChangedEP8AP4_Atom,__ZN14AP4_AtomParent12OnChildAddedEP8AP4_Atom,__ZN14AP4_AtomParent14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12AP4_MoovAtom12OnChildAddedEP8AP4_Atom,__ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom,b6,b6,__ZThn36_N12AP4_MoovAtom12OnChildAddedEP8AP4_Atom,__ZThn36_N12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN15AP4_SampleEntry14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6
,b6,__ZThn36_N15AP4_SampleEntry14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12AP4_OdheAtom14OnChildChangedEP8AP4_Atom,b6,b6,__ZThn36_N12AP4_OdheAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12AP4_StsdAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,__ZThn36_N12AP4_StsdAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN14AP4_DataBufferC2Ej,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN22AP4_SLConfigDescriptorC2Ej,b6,b6,b6,b6
,b6,b6,b6,__ZN10AP4_StringC2EPKc,b6,b6,b6,b6,b6,b6,b6,b6,__ZN17AP4_ContainerAtomC2Ej,__ZN12AP4_FrmaAtomC2Ej,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN20AP4_MemoryByteStreamC2ER14AP4_DataBuffer
,b6,b6,__ZN20AP4_MemoryByteStreamC2Ej,__ZN14AP4_DataBufferC2ERKS_,__ZN15AP4_UnknownAtomC2ERKS_,b6,b6,b6,__ZN23AP4_CencTrackEncryptionC2ER14AP4_ByteStream,b6,b6,b6,b6,b6,b6,__ZN12AP4_HvccAtom8SequenceC2ERKS0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10AP4_StringC2Ej,b6,b6,b6
,b6,b6,b6,b6,b6,b6,__ZN15AP4_AtomFactory11PushContextEj,b6,b6,__ZN28AP4_UnknownSampleDescriptionC2EP8AP4_Atom,b6,b6,b6,b6,__ZN12AP4_EsdsAtomC2EP16AP4_EsDescriptor,__ZN31AP4_MpegSystemSampleDescriptionC2EP12AP4_EsdsAtom,__ZN12AP4_AvccAtomC2ERKS_,__ZN12AP4_HvccAtomC2ERKS_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN15AP4_SampleEntryC2Ej
,b6,b6,b6,b6,b6,b6,__ZN16AP4_EsDescriptorC2Et,__ZN33AP4_DecoderSpecificInfoDescriptorC2ERK14AP4_DataBuffer,b6,b6,__ZN19AP4_Mp4sSampleEntryC2EP16AP4_EsDescriptor,b6,b6,b6,__ZN12AP4_StsdAtomC2EP15AP4_SampleTable,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_abort_message,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN29AP4_MarlinIpmpAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN27AP4_MetaDataAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZN30AP4_ProtectedSampleDescriptionC2EjP21AP4_SampleDescriptionjjjPKcP17AP4_ContainerAtomb,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN12AP4_OhdrAtomC2EhhyPKcS1_PKhj,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_ii = [b9,b9,b9,b9,b9,__ZNK8AP4_Atom13GetHeaderSizeEv,b9,b9,b9,b9,b9,b9,b9,__ZN8AP4_Atom9GetParentEv,__ZN8AP4_Atom6DetachEv,__ZN17AP4_ContainerAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN8AP4_Atom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,__ZN14AP4_ByteStream5FlushEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_IkmsAtom5CloneEv,b9,b9,b9,b9,b9,b9,__ZN15AP4_SampleEntry5CloneEv,b9,__ZN19AP4_EncaSampleEntry19ToSampleDescriptionEv,b9,__ZN20AP4_AudioSampleEntry13GetFieldsSizeEv,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZN19AP4_EncvSampleEntry19ToSampleDescriptionEv,__ZN21AP4_VisualSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK30AP4_ProtectedSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_StszAtom14GetSampleCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK27AP4_DecoderConfigDescriptor32GetDecoderSpecificInfoDescriptorEv,__ZNK27AP4_DecoderConfigDescriptor23GetObjectTypeIndicationEv,__ZNK27AP4_DecoderConfigDescriptor13GetStreamTypeEv,__ZNK27AP4_DecoderConfigDescriptor13GetBufferSizeEv,__ZNK27AP4_DecoderConfigDescriptor13GetMaxBitrateEv,__ZNK27AP4_DecoderConfigDescriptor13GetAvgBitrateEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN15AP4_UnknownAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_GrpiAtom5CloneEv
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZN22AP4_StdcFileByteStream5FlushEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK33AP4_DecoderSpecificInfoDescriptor22GetDecoderSpecificInfoEv,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK12AP4_UuidAtom13GetHeaderSizeEv,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_Stz2Atom14GetSampleCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_StsdAtom25GetSampleDescriptionCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_Dec3Atom5CloneEv,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK16AP4_EsDescriptor26GetDecoderConfigDescriptorEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,__ZN15AP4_SampleEntry19ToSampleDescriptionEv,__ZN15AP4_SampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,__ZN22AP4_UnknownSampleEntry5CloneEv,__ZN22AP4_UnknownSampleEntry19ToSampleDescriptionEv,__ZN22AP4_UnknownSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,__ZN25AP4_MpegSystemSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN19AP4_Mp4sSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN20AP4_AudioSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN24AP4_MpegAudioSampleEntry19ToSampleDescriptionEv,b9,b9
,b9,__ZN21AP4_VisualSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN24AP4_MpegVideoSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN18AP4_AvcSampleEntry19ToSampleDescriptionEv,b9,b9,b9,__ZN19AP4_HevcSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,b9,__ZN22AP4_RtpHintSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,b9,__ZN23AP4_SubtitleSampleEntry19ToSampleDescriptionEv,__ZN23AP4_SubtitleSampleEntry13GetFieldsSizeEv,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_OhdrAtom5CloneEv,__ZNK12AP4_OhdrAtom12GetContentIdEv,__ZNK12AP4_OhdrAtom18GetRightsIssuerUrlEv,__ZNK12AP4_OhdrAtom17GetTextualHeadersEv,b9,b9,b9,b9,__ZThn56_NK12AP4_OhdrAtom12GetContentIdEv,__ZThn56_NK12AP4_OhdrAtom18GetRightsIssuerUrlEv,__ZThn56_NK12AP4_OhdrAtom17GetTextualHeadersEv,b9,b9,b9,__ZN12AP4_IsfmAtom5CloneEv,b9,b9,b9
,b9,b9,b9,b9,__ZN12AP4_TimsAtom12GetTimeScaleEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZN19AP4_AtomSampleTable14GetSampleCountEv,b9,b9,__ZN19AP4_AtomSampleTable25GetSampleDescriptionCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK21AP4_SampleDescription6ToAtomEv,b9,b9,b9,__ZNK28AP4_UnknownSampleDescription6ToAtomEv,b9,b9,__ZNK24AP4_AvcSampleDescription6ToAtomEv
,b9,b9,b9,b9,__ZNK25AP4_HevcSampleDescription6ToAtomEv,b9,b9,b9,b9,__ZNK31AP4_MpegSystemSampleDescription6ToAtomEv,b9,b9,__ZNK30AP4_MpegAudioSampleDescription6ToAtomEv,b9,b9,b9,b9,__ZNK30AP4_MpegVideoSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,__ZNK29AP4_SubtitleSampleDescription6ToAtomEv,b9,b9,__ZNK33AP4_GenericAudioSampleDescription6ToAtomEv,b9,b9,b9
,b9,__ZNK33AP4_GenericVideoSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,b9,__ZNKSt9bad_alloc4whatEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,__Znwj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__Znaj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,__ZN20AP4_AudioSampleEntry13GetSampleRateEv,__ZN20AP4_AudioSampleEntry15GetChannelCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN14AP4_Expandable13MinHeaderSizeEj,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK25AP4_MpegSampleDescription18CreateEsDescriptorEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN15AP4_SampleEntry4ReadER14AP4_ByteStreamR15AP4_AtomFactory,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,__ZN8AP4_AtomC2Ejj,b10,b10,b10,b10,b10,b10,b10,__ZN10AP4_String6AssignEPKcj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN12AP4_FrmaAtomC2EjR14AP4_ByteStream
,__ZN12AP4_FtypAtomC2EjR14AP4_ByteStream,__ZN12AP4_TimsAtomC2EjR14AP4_ByteStream,__ZN11AP4_SdpAtomC2EjR14AP4_ByteStream,__ZN12AP4_IsltAtomC2EjR14AP4_ByteStream,__ZN11AP4_RtpAtomC2EjR14AP4_ByteStream,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZN19AP4_AtomSampleTableC2EP17AP4_ContainerAtomR14AP4_ByteStream,b10,b10,b10,b10,b10,__ZN14AP4_DataBufferC2EPKvj,b10,__ZN12AP4_HvccAtomC2EjPKh,b10,b10,b10,b10,b10,__ZN12AP4_8bdlAtomC2EjR14AP4_ByteStream,b10,__ZN12AP4_DataAtomC2EjR14AP4_ByteStream,b10,b10,b10,b10,b10,b10,b10,b10
,b10,__ZN12AP4_AvccAtomC2EjPKh,b10,b10,b10,b10,b10,b10,b10,b10,__ZN12AP4_Dec3AtomC2EjPKh,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN12AP4_StcoAtomC2EPjj,__ZN12AP4_Co64AtomC2EPyj,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,___cxa_pure_virtual__wrapper,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__ZL25default_terminate_handlerv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11,___cxa_end_catch__wrapper,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viidi = [b12];
var FUNCTION_TABLE_iiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN14AP4_AtomParent9FindChildEPKcbb,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN13AP4_SubStream11ReadPartialEPvjRj,__ZN13AP4_SubStream12WritePartialEPKvjRj,b13,b13,b13,__ZN14AP4_ByteStream6CopyToERS_y
,b13,b13,b13,b13,b13,__ZN20AP4_MemoryByteStream11ReadPartialEPvjRj,__ZN20AP4_MemoryByteStream12WritePartialEPKvjRj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN12AP4_SttsAtom6GetDtsEjRyPj,b13,__ZN12AP4_SttsAtom26GetSampleIndexForTimeStampEyRj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,__ZN22AP4_StdcFileByteStream11ReadPartialEPvjRj,__ZN22AP4_StdcFileByteStream12WritePartialEPKvjRj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,__ZN12AP4_StscAtom8AddEntryEjjj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN19AP4_AtomSampleTable22GetSampleChunkPositionEjRjS0_,b13,b13,__ZN19AP4_AtomSampleTable26GetSampleIndexForTimeStampEyRj,b13,b13,b13,__ZN19AP4_AtomSampleTable14SetChunkOffsetEjy,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12AP4_SchmAtomC2EjhjbR14AP4_ByteStream,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN13AP4_SubStreamC2ER14AP4_ByteStreamyy
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN30AP4_MpegVideoSampleDescriptionC2EtttPKcP12AP4_EsdsAtom,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12AP4_OdheAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN27AP4_3GppLocalizedStringAtomC2EjjhjR14AP4_ByteStream,__ZN17AP4_DcfStringAtomC2EjjhjR14AP4_ByteStream,b14,b14,b14,b14,b14
,b14,b14,b14,b14,__ZN12AP4_OddaAtomC2EyhjR14AP4_ByteStream,__ZN12AP4_StsdAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12AP4_OhdrAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b14,b14,b14,__ZN12AP4_IproAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN12AP4_DrefAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN12AP4_UuidAtomC2EyPKhhj,b14
,b14,__ZN21AP4_VisualSampleEntryC2EjtttPKc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN19AP4_Mp4vSampleEntryC2EtttPKcP16AP4_EsDescriptor,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,__ZN8AP4_Atom5WriteER14AP4_ByteStream,__ZN8AP4_Atom11WriteHeaderER14AP4_ByteStream,__ZN17AP4_ContainerAtom11WriteFieldsER14AP4_ByteStream,__ZN8AP4_Atom7InspectER17AP4_AtomInspector,__ZN8AP4_Atom13InspectHeaderER17AP4_AtomInspector,__ZN17AP4_ContainerAtom13InspectFieldsER17AP4_AtomInspector,__ZN8AP4_Atom9SetParentEP14AP4_AtomParent,b15,b15,b15,__ZN17AP4_ContainerAtom15InspectChildrenER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN14AP4_AtomParent11RemoveChildEP8AP4_Atom,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom,b15,__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom,b15,b15,b15,b15,b15,__ZN8AP4_File7InspectER17AP4_AtomInspector,b15,b15,__ZN12AP4_TrexAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TrexAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,b15,b15,__ZN13AP4_SubStream4TellERy,__ZN13AP4_SubStream7GetSizeERy,b15
,b15,b15,b15,b15,b15,b15,b15,b15,__ZN20AP4_MemoryByteStream4TellERy,__ZN20AP4_MemoryByteStream7GetSizeERy,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_SaizAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SaizAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN11AP4_UrlAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_UrlAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_SchmAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SchmAtom13InspectFieldsER17AP4_AtomInspector
,b15,b15,__ZN12AP4_EsdsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_EsdsAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_TrunAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TrunAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK21AP4_TrakAtomCollector6ActionEP8AP4_Atom,b15,__ZN12AP4_SmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SmhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN14AP4_Expandable5WriteER14AP4_ByteStream,__ZN20AP4_ObjectDescriptor11WriteFieldsER14AP4_ByteStream,__ZN20AP4_ObjectDescriptor7InspectER17AP4_AtomInspector
,__ZN20AP4_ObjectDescriptor16AddSubDescriptorEP14AP4_Descriptor,__ZNK20AP4_ObjectDescriptor17FindSubDescriptorEh,b15,__ZN27AP4_InitialObjectDescriptor11WriteFieldsER14AP4_ByteStream,__ZN27AP4_InitialObjectDescriptor7InspectER17AP4_AtomInspector,b15,b15,b15,b15,__ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor,b15,b15,__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor,b15,__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor,b15,b15,__ZN11AP4_SdpAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_SdpAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_MfroAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MfroAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN14AP4_Expandable7InspectER17AP4_AtomInspector,b15,b15,__ZN12AP4_CttsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_CttsAtom13InspectFieldsER17AP4_AtomInspector
,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK19AP4_TrackFinderById4TestEP9AP4_Track,b15,__ZNK21AP4_TrackFinderByType4TestEP9AP4_Track,b15,b15,__ZN12AP4_IkmsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IkmsAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN15AP4_SampleEntry5WriteER14AP4_ByteStream,__ZN20AP4_AudioSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN15AP4_SampleEntry7InspectER17AP4_AtomInspector,__ZN20AP4_AudioSampleEntry13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,__ZN20AP4_AudioSampleEntry10ReadFieldsER14AP4_ByteStream,__ZN19AP4_EncaSampleEntry25ToTargetSampleDescriptionEj,b15
,b15,b15,b15,b15,__ZN21AP4_VisualSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN21AP4_VisualSampleEntry13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN21AP4_VisualSampleEntry10ReadFieldsER14AP4_ByteStream,__ZN19AP4_EncvSampleEntry25ToTargetSampleDescriptionEj,b15,b15,b15,b15,b15,b15,__ZN21AP4_SampleDescription5CloneEPi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_SbgpAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SbgpAtom13InspectFieldsER17AP4_AtomInspector
,b15,b15,b15,__ZN12AP4_MvhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MvhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_StszAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StszAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_StszAtom8AddEntryEj,b15,__ZN12AP4_BlocAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_BlocAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_SencAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SencAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN12AP4_StssAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StssAtom13InspectFieldsER17AP4_AtomInspector,__ZN12AP4_StssAtom12IsSampleSyncEj,b15
,b15,__ZN12AP4_PdinAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_PdinAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN27AP4_DecoderConfigDescriptor11WriteFieldsER14AP4_ByteStream,__ZN27AP4_DecoderConfigDescriptor7InspectER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_OdheAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OdheAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN12AP4_MkidAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MkidAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15
,b15,b15,b15,b15,__ZN12AP4_OdafAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OdafAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_FtypAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_FtypAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN12AP4_PsshAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_PsshAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_SidxAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SidxAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN25AP4_IpmpDescriptorPointer11WriteFieldsER14AP4_ByteStream,__ZN25AP4_IpmpDescriptorPointer7InspectER17AP4_AtomInspector,b15,b15,__ZN18AP4_IpmpDescriptor11WriteFieldsER14AP4_ByteStream
,__ZN18AP4_IpmpDescriptor7InspectER17AP4_AtomInspector,b15,b15,__ZN21AP4_UnknownDescriptor11WriteFieldsER14AP4_ByteStream,__ZN14AP4_Descriptor7InspectER17AP4_AtomInspector,b15,__ZN8AP4_Atom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN15AP4_UnknownAtom11WriteFieldsER14AP4_ByteStream,b15,b15,b15,__ZN28AP4_NullTerminatedStringAtom11WriteFieldsER14AP4_ByteStream,__ZN28AP4_NullTerminatedStringAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZNK18AP4_AtomListWriter6ActionEP8AP4_Atom,b15,b15,__ZNK14AP4_AtomFinder4TestEP8AP4_Atom,b15,b15,b15,__ZN12AP4_MehdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MehdAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_TkhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TkhdAtom13InspectFieldsER17AP4_AtomInspector
,b15,__ZN12AP4_TfhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfhdAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_IsltAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IsltAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_MfhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MfhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_TencAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TencAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_TfdtAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfdtAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_StcoAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StcoAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_FrmaAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_FrmaAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_GrpiAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_GrpiAtom13InspectFieldsER17AP4_AtomInspector,b15
,b15,b15,__ZN12AP4_HvccAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HvccAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN16AP4_TrefTypeAtom11WriteFieldsER14AP4_ByteStream,__ZN16AP4_TrefTypeAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_SttsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SttsAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN12AP4_SthdAtom11WriteFieldsER14AP4_ByteStream,b15,b15,__ZN12AP4_8bdlAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_8bdlAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_SgpdAtom11WriteFieldsER14AP4_ByteStream
,__ZN12AP4_SgpdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN12AP4_DataAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_DataAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN22AP4_MetaDataStringAtom11WriteFieldsER14AP4_ByteStream,__ZN22AP4_MetaDataStringAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN27AP4_3GppLocalizedStringAtom11WriteFieldsER14AP4_ByteStream,__ZN27AP4_3GppLocalizedStringAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN17AP4_DcfStringAtom11WriteFieldsER14AP4_ByteStream,__ZN17AP4_DcfStringAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_DcfdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_DcfdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,__ZN22AP4_StdcFileByteStream4TellERy,__ZN22AP4_StdcFileByteStream7GetSizeERy,b15,b15,b15,__ZN12AP4_ElstAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_ElstAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN33AP4_DecoderSpecificInfoDescriptor11WriteFieldsER14AP4_ByteStream,__ZN33AP4_DecoderSpecificInfoDescriptor7InspectER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_MdhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MdhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,__ZN12AP4_UuidAtom11WriteHeaderER14AP4_ByteStream,__ZN12AP4_UuidAtom13InspectHeaderER17AP4_AtomInspector
,b15,b15,__ZN19AP4_UnknownUuidAtom11WriteFieldsER14AP4_ByteStream,b15,b15,__ZN12AP4_Stz2Atom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_Stz2Atom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_Stz2Atom8AddEntryEj,b15,__ZN12AP4_VmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_VmhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_TfraAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfraAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN12AP4_AvccAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_AvccAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_HmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HmhdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_OddaAtom11WriteFieldsER14AP4_ByteStream
,__ZN12AP4_OddaAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_IodsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IodsAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_StsdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StsdAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_StsdAtom20GetSampleDescriptionEj,__ZN12AP4_StsdAtom14GetSampleEntryEj,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_Dec3Atom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_Dec3Atom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN12AP4_NmhdAtom11WriteFieldsER14AP4_ByteStream,b15,b15,__ZN12AP4_AinfAtom11WriteFieldsER14AP4_ByteStream
,__ZN12AP4_AinfAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN12AP4_StscAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StscAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,__ZN16AP4_EsDescriptor11WriteFieldsER14AP4_ByteStream,__ZN16AP4_EsDescriptor7InspectER17AP4_AtomInspector,__ZN16AP4_EsDescriptor16AddSubDescriptorEP14AP4_Descriptor,b15,b15,__ZN21AP4_EsIdIncDescriptor11WriteFieldsER14AP4_ByteStream,__ZN21AP4_EsIdIncDescriptor7InspectER17AP4_AtomInspector,b15,__ZN21AP4_EsIdRefDescriptor11WriteFieldsER14AP4_ByteStream,__ZN21AP4_EsIdRefDescriptor7InspectER17AP4_AtomInspector,b15,b15,__ZN12AP4_SaioAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SaioAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream,__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector
,b15,b15,__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream,b15,b15,b15,b15,__ZN22AP4_UnknownSampleEntry11WriteFieldsER14AP4_ByteStream,b15,b15,b15,__ZN22AP4_UnknownSampleEntry10ReadFieldsER14AP4_ByteStream,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN22AP4_RtpHintSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN22AP4_RtpHintSampleEntry13InspectFieldsER17AP4_AtomInspector,b15,__ZN22AP4_RtpHintSampleEntry10ReadFieldsER14AP4_ByteStream,b15,b15,b15,b15,__ZN23AP4_SubtitleSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN23AP4_SubtitleSampleEntry13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN23AP4_SubtitleSampleEntry10ReadFieldsER14AP4_ByteStream
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_OhdrAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OhdrAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_IsfmAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IsfmAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_Co64Atom11WriteFieldsER14AP4_ByteStream
,__ZN12AP4_Co64Atom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_TimsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TimsAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_HdlrAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HdlrAtom13InspectFieldsER17AP4_AtomInspector,b15,__ZN12AP4_IproAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IproAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,__ZN12AP4_DrefAtom11WriteFieldsER14AP4_ByteStream,b15,b15,b15,b15,__ZN27AP4_PiffTrackEncryptionAtom11WriteFieldsER14AP4_ByteStream,__ZN27AP4_PiffTrackEncryptionAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,b15,b15,__ZN28AP4_PiffSampleEncryptionAtom11WriteFieldsER14AP4_ByteStream,__ZN28AP4_PiffSampleEncryptionAtom13InspectFieldsER17AP4_AtomInspector,b15,b15
,b15,b15,__ZN11AP4_RtpAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_RtpAtom13InspectFieldsER17AP4_AtomInspector,b15,b15,__ZN15AP4_SampleTable16GenerateStblAtomERP17AP4_ContainerAtom,b15,b15,b15,b15,__ZN19AP4_AtomSampleTable20GetSampleDescriptionEj,b15,b15,b15,b15,b15,b15,b15,__ZN22AP4_SLConfigDescriptor11WriteFieldsER14AP4_ByteStream,b15,b15,b15,b15,b15,__ZN28AP4_UnknownSampleDescription5CloneEPi,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN29AP4_SubtitleSampleDescription5CloneEPi,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZN14AP4_ByteStream8ReadUI32ERj,b15,__ZN14AP4_DataBuffer11SetDataSizeEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,__ZN14AP4_ByteStream8ReadUI08ERh,b15,b15,b15,b15,__ZN10AP4_StringaSEPKc,b15,b15,__ZN14AP4_ByteStream8ReadUI16ERt,__ZN21AP4_DescriptorFactory26CreateDescriptorFromStreamER14AP4_ByteStreamRP14AP4_Descriptor,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN14AP4_ByteStream8ReadUI24ERj,b15,b15,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE14EnsureCapacityEj,__ZN15AP4_AtomFactory14AddTypeHandlerEPNS_11TypeHandlerE,b15,b15,b15
,b15,__ZN14AP4_ByteStream8ReadUI64ERy,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj,b15,b15,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE12SetItemCountEj,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZN9AP4_ArrayI14AP4_DataBufferE6AppendERKS0_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN14AP4_DataBuffer7ReserveEj,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_StssAtom8AddEntryEj,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,__ZN12AP4_StscAtom17GetChunkForSampleEjRjS0_S0_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN19AP4_AtomSampleTable17GetChunkForSampleEjRjS0_S0_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_viiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b17,b17,b17,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b17,b17,b17,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b17,__ZN8AP4_FileC2ER14AP4_ByteStreamR15AP4_AtomFactoryb,b17,b17,b17
,b17,b17,b17,b17,__ZN9AP4_MovieC2EP12AP4_MoovAtomR14AP4_ByteStreamb,b17,b17,___assert_fail__wrapper,b17,b17,b17,b17,__ZN19AP4_Mp4aSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_Mp4vSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_Mp4sSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_EncaSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_EncvSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_DrmsSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_DrmiSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b17,b17,b17,__ZN22AP4_RtpHintSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b17,__ZN22AP4_UnknownSampleEntryC2EjjR14AP4_ByteStream,__ZN12AP4_MoovAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN12AP4_TrakAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b17,b17,b17
,b17,b17,b17,b17,b17,__ZN16AP4_TrefTypeAtomC2EjjR14AP4_ByteStream,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN21AP4_EsIdIncDescriptorC2ER14AP4_ByteStreamjj,__ZN21AP4_EsIdRefDescriptorC2ER14AP4_ByteStreamjj,__ZN16AP4_EsDescriptorC2ER14AP4_ByteStreamjj,__ZN27AP4_DecoderConfigDescriptorC2ER14AP4_ByteStreamjj,__ZN33AP4_DecoderSpecificInfoDescriptorC2ER14AP4_ByteStreamjj,b17,__ZN25AP4_IpmpDescriptorPointerC2ER14AP4_ByteStreamjj,__ZN18AP4_IpmpDescriptorC2ER14AP4_ByteStreamjj,b17,b17
,b17,__ZN9AP4_TrackC2ER12AP4_TrakAtomR14AP4_ByteStreamj,b17,b17,b17,b17,b17,b17,__ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN24AP4_CencSampleEncryptionC2ER8AP4_AtomjR14AP4_ByteStream,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN22AP4_MetaDataStringAtomC2EjjR14AP4_ByteStream,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN8AP4_Atom7SetSizeEyb,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _bitshift64Ashr: _bitshift64Ashr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_Mp4Split_cpp: __GLOBAL__sub_I_Mp4Split_cpp, __GLOBAL__sub_I_Ap4AtomFactory_cpp: __GLOBAL__sub_I_Ap4AtomFactory_cpp, __GLOBAL__sub_I_Ap4Marlin_cpp: __GLOBAL__sub_I_Ap4Marlin_cpp, __GLOBAL__sub_I_Ap4MetaData_cpp: __GLOBAL__sub_I_Ap4MetaData_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viidi: dynCall_viidi, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_Mp4Split_cpp = asm["__GLOBAL__sub_I_Mp4Split_cpp"]; asm["__GLOBAL__sub_I_Mp4Split_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Mp4Split_cpp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4MetaData_cpp = asm["__GLOBAL__sub_I_Ap4MetaData_cpp"]; asm["__GLOBAL__sub_I_Ap4MetaData_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4MetaData_cpp.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4AtomFactory_cpp = asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"]; asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4AtomFactory_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4Marlin_cpp = asm["__GLOBAL__sub_I_Ap4Marlin_cpp"]; asm["__GLOBAL__sub_I_Ap4Marlin_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4Marlin_cpp.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_Mp4Split_cpp = Module["__GLOBAL__sub_I_Mp4Split_cpp"] = asm["__GLOBAL__sub_I_Mp4Split_cpp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var __GLOBAL__sub_I_Ap4MetaData_cpp = Module["__GLOBAL__sub_I_Ap4MetaData_cpp"] = asm["__GLOBAL__sub_I_Ap4MetaData_cpp"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __GLOBAL__sub_I_Ap4AtomFactory_cpp = Module["__GLOBAL__sub_I_Ap4AtomFactory_cpp"] = asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"];
var __GLOBAL__sub_I_Ap4Marlin_cpp = Module["__GLOBAL__sub_I_Ap4Marlin_cpp"] = asm["__GLOBAL__sub_I_Ap4Marlin_cpp"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



  return Module['return'];
}

if (typeof(exports) !== 'undefined') {
  mp4split.call(this);
}
