function mp4split(opts) {
  var isNode = typeof(exports) !== 'undefined';
  if (!isNode) {
    var Module = {}
    for (var i in opts) {
      Module[i] = opts[i];
    }
    if (!Module['outputDirectory']) {
      throw 'outputDirectory is required';
    }
    Module['readBufferPos'] = 0;
    // Размер буфера чтения задается в методе stream_ops.read
    Module['readBuffer'] = new Uint8Array();
    // Сколько байт записано в буфер
    Module['writeBufferOffset'] = 0;
    // Тек. файл в который ведется запись
    Module['writeBufferEntry'] = null;
    // XXX Размер буфера должен быть не меньше максимального кол-ва байт, записываемого за один раз
    Module['writeBuffer'] = new Uint8Array(10*1024*1024);
    Module['preRun'] = function() {
      FS.createFolder('/', Module['outputDirectory'], true, true);
      if (Module['files']) {
        Module['files'].forEach(function(file) {
          var path = PATH.join2('/', file.name);
          var mode = FS.getMode(true, false);
          var node = FS.create(path, mode);
          node.timestamp = Date.now();
          node.file = file;
          node.usedBytes = file.size;
        });
      }
    };
    Module['postRun'] = function() {
      var handle = FS.analyzePath(Module['outputDirectory']);
      Module['return'] = getAllFiles(handle);
    };
    function getAllFiles(result) {
      var entries = [];
      if (result && result.object && result.object.contents) {
        for (var i in result.object.contents) {
          if (result.object.contents.hasOwnProperty(i)) {
            var node = result.object.contents[i];
            if (node.entry) {
              if (Module['writeBufferOffset']) {
                var writer = Module['writeBufferEntry'].createWriter();
                writer.write(new Blob([Module['writeBuffer'].subarray(0, Module['writeBufferOffset'])]));
                Module['writeBuffer'].fill(0);
                Module['writeBufferOffset'] = 0;
              }
              entries.push(node.entry.file());
            } 
          }
        }
      }
      return entries;
    }
  }

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 52944;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_Mp4Split_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4AtomFactory_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4Protection_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4Marlin_cpp() } }, { func: function() { __GLOBAL__sub_I_Ap4MetaData_cpp() } });
  

/* memory initializer */ allocate([152,137,0,0,188,149,0,0,192,137,0,0,202,149,0,0,88,9,0,0,0,0,0,0,192,137,0,0,217,149,0,0,16,0,0,0,0,0,0,0,192,137,0,0,239,149,0,0,88,9,0,0,0,0,0,0,152,137,0,0,254,149,0,0,192,137,0,0,12,150,0,0,88,9,0,0,0,0,0,0,192,137,0,0,27,150,0,0,88,9,0,0,0,0,0,0,192,137,0,0,63,150,0,0,152,8,0,0,0,0,0,0,192,137,0,0,80,150,0,0,104,0,0,0,0,0,0,0,192,137,0,0,120,150,0,0,88,9,0,0,0,0,0,0,192,137,0,0,196,150,0,0,104,0,0,0,0,0,0,0,192,137,0,0,222,150,0,0,88,9,0,0,0,0,0,0,192,137,0,0,8,151,0,0,88,9,0,0,0,0,0,0,192,137,0,0,23,151,0,0,88,9,0,0,0,0,0,0,192,137,0,0,156,151,0,0,88,9,0,0,0,0,0,0,152,137,0,0,198,151,0,0,192,137,0,0,233,151,0,0,176,9,0,0,0,0,0,0,152,137,0,0,248,151,0,0,192,137,0,0,29,152,0,0,0,1,0,0,0,0,0,0,192,137,0,0,53,152,0,0,88,9,0,0,0,0,0,0,152,137,0,0,162,152,0,0,192,137,0,0,201,152,0,0,88,9,0,0,0,0,0,0,192,137,0,0,11,153,0,0,88,9,0,0,0,0,0,0,232,137,0,0,26,153,0,0,0,0,0,0,2,0,0,0,88,9,0,0,2,0,0,0,112,1,0,0,2,36,0,0,152,137,0,0,41,153,0,0,192,137,0,0,68,153,0,0,104,0,0,0,0,0,0,0,152,137,0,0,130,153,0,0,152,137,0,0,148,153,0,0,152,137,0,0,192,153,0,0,192,137,0,0,225,153,0,0,136,1,0,0,0,0,0,0,192,137,0,0,250,153,0,0,88,9,0,0,0,0,0,0,192,137,0,0,9,154,0,0,88,9,0,0,0,0,0,0,192,137,0,0,56,154,0,0,88,9,0,0,0,0,0,0,192,137,0,0,119,154,0,0,88,9,0,0,0,0,0,0,192,137,0,0,134,154,0,0,88,9,0,0,0,0,0,0,192,137,0,0,149,154,0,0,104,0,0,0,0,0,0,0,152,137,0,0,239,154,0,0,152,137,0,0,27,155,0,0,192,137,0,0,69,155,0,0,24,2,0,0,0,0,0,0,192,137,0,0,92,155,0,0,16,2,0,0,0,0,0,0,192,137,0,0,122,155,0,0,16,2,0,0,0,0,0,0,152,137,0,0,149,155,0,0,192,137,0,0,177,155,0,0,104,0,0,0,0,0,0,0,192,137,0,0,205,155,0,0,104,0,0,0,0,0,0,0,192,137,0,0,125,156,0,0,168,2,0,0,0,0,0,0,192,137,0,0,142,156,0,0,120,2,0,0,0,0,0,0,192,137,0,0,158,156,0,0,120,2,0,0,0,0,0,0,152,137,0,0,24,157,0,0,192,137,0,0,44,157,0,0,88,9,0,0,0,0,0,0,152,137,0,0,149,157,0,0,192,137,0,0,178,157,0,0,104,0,0,0,0,0,0,0,192,137,0,0,201,157,0,0,200,2,0,0,0,0,0,0,232,137,0,0,158,158,0,0,0,0,0,0,2,0,0,0,176,9,0,0,2,0,0,0,8,3,0,0,2,56,0,0,152,137,0,0,1,159,0,0,192,137,0,0,18,159,0,0,176,9,0,0,0,0,0,0,152,137,0,0,33,159,0,0,192,137,0,0,68,159,0,0,88,9,0,0,0,0,0,0,192,137,0,0,83,159,0,0,88,9,0,0,0,0,0,0,192,137,0,0,139,159,0,0,176,9,0,0,0,0,0,0,152,137,0,0,98,159,0,0,192,137,0,0,119,159,0,0,0,1,0,0,0,0,0,0,192,137,0,0,154,159,0,0,88,9,0,0,0,0,0,0,192,137,0,0,185,159,0,0,88,9,0,0,0,0,0,0,192,137,0,0,229,159,0,0,176,9,0,0,0,0,0,0,152,137,0,0,244,159,0,0,192,137,0,0,14,160,0,0,0,1,0,0,0,0,0,0,192,137,0,0,38,160,0,0,88,9,0,0,0,0,0,0,152,137,0,0,103,161,0,0,152,137,0,0,141,161,0,0,192,137,0,0,238,161,0,0,88,9,0,0,0,0,0,0,192,137,0,0,35,162,0,0,88,9,0,0,0,0,0,0,152,137,0,0,234,162,0,0,192,137,0,0,4,163,0,0,88,9,0,0,0,0,0,0,192,137,0,0,43,163,0,0,88,9,0,0,0,0,0,0,192,137,0,0,61,163,0,0,176,9,0,0,0,0,0,0,192,137,0,0,79,163,0,0,32,4,0,0,0,0,0,0,192,137,0,0,104,163,0,0,32,4,0,0,0,0,0,0,192,137,0,0,132,163,0,0,64,4,0,0,0,0,0,0,192,137,0,0,154,163,0,0,32,4,0,0,0,0,0,0,192,137,0,0,177,163,0,0,96,4,0,0,0,0,0,0,192,137,0,0,204,163,0,0,32,4,0,0,0,0,0,0,192,137,0,0,228,163,0,0,128,4,0,0,0,0,0,0,192,137,0,0,255,163,0,0,128,4,0,0,0,0,0,0,192,137,0,0,20,164,0,0,128,4,0,0,0,0,0,0,192,137,0,0,42,164,0,0,32,4,0,0,0,0,0,0,192,137,0,0,67,164,0,0,32,4,0,0,0,0,0,0,152,137,0,0,35,165,0,0,152,137,0,0,64,165,0,0,192,137,0,0,93,165,0,0,144,4,0,0,0,0,0,0,192,137,0,0,115,165,0,0,112,4,0,0,0,0,0,0,152,137,0,0,137,165,0,0,152,137,0,0,148,165,0,0,192,137,0,0,184,165,0,0,24,5,0,0,0,0,0,0,192,137,0,0,208,165,0,0,24,5,0,0,0,0,0,0,152,137,0,0,230,165,0,0,192,137,0,0,252,165,0,0,96,4,0,0,0,0,0,0,192,137,0,0,18,166,0,0,128,4,0,0,0,0,0,0,152,137,0,0,40,166,0,0,192,137,0,0,67,166,0,0,32,6,0,0,0,0,0,0,192,137,0,0,100,166,0,0,144,5,0,0,0,0,0,0,152,137,0,0,172,166,0,0,192,137,0,0,197,166,0,0,88,5,0,0,0,0,0,0,192,137,0,0,219,166,0,0,72,5,0,0,0,0,0,0,192,137,0,0,241,166,0,0,88,9,0,0,0,0,0,0,152,137,0,0,69,167,0,0,192,137,0,0,97,167,0,0,88,9,0,0,0,0,0,0,192,137,0,0,112,167,0,0,88,9,0,0,0,0,0,0,192,137,0,0,177,167,0,0,176,9,0,0,0,0,0,0,152,137,0,0,205,167,0,0,192,137,0,0,222,167,0,0,176,9,0,0,0,0,0,0,152,137,0,0,249,167,0,0,152,137,0,0,30,168,0,0,232,137,0,0,54,168,0,0,0,0,0,0,2,0,0,0,32,6,0,0,2,0,0,0,224,4,0,0,2,32,0,0,232,137,0,0,90,168,0,0,0,0,0,0,2,0,0,0,32,6,0,0,2,0,0,0,232,4,0,0,2,32,0,0,192,137,0,0,126,168,0,0,32,6,0,0,0,0,0,0,232,137,0,0,157,168,0,0,0,0,0,0,2,0,0,0,32,6,0,0,2,0,0,0,232,4,0,0,2,32,0,0,232,137,0,0,184,168,0,0,0,0,0,0,2,0,0,0,32,6,0,0,2,0,0,0,232,4,0,0,2,32,0,0,192,137,0,0,212,168,0,0,24,7,0,0,0,0,0,0,232,137,0,0,246,168,0,0,0,0,0,0,2,0,0,0,24,7,0,0,2,0,0,0,224,4,0,0,2,72,0,0,232,137,0,0,23,169,0,0,0,0,0,0,2,0,0,0,24,7,0,0,2,0,0,0,232,4,0,0,2,72,0,0,192,137,0,0,56,169,0,0,32,6,0,0,0,0,0,0,192,137,0,0,144,169,0,0,32,6,0,0,0,0,0,0,192,137,0,0,172,169,0,0,104,0,0,0,0,0,0,0,192,137,0,0,191,169,0,0,104,0,0,0,0,0,0,0,192,137,0,0,215,169,0,0,104,0,0,0,0,0,0,0,192,137,0,0,57,170,0,0,88,9,0,0,0,0,0,0,152,137,0,0,135,170,0,0,192,137,0,0,149,170,0,0,88,9,0,0,0,0,0,0,192,137,0,0,207,170,0,0,88,9,0,0,0,0,0,0,192,137,0,0,222,170,0,0,88,9,0,0,0,0,0,0,192,137,0,0,4,171,0,0,88,9,0,0,0,0,0,0,152,137,0,0,180,171,0,0,192,137,0,0,215,171,0,0,88,9,0,0,0,0,0,0,192,137,0,0,1,172,0,0,88,9,0,0,0,0,0,0,152,137,0,0,31,172,0,0,152,137,0,0,59,172,0,0,192,137,0,0,95,172,0,0,88,9,0,0,0,0,0,0,152,137,0,0,130,172,0,0,192,137,0,0,163,172,0,0,88,9,0,0,0,0,0,0,192,137,0,0,195,172,0,0,88,9,0,0,0,0,0,0,192,137,0,0,251,172,0,0,88,9,0,0,0,0,0,0,192,137,0,0,26,173,0,0,88,9,0,0,0,0,0,0,192,137,0,0,67,173,0,0,88,9,0,0,0,0,0,0,192,137,0,0,90,173,0,0,88,9,0,0,0,0,0,0,192,137,0,0,105,173,0,0,88,9,0,0,0,0,0,0,152,137,0,0,17,174,0,0,192,137,0,0,50,174,0,0,88,9,0,0,0,0,0,0,192,137,0,0,87,174,0,0,88,9,0,0,0,0,0,0,152,137,0,0,112,174,0,0,192,137,0,0,11,175,0,0,88,9,0,0,0,0,0,0,192,137,0,0,50,175,0,0,152,1,0,0,0,0,0,0,192,137,0,0,82,175,0,0,88,9,0,0,0,0,0,0,192,137,0,0,112,175,0,0,160,1,0,0,0,0,0,0,152,137,0,0,140,175,0,0,192,137,0,0,176,175,0,0,144,9,0,0,0,0,0,0,192,137,0,0,186,175,0,0,88,9,0,0,0,0,0,0,152,137,0,0,122,176,0,0,192,137,0,0,161,176,0,0,88,9,0,0,0,0,0,0,152,137,0,0,235,176,0,0,192,137,0,0,14,177,0,0,208,3,0,0,0,0,0,0,232,137,0,0,51,177,0,0,0,0,0,0,2,0,0,0,88,9,0,0,2,0,0,0,248,3,0,0,2,36,0,0,152,137,0,0,66,177,0,0,192,137,0,0,76,177,0,0,0,1,0,0,0,0,0,0,192,137,0,0,97,177,0,0,88,9,0,0,0,0,0,0,192,137,0,0,115,177,0,0,88,9,0,0,0,0,0,0,152,137,0,0,146,177,0,0,152,137,0,0,120,178,0,0,192,137,0,0,155,178,0,0,152,9,0,0,0,0,0,0,232,137,0,0,172,178,0,0,0,0,0,0,2,0,0,0,88,9,0,0,2,0,0,0,144,9,0,0,2,36,0,0,192,137,0,0,192,178,0,0,88,9,0,0,0,0,0,0,152,137,0,0,9,179,0,0,232,137,0,0,74,179,0,0,0,0,0,0,2,0,0,0,16,0,0,0,2,0,0,0,248,3,0,0,2,52,0,0,232,137,0,0,104,179,0,0,0,0,0,0,2,0,0,0,16,0,0,0,2,0,0,0,112,1,0,0,2,52,0,0,192,137,0,0,135,179,0,0,88,9,0,0,0,0,0,0,192,137,0,0,1,180,0,0,88,9,0,0,0,0,0,0,192,137,0,0,207,180,0,0,88,9,0,0,0,0,0,0,192,137,0,0,18,181,0,0,88,9,0,0,0,0,0,0,192,137,0,0,38,181,0,0,88,9,0,0,0,0,0,0,192,137,0,0,91,181,0,0,168,10,0,0,0,0,0,0,192,137,0,0,112,181,0,0,120,10,0,0,0,0,0,0,192,137,0,0,136,181,0,0,120,10,0,0,0,0,0,0,152,137,0,0,160,181,0,0,192,137,0,0,178,181,0,0,152,1,0,0,0,0,0,0,192,137,0,0,208,181,0,0,88,9,0,0,0,0,0,0,192,137,0,0,223,181,0,0,88,9,0,0,0,0,0,0,192,137,0,0,248,181,0,0,88,9,0,0,0,0,0,0,192,137,0,0,22,182,0,0,88,9,0,0,0,0,0,0,192,137,0,0,42,182,0,0,88,9,0,0,0,0,0,0,152,137,0,0,91,182,0,0,152,137,0,0,128,182,0,0,192,137,0,0,95,185,0,0,120,2,0,0,0,0,0,0,192,137,0,0,154,185,0,0,64,11,0,0,0,0,0,0,152,137,0,0,167,185,0,0,152,137,0,0,180,185,0,0,192,137,0,0,193,185,0,0,72,11,0,0,0,0,0,0,192,137,0,0,226,185,0,0,80,11,0,0,0,0,0,0,192,137,0,0,40,186,0,0,80,11,0,0,0,0,0,0,192,137,0,0,4,186,0,0,112,11,0,0,0,0,0,0,192,137,0,0,74,186,0,0,96,11,0,0,0,0,0,0,192,137,0,0,111,186,0,0,96,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,32,0,0,0,16,0,0,0,17,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,18,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,48,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,23,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,64,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,72,0,0,0,28,0,0,0,29,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,30,0,0,0,9,0,0,0,24,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,88,0,0,0,31,0,0,0,32,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,33,0,0,0,9,0,0,0,24,0,0,0,34,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,120,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,104,0,0,0,40,0,0,0,41,0,0,0,37,0,0,0,8,0,0,0,39,0,0,0,0,0,0,0,136,0,0,0,42,0,0,0,43,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,44,0,0,0,9,0,0,0,24,0,0,0,45,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,152,0,0,0,46,0,0,0,47,0,0,0,37,0,0,0,48,0,0,0,39,0,0,0,0,0,0,0,168,0,0,0,49,0,0,0,50,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,51,0,0,0,9,0,0,0,24,0,0,0,52,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,53,0,0,0,0,0,0,0,184,0,0,0,54,0,0,0,55,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,56,0,0,0,9,0,0,0,24,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,200,0,0,0,57,0,0,0,58,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,59,0,0,0,9,0,0,0,24,0,0,0,60,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,216,0,0,0,61,0,0,0,62,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,63,0,0,0,9,0,0,0,24,0,0,0,64,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,232,0,0,0,65,0,0,0,66,0,0,0,0,0,0,0,240,0,0,0,67,0,0,0,68,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,69,0,0,0,9,0,0,0,24,0,0,0,70,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,220,255,255,255,240,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,1,0,0,87,0,0,0,88,0,0,0,8,0,0,0,0,0,0,0,8,1,0,0,89,0,0,0,90,0,0,0,91,0,0,0,0,0,0,0,24,1,0,0,92,0,0,0,93,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,94,0,0,0,9,0,0,0,24,0,0,0,95,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,96,0,0,0,0,0,0,0,40,1,0,0,97,0,0,0,98,0,0,0,0,0,0,0,48,1,0,0,99,0,0,0,100,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,101,0,0,0,9,0,0,0,24,0,0,0,102,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,64,1,0,0,103,0,0,0,104,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,105,0,0,0,9,0,0,0,24,0,0,0,106,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,0,0,0,0,80,1,0,0,111,0,0,0,112,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,113,0,0,0,9,0,0,0,24,0,0,0,114,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,220,255,255,255,80,1,0,0,115,0,0,0,116,0,0,0,0,0,0,0,112,1,0,0,117,0,0,0,118,0,0,0,0,0,0,0,120,1,0,0,119,0,0,0,120,0,0,0,37,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,0,0,0,0,136,1,0,0,124,0,0,0,125,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,1,0,0,127,0,0,0,128,0,0,0,126,0,0,0,0,0,0,0,144,1,0,0,129,0,0,0,130,0,0,0,0,0,0,0,152,1,0,0,131,0,0,0,132,0,0,0,8,0,0,0,0,0,0,0,176,1,0,0,133,0,0,0,134,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,135,0,0,0,9,0,0,0,24,0,0,0,136,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,192,1,0,0,137,0,0,0,138,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,139,0,0,0,9,0,0,0,24,0,0,0,140,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,208,1,0,0,141,0,0,0,142,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,143,0,0,0,9,0,0,0,24,0,0,0,144,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,224,1,0,0,145,0,0,0,146,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,147,0,0,0,9,0,0,0,24,0,0,0,148,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,149,0,0,0,0,0,0,0,240,1,0,0,150,0,0,0,151,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,152,0,0,0,9,0,0,0,24,0,0,0,153,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,2,0,0,154,0,0,0,155,0,0,0,37,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,0,0,0,0,16,2,0,0,164,0,0,0,165,0,0,0,8,0,0,0,0,0,0,0,24,2,0,0,166,0,0,0,167,0,0,0,8,0,0,0,0,0,0,0,32,2,0,0,168,0,0,0,169,0,0,0,170,0,0,0,0,0,0,0,48,2,0,0,171,0,0,0,172,0,0,0,173,0,0,0,0,0,0,0,64,2,0,0,174,0,0,0,175,0,0,0,176,0,0,0,0,0,0,0,80,2,0,0,177,0,0,0,178,0,0,0,0,0,0,0,88,2,0,0,179,0,0,0,180,0,0,0,37,0,0,0,181,0,0,0,182,0,0,0,0,0,0,0,104,2,0,0,183,0,0,0,184,0,0,0,37,0,0,0,185,0,0,0,186,0,0,0,0,0,0,0,136,2,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,152,2,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,120,2,0,0,207,0,0,0,208,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,168,2,0,0,209,0,0,0,210,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,176,2,0,0,211,0,0,0,212,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,213,0,0,0,9,0,0,0,24,0,0,0,214,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,192,2,0,0,215,0,0,0,216,0,0,0,0,0,0,0,200,2,0,0,217,0,0,0,218,0,0,0,37,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,0,0,0,0,216,2,0,0,223,0,0,0,224,0,0,0,37,0,0,0,225,0,0,0,226,0,0,0,221,0,0,0,222,0,0,0,0,0,0,0,232,2,0,0,227,0,0,0,228,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,229,0,0,0,9,0,0,0,24,0,0,0,230,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,231,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,220,255,255,255,232,2,0,0,235,0,0,0,236,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,200,255,255,255,232,2,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,0,0,0,0,8,3,0,0,242,0,0,0,243,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,16,3,0,0,244,0,0,0,245,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,246,0,0,0,9,0,0,0,24,0,0,0,247,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,220,255,255,255,16,3,0,0,248,0,0,0,249,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,32,3,0,0,250,0,0,0,251,0,0,0,0,0,0,0,40,3,0,0,252,0,0,0,253,0,0,0,21,0,0,0,6,0,0,0,22,0,0,0,254,0,0,0,9,0,0,0,24,0,0,0,255,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,56,3,0,0,0,1,0,0,1,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,2,1,0,0,9,0,0,0,24,0,0,0,3,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,88,3,0,0,4,1,0,0,5,1,0,0,0,0,0,0,96,3,0,0,6,1,0,0,7,1,0,0,8,1,0,0,0,0,0,0,112,3,0,0,9,1,0,0,10,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,11,1,0,0,9,0,0,0,24,0,0,0,12,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,128,3,0,0,13,1,0,0,14,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,15,1,0,0,9,0,0,0,24,0,0,0,16,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,144,3,0,0,17,1,0,0,18,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,19,1,0,0,9,0,0,0,24,0,0,0,247,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,20,1,0,0,21,1,0,0,220,255,255,255,144,3,0,0,22,1,0,0,23,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,24,1,0,0,25,1,0,0,0,0,0,0,160,3,0,0,26,1,0,0,27,1,0,0,0,0,0,0,168,3,0,0,28,1,0,0,29,1,0,0,30,1,0,0,0,0,0,0,184,3,0,0,31,1,0,0,32,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,33,1,0,0,9,0,0,0,24,0,0,0,34,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,200,3,0,0,35,1,0,0,36,1,0,0,0,0,0,0,208,3,0,0,37,1,0,0,38,1,0,0,39,1,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,216,3,0,0,40,1,0,0,41,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,42,1,0,0,9,0,0,0,24,0,0,0,43,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,232,3,0,0,44,1,0,0,45,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,46,1,0,0,9,0,0,0,24,0,0,0,47,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,248,3,0,0,48,1,0,0,49,1,0,0,0,0,0,0,0,4,0,0,50,1,0,0,51,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,52,1,0,0,9,0,0,0,24,0,0,0,53,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,0,0,0,0,16,4,0,0,58,1,0,0,59,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,60,1,0,0,9,0,0,0,24,0,0,0,61,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,62,1,0,0,0,0,0,0,32,4,0,0,63,1,0,0,64,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,66,1,0,0,67,1,0,0,24,0,0,0,68,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,220,255,255,255,32,4,0,0,75,1,0,0,76,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,48,4,0,0,78,1,0,0,79,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,80,1,0,0,67,1,0,0,24,0,0,0,68,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,81,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,82,1,0,0,72,1,0,0,83,1,0,0,84,1,0,0,220,255,255,255,48,4,0,0,85,1,0,0,86,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,64,4,0,0,87,1,0,0,88,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,66,1,0,0,67,1,0,0,24,0,0,0,68,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,89,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,220,255,255,255,64,4,0,0,90,1,0,0,91,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,80,4,0,0,92,1,0,0,93,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,66,1,0,0,67,1,0,0,24,0,0,0,68,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,94,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,220,255,255,255,80,4,0,0,95,1,0,0,96,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,96,4,0,0,97,1,0,0,98,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,99,1,0,0,67,1,0,0,24,0,0,0,100,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,101,1,0,0,72,1,0,0,102,1,0,0,103,1,0,0,220,255,255,255,96,4,0,0,104,1,0,0,105,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,112,4,0,0,106,1,0,0,107,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,99,1,0,0,67,1,0,0,24,0,0,0,100,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,108,1,0,0,72,1,0,0,102,1,0,0,103,1,0,0,220,255,255,255,112,4,0,0,109,1,0,0,110,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,128,4,0,0,111,1,0,0,112,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,115,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,220,255,255,255,128,4,0,0,118,1,0,0,119,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,144,4,0,0,120,1,0,0,121,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,122,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,220,255,255,255,144,4,0,0,123,1,0,0,124,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,160,4,0,0,125,1,0,0,126,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,127,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,220,255,255,255,160,4,0,0,128,1,0,0,129,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,176,4,0,0,130,1,0,0,131,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,132,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,220,255,255,255,176,4,0,0,133,1,0,0,134,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,192,4,0,0,135,1,0,0,136,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,137,1,0,0,67,1,0,0,24,0,0,0,138,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,71,1,0,0,72,1,0,0,139,1,0,0,140,1,0,0,220,255,255,255,192,4,0,0,141,1,0,0,142,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,208,4,0,0,143,1,0,0,144,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,145,1,0,0,67,1,0,0,24,0,0,0,146,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,147,1,0,0,72,1,0,0,148,1,0,0,149,1,0,0,220,255,255,255,208,4,0,0,150,1,0,0,151,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,5,0,0,152,1,0,0,153,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,99,1,0,0,67,1,0,0,24,0,0,0,100,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,108,1,0,0,72,1,0,0,102,1,0,0,103,1,0,0,220,255,255,255,0,5,0,0,154,1,0,0,155,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,240,4,0,0,156,1,0,0,157,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,122,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,220,255,255,255,240,4,0,0,158,1,0,0,159,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,224,4,0,0,160,1,0,0,161,1,0,0,0,0,0,0,232,4,0,0,162,1,0,0,163,1,0,0,0,0,0,0,16,5,0,0,164,1,0,0,165,1,0,0,0,0,0,0,24,5,0,0,166,1,0,0,167,1,0,0,8,0,0,0,0,0,0,0,32,5,0,0,168,1,0,0,169,1,0,0,170,1,0,0,0,0,0,0,48,5,0,0,171,1,0,0,172,1,0,0,173,1,0,0,0,0,0,0,64,5,0,0,174,1,0,0,175,1,0,0,0,0,0,0,72,5,0,0,176,1,0,0,177,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,99,1,0,0,67,1,0,0,24,0,0,0,100,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,178,1,0,0,72,1,0,0,102,1,0,0,103,1,0,0,179,1,0,0,220,255,255,255,72,5,0,0,180,1,0,0,181,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,88,5,0,0,182,1,0,0,183,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,184,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,185,1,0,0,220,255,255,255,88,5,0,0,186,1,0,0,187,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,104,5,0,0,188,1,0,0,189,1,0,0,0,0,0,0,112,5,0,0,190,1,0,0,191,1,0,0,192,1,0,0,193,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,5,0,0,195,1,0,0,196,1,0,0,197,1,0,0,0,0,0,0,168,5,0,0,198,1,0,0,199,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,99,1,0,0,67,1,0,0,24,0,0,0,100,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,178,1,0,0,72,1,0,0,102,1,0,0,103,1,0,0,179,1,0,0,220,255,255,255,168,5,0,0,200,1,0,0,201,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,152,5,0,0,202,1,0,0,203,1,0,0,21,0,0,0,65,1,0,0,22,0,0,0,113,1,0,0,67,1,0,0,24,0,0,0,114,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,69,1,0,0,72,0,0,0,70,1,0,0,74,0,0,0,75,0,0,0,184,1,0,0,72,1,0,0,116,1,0,0,117,1,0,0,185,1,0,0,220,255,255,255,152,5,0,0,204,1,0,0,205,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,77,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,144,5,0,0,206,1,0,0,207,1,0,0,8,0,0,0,0,0,0,0,184,5,0,0,208,1,0,0,209,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,210,1,0,0,9,0,0,0,24,0,0,0,211,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,200,5,0,0,212,1,0,0,213,1,0,0,0,0,0,0,208,5,0,0,214,1,0,0,215,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,216,1,0,0,9,0,0,0,24,0,0,0,217,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,224,5,0,0,218,1,0,0,219,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,220,1,0,0,9,0,0,0,24,0,0,0,221,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,240,5,0,0,222,1,0,0,223,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,224,1,0,0,9,0,0,0,24,0,0,0,225,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,226,1,0,0,74,0,0,0,75,0,0,0,220,255,255,255,240,5,0,0,227,1,0,0,228,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,229,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,6,0,0,230,1,0,0,231,1,0,0,0,0,0,0,8,6,0,0,232,1,0,0,233,1,0,0,21,0,0,0,6,0,0,0,22,0,0,0,234,1,0,0,9,0,0,0,24,0,0,0,235,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,236,1,0,0,74,0,0,0,75,0,0,0,237,1,0,0,238,1,0,0,239,1,0,0,220,255,255,255,8,6,0,0,240,1,0,0,241,1,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,242,1,0,0,85,0,0,0,86,0,0,0,0,0,0,0,24,6,0,0,243,1,0,0,244,1,0,0,0,0,0,0,32,6,0,0,245,1,0,0,246,1,0,0,192,1,0,0,193,1,0,0,247,1,0,0,0,0,0,0,104,6,0,0,248,1,0,0,249,1,0,0,250,1,0,0,193,1,0,0,251,1,0,0,0,0,0,0,120,6,0,0,252,1,0,0,253,1,0,0,192,1,0,0,254,1,0,0,255,1,0,0,224,255,255,255,120,6,0,0,0,2,0,0,1,2,0,0,0,0,0,0,152,6,0,0,2,2,0,0,3,2,0,0,192,1,0,0,4,2,0,0,5,2,0,0,224,255,255,255,152,6,0,0,6,2,0,0,7,2,0,0,0,0,0,0,184,6,0,0,8,2,0,0,9,2,0,0,192,1,0,0,193,1,0,0,10,2,0,0,0,0,0,0,200,6,0,0,11,2,0,0,12,2,0,0,192,1,0,0,13,2,0,0,14,2,0,0,184,255,255,255,200,6,0,0,15,2,0,0,16,2,0,0,0,0,0,0,232,6,0,0,17,2,0,0,18,2,0,0,192,1,0,0,193,1,0,0,19,2,0,0,184,255,255,255,232,6,0,0,20,2,0,0,21,2,0,0,0,0,0,0,8,7,0,0,22,2,0,0,23,2,0,0,24,2,0,0,193,1,0,0,25,2,0,0,0,0,0,0,40,6,0,0,26,2,0,0,27,2,0,0,192,1,0,0,193,1,0,0,28,2,0,0,224,255,255,255,40,6,0,0,29,2,0,0,30,2,0,0,0,0,0,0,72,6,0,0,31,2,0,0,32,2,0,0,192,1,0,0,193,1,0,0,33,2,0,0,224,255,255,255,72,6,0,0,34,2,0,0,35,2,0,0,0,0,0,0,24,7,0,0,36,2,0,0,37,2,0,0,192,1,0,0,193,1,0,0,247,1,0,0,0,0,0,0,40,7,0,0,38,2,0,0,39,2,0,0,37,0,0,0,40,2,0,0,41,2,0,0,42,2,0,0,43,2,0,0,0,0,0,0,56,7,0,0,44,2,0,0,45,2,0,0,37,0,0,0,46,2,0,0,47,2,0,0,0,0,0,0,72,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([48,2,0,0,49,2,0,0,37,0,0,0,50,2,0,0,51,2,0,0,0,0,0,0,88,7,0,0,52,2,0,0,53,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,54,2,0,0,9,0,0,0,24,0,0,0,55,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,104,7,0,0,56,2,0,0,57,2,0,0,0,0,0,0,112,7,0,0,58,2,0,0,59,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,60,2,0,0,9,0,0,0,24,0,0,0,61,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,128,7,0,0,62,2,0,0,63,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,64,2,0,0,9,0,0,0,24,0,0,0,65,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,144,7,0,0,66,2,0,0,67,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,68,2,0,0,9,0,0,0,24,0,0,0,69,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,160,7,0,0,70,2,0,0,71,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,72,2,0,0,9,0,0,0,24,0,0,0,73,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,176,7,0,0,74,2,0,0,75,2,0,0,0,0,0,0,184,7,0,0,76,2,0,0,77,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,78,2,0,0,9,0,0,0,24,0,0,0,79,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,200,7,0,0,80,2,0,0,81,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,82,2,0,0,9,0,0,0,24,0,0,0,83,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,216,7,0,0,84,2,0,0,85,2,0,0,0,0,0,0,224,7,0,0,86,2,0,0,87,2,0,0,0,0,0,0,232,7,0,0,88,2,0,0,89,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,90,2,0,0,9,0,0,0,24,0,0,0,91,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,248,7,0,0,92,2,0,0,93,2,0,0,0,0,0,0,0,8,0,0,94,2,0,0,95,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,96,2,0,0,9,0,0,0,24,0,0,0,97,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,16,8,0,0,98,2,0,0,99,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,100,2,0,0,9,0,0,0,24,0,0,0,101,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,102,2,0,0,0,0,0,0,32,8,0,0,103,2,0,0,104,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,105,2,0,0,9,0,0,0,24,0,0,0,106,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,48,8,0,0,107,2,0,0,108,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,109,2,0,0,9,0,0,0,24,0,0,0,110,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,64,8,0,0,111,2,0,0,112,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,113,2,0,0,9,0,0,0,24,0,0,0,114,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,80,8,0,0,115,2,0,0,116,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,117,2,0,0,9,0,0,0,24,0,0,0,118,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,96,8,0,0,119,2,0,0,120,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,121,2,0,0,9,0,0,0,24,0,0,0,122,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,123,2,0,0,124,2,0,0,0,0,0,0,112,8,0,0,125,2,0,0,126,2,0,0,0,0,0,0,120,8,0,0,127,2,0,0,128,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,129,2,0,0,9,0,0,0,24,0,0,0,130,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,136,8,0,0,131,2,0,0,132,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,133,2,0,0,9,0,0,0,24,0,0,0,134,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,152,8,0,0,135,2,0,0,136,2,0,0,37,0,0,0,8,0,0,0,137,2,0,0,0,0,0,0,160,8,0,0,138,2,0,0,139,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,140,2,0,0,9,0,0,0,24,0,0,0,141,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,8,0,0,142,2,0,0,143,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,144,2,0,0,9,0,0,0,24,0,0,0,145,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,176,8,0,0,146,2,0,0,147,2,0,0,148,2,0,0,0,0,0,0,208,8,0,0,149,2,0,0,150,2,0,0,126,0,0,0,0,0,0,0,224,8,0,0,151,2,0,0,152,2,0,0,0,0,0,0,232,8,0,0,153,2,0,0,154,2,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,155,2,0,0,156,2,0,0,157,2,0,0,158,2,0,0,0,0,0,0,248,8,0,0,159,2,0,0,160,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,161,2,0,0,9,0,0,0,24,0,0,0,162,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,8,9,0,0,163,2,0,0,164,2,0,0,0,0,0,0,16,9,0,0,165,2,0,0,166,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,167,2,0,0,9,0,0,0,24,0,0,0,168,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,32,9,0,0,169,2,0,0,170,2,0,0,0,0,0,0,40,9,0,0,171,2,0,0,172,2,0,0,39,1,0,0,173,2,0,0,174,2,0,0,175,2,0,0,176,2,0,0,177,2,0,0,178,2,0,0,179,2,0,0,180,2,0,0,181,2,0,0,182,2,0,0,183,2,0,0,0,0,0,0,72,3,0,0,184,2,0,0,185,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,19,1,0,0,9,0,0,0,24,0,0,0,247,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,220,255,255,255,72,3,0,0,186,2,0,0,187,2,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,56,9,0,0,188,2,0,0,189,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,190,2,0,0,9,0,0,0,24,0,0,0,191,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,220,255,255,255,56,9,0,0,192,2,0,0,193,2,0,0,0,0,0,0,88,9,0,0,194,2,0,0,195,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,112,9,0,0,196,2,0,0,197,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,198,2,0,0,9,0,0,0,24,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,199,2,0,0,0,0,0,0,128,9,0,0,200,2,0,0,201,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,202,2,0,0,9,0,0,0,24,0,0,0,203,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,144,9,0,0,204,2,0,0,205,2,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,155,2,0,0,156,2,0,0,157,2,0,0,0,0,0,0,96,9,0,0,206,2,0,0,207,2,0,0,208,2,0,0,0,0,0,0,152,9,0,0,209,2,0,0,210,2,0,0,8,0,0,0,0,0,0,0,160,9,0,0,211,2,0,0,212,2,0,0,213,2,0,0,0,0,0,0,176,9,0,0,214,2,0,0,215,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,19,1,0,0,9,0,0,0,24,0,0,0,247,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,220,255,255,255,176,9,0,0,216,2,0,0,217,2,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,208,9,0,0,218,2,0,0,219,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,220,2,0,0,9,0,0,0,24,0,0,0,221,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,222,2,0,0,223,2,0,0,224,2,0,0,0,0,0,0,224,9,0,0,225,2,0,0,226,2,0,0,0,0,0,0,232,9,0,0,227,2,0,0,228,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,229,2,0,0,9,0,0,0,10,0,0,0,230,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,204,255,255,255,232,9,0,0,231,2,0,0,232,2,0,0,0,0,0,0,8,10,0,0,233,2,0,0,234,2,0,0,5,0,0,0,6,0,0,0,7,0,0,0,235,2,0,0,9,0,0,0,10,0,0,0,236,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,204,255,255,255,8,10,0,0,237,2,0,0,238,2,0,0,0,0,0,0,40,10,0,0,239,2,0,0,240,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,241,2,0,0,9,0,0,0,24,0,0,0,242,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,56,10,0,0,243,2,0,0,244,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,245,2,0,0,9,0,0,0,24,0,0,0,246,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,72,10,0,0,247,2,0,0,248,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,249,2,0,0,9,0,0,0,24,0,0,0,250,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,251,2,0,0,0,0,0,0,88,10,0,0,252,2,0,0,253,2,0,0,21,0,0,0,6,0,0,0,22,0,0,0,254,2,0,0,9,0,0,0,24,0,0,0,255,2,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,104,10,0,0,0,3,0,0,1,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,2,3,0,0,9,0,0,0,24,0,0,0,3,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,120,10,0,0,4,3,0,0,5,3,0,0,6,3,0,0,8,0,0,0,0,0,0,0,136,10,0,0,7,3,0,0,8,3,0,0,6,3,0,0,9,3,0,0,0,0,0,0,152,10,0,0,10,3,0,0,11,3,0,0,6,3,0,0,12,3,0,0,198,99,99,165,248,124,124,132,238,119,119,153,246,123,123,141,255,242,242,13,214,107,107,189,222,111,111,177,145,197,197,84,96,48,48,80,2,1,1,3,206,103,103,169,86,43,43,125,231,254,254,25,181,215,215,98,77,171,171,230,236,118,118,154,143,202,202,69,31,130,130,157,137,201,201,64,250,125,125,135,239,250,250,21,178,89,89,235,142,71,71,201,251,240,240,11,65,173,173,236,179,212,212,103,95,162,162,253,69,175,175,234,35,156,156,191,83,164,164,247,228,114,114,150,155,192,192,91,117,183,183,194,225,253,253,28,61,147,147,174,76,38,38,106,108,54,54,90,126,63,63,65,245,247,247,2,131,204,204,79,104,52,52,92,81,165,165,244,209,229,229,52,249,241,241,8,226,113,113,147,171,216,216,115,98,49,49,83,42,21,21,63,8,4,4,12,149,199,199,82,70,35,35,101,157,195,195,94,48,24,24,40,55,150,150,161,10,5,5,15,47,154,154,181,14,7,7,9,36,18,18,54,27,128,128,155,223,226,226,61,205,235,235,38,78,39,39,105,127,178,178,205,234,117,117,159,18,9,9,27,29,131,131,158,88,44,44,116,52,26,26,46,54,27,27,45,220,110,110,178,180,90,90,238,91,160,160,251,164,82,82,246,118,59,59,77,183,214,214,97,125,179,179,206,82,41,41,123,221,227,227,62,94,47,47,113,19,132,132,151,166,83,83,245,185,209,209,104,0,0,0,0,193,237,237,44,64,32,32,96,227,252,252,31,121,177,177,200,182,91,91,237,212,106,106,190,141,203,203,70,103,190,190,217,114,57,57,75,148,74,74,222,152,76,76,212,176,88,88,232,133,207,207,74,187,208,208,107,197,239,239,42,79,170,170,229,237,251,251,22,134,67,67,197,154,77,77,215,102,51,51,85,17,133,133,148,138,69,69,207,233,249,249,16,4,2,2,6,254,127,127,129,160,80,80,240,120,60,60,68,37,159,159,186,75,168,168,227,162,81,81,243,93,163,163,254,128,64,64,192,5,143,143,138,63,146,146,173,33,157,157,188,112,56,56,72,241,245,245,4,99,188,188,223,119,182,182,193,175,218,218,117,66,33,33,99,32,16,16,48,229,255,255,26,253,243,243,14,191,210,210,109,129,205,205,76,24,12,12,20,38,19,19,53,195,236,236,47,190,95,95,225,53,151,151,162,136,68,68,204,46,23,23,57,147,196,196,87,85,167,167,242,252,126,126,130,122,61,61,71,200,100,100,172,186,93,93,231,50,25,25,43,230,115,115,149,192,96,96,160,25,129,129,152,158,79,79,209,163,220,220,127,68,34,34,102,84,42,42,126,59,144,144,171,11,136,136,131,140,70,70,202,199,238,238,41,107,184,184,211,40,20,20,60,167,222,222,121,188,94,94,226,22,11,11,29,173,219,219,118,219,224,224,59,100,50,50,86,116,58,58,78,20,10,10,30,146,73,73,219,12,6,6,10,72,36,36,108,184,92,92,228,159,194,194,93,189,211,211,110,67,172,172,239,196,98,98,166,57,145,145,168,49,149,149,164,211,228,228,55,242,121,121,139,213,231,231,50,139,200,200,67,110,55,55,89,218,109,109,183,1,141,141,140,177,213,213,100,156,78,78,210,73,169,169,224,216,108,108,180,172,86,86,250,243,244,244,7,207,234,234,37,202,101,101,175,244,122,122,142,71,174,174,233,16,8,8,24,111,186,186,213,240,120,120,136,74,37,37,111,92,46,46,114,56,28,28,36,87,166,166,241,115,180,180,199,151,198,198,81,203,232,232,35,161,221,221,124,232,116,116,156,62,31,31,33,150,75,75,221,97,189,189,220,13,139,139,134,15,138,138,133,224,112,112,144,124,62,62,66,113,181,181,196,204,102,102,170,144,72,72,216,6,3,3,5,247,246,246,1,28,14,14,18,194,97,97,163,106,53,53,95,174,87,87,249,105,185,185,208,23,134,134,145,153,193,193,88,58,29,29,39,39,158,158,185,217,225,225,56,235,248,248,19,43,152,152,179,34,17,17,51,210,105,105,187,169,217,217,112,7,142,142,137,51,148,148,167,45,155,155,182,60,30,30,34,21,135,135,146,201,233,233,32,135,206,206,73,170,85,85,255,80,40,40,120,165,223,223,122,3,140,140,143,89,161,161,248,9,137,137,128,26,13,13,23,101,191,191,218,215,230,230,49,132,66,66,198,208,104,104,184,130,65,65,195,41,153,153,176,90,45,45,119,30,15,15,17,123,176,176,203,168,84,84,252,109,187,187,214,44,22,22,58,165,198,99,99,132,248,124,124,153,238,119,119,141,246,123,123,13,255,242,242,189,214,107,107,177,222,111,111,84,145,197,197,80,96,48,48,3,2,1,1,169,206,103,103,125,86,43,43,25,231,254,254,98,181,215,215,230,77,171,171,154,236,118,118,69,143,202,202,157,31,130,130,64,137,201,201,135,250,125,125,21,239,250,250,235,178,89,89,201,142,71,71,11,251,240,240,236,65,173,173,103,179,212,212,253,95,162,162,234,69,175,175,191,35,156,156,247,83,164,164,150,228,114,114,91,155,192,192,194,117,183,183,28,225,253,253,174,61,147,147,106,76,38,38,90,108,54,54,65,126,63,63,2,245,247,247,79,131,204,204,92,104,52,52,244,81,165,165,52,209,229,229,8,249,241,241,147,226,113,113,115,171,216,216,83,98,49,49,63,42,21,21,12,8,4,4,82,149,199,199,101,70,35,35,94,157,195,195,40,48,24,24,161,55,150,150,15,10,5,5,181,47,154,154,9,14,7,7,54,36,18,18,155,27,128,128,61,223,226,226,38,205,235,235,105,78,39,39,205,127,178,178,159,234,117,117,27,18,9,9,158,29,131,131,116,88,44,44,46,52,26,26,45,54,27,27,178,220,110,110,238,180,90,90,251,91,160,160,246,164,82,82,77,118,59,59,97,183,214,214,206,125,179,179,123,82,41,41,62,221,227,227,113,94,47,47,151,19,132,132,245,166,83,83,104,185,209,209,0,0,0,0,44,193,237,237,96,64,32,32,31,227,252,252,200,121,177,177,237,182,91,91,190,212,106,106,70,141,203,203,217,103,190,190,75,114,57,57,222,148,74,74,212,152,76,76,232,176,88,88,74,133,207,207,107,187,208,208,42,197,239,239,229,79,170,170,22,237,251,251,197,134,67,67,215,154,77,77,85,102,51,51,148,17,133,133,207,138,69,69,16,233,249,249,6,4,2,2,129,254,127,127,240,160,80,80,68,120,60,60,186,37,159,159,227,75,168,168,243,162,81,81,254,93,163,163,192,128,64,64,138,5,143,143,173,63,146,146,188,33,157,157,72,112,56,56,4,241,245,245,223,99,188,188,193,119,182,182,117,175,218,218,99,66,33,33,48,32,16,16,26,229,255,255,14,253,243,243,109,191,210,210,76,129,205,205,20,24,12,12,53,38,19,19,47,195,236,236,225,190,95,95,162,53,151,151,204,136,68,68,57,46,23,23,87,147,196,196,242,85,167,167,130,252,126,126,71,122,61,61,172,200,100,100,231,186,93,93,43,50,25,25,149,230,115,115,160,192,96,96,152,25,129,129,209,158,79,79,127,163,220,220,102,68,34,34,126,84,42,42,171,59,144,144,131,11,136,136,202,140,70,70,41,199,238,238,211,107,184,184,60,40,20,20,121,167,222,222,226,188,94,94,29,22,11,11,118,173,219,219,59,219,224,224,86,100,50,50,78,116,58,58,30,20,10,10,219,146,73,73,10,12,6,6,108,72,36,36,228,184,92,92,93,159,194,194,110,189,211,211,239,67,172,172,166,196,98,98,168,57,145,145,164,49,149,149,55,211,228,228,139,242,121,121,50,213,231,231,67,139,200,200,89,110,55,55,183,218,109,109,140,1,141,141,100,177,213,213,210,156,78,78,224,73,169,169,180,216,108,108,250,172,86,86,7,243,244,244,37,207,234,234,175,202,101,101,142,244,122,122,233,71,174,174,24,16,8,8,213,111,186,186,136,240,120,120,111,74,37,37,114,92,46,46,36,56,28,28,241,87,166,166,199,115,180,180,81,151,198,198,35,203,232,232,124,161,221,221,156,232,116,116,33,62,31,31,221,150,75,75,220,97,189,189,134,13,139,139,133,15,138,138,144,224,112,112,66,124,62,62,196,113,181,181,170,204,102,102,216,144,72,72,5,6,3,3,1,247,246,246,18,28,14,14,163,194,97,97,95,106,53,53,249,174,87,87,208,105,185,185,145,23,134,134,88,153,193,193,39,58,29,29,185,39,158,158,56,217,225,225,19,235,248,248,179,43,152,152,51,34,17,17,187,210,105,105,112,169,217,217,137,7,142,142,167,51,148,148,182,45,155,155,34,60,30,30,146,21,135,135,32,201,233,233,73,135,206,206,255,170,85,85,120,80,40,40,122,165,223,223,143,3,140,140,248,89,161,161,128,9,137,137,23,26,13,13,218,101,191,191,49,215,230,230,198,132,66,66,184,208,104,104,195,130,65,65,176,41,153,153,119,90,45,45,17,30,15,15,203,123,176,176,252,168,84,84,214,109,187,187,58,44,22,22,99,165,198,99,124,132,248,124,119,153,238,119,123,141,246,123,242,13,255,242,107,189,214,107,111,177,222,111,197,84,145,197,48,80,96,48,1,3,2,1,103,169,206,103,43,125,86,43,254,25,231,254,215,98,181,215,171,230,77,171,118,154,236,118,202,69,143,202,130,157,31,130,201,64,137,201,125,135,250,125,250,21,239,250,89,235,178,89,71,201,142,71,240,11,251,240,173,236,65,173,212,103,179,212,162,253,95,162,175,234,69,175,156,191,35,156,164,247,83,164,114,150,228,114,192,91,155,192,183,194,117,183,253,28,225,253,147,174,61,147,38,106,76,38,54,90,108,54,63,65,126,63,247,2,245,247,204,79,131,204,52,92,104,52,165,244,81,165,229,52,209,229,241,8,249,241,113,147,226,113,216,115,171,216,49,83,98,49,21,63,42,21,4,12,8,4,199,82,149,199,35,101,70,35,195,94,157,195,24,40,48,24,150,161,55,150,5,15,10,5,154,181,47,154,7,9,14,7,18,54,36,18,128,155,27,128,226,61,223,226,235,38,205,235,39,105,78,39,178,205,127,178,117,159,234,117,9,27,18,9,131,158,29,131,44,116,88,44,26,46,52,26,27,45,54,27,110,178,220,110,90,238,180,90,160,251,91,160,82,246,164,82,59,77,118,59,214,97,183,214,179,206,125,179,41,123,82,41,227,62,221,227,47,113,94,47,132,151,19,132,83,245,166,83,209,104,185,209,0,0,0,0,237,44,193,237,32,96,64,32,252,31,227,252,177,200,121,177,91,237,182,91,106,190,212,106,203,70,141,203,190,217,103,190,57,75,114,57,74,222,148,74,76,212,152,76,88,232,176,88,207,74,133,207,208,107,187,208,239,42,197,239,170,229,79,170,251,22,237,251,67,197,134,67,77,215,154,77,51,85,102,51,133,148,17,133,69,207,138,69,249,16,233,249,2,6,4,2,127,129,254,127,80,240,160,80,60,68,120,60,159,186,37,159,168,227,75,168,81,243,162,81,163,254,93,163,64,192,128,64,143,138,5,143,146,173,63,146,157,188,33,157,56,72,112,56,245,4,241,245,188,223,99,188,182,193,119,182,218,117,175,218,33,99,66,33,16,48,32,16,255,26,229,255,243,14,253,243,210,109,191,210,205,76,129,205,12,20,24,12,19,53,38,19,236,47,195,236,95,225,190,95,151,162,53,151,68,204,136,68,23,57,46,23,196,87,147,196,167,242,85,167,126,130,252,126,61,71,122,61,100,172,200,100,93,231,186,93,25,43,50,25,115,149,230,115,96,160,192,96,129,152,25,129,79,209,158,79,220,127,163,220,34,102,68,34,42,126,84,42,144,171,59,144,136,131,11,136,70,202,140,70,238,41,199,238,184,211,107,184,20,60,40,20,222,121,167,222,94,226,188,94,11,29,22,11,219,118,173,219,224,59,219,224,50,86,100,50,58,78,116,58,10,30,20,10,73,219,146,73,6,10,12,6,36,108,72,36,92,228,184,92,194,93,159,194,211,110,189,211,172,239,67,172,98,166,196,98,145,168,57,145,149,164,49,149,228,55,211,228,121,139,242,121,231,50,213,231,200,67,139,200,55,89,110,55,109,183,218,109,141,140,1,141,213,100,177,213,78,210,156,78,169,224,73,169,108,180,216,108,86,250,172,86,244,7,243,244,234,37,207,234,101,175,202,101,122,142,244,122,174,233,71,174,8,24,16,8,186,213,111,186,120,136,240,120,37,111,74,37,46,114,92,46,28,36,56,28,166,241,87,166,180,199,115,180,198,81,151,198,232,35,203,232,221,124,161,221,116,156,232,116,31,33,62,31,75,221,150,75,189,220,97,189,139,134,13,139,138,133,15,138,112,144,224,112,62,66,124,62,181,196,113,181,102,170,204,102,72,216,144,72,3,5,6,3,246,1,247,246,14,18,28,14,97,163,194,97,53,95,106,53,87,249,174,87,185,208,105,185,134,145,23,134,193,88,153,193,29,39,58,29,158,185,39,158,225,56,217,225,248,19,235,248,152,179,43,152,17,51,34,17,105,187,210,105,217,112,169,217,142,137,7,142,148,167,51,148,155,182,45,155,30,34,60,30,135,146,21,135,233,32,201,233,206,73,135,206,85,255,170,85,40,120,80,40,223,122,165,223,140,143,3,140,161,248,89,161,137,128,9,137,13,23,26,13,191,218,101,191,230,49,215,230,66,198,132,66,104,184,208,104,65,195,130,65,153,176,41,153,45,119,90,45,15,17,30,15,176,203,123,176,84,252,168,84,187,214,109,187,22,58,44,22,99,99,165,198,124,124,132,248,119,119,153,238,123,123,141,246,242,242,13,255,107,107,189,214,111,111,177,222,197,197,84,145,48,48,80,96,1,1,3,2,103,103,169,206,43,43,125,86,254,254,25,231,215,215,98,181,171,171,230,77,118,118,154,236,202,202,69,143,130,130,157,31,201,201,64,137,125,125,135,250,250,250,21,239,89,89,235,178,71,71,201,142,240,240,11,251,173,173,236,65,212,212,103,179,162,162,253,95,175,175,234,69,156,156,191,35,164,164,247,83,114,114,150,228,192,192,91,155,183,183,194,117,253,253,28,225,147,147,174,61,38,38,106,76,54,54,90,108,63,63,65,126,247,247,2,245,204,204,79,131,52,52,92,104,165,165,244,81,229,229,52,209,241,241,8,249,113,113,147,226,216,216,115,171,49,49,83,98,21,21,63,42,4,4,12,8,199,199,82,149,35,35,101,70,195,195,94,157,24,24,40,48,150,150,161,55,5,5,15,10,154,154,181,47,7,7,9,14,18,18,54,36,128,128,155,27,226,226,61,223,235,235,38,205,39,39,105,78,178,178,205,127,117,117,159,234,9,9,27,18,131,131,158,29,44,44,116,88,26,26,46,52,27,27,45,54,110,110,178,220,90,90,238,180,160,160,251,91,82,82,246,164,59,59,77,118,214,214,97,183,179,179,206,125,41,41,123,82,227,227,62,221,47,47,113,94,132,132,151,19,83,83,245,166,209,209,104,185,0,0,0,0,237,237,44,193,32,32,96,64,252,252,31,227,177,177,200,121,91,91,237,182,106,106,190,212,203,203,70,141,190,190,217,103,57,57,75,114,74,74,222,148,76,76,212,152,88,88,232,176,207,207,74,133,208,208,107,187,239,239,42,197,170,170,229,79,251,251,22,237,67,67,197,134,77,77,215,154,51,51,85,102,133,133,148,17,69,69,207,138,249,249,16,233,2,2,6,4,127,127,129,254,80,80,240,160,60,60,68,120,159,159,186,37,168,168,227,75,81,81,243,162,163,163,254,93,64,64,192,128,143,143,138,5,146,146,173,63,157,157,188,33,56,56,72,112,245,245,4,241,188,188,223,99,182,182,193,119,218,218,117,175,33,33,99,66,16,16,48,32,255,255,26,229,243,243,14,253,210,210,109,191,205,205,76,129,12,12,20,24,19,19,53,38,236,236,47,195,95,95,225,190,151,151,162,53,68,68,204,136,23,23,57,46,196,196,87,147,167,167,242,85,126,126,130,252,61,61,71,122,100,100,172,200,93,93,231,186,25,25,43,50,115,115,149,230,96,96,160,192,129,129,152,25,79,79,209,158,220,220,127,163,34,34,102,68,42,42,126,84,144,144,171,59,136,136,131,11,70,70,202,140,238,238,41,199,184,184,211,107,20,20,60,40,222,222,121,167,94,94,226,188,11,11,29,22,219,219,118,173,224,224,59,219,50,50,86,100,58,58,78,116,10,10,30,20,73,73,219,146,6,6,10,12,36,36,108,72,92,92,228,184,194,194,93,159,211,211,110,189,172,172,239,67,98,98,166,196,145,145,168,57,149,149,164,49,228,228,55,211,121,121,139,242,231,231,50,213,200,200,67,139,55,55,89,110,109,109,183,218,141,141,140,1,213,213,100,177,78,78,210,156,169,169,224,73,108,108,180,216,86,86,250,172,244,244,7,243,234,234,37,207,101,101,175,202,122,122,142,244,174,174,233,71,8,8,24,16,186,186,213,111,120,120,136,240,37,37,111,74,46,46,114,92,28,28,36,56,166,166,241,87,180,180,199,115,198,198,81,151,232,232,35,203,221,221,124,161,116,116,156,232,31,31,33,62,75,75,221,150,189,189,220,97,139,139,134,13,138,138,133,15,112,112,144,224,62,62,66,124,181,181,196,113,102,102,170,204,72,72,216,144,3,3,5,6,246,246,1,247,14,14,18,28,97,97,163,194,53,53,95,106,87,87,249,174,185,185,208,105,134,134,145,23,193,193,88,153,29,29,39,58,158,158,185,39,225,225,56,217,248,248,19,235,152,152,179,43,17,17,51,34,105,105,187,210,217,217,112,169,142,142,137,7,148,148,167,51,155,155,182,45,30,30,34,60,135,135,146,21,233,233,32,201,206,206,73,135,85,85,255,170,40,40,120,80,223,223,122,165,140,140,143,3,161,161,248,89,137,137,128,9,13,13,23,26,191,191,218,101,230,230,49,215,66,66,198,132,104,104,184,208,65,65,195,130,153,153,176,41,45,45,119,90,15,15,17,30,176,176,203,123,84,84,252,168,187,187,214,109,22,22,58,44,99,0,0,0,124,0,0,0,119,0,0,0,123,0,0,0,242,0,0,0,107,0,0,0,111,0,0,0,197,0,0,0,48,0,0,0,1,0,0,0,103,0,0,0,43,0,0,0,254,0,0,0,215,0,0,0,171,0,0,0,118,0,0,0,202,0,0,0,130,0,0,0,201,0,0,0,125,0,0,0,250,0,0,0,89,0,0,0,71,0,0,0,240,0,0,0,173,0,0,0,212,0,0,0,162,0,0,0,175,0,0,0,156,0,0,0,164,0,0,0,114,0,0,0,192,0,0,0,183,0,0,0,253,0,0,0,147,0,0,0,38,0,0,0,54,0,0,0,63,0,0,0,247,0,0,0,204,0,0,0,52,0,0,0,165,0,0,0,229,0,0,0,241,0,0,0,113,0,0,0,216,0,0,0,49,0,0,0,21,0,0,0,4,0,0,0,199,0,0,0,35,0,0,0,195,0,0,0,24,0,0,0,150,0,0,0,5,0,0,0,154,0,0,0,7,0,0,0,18,0,0,0,128,0,0,0,226,0,0,0,235,0,0,0,39,0,0,0,178,0,0,0,117,0,0,0,9,0,0,0,131,0,0,0,44,0,0,0,26,0,0,0,27,0,0,0,110,0,0,0,90,0,0,0,160,0,0,0,82,0,0,0,59,0,0,0,214,0,0,0,179,0,0,0,41,0,0,0,227,0,0,0,47,0,0,0,132,0,0,0,83,0,0,0,209,0,0,0,0,0,0,0,237,0,0,0,32,0,0,0,252,0,0,0,177,0,0,0,91,0,0,0,106,0,0,0,203,0,0,0,190,0,0,0,57,0,0,0,74,0,0,0,76,0,0,0,88,0,0,0,207,0,0,0,208,0,0,0,239,0,0,0,170,0,0,0,251,0,0,0,67,0,0,0,77,0,0,0,51,0,0,0,133,0,0,0,69,0,0,0,249,0,0,0,2,0,0,0,127,0,0,0,80,0,0,0,60,0,0,0,159,0,0,0,168,0,0,0,81,0,0,0,163,0,0,0,64,0,0,0,143,0,0,0,146,0,0,0,157,0,0,0,56,0,0,0,245,0,0,0,188,0,0,0,182,0,0,0,218,0,0,0,33,0,0,0,16,0,0,0,255,0,0,0,243,0,0,0,210,0,0,0,205,0,0,0,12,0,0,0,19,0,0,0,236,0,0,0,95,0,0,0,151,0,0,0,68,0,0,0,23,0,0,0,196,0,0,0,167,0,0,0,126,0,0,0,61,0,0,0,100,0,0,0,93,0,0,0,25,0,0,0,115,0,0,0,96,0,0,0,129,0,0,0,79,0,0,0,220,0,0,0,34,0,0,0,42,0,0,0,144,0,0,0,136,0,0,0,70,0,0,0,238,0,0,0,184,0,0,0,20,0,0,0,222,0,0,0,94,0,0,0,11,0,0,0,219,0,0,0,224,0,0,0,50,0,0,0,58,0,0,0,10,0,0,0,73,0,0,0,6,0,0,0,36,0,0,0,92,0,0,0,194,0,0,0,211,0,0,0,172,0,0,0,98,0,0,0,145,0,0,0,149,0,0,0,228,0,0,0,121,0,0,0,231,0,0,0,200,0,0,0,55,0,0,0,109,0,0,0,141,0,0,0,213,0,0,0,78,0,0,0,169,0,0,0,108,0,0,0,86,0,0,0,244,0,0,0,234,0,0,0,101,0,0,0,122,0,0,0,174,0,0,0,8,0,0,0,186,0,0,0,120,0,0,0,37,0,0,0,46,0,0,0,28,0,0,0,166,0,0,0,180,0,0,0,198,0,0,0,232,0,0,0,221,0,0,0,116,0,0,0,31,0,0,0,75,0,0,0,189,0,0,0,139,0,0,0,138,0,0,0,112,0,0,0,62,0,0,0,181,0,0,0,102,0,0,0,72,0,0,0,3,0,0,0,246,0,0,0,14,0,0,0,97,0,0,0,53,0,0,0,87,0,0,0,185,0,0,0,134,0,0,0,193,0,0,0,29,0,0,0,158,0,0,0,225,0,0,0,248,0,0,0,152,0,0,0,17,0,0,0,105,0,0,0,217,0,0,0,142,0,0,0,148,0,0,0,155,0,0,0,30,0,0,0,135,0,0,0,233,0,0,0,206,0,0,0,85,0,0,0,40,0,0,0,223,0,0,0,140,0,0,0,161,0,0,0,137,0,0,0,13,0,0,0,191,0,0,0,230,0,0,0,66,0,0,0,104,0,0,0,65,0,0,0,153,0,0,0,45,0,0,0,15,0,0,0,176,0,0,0,84,0,0,0,187,0,0,0,22,0,0,0,0,99,0,0,0,124,0,0,0,119,0,0,0,123,0,0,0,242,0,0,0,107,0,0,0,111,0,0,0,197,0,0,0,48,0,0,0,1,0,0,0,103,0,0,0,43,0,0,0,254,0,0,0,215,0,0,0,171,0,0,0,118,0,0,0,202,0,0,0,130,0,0,0,201,0,0,0,125,0,0,0,250,0,0,0,89,0,0,0,71,0,0,0,240,0,0,0,173,0,0,0,212,0,0,0,162,0,0,0,175,0,0,0,156,0,0,0,164,0,0,0,114,0,0,0,192,0,0,0,183,0,0,0,253,0,0,0,147,0,0,0,38,0,0,0,54,0,0,0,63,0,0,0,247,0,0,0,204,0,0,0,52,0,0,0,165,0,0,0,229,0,0,0,241,0,0,0,113,0,0,0,216,0,0,0,49,0,0,0,21,0,0,0,4,0,0,0,199,0,0,0,35,0,0,0,195,0,0,0,24,0,0,0,150,0,0,0,5,0,0,0,154,0,0,0,7,0,0,0,18,0,0,0,128,0,0,0,226,0,0,0,235,0,0,0,39,0,0,0,178,0,0,0,117,0,0,0,9,0,0,0,131,0,0,0,44,0,0,0,26,0,0,0,27,0,0,0,110,0,0,0,90,0,0,0,160,0,0,0,82,0,0,0,59,0,0,0,214,0,0,0,179,0,0,0,41,0,0,0,227,0,0,0,47,0,0,0,132,0,0,0,83,0,0,0,209,0,0,0,0,0,0,0,237,0,0,0,32,0,0,0,252,0,0,0,177,0,0,0,91,0,0,0,106,0,0,0,203,0,0,0,190,0,0,0,57,0,0,0,74,0,0,0,76,0,0,0,88,0,0,0,207,0,0,0,208,0,0,0,239,0,0,0,170,0,0,0,251,0,0,0,67,0,0,0,77,0,0,0,51,0,0,0,133,0,0,0,69,0,0,0,249,0,0,0,2,0,0,0,127,0,0,0,80,0,0,0,60,0,0,0,159,0,0,0,168,0,0,0,81,0,0,0,163,0,0,0,64,0,0,0,143,0,0,0,146,0,0,0,157,0,0,0,56,0,0,0,245,0,0,0,188,0,0,0,182,0,0,0,218,0,0,0,33,0,0,0,16,0,0,0,255,0,0,0,243,0,0,0,210,0,0,0,205,0,0,0,12,0,0,0,19,0,0,0,236,0,0,0,95,0,0,0,151,0,0,0,68,0,0,0,23,0,0,0,196,0,0,0,167,0,0,0,126,0,0,0,61,0,0,0,100,0,0,0,93,0,0,0,25,0,0,0,115,0,0,0,96,0,0,0,129,0,0,0,79,0,0,0,220,0,0,0,34,0,0,0,42,0,0,0,144,0,0,0,136,0,0,0,70,0,0,0,238,0,0,0,184,0,0,0,20,0,0,0,222,0,0,0,94,0,0,0,11,0,0,0,219,0,0,0,224,0,0,0,50,0,0,0,58,0,0,0,10,0,0,0,73,0,0,0,6,0,0,0,36,0,0,0,92,0,0,0,194,0,0,0,211,0,0,0,172,0,0,0,98,0,0,0,145,0,0,0,149,0,0,0,228,0,0,0,121,0,0,0,231,0,0,0,200,0,0,0,55,0,0,0,109,0,0,0,141,0,0,0,213,0,0,0,78,0,0,0,169,0,0,0,108,0,0,0,86,0,0,0,244,0,0,0,234,0,0,0,101,0,0,0,122,0,0,0,174,0,0,0,8,0,0,0,186,0,0,0,120,0,0,0,37,0,0,0,46,0,0,0,28,0,0,0,166,0,0,0,180,0,0,0,198,0,0,0,232,0,0,0,221,0,0,0,116,0,0,0,31,0,0,0,75,0,0,0,189,0,0,0,139,0,0,0,138,0,0,0,112,0,0,0,62,0,0,0,181,0,0,0,102,0,0,0,72,0,0,0,3,0,0,0,246,0,0,0,14,0,0,0,97,0,0,0,53,0,0,0,87,0,0,0,185,0,0,0,134,0,0,0,193,0,0,0,29,0,0,0,158,0,0,0,225,0,0,0,248,0,0,0,152,0,0,0,17,0,0,0,105,0,0,0,217,0,0,0,142,0,0,0,148,0,0,0,155,0,0,0,30,0,0,0,135,0,0,0,233,0,0,0,206,0,0,0,85,0,0,0,40,0,0,0,223,0,0,0,140,0,0,0,161,0,0,0,137,0,0,0,13,0,0,0,191,0,0,0,230,0,0,0,66,0,0,0,104,0,0,0,65,0,0,0,153,0,0,0,45,0,0,0,15,0,0,0,176,0,0,0,84,0,0,0,187,0,0,0,22,0,0,0,0,99,0,0,0,124,0,0,0,119,0,0,0,123,0,0,0,242,0,0,0,107,0,0,0,111,0,0,0,197,0,0,0,48,0,0,0,1,0,0,0,103,0,0,0,43,0,0,0,254,0,0,0,215,0,0,0,171,0,0,0,118,0,0,0,202,0,0,0,130,0,0,0,201,0,0,0,125,0,0,0,250,0,0,0,89,0,0,0,71,0,0,0,240,0,0,0,173,0,0,0,212,0,0,0,162,0,0,0,175,0,0,0,156,0,0,0,164,0,0,0,114,0,0,0,192,0,0,0,183,0,0,0,253,0,0,0,147,0,0,0,38,0,0,0,54,0,0,0,63,0,0,0,247,0,0,0,204,0,0,0,52,0,0,0,165,0,0,0,229,0,0,0,241,0,0,0,113,0,0,0,216,0,0,0,49,0,0,0,21,0,0,0,4,0,0,0,199,0,0,0,35,0,0,0,195,0,0,0,24,0,0,0,150,0,0,0,5,0,0,0,154,0,0,0,7,0,0,0,18,0,0,0,128,0,0,0,226,0,0,0,235,0,0,0,39,0,0,0,178,0,0,0,117,0,0,0,9,0,0,0,131,0,0,0,44,0,0,0,26,0,0,0,27,0,0,0,110,0,0,0,90,0,0,0,160,0,0,0,82,0,0,0,59,0,0,0,214,0,0,0,179,0,0,0,41,0,0,0,227,0,0,0,47,0,0,0,132,0,0,0,83,0,0,0,209,0,0,0,0,0,0,0,237,0,0,0,32,0,0,0,252,0,0,0,177,0,0,0,91,0,0,0,106,0,0,0,203,0,0,0,190,0,0,0,57,0,0,0,74,0,0,0,76,0,0,0,88,0,0,0,207,0,0,0,208,0,0,0,239,0,0,0,170,0,0,0,251,0,0,0,67,0,0,0,77,0,0,0,51,0,0,0,133,0,0,0,69,0,0,0,249,0,0,0,2,0,0,0,127,0,0,0,80,0,0,0,60,0,0,0,159,0,0,0,168,0,0,0,81,0,0,0,163,0,0,0,64,0,0,0,143,0,0,0,146,0,0,0,157,0,0,0,56,0,0,0,245,0,0,0,188,0,0,0,182,0,0,0,218,0,0,0,33,0,0,0,16,0,0,0,255,0,0,0,243,0,0,0,210,0,0,0,205,0,0,0,12,0,0,0,19,0,0,0,236,0,0,0,95,0,0,0,151,0,0,0,68,0,0,0,23,0,0,0,196,0,0,0,167,0,0,0,126,0,0,0,61,0,0,0,100,0,0,0,93,0,0,0,25,0,0,0,115,0,0,0,96,0,0,0,129,0,0,0,79,0,0,0,220,0,0,0,34,0,0,0,42,0,0,0,144,0,0,0,136,0,0,0,70,0,0,0,238,0,0,0,184,0,0,0,20,0,0,0,222,0,0,0,94,0,0,0,11,0,0,0,219,0,0,0,224,0,0,0,50,0,0,0,58,0,0,0,10,0,0,0,73,0,0,0,6,0,0,0,36,0,0,0,92,0,0,0,194,0,0,0,211,0,0,0,172,0,0,0,98,0,0,0,145,0,0,0,149,0,0,0,228,0,0,0,121,0,0,0,231,0,0,0,200,0,0,0,55,0,0,0,109,0,0,0,141,0,0,0,213,0,0,0,78,0,0,0,169,0,0,0,108,0,0,0,86,0,0,0,244,0,0,0,234,0,0,0,101,0,0,0,122,0,0,0,174,0,0,0,8,0,0,0,186,0,0,0,120,0,0,0,37,0,0,0,46,0,0,0,28,0,0,0,166,0,0,0,180,0,0,0,198,0,0,0,232,0,0,0,221,0,0,0,116,0,0,0,31,0,0,0,75,0,0,0,189,0,0,0,139,0,0,0,138,0,0,0,112,0,0,0,62,0,0,0,181,0,0,0,102,0,0,0,72,0,0,0,3,0,0,0,246,0,0,0,14,0,0,0,97,0,0,0,53,0,0,0,87,0,0,0,185,0,0,0,134,0,0,0,193,0,0,0,29,0,0,0,158,0,0,0,225,0,0,0,248,0,0,0,152,0,0,0,17,0,0,0,105,0,0,0,217,0,0,0,142,0,0,0,148,0,0,0,155,0,0,0,30,0,0,0,135,0,0,0,233,0,0,0,206,0,0,0,85,0,0,0,40,0,0,0,223,0,0,0,140,0,0,0,161,0,0,0,137,0,0,0,13,0,0,0,191,0,0,0,230,0,0,0,66,0,0,0,104,0,0,0,65,0,0,0,153,0,0,0,45,0,0,0,15,0,0,0,176,0,0,0,84,0,0,0,187,0,0,0,22,0,0,0,0,99,0,0,0,124,0,0,0,119,0,0,0,123,0,0,0,242,0,0,0,107,0,0,0,111,0,0,0,197,0,0,0,48,0,0,0,1,0,0,0,103,0,0,0,43,0,0,0,254,0,0,0,215,0,0,0,171,0,0,0,118,0,0,0,202,0,0,0,130,0,0,0,201,0,0,0,125,0,0,0,250,0,0,0,89,0,0,0,71,0,0,0,240,0,0,0,173,0,0,0,212,0,0,0,162,0,0,0,175,0,0,0,156,0,0,0,164,0,0,0,114,0,0,0,192,0,0,0,183,0,0,0,253,0,0,0,147,0,0,0,38,0,0,0,54,0,0,0,63,0,0,0,247,0,0,0,204,0,0,0,52,0,0,0,165,0,0,0,229,0,0,0,241], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([105,90,119,75,176,224,144,208,187,238,153,221,166,252,130,202,173,242,139,199,156,216,180,228,151,214,189,233,138,196,166,254,129,202,175,243,232,144,216,184,227,158,209,181,254,140,202,162,245,130,195,175,196,168,252,140,207,166,245,129,210,180,238,150,217,186,231,155,123,219,59,187,112,213,50,182,109,199,41,161,102,201,32,172,87,227,31,143,92,237,22,130,65,255,13,149,74,241,4,152,35,171,115,211,40,165,122,222,53,183,97,201,62,185,104,196,15,147,87,231,4,157,94,234,25,143,69,253,18,129,76,240,203,59,171,107,192,53,162,102,221,39,185,113,214,41,176,124,231,3,143,95,236,13,134,82,241,31,157,69,250,17,148,72,147,75,227,3,152,69,234,14,133,87,241,25,142,89,248,20,191,115,199,55,180,125,206,58,169,111,213,45,162,97,220,32,246,173,118,109,253,163,127,96,224,177,100,119,235,191,109,122,218,149,82,89,209,155,91,84,204,137,64,67,199,135,73,78,174,221,62,5,165,211,55,8,184,193,44,31,179,207,37,18,130,229,26,49,137,235,19,60,148,249,8,43,159,247,1,38,70,77,230,189,77,67,239,176,80,81,244,167,91,95,253,170,106,117,194,137,97,123,203,132,124,105,208,147,119,103,217,158,30,61,174,213,21,51,167,216,8,33,188,207,3,47,181,194,50,5,138,225,57,11,131,236,36,25,152,251,47,23,145,246,141,118,77,214,134,120,68,219,155,106,95,204,144,100,86,193,161,78,105,226,170,64,96,239,183,82,123,248,188,92,114,245,213,6,5,190,222,8,12,179,195,26,23,164,200,20,30,169,249,62,33,138,242,48,40,135,239,34,51,144,228,44,58,157,61,150,221,6,54,152,212,11,43,138,207,28,32,132,198,17,17,174,249,50,26,160,240,63,7,178,235,40,12,188,226,37,101,230,149,110,110,232,156,99,115,250,135,116,120,244,142,121,73,222,177,90,66,208,184,87,95,194,163,64,84,204,170,77,247,65,236,218,252,79,229,215,225,93,254,192,234,83,247,205,219,121,200,238,208,119,193,227,205,101,218,244,198,107,211,249,175,49,164,178,164,63,173,191,185,45,182,168,178,35,191,165,131,9,128,134,136,7,137,139,149,21,146,156,158,27,155,145,71,161,124,10,76,175,117,7,81,189,110,16,90,179,103,29,107,153,88,62,96,151,81,51,125,133,74,36,118,139,67,41,31,209,52,98,20,223,61,111,9,205,38,120,2,195,47,117,51,233,16,86,56,231,25,91,37,245,2,76,46,251,11,65,140,154,215,97,135,148,222,108,154,134,197,123,145,136,204,118,160,162,243,85,171,172,250,88,182,190,225,79,189,176,232,66,212,234,159,9,223,228,150,4,194,246,141,19,201,248,132,30,248,210,187,61,243,220,178,48,238,206,169,39,229,192,160,42,60,122,71,177,55,116,78,188,42,102,85,171,33,104,92,166,16,66,99,133,27,76,106,136,6,94,113,159,13,80,120,146,100,10,15,217,111,4,6,212,114,22,29,195,121,24,20,206,72,50,43,237,67,60,34,224,94,46,57,247,85,32,48,250,1,236,154,183,10,226,147,186,23,240,136,173,28,254,129,160,45,212,190,131,38,218,183,142,59,200,172,153,48,198,165,148,89,156,210,223,82,146,219,210,79,128,192,197,68,142,201,200,117,164,246,235,126,170,255,230,99,184,228,241,104,182,237,252,177,12,10,103,186,2,3,106,167,16,24,125,172,30,17,112,157,52,46,83,150,58,39,94,139,40,60,73,128,38,53,68,233,124,66,15,226,114,75,2,255,96,80,21,244,110,89,24,197,68,102,59,206,74,111,54,211,88,116,33,216,86,125,44,122,55,161,12,113,57,168,1,108,43,179,22,103,37,186,27,86,15,133,56,93,1,140,53,64,19,151,34,75,29,158,47,34,71,233,100,41,73,224,105,52,91,251,126,63,85,242,115,14,127,205,80,5,113,196,93,24,99,223,74,19,109,214,71,202,215,49,220,193,217,56,209,220,203,35,198,215,197,42,203,230,239,21,232,237,225,28,229,240,243,7,242,251,253,14,255,146,167,121,180,153,169,112,185,132,187,107,174,143,181,98,163,190,159,93,128,181,145,84,141,168,131,79,154,163,141,70,151,0,0,0,0,13,11,14,9,26,22,28,18,23,29,18,27,52,44,56,36,57,39,54,45,46,58,36,54,35,49,42,63,104,88,112,72,101,83,126,65,114,78,108,90,127,69,98,83,92,116,72,108,81,127,70,101,70,98,84,126,75,105,90,119,208,176,224,144,221,187,238,153,202,166,252,130,199,173,242,139,228,156,216,180,233,151,214,189,254,138,196,166,243,129,202,175,184,232,144,216,181,227,158,209,162,254,140,202,175,245,130,195,140,196,168,252,129,207,166,245,150,210,180,238,155,217,186,231,187,123,219,59,182,112,213,50,161,109,199,41,172,102,201,32,143,87,227,31,130,92,237,22,149,65,255,13,152,74,241,4,211,35,171,115,222,40,165,122,201,53,183,97,196,62,185,104,231,15,147,87,234,4,157,94,253,25,143,69,240,18,129,76,107,203,59,171,102,192,53,162,113,221,39,185,124,214,41,176,95,231,3,143,82,236,13,134,69,241,31,157,72,250,17,148,3,147,75,227,14,152,69,234,25,133,87,241,20,142,89,248,55,191,115,199,58,180,125,206,45,169,111,213,32,162,97,220,109,246,173,118,96,253,163,127,119,224,177,100,122,235,191,109,89,218,149,82,84,209,155,91,67,204,137,64,78,199,135,73,5,174,221,62,8,165,211,55,31,184,193,44,18,179,207,37,49,130,229,26,60,137,235,19,43,148,249,8,38,159,247,1,189,70,77,230,176,77,67,239,167,80,81,244,170,91,95,253,137,106,117,194,132,97,123,203,147,124,105,208,158,119,103,217,213,30,61,174,216,21,51,167,207,8,33,188,194,3,47,181,225,50,5,138,236,57,11,131,251,36,25,152,246,47,23,145,214,141,118,77,219,134,120,68,204,155,106,95,193,144,100,86,226,161,78,105,239,170,64,96,248,183,82,123,245,188,92,114,190,213,6,5,179,222,8,12,164,195,26,23,169,200,20,30,138,249,62,33,135,242,48,40,144,239,34,51,157,228,44,58,6,61,150,221,11,54,152,212,28,43,138,207,17,32,132,198,50,17,174,249,63,26,160,240,40,7,178,235,37,12,188,226,110,101,230,149,99,110,232,156,116,115,250,135,121,120,244,142,90,73,222,177,87,66,208,184,64,95,194,163,77,84,204,170,218,247,65,236,215,252,79,229,192,225,93,254,205,234,83,247,238,219,121,200,227,208,119,193,244,205,101,218,249,198,107,211,178,175,49,164,191,164,63,173,168,185,45,182,165,178,35,191,134,131,9,128,139,136,7,137,156,149,21,146,145,158,27,155,10,71,161,124,7,76,175,117,16,81,189,110,29,90,179,103,62,107,153,88,51,96,151,81,36,125,133,74,41,118,139,67,98,31,209,52,111,20,223,61,120,9,205,38,117,2,195,47,86,51,233,16,91,56,231,25,76,37,245,2,65,46,251,11,97,140,154,215,108,135,148,222,123,154,134,197,118,145,136,204,85,160,162,243,88,171,172,250,79,182,190,225,66,189,176,232,9,212,234,159,4,223,228,150,19,194,246,141,30,201,248,132,61,248,210,187,48,243,220,178,39,238,206,169,42,229,192,160,177,60,122,71,188,55,116,78,171,42,102,85,166,33,104,92,133,16,66,99,136,27,76,106,159,6,94,113,146,13,80,120,217,100,10,15,212,111,4,6,195,114,22,29,206,121,24,20,237,72,50,43,224,67,60,34,247,94,46,57,250,85,32,48,183,1,236,154,186,10,226,147,173,23,240,136,160,28,254,129,131,45,212,190,142,38,218,183,153,59,200,172,148,48,198,165,223,89,156,210,210,82,146,219,197,79,128,192,200,68,142,201,235,117,164,246,230,126,170,255,241,99,184,228,252,104,182,237,103,177,12,10,106,186,2,3,125,167,16,24,112,172,30,17,83,157,52,46,94,150,58,39,73,139,40,60,68,128,38,53,15,233,124,66,2,226,114,75,21,255,96,80,24,244,110,89,59,197,68,102,54,206,74,111,33,211,88,116,44,216,86,125,12,122,55,161,1,113,57,168,22,108,43,179,27,103,37,186,56,86,15,133,53,93,1,140,34,64,19,151,47,75,29,158,100,34,71,233,105,41,73,224,126,52,91,251,115,63,85,242,80,14,127,205,93,5,113,196,74,24,99,223,71,19,109,214,220,202,215,49,209,193,217,56,198,220,203,35,203,215,197,42,232,230,239,21,229,237,225,28,242,240,243,7,255,251,253,14,180,146,167,121,185,153,169,112,174,132,187,107,163,143,181,98,128,190,159,93,141,181,145,84,154,168,131,79,151,163,141,70,0,0,0,0,9,13,11,14,18,26,22,28,27,23,29,18,36,52,44,56,45,57,39,54,54,46,58,36,63,35,49,42,72,104,88,112,65,101,83,126,90,114,78,108,83,127,69,98,108,92,116,72,101,81,127,70,126,70,98,84,119,75,105,90,144,208,176,224,153,221,187,238,130,202,166,252,139,199,173,242,180,228,156,216,189,233,151,214,166,254,138,196,175,243,129,202,216,184,232,144,209,181,227,158,202,162,254,140,195,175,245,130,252,140,196,168,245,129,207,166,238,150,210,180,231,155,217,186,59,187,123,219,50,182,112,213,41,161,109,199,32,172,102,201,31,143,87,227,22,130,92,237,13,149,65,255,4,152,74,241,115,211,35,171,122,222,40,165,97,201,53,183,104,196,62,185,87,231,15,147,94,234,4,157,69,253,25,143,76,240,18,129,171,107,203,59,162,102,192,53,185,113,221,39,176,124,214,41,143,95,231,3,134,82,236,13,157,69,241,31,148,72,250,17,227,3,147,75,234,14,152,69,241,25,133,87,248,20,142,89,199,55,191,115,206,58,180,125,213,45,169,111,220,32,162,97,118,109,246,173,127,96,253,163,100,119,224,177,109,122,235,191,82,89,218,149,91,84,209,155,64,67,204,137,73,78,199,135,62,5,174,221,55,8,165,211,44,31,184,193,37,18,179,207,26,49,130,229,19,60,137,235,8,43,148,249,1,38,159,247,230,189,70,77,239,176,77,67,244,167,80,81,253,170,91,95,194,137,106,117,203,132,97,123,208,147,124,105,217,158,119,103,174,213,30,61,167,216,21,51,188,207,8,33,181,194,3,47,138,225,50,5,131,236,57,11,152,251,36,25,145,246,47,23,77,214,141,118,68,219,134,120,95,204,155,106,86,193,144,100,105,226,161,78,96,239,170,64,123,248,183,82,114,245,188,92,5,190,213,6,12,179,222,8,23,164,195,26,30,169,200,20,33,138,249,62,40,135,242,48,51,144,239,34,58,157,228,44,221,6,61,150,212,11,54,152,207,28,43,138,198,17,32,132,249,50,17,174,240,63,26,160,235,40,7,178,226,37,12,188,149,110,101,230,156,99,110,232,135,116,115,250,142,121,120,244,177,90,73,222,184,87,66,208,163,64,95,194,170,77,84,204,236,218,247,65,229,215,252,79,254,192,225,93,247,205,234,83,200,238,219,121,193,227,208,119,218,244,205,101,211,249,198,107,164,178,175,49,173,191,164,63,182,168,185,45,191,165,178,35,128,134,131,9,137,139,136,7,146,156,149,21,155,145,158,27,124,10,71,161,117,7,76,175,110,16,81,189,103,29,90,179,88,62,107,153,81,51,96,151,74,36,125,133,67,41,118,139,52,98,31,209,61,111,20,223,38,120,9,205,47,117,2,195,16,86,51,233,25,91,56,231,2,76,37,245,11,65,46,251,215,97,140,154,222,108,135,148,197,123,154,134,204,118,145,136,243,85,160,162,250,88,171,172,225,79,182,190,232,66,189,176,159,9,212,234,150,4,223,228,141,19,194,246,132,30,201,248,187,61,248,210,178,48,243,220,169,39,238,206,160,42,229,192,71,177,60,122,78,188,55,116,85,171,42,102,92,166,33,104,99,133,16,66,106,136,27,76,113,159,6,94,120,146,13,80,15,217,100,10,6,212,111,4,29,195,114,22,20,206,121,24,43,237,72,50,34,224,67,60,57,247,94,46,48,250,85,32,154,183,1,236,147,186,10,226,136,173,23,240,129,160,28,254,190,131,45,212,183,142,38,218,172,153,59,200,165,148,48,198,210,223,89,156,219,210,82,146,192,197,79,128,201,200,68,142,246,235,117,164,255,230,126,170,228,241,99,184,237,252,104,182,10,103,177,12,3,106,186,2,24,125,167,16,17,112,172,30,46,83,157,52,39,94,150,58,60,73,139,40,53,68,128,38,66,15,233,124,75,2,226,114,80,21,255,96,89,24,244,110,102,59,197,68,111,54,206,74,116,33,211,88,125,44,216,86,161,12,122,55,168,1,113,57,179,22,108,43,186,27,103,37,133,56,86,15,140,53,93,1,151,34,64,19,158,47,75,29,233,100,34,71,224,105,41,73,251,126,52,91,242,115,63,85,205,80,14,127,196,93,5,113,223,74,24,99,214,71,19,109,49,220,202,215,56,209,193,217,35,198,220,203,42,203,215,197,21,232,230,239,28,229,237,225,7,242,240,243,14,255,251,253,121,180,146,167,112,185,153,169,107,174,132,187,98,163,143,181,93,128,190,159,84,141,181,145,79,154,168,131,70,151,163,141,0,0,0,0,168,10,0,0,13,3,0,0,14,3,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,116,105,116,112,99,115,100,116,114,112,99,102,114,101,112,104,116,117,97,101,114,110,103,244,131,0,0,6,0,0,0,117,110,99,105,117,102,110,105,117,114,118,99,117,99,114,108,20,132,0,0,4,0,0,0,45,45,45,45,109,97,110,169,84,82,65,169,109,111,99,169,116,114,119,169,98,108,97,169,110,101,103,169,112,114,103,169,121,97,100,169,111,111,116,169,116,109,99,169,116,114,112,99,110,107,114,116,107,115,105,100,114,118,111,99,99,115,101,100,101,114,110,103,108,105,112,99,111,112,109,116,103,110,116,114,68,73,112,97,68,73,110,99,68,73,109,99,68,73,116,97,68,73,108,112,68,73,101,103,68,73,102,115,68,73,107,97,84,82,65,97,110,110,118,116,104,115,118,116,110,101,118,116,110,115,118,116,115,101,118,116,107,105,116,115,112,97,103,112,116,115,99,112,100,114,117,112,108,114,117,112,100,105,103,101,109,110,111,115,108,97,111,115,114,97,111,115,97,97,111,115,111,99,111,115,110,115,111,115,44,132,0,0,46,0,0,0,0,0,0,0,192,10,0,0,15,3,0,0,16,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,17,3,0,0,9,0,0,0,24,0,0,0,18,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,208,10,0,0,19,3,0,0,20,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,21,3,0,0,9,0,0,0,24,0,0,0,22,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,224,10,0,0,23,3,0,0,24,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,25,3,0,0,9,0,0,0,24,0,0,0,26,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,240,10,0,0,27,3,0,0,28,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,29,3,0,0,9,0,0,0,24,0,0,0,30,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,11,0,0,31,3,0,0,32,3,0,0,21,0,0,0,6,0,0,0,22,0,0,0,33,3,0,0,9,0,0,0,24,0,0,0,34,3,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,176,10,0,0,35,3,0,0,36,3,0,0,37,3,0,0,162,182,0,0,162,182,0,0,109,97,110,169,1,0,0,0,167,182,0,0,167,182,0,0,84,82,65,169,1,0,0,0,174,182,0,0,186,182,0,0,84,82,65,97,1,0,0,0,199,182,0,0,199,182,0,0,109,111,99,169,1,0,0,0,208,182,0,0,208,182,0,0,116,114,119,169,1,0,0,0,215,182,0,0,215,182,0,0,98,108,97,169,1,0,0,0,221,182,0,0,231,182,0,0,101,114,110,103,0,0,0,0,237,182,0,0,231,182,0,0,110,101,103,169,1,0,0,0,247,182,0,0,247,182,0,0,112,114,103,169,1,0,0,0,0,183,0,0,0,183,0,0,121,97,100,169,1,0,0,0,5,183,0,0,10,183,0,0,111,111,116,169,1,0,0,0,24,183,0,0,24,183,0,0,116,109,99,169,1,0,0,0,32,183,0,0,32,183,0,0,114,121,108,169,1,0,0,0,39,183,0,0,39,183,0,0,116,114,112,99,1,0,0,0,49,183,0,0,55,183,0,0,110,107,114,116,0,0,0,0,68,183,0,0,73,183,0,0,107,115,105,100,0,0,0,0,85,183,0,0,91,183,0,0,114,118,111,99,0,0,0,0,101,183,0,0,101,183,0,0,99,115,101,100,1,0,0,0,113,183,0,0,113,183,0,0,103,110,116,114,6,0,0,0,120,183,0,0,120,183,0,0,111,112,109,116,7,0,0,0,126,183,0,0,126,183,0,0,108,105,112,99,6,0,0,0,138,183,0,0,148,183,0,0,112,97,103,112,6,0,0,0,159,183,0,0,159,183,0,0,108,116,105,116,1,0,0,0,101,183,0,0,101,183,0,0,112,99,115,100,1,0,0,0,165,183,0,0,178,183,0,0,68,73,102,115,8,0,0,0,193,183,0,0,202,183,0,0,107,105,116,115,6,0,0,0,212,183,0,0,221,183,0,0,104,115,118,116,1,0,0,0,231,183,0,0,242,183,0,0,110,115,118,116,8,0,0,0,5,184,0,0,23,184,0,0,115,101,118,116,8,0,0,0,43,184,0,0,59,184,0,0,110,101,118,116,1,0,0,0,77,184,0,0,91,184,0,0,110,110,118,116,1,0,0,0,107,184,0,0,117,184,0,0,116,115,99,112,6,0,0,0,130,184,0,0,141,184,0,0,108,114,117,112,0,0,0,0,153,184,0,0,165,184,0,0,100,105,103,101,0,0,0,0,178,184,0,0,194,184,0,0,103,116,97,99,1,0,0,0,211,184,0,0,211,184,0,0,119,121,101,107,1,0,0,0,220,184,0,0,233,184,0,0,100,114,117,112,1,0,0,0,247,184,0,0,255,184,0,0,117,110,99,105,1,0,0,0,8,185,0,0,16,185,0,0,117,102,110,105,1,0,0,0,25,185,0,0,34,185,0,0,117,114,118,99,1,0,0,0,48,185,0,0,58,185,0,0,117,99,114,108,1,0,0,0,69,185,0,0,69,185,0,0,68,102,99,100,8,0,0,0,78,185,0,0,78,185,0,0,102,114,101,112,1,0,0,0,88,185,0,0,88,185,0,0,104,116,117,97,1,0,0,0,0,0,0,0,16,11,0,0,38,3,0,0,39,3,0,0,0,0,0,0,24,11,0,0,40,3,0,0,41,3,0,0,0,0,0,0,32,11,0,0,42,3,0,0,43,3,0,0,44,3,0,0,45,3,0,0,46,3,0,0,47,3,0,0,48,3,0,0,49,3,0,0,50,3,0,0,196,0,0,0,51,3,0,0,0,119,1,0,136,88,1,0,0,250,0,0,128,187,0,0,68,172,0,0,0,125,0,0,192,93,0,0,34,86,0,0,128,62,0,0,224,46,0,0,17,43,0,0,64,31,0,0,182,28,0,0,52,3,0,0,0,0,0,0,48,11,0,0,53,3,0,0,54,3,0,0,55,3,0,0,0,0,0,0,0,0,0,0,96,11,0,0,56,3,0,0,57,3,0,0,58,3,0,0,59,3,0,0,60,3,0,0,61,3,0,0,62,3,0,0,63,3,0,0,0,0,0,0,144,11,0,0,56,3,0,0,64,3,0,0,58,3,0,0,59,3,0,0,60,3,0,0,65,3,0,0,66,3,0,0,67,3,0,0,0,0,0,0,160,11,0,0,56,3,0,0,68,3,0,0,58,3,0,0,59,3,0,0,60,3,0,0,69,3,0,0,70,3,0,0,71,3,0,0,0,0,0,0,0,0,0,0,30,188,0,0,196,138,0,0,52,139,0,0,52,139,0,0,164,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,73,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,3,0,0,75,3,0,0,177,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,73,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,3,0,0,75,3,0,0,169,200,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,73,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,3,0,0,0,0,0,0,75,3,0,0,161,196,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,105,116,46,109,112,52,0,115,101,103,109,101,110,116,45,37,108,108,117,46,37,48,52,108,108,117,46,109,52,102,0,73,78,0,45,45,118,101,114,98,111,115,101,0,45,45,105,110,105,116,45,115,101,103,109,101,110,116,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,105,110,105,116,45,115,101,103,109,101,110,116,32,111,112,116,105,111,110,10,0,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,32,111,112,116,105,111,110,10,0,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,101,116,101,114,115,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,111,112,116,105,111,110,10,0,45,45,116,114,97,99,107,45,105,100,0,45,45,115,116,97,114,116,45,110,117,109,98,101,114,0,45,45,105,110,105,116,45,111,110,108,121,0,45,45,109,101,100,105,97,45,111,110,108,121,0,45,45,97,117,100,105,111,0,45,45,118,105,100,101,111,0,45,45,108,105,118,101,0,69,82,82,79,82,58,32,117,110,101,120,112,101,99,116,101,100,32,97,114,103,117,109,101,110,116,10,0,69,82,82,79,82,58,32,109,105,115,115,105,110,103,32,105,110,112,117,116,32,102,105,108,101,32,110,97,109,101,10,0,69,82,82,79,82,58,32,45,45,97,117,100,105,111,44,32,45,45,118,105,100,101,111,32,97,110,100,32,45,45,116,114,97,99,107,45,105,100,32,111,112,116,105,111,110,115,32,97,114,101,32,109,117,116,117,97,108,121,32,101,120,99,108,117,115,105,118,101,10,0,69,82,82,79,82,58,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,97,114,103,117,109,101,110,116,32,105,115,32,116,111,111,32,115,104,111,114,116,10,0,69,82,82,79,82,58,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,115,32,97,114,103,117,109,101,110,116,32,105,115,32,116,111,111,32,108,111,110,103,10,0,69,82,82,79,82,58,32,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,112,97,114,97,109,101,116,101,114,32,39,37,99,39,10,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,111,112,101,110,32,105,110,112,117,116,32,40,37,100,41,10,0,110,111,32,109,111,118,105,101,32,102,111,117,110,100,32,105,110,32,102,105,108,101,10,0,45,45,97,117,100,105,111,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,97,117,100,105,111,32,116,114,97,99,107,32,102,111,117,110,100,10,0,45,45,118,105,100,101,111,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,118,105,100,101,111,32,116,114,97,99,107,32,102,111,117,110,100,10,0,45,45,116,114,97,99,107,45,105,100,32,111,112,116,105,111,110,32,115,112,101,99,105,102,105,101,100,44,32,98,117,116,32,110,111,32,115,117,99,104,32,116,114,97,99,107,32,102,111,117,110,100,10,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,40,37,100,41,10,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,119,114,105,116,101,32,102,116,121,112,32,115,101,103,109,101,110,116,32,40,37,100,41,10,0,69,82,82,79,82,58,32,99,97,110,110,111,116,32,119,114,105,116,101,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,37,100,41,10,0,69,82,82,79,82,58,32,105,110,118,97,108,105,100,32,109,101,100,105,97,32,102,111,114,109,97,116,10,0,69,82,82,79,82,58,32,45,45,97,117,100,105,111,32,111,112,116,105,111,110,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,109,117,108,116,105,45,116,114,97,99,107,32,102,114,97,103,109,101,110,116,115,0,69,82,82,79,82,58,32,45,45,118,105,100,101,111,32,111,112,116,105,111,110,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,109,117,108,116,105,45,116,114,97,99,107,32,102,114,97,103,109,101,110,116,115,0,77,80,52,32,70,114,97,103,109,101,110,116,32,83,112,108,105,116,116,101,114,32,45,32,86,101,114,115,105,111,110,32,49,46,49,10,40,66,101,110,116,111,52,32,86,101,114,115,105,111,110,32,49,46,52,46,51,46,48,41,10,40,99,41,32,50,48,48,50,45,50,48,49,51,32,65,120,105,111,109,97,116,105,99,32,83,121,115,116,101,109,115,44,32,76,76,67,10,10,117,115,97,103,101,58,32,109,112,52,115,112,108,105,116,32,91,111,112,116,105,111,110,115,93,32,60,105,110,112,117,116,62,10,79,112,116,105,111,110,115,58,10,32,32,45,45,118,101,114,98,111,115,101,32,58,32,112,114,105,110,116,32,118,101,114,98,111,115,101,32,105,110,102,111,114,109,97,116,105,111,110,32,119,104,101,110,32,114,117,110,110,105,110,103,10,32,32,45,45,105,110,105,116,45,115,101,103,109,101,110,116,32,60,102,105,108,101,110,97,109,101,62,32,58,32,110,97,109,101,32,111,102,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,100,101,102,97,117,108,116,58,32,105,110,105,116,46,109,112,52,41,10,32,32,45,45,105,110,105,116,45,111,110,108,121,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,116,104,101,32,105,110,105,116,32,115,101,103,109,101,110,116,32,40,110,111,32,109,101,100,105,97,32,115,101,103,109,101,110,116,115,41,10,32,32,45,45,109,101,100,105,97,45,115,101,103,109,101,110,116,32,60,102,105,108,101,110,97,109,101,45,112,97,116,116,101,114,110,62,32,40,100,101,102,97,117,108,116,58,32,115,101,103,109,101,110,116,45,37,37,108,108,117,46,37,37,48,52,108,108,117,46,109,52,102,41,10,32,32,32,32,78,79,84,69,58,32,97,108,108,32,112,97,114,97,109,101,116,101,114,115,32,97,114,101,32,54,52,45,98,105,116,32,105,110,116,101,103,101,114,115,44,32,117,115,101,32,37,37,108,108,117,32,105,110,32,116,104,101,32,112,97,116,116,101,114,110,10,32,32,45,45,109,101,100,105,97,45,111,110,108,121,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,116,104,101,32,109,101,100,105,97,32,115,101,103,109,101,110,116,115,32,40,110,111,32,105,110,105,116,32,115,101,103,109,101,110,116,41,10,32,32,45,45,115,116,97,114,116,45,110,117,109,98,101,114,32,60,110,62,32,58,32,115,116,97,114,116,32,110,117,109,98,101,114,105,110,103,32,115,101,103,109,101,110,116,115,32,97,116,32,60,110,62,32,40,100,101,102,97,117,108,116,61,49,41,10,32,32,45,45,112,97,116,116,101,114,110,45,112,97,114,97,109,101,116,101,114,115,32,60,112,97,114,97,109,115,62,32,58,32,111,110,101,32,111,114,32,109,111,114,101,32,115,101,108,101,99,116,111,114,32,108,101,116,116,101,114,32,40,100,101,102,97,117,108,116,58,32,73,78,41,10,32,32,32,32,32,73,58,32,116,114,97,99,107,32,73,68,10,32,32,32,32,32,78,58,32,115,101,103,109,101,110,116,32,110,117,109,98,101,114,10,32,32,45,45,116,114,97,99,107,45,105,100,32,60,116,114,97,99,107,45,105,100,62,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,115,101,103,109,101,110,116,115,32,119,105,116,104,32,116,104,105,115,32,116,114,97,99,107,32,73,68,10,32,32,45,45,97,117,100,105,111,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,97,117,100,105,111,32,115,101,103,109,101,110,116,115,10,32,32,45,45,118,105,100,101,111,32,58,32,111,110,108,121,32,111,117,116,112,117,116,32,118,105,100,101,111,32,115,101,103,109,101,110,116,115,10,32,32,45,45,108,105,118,101,32,58,32,115,101,116,32,100,117,114,97,116,105,111,110,32,116,111,32,48,10,0,57,65,80,52,95,65,114,114,97,121,73,106,69,0,49,50,65,80,52,95,85,117,105,100,65,116,111,109,0,49,57,65,80,52,95,85,110,107,110,111,119,110,85,117,105,100,65,116,111,109,0,49,50,65,80,52,95,83,97,105,111,65,116,111,109,0,57,65,80,52,95,65,114,114,97,121,73,121,69,0,49,50,65,80,52,95,83,116,104,100,65,116,111,109,0,49,50,65,80,52,95,65,105,110,102,65,116,111,109,0,112,114,111,102,105,108,101,95,118,101,114,115,105,111,110,0,65,80,73,68,0,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,0,50,49,65,80,52,95,85,110,107,110,111,119,110,68,101,115,99,114,105,112,116,111,114,0,68,101,115,99,114,105,112,116,111,114,58,37,48,50,120,0,49,50,65,80,52,95,83,99,104,109,65,116,111,109,0,115,99,104,101,109,101,95,116,121,112,101,0,115,99,104,101,109,101,95,118,101,114,115,105,111,110,32,40,115,104,111,114,116,41,0,115,99,104,101,109,101,95,118,101,114,115,105,111,110,0,115,99,104,101,109,101,95,117,114,105,0,50,50,65,80,52,95,83,76,67,111,110,102,105,103,68,101,115,99,114,105,112,116,111,114,0,0,49,50,65,80,52,95,73,107,109,115,65,116,111,109,0,107,109,115,95,105,100,0,107,109,115,95,118,101,114,115,105,111,110,0,107,109,115,95,117,114,105,0,49,50,65,80,52,95,78,109,104,100,65,116,111,109,0,49,50,65,80,52,95,84,107,104,100,65,116,111,109,0,101,110,97,98,108,101,100,0,118,111,108,117,109,101,0,108,97,121,101,114,0,97,108,116,101,114,110,97,116,101,95,103,114,111,117,112,0,109,97,116,114,105,120,95,48,0,109,97,116,114,105,120,95,49,0,109,97,116,114,105,120,95,50,0,109,97,116,114,105,120,95,51,0,109,97,116,114,105,120,95,52,0,109,97,116,114,105,120,95,53,0,109,97,116,114,105,120,95,54,0,109,97,116,114,105,120,95,55,0,109,97,116,114,105,120,95,56,0,49,50,65,80,52,95,80,100,105,110,65,116,111,109,0,114,97,116,101,40,37,100,41,0,105,110,105,116,105,97,108,95,100,101,108,97,121,40,37,100,41,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,80,100,105,110,65,116,111,109,53,69,110,116,114,121,69,69,0,49,50,65,80,52,95,73,112,114,111,65,116,111,109,0,78,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,52,73,116,101,109,56,79,112,101,114,97,116,111,114,69,0,50,49,65,80,52,95,65,116,111,109,76,105,115,116,73,110,115,112,101,99,116,111,114,0,49,50,65,80,52,95,68,101,99,51,65,116,111,109,0,100,97,116,97,95,114,97,116,101,0,91,37,48,50,100,93,0,102,115,99,111,100,61,37,100,44,32,98,115,105,100,61,37,100,44,32,98,115,109,111,100,61,37,100,44,32,97,99,109,111,100,61,37,100,44,32,108,102,101,111,110,61,37,100,44,32,110,117,109,95,100,101,112,95,115,117,98,61,37,100,44,32,99,104,97,110,95,108,111,99,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,68,101,99,51,65,116,111,109,57,83,117,98,83,116,114,101,97,109,69,69,0,49,50,65,80,52,95,84,102,104,100,65,116,111,109,0,116,114,97,99,107,32,73,68,0,98,97,115,101,32,100,97,116,97,32,111,102,102,115,101,116,0,115,97,109,112,108,101,32,100,101,115,99,114,105,112,116,105,111,110,32,105,110,100,101,120,0,49,50,65,80,52,95,83,116,115,122,65,116,111,109,0,49,50,65,80,52,95,83,101,110,99,65,116,111,109,0,50,52,65,80,52,95,67,101,110,99,83,97,109,112,108,101,69,110,99,114,121,112,116,105,111,110,0,51,51,65,80,52,95,68,101,99,111,100,101,114,83,112,101,99,105,102,105,99,73,110,102,111,68,101,115,99,114,105,112,116,111,114,0,37,48,50,120,32,0,68,101,99,111,100,101,114,83,112,101,99,105,102,105,99,73,110,102,111,0,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,0,56,65,80,52,95,76,105,115,116,73,78,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,49,49,84,121,112,101,72,97,110,100,108,101,114,69,69,0,78,49,53,65,80,52,95,65,116,111,109,70,97,99,116,111,114,121,49,49,84,121,112,101,72,97,110,100,108,101,114,69,0,50,50,65,80,52,95,68,101,102,97,117,108,116,65,116,111,109,70,97,99,116,111,114,121,0,49,50,65,80,52,95,67,111,54,52,65,116,111,109,0,49,50,65,80,52,95,66,108,111,99,65,116,111,109,0,98,97,115,101,95,108,111,99,97,116,105,111,110,0,112,117,114,99,104,97,115,101,95,108,111,99,97,116,105,111,110,0,49,50,65,80,52,95,80,115,115,104,65,116,111,109,0,115,121,115,116,101,109,95,105,100,0,100,97,116,97,95,115,105,122,101,0,107,105,100,32,37,100,0,105,249,8,175,72,22,70,234,145,12,205,93,204,203,10,58,100,97,116,97,0,49,50,65,80,52,95,84,105,109,115,65,116,111,109,0,49,50,65,80,52,95,69,115,100,115,65,116,111,109,0,50,55,65,80,52,95,68,101,99,111,100,101,114,67,111,110,102,105,103,68,101,115,99,114,105,112,116,111,114,0,68,101,99,111,100,101,114,67,111,110,102,105,103,0,115,116,114,101,97,109,95,116,121,112,101,0,111,98,106,101,99,116,95,116,121,112,101,0,117,112,95,115,116,114,101,97,109,0,98,117,102,102,101,114,95,115,105,122,101,0,78,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,52,73,116,101,109,56,79,112,101,114,97,116,111,114,69,0,78,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,50,48,65,80,52,95,68,101,115,99,114,105,112,116,111,114,70,105,110,100,101,114,0,50,55,65,80,52,95,68,101,115,99,114,105,112,116,111,114,76,105,115,116,73,110,115,112,101,99,116,111,114,0,50,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,76,105,115,116,87,114,105,116,101,114,0,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,101,115,99,114,105,112,116,111,114,69,0,50,53,65,80,52,95,73,112,109,112,68,101,115,99,114,105,112,116,111,114,80,111,105,110,116,101,114,0,49,56,65,80,52,95,73,112,109,112,68,101,115,99,114,105,112,116,111,114,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,80,111,105,110,116,101,114,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,73,68,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,73,68,69,120,0,73,80,77,80,95,69,83,95,73,68,0,73,80,77,80,95,68,101,115,99,114,105,112,116,111,114,0,73,80,77,80,83,95,84,121,112,101,0,73,80,77,80,95,84,111,111,108,73,68,0,99,111,110,116,114,111,108,80,111,105,110,116,67,111,100,101,0,115,101,113,117,101,110,99,101,67,111,100,101,0,85,82,76,0,100,97,116,97,32,115,105,122,101,0,49,52,65,80,52,95,66,121,116,101,83,116,114,101,97,109,0,49,51,65,80,52,95,83,117,98,83,116,114,101,97,109,0,50,48,65,80,52,95,77,101,109,111,114,121,66,121,116,101,83,116,114,101,97,109,0,98,121,116,101,115,95,114,101,97,100,32,60,61,32,98,121,116,101,115,95,116,111,95,114,101,97,100,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,66,121,116,101,83,116,114,101,97,109,46,99,112,112,0,82,101,97,100,0,98,121,116,101,115,95,119,114,105,116,116,101,110,32,60,61,32,98,121,116,101,115,95,116,111,95,119,114,105,116,101,0,49,55,65,80,52,95,82,101,102,101,114,101,110,99,101,97,98,108,101,0,49,50,65,80,52,95,65,118,99,99,65,116,111,109,0,66,97,115,101,108,105,110,101,0,69,120,116,101,110,100,101,100,0,72,105,103,104,0,72,105,103,104,32,49,48,0,72,105,103,104,32,52,58,50,58,50,0,72,105,103,104,32,52,58,52,58,52,0,83,101,113,117,101,110,99,101,32,80,97,114,97,109,101,116,101,114,0,80,105,99,116,117,114,101,32,80,97,114,97,109,101,116,101,114,0,57,65,80,52,95,65,114,114,97,121,73,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,69,0,50,48,65,80,52,95,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,50,55,65,80,52,95,73,110,105,116,105,97,108,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,105,100,0,117,114,108,0,73,110,105,116,105,97,108,79,98,106,101,99,116,68,101,115,99,114,105,112,116,111,114,0,105,110,99,108,117,100,101,32,105,110,108,105,110,101,32,112,114,111,102,105,108,101,32,108,101,118,101,108,32,102,108,97,103,0,79,68,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,115,99,101,110,101,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,97,117,100,105,111,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,118,105,115,117,97,108,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,103,114,97,112,104,105,99,115,32,112,114,111,102,105,108,101,32,108,101,118,101,108,0,49,50,65,80,52,95,79,104,100,114,65,116,111,109,0,101,110,99,114,121,112,116,105,111,110,95,109,101,116,104,111,100,0,112,97,100,100,105,110,103,95,115,99,104,101,109,101,0,112,108,97,105,110,116,101,120,116,95,108,101,110,103,116,104,0,114,105,103,104,116,115,95,105,115,115,117,101,114,95,117,114,108,0,116,101,120,116,117,97,108,95,104,101,97,100,101,114,115,0,49,52,65,80,52,95,79,109,97,68,114,109,73,110,102,111,0,49,50,65,80,52,95,68,114,101,102,65,116,111,109,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,84,114,117,110,65,116,111,109,53,69,110,116,114,121,69,69,0,49,50,65,80,52,95,73,111,100,115,65,116,111,109,0,49,50,65,80,52,95,79,100,97,102,65,116,111,109,0,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,0,49,55,65,80,52,95,65,116,111,109,83,105,122,101,65,100,100,101,114,0,49,50,65,80,52,95,84,114,97,107,65,116,111,109,0,49,50,65,80,52,95,70,114,109,97,65,116,111,109,0,111,114,105,103,105,110,97,108,95,102,111,114,109,97,116,0,49,54,65,80,52,95,84,114,101,102,84,121,112,101,65,116,111,109,0,116,114,97,99,107,95,105,100,95,99,111,117,110,116,0,116,114,97,99,107,32,105,100,32,0,49,50,65,80,52,95,77,111,111,118,65,116,111,109,0,56,65,80,52,95,76,105,115,116,73,49,50,65,80,52,95,84,114,97,107], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([65,116,111,109,69,0,50,49,65,80,52,95,84,114,97,107,65,116,111,109,67,111,108,108,101,99,116,111,114,0,49,50,65,80,52,95,72,118,99,99,65,116,111,109,0,77,97,105,110,0,77,97,105,110,32,49,48,0,77,97,105,110,32,83,116,105,108,108,32,80,105,99,116,117,114,101,0,82,101,120,116,0,67,111,110,102,105,103,117,114,97,116,105,111,110,32,86,101,114,115,105,111,110,0,80,114,111,102,105,108,101,32,83,112,97,99,101,0,80,114,111,102,105,108,101,0,84,105,101,114,0,80,114,111,102,105,108,101,32,67,111,109,112,97,116,105,98,105,108,105,116,121,0,67,111,110,115,116,114,97,105,110,116,0,76,101,118,101,108,0,77,105,110,32,83,112,97,116,105,97,108,32,83,101,103,109,101,110,116,97,116,105,111,110,0,80,97,114,97,108,108,101,108,105,115,109,32,84,121,112,101,0,67,104,114,111,109,97,32,70,111,114,109,97,116,0,67,104,114,111,109,97,32,68,101,112,116,104,0,76,117,109,97,32,68,101,112,116,104,0,65,118,101,114,97,103,101,32,70,114,97,109,101,32,82,97,116,101,0,67,111,110,115,116,97,110,116,32,70,114,97,109,101,32,82,97,116,101,0,78,117,109,98,101,114,32,79,102,32,84,101,109,112,111,114,97,108,32,76,97,121,101,114,115,0,84,101,109,112,111,114,97,108,32,73,100,32,78,101,115,116,101,100,0,78,65,76,85,32,76,101,110,103,116,104,32,83,105,122,101,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,72,118,99,99,65,116,111,109,56,83,101,113,117,101,110,99,101,69,69,0,49,53,65,80,52,95,83,97,109,112,108,101,84,97,98,108,101,0,99,117,114,114,101,110,116,95,99,116,115,95,100,101,108,116,97,95,114,117,110,32,33,61,32,48,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,83,97,109,112,108,101,84,97,98,108,101,46,99,112,112,0,71,101,110,101,114,97,116,101,83,116,98,108,65,116,111,109,0,49,50,65,80,52,95,56,98,100,108,65,116,111,109,0,101,110,99,111,100,105,110,103,0,101,110,99,111,100,105,110,103,95,118,101,114,115,105,111,110,0,98,117,110,100,108,101,95,100,97,116,97,0,49,49,65,80,52,95,83,100,112,65,116,111,109,0,100,101,102,97,117,108,116,95,65,108,103,111,114,105,116,104,109,73,68,0,100,101,102,97,117,108,116,95,73,86,95,115,105,122,101,0,100,101,102,97,117,108,116,95,75,73,68,0,65,108,103,111,114,105,116,104,109,73,68,0,73,86,95,115,105,122,101,0,115,97,109,112,108,101,32,105,110,102,111,32,99,111,117,110,116,0,73,86,32,83,105,122,101,32,40,105,110,102,101,114,114,101,100,41,0,115,117,98,45,101,110,116,114,121,32,37,48,52,100,46,37,100,32,98,121,116,101,115,32,111,102,32,99,108,101,97,114,32,100,97,116,97,0,115,117,98,45,101,110,116,114,121,32,37,48,52,100,46,37,100,32,98,121,116,101,115,32,111,102,32,101,110,99,114,121,112,116,101,100,32,100,97,116,97,0,50,51,65,80,52,95,67,101,110,99,84,114,97,99,107,69,110,99,114,121,112,116,105,111,110,0,49,50,65,80,52,95,83,116,122,50,65,116,111,109,0,102,105,101,108,100,95,115,105,122,101,0,115,97,109,112,108,101,95,99,111,117,110,116,0,49,50,65,80,52,95,83,116,115,115,65,116,111,109,0,37,115,0,49,53,65,80,52,95,83,97,109,112,108,101,69,110,116,114,121,0,50,50,65,80,52,95,85,110,107,110,111,119,110,83,97,109,112,108,101,69,110,116,114,121,0,50,53,65,80,52,95,77,112,101,103,83,121,115,116,101,109,83,97,109,112,108,101,69,110,116,114,121,0,49,57,65,80,52,95,77,112,52,115,83,97,109,112,108,101,69,110,116,114,121,0,50,48,65,80,52,95,65,117,100,105,111,83,97,109,112,108,101,69,110,116,114,121,0,50,52,65,80,52,95,77,112,101,103,65,117,100,105,111,83,97,109,112,108,101,69,110,116,114,121,0,50,49,65,80,52,95,86,105,115,117,97,108,83,97,109,112,108,101,69,110,116,114,121,0,50,52,65,80,52,95,77,112,101,103,86,105,100,101,111,83,97,109,112,108,101,69,110,116,114,121,0,49,56,65,80,52,95,65,118,99,83,97,109,112,108,101,69,110,116,114,121,0,49,57,65,80,52,95,72,101,118,99,83,97,109,112,108,101,69,110,116,114,121,0,50,50,65,80,52,95,82,116,112,72,105,110,116,83,97,109,112,108,101,69,110,116,114,121,0,50,51,65,80,52,95,83,117,98,116,105,116,108,101,83,97,109,112,108,101,69,110,116,114,121,0,100,97,116,97,95,114,101,102,101,114,101,110,99,101,95,105,110,100,101,120,0,99,104,97,110,110,101,108,95,99,111,117,110,116,0,115,97,109,112,108,101,95,115,105,122,101,0,115,97,109,112,108,101,95,114,97,116,101,0,113,116,95,118,101,114,115,105,111,110,0,119,105,100,116,104,0,104,101,105,103,104,116,0,99,111,109,112,114,101,115,115,111,114,0,104,105,110,116,95,116,114,97,99,107,95,118,101,114,115,105,111,110,0,104,105,103,104,101,115,116,95,99,111,109,112,97,116,105,98,108,101,95,118,101,114,115,105,111,110,0,109,97,120,95,112,97,99,107,101,116,95,115,105,122,101,0,110,97,109,101,115,112,97,99,101,0,115,99,104,101,109,97,95,108,111,99,97,116,105,111,110,0,105,109,97,103,101,95,109,105,109,101,95,116,121,112,101,0,50,54,65,80,52,95,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,54,65,80,52,95,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,49,57,65,80,52,95,77,112,52,118,83,97,109,112,108,101,69,110,116,114,121,0,49,57,65,80,52,95,77,112,52,97,83,97,109,112,108,101,69,110,116,114,121,0,57,65,80,52,95,77,111,118,105,101,0,78,56,65,80,52,95,76,105,115,116,73,57,65,80,52,95,84,114,97,99,107,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,50,49,65,80,52,95,84,114,97,99,107,70,105,110,100,101,114,66,121,84,121,112,101,0,49,57,65,80,52,95,84,114,97,99,107,70,105,110,100,101,114,66,121,73,100,0,56,65,80,52,95,76,105,115,116,73,57,65,80,52,95,84,114,97,99,107,69,0,49,57,65,80,52,95,69,110,99,97,83,97,109,112,108,101,69,110,116,114,121,0,49,57,65,80,52,95,69,110,99,118,83,97,109,112,108,101,69,110,116,114,121,0,50,52,65,80,52,95,80,114,111,116,101,99,116,105,111,110,83,99,104,101,109,101,73,110,102,111,0,51,48,65,80,52,95,80,114,111,116,101,99,116,101,100,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,57,65,80,52,95,68,101,102,97,117,108,116,66,108,111,99,107,67,105,112,104,101,114,70,97,99,116,111,114,121,0,115,105,110,102,47,102,114,109,97,0,115,105,110,102,47,115,99,104,105,0,115,105,110,102,47,115,99,104,109,0,119,97,118,101,47,101,115,100,115,0,50,50,65,80,52,95,66,108,111,99,107,67,105,112,104,101,114,70,97,99,116,111,114,121,0,49,57,65,80,52,95,68,114,109,105,83,97,109,112,108,101,69,110,116,114,121,0,49,57,65,80,52,95,68,114,109,115,83,97,109,112,108,101,69,110,116,114,121,0,49,50,65,80,52,95,69,108,115,116,65,116,111,109,0,101,110,116,114,121,32,99,111,117,110,116,0,101,110,116,114,121,47,115,101,103,109,101,110,116,32,100,117,114,97,116,105,111,110,0,101,110,116,114,121,47,109,101,100,105,97,32,116,105,109,101,0,101,110,116,114,121,47,109,101,100,105,97,32,114,97,116,101,0,57,65,80,52,95,65,114,114,97,121,73,49,51,65,80,52,95,69,108,115,116,69,110,116,114,121,69,0,49,50,65,80,52,95,77,118,104,100,65,116,111,109,0,49,50,65,80,52,95,72,109,104,100,65,116,111,109,0,109,97,120,95,112,100,117,95,115,105,122,101,0,97,118,103,95,112,100,117,95,115,105,122,101,0,109,97,120,95,98,105,116,114,97,116,101,0,97,118,103,95,98,105,116,114,97,116,101,0,49,50,65,80,52,95,79,100,104,101,65,116,111,109,0,99,111,110,116,101,110,116,95,116,121,112,101,0,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,0,49,50,65,80,52,95,83,116,115,100,65,116,111,109,0,101,110,116,114,121,45,99,111,117,110,116,0,57,65,80,52,95,65,114,114,97,121,73,80,50,49,65,80,52,95,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,69,0,50,49,65,80,52,95,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,51,51,65,80,52,95,71,101,110,101,114,105,99,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,51,51,65,80,52,95,71,101,110,101,114,105,99,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,56,65,80,52,95,85,110,107,110,111,119,110,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,52,65,80,52,95,65,118,99,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,53,65,80,52,95,72,101,118,99,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,51,49,65,80,52,95,77,112,101,103,83,121,115,116,101,109,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,51,48,65,80,52,95,77,112,101,103,65,117,100,105,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,51,48,65,80,52,95,77,112,101,103,86,105,100,101,111,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,50,57,65,80,52,95,83,117,98,116,105,116,108,101,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,37,115,46,37,48,50,88,37,48,50,88,37,48,50,88,0,37,115,46,37,115,37,100,46,37,88,46,37,99,37,100,46,37,108,108,120,0,37,115,46,37,48,50,88,46,37,100,0,37,115,46,37,48,50,88,0,50,53,65,80,52,95,77,112,101,103,83,97,109,112,108,101,68,101,115,99,114,105,112,116,105,111,110,0,49,54,65,80,52,95,69,115,68,101,115,99,114,105,112,116,111,114,0,50,49,65,80,52,95,69,115,73,100,73,110,99,68,101,115,99,114,105,112,116,111,114,0,50,49,65,80,52,95,69,115,73,100,82,101,102,68,101,115,99,114,105,112,116,111,114,0,69,83,68,101,115,99,114,105,112,116,111,114,0,101,115,95,105,100,0,115,116,114,101,97,109,95,112,114,105,111,114,105,116,121,0,69,83,95,73,68,95,73,110,99,0,116,114,97,99,107,95,105,100,0,69,83,95,73,68,95,82,101,102,0,114,101,102,95,105,110,100,101,120,0,49,50,65,80,52,95,83,97,105,122,65,116,111,109,0,97,117,120,32,105,110,102,111,32,116,121,112,101,0,97,117,120,32,105,110,102,111,32,116,121,112,101,32,112,97,114,97,109,101,116,101,114,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,105,110,102,111,32,115,105,122,101,0,57,65,80,52,95,65,114,114,97,121,73,104,69,0,49,50,65,80,52,95,70,116,121,112,65,116,111,109,0,109,97,106,111,114,95,98,114,97,110,100,0,109,105,110,111,114,95,118,101,114,115,105,111,110,0,99,111,109,112,97,116,105,98,108,101,95,98,114,97,110,100,0,49,50,65,80,52,95,83,116,99,111,65,116,111,109,0,49,50,65,80,52,95,84,102,100,116,65,116,111,109,0,98,97,115,101,32,109,101,100,105,97,32,100,101,99,111,100,101,32,116,105,109,101,0,49,50,65,80,52,95,84,102,114,97,65,116,111,109,0,116,114,97,99,107,95,73,68,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,116,114,97,102,95,110,117,109,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,116,114,117,110,95,110,117,109,0,108,101,110,103,116,104,95,115,105,122,101,95,111,102,95,115,97,109,112,108,101,95,110,117,109,0,116,105,109,101,61,37,108,108,100,44,32,109,111,111,102,95,111,102,102,115,101,116,61,37,108,108,100,44,32,116,114,97,102,95,110,117,109,98,101,114,61,37,100,44,32,116,114,117,110,95,110,117,109,98,101,114,61,37,100,44,32,115,97,109,112,108,101,95,110,117,109,98,101,114,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,84,102,114,97,65,116,111,109,53,69,110,116,114,121,69,69,0,49,49,65,80,52,95,82,116,112,65,116,111,109,0,100,101,115,99,114,105,112,116,105,111,110,95,102,111,114,109,97,116,0,115,100,112,95,116,101,120,116,0,49,50,65,80,52,95,83,103,112,100,65,116,111,109,0,100,101,102,97,117,108,116,95,108,101,110,103,116,104,0,56,65,80,52,95,76,105,115,116,73,49,52,65,80,52,95,68,97,116,97,66,117,102,102,101,114,69,0,57,65,80,52,95,84,114,97,99,107,0,109,100,105,97,47,104,100,108,114,0,109,100,105,97,47,109,105,110,102,47,115,116,98,108,0,49,50,65,80,52,95,67,116,116,115,65,116,111,109,0,99,111,117,110,116,61,37,100,44,32,111,102,102,115,101,116,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,67,116,116,115,84,97,98,108,101,69,110,116,114,121,69,0,49,50,65,80,52,95,77,100,104,100,65,116,111,109,0,96,96,96,0,100,117,114,97,116,105,111,110,40,109,115,41,0,49,50,65,80,52,95,71,114,112,105,65,116,111,109,0,107,101,121,32,101,110,99,114,121,112,116,105,111,110,32,109,101,116,104,111,100,0,103,114,111,117,112,32,105,100,0,103,114,111,117,112,32,107,101,121,0,49,50,65,80,52,95,77,102,104,100,65,116,111,109,0,115,101,113,117,101,110,99,101,32,110,117,109,98,101,114,0,49,50,65,80,52,95,72,100,108,114,65,116,111,109,0,104,97,110,100,108,101,114,95,116,121,112,101,0,104,97,110,100,108,101,114,95,110,97,109,101,0,49,50,65,80,52,95,83,109,104,100,65,116,111,109,0,98,97,108,97,110,99,101,0,49,50,65,80,52,95,77,101,104,100,65,116,111,109,0,49,50,65,80,52,95,83,116,115,99,65,116,111,109,0,115,97,109,112,108,101,32,62,32,48,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,83,116,115,99,65,116,111,109,46,99,112,112,0,71,101,116,67,104,117,110,107,70,111,114,83,97,109,112,108,101,0,102,105,114,115,116,95,99,104,117,110,107,61,37,100,44,32,102,105,114,115,116,95,115,97,109,112,108,101,61,37,100,44,32,99,104,117,110,107,95,99,111,117,110,116,61,37,100,44,32,115,97,109,112,108,101,115,95,112,101,114,95,99,104,117,110,107,61,37,100,44,32,115,97,109,112,108,101,95,100,101,115,99,95,105,110,100,101,120,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,83,116,115,99,84,97,98,108,101,69,110,116,114,121,69,0,49,50,65,80,52,95,79,100,100,97,65,116,111,109,0,101,110,99,114,121,112,116,101,100,95,100,97,116,97,95,108,101,110,103,116,104,0,49,50,65,80,52,95,77,102,114,111,65,116,111,109,0,109,102,114,97,95,115,105,122,101,0,49,52,65,80,52,95,69,120,112,97,110,100,97,98,108,101,0,104,101,97,100,101,114,95,115,105,122,101,32,62,61,32,49,43,49,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,69,120,112,97,110,100,97,98,108,101,46,99,112,112,0,65,80,52,95,69,120,112,97,110,100,97,98,108,101,0,104,101,97,100,101,114,95,115,105,122,101,32,60,61,32,49,43,52,0,109,95,72,101,97,100,101,114,83,105,122,101,45,49,32,60,61,32,56,0,87,114,105,116,101,0,109,95,72,101,97,100,101,114,83,105,122,101,32,62,61,32,50,0,35,58,37,48,50,120,0,49,49,65,80,52,95,85,114,108,65,116,111,109,0,108,111,99,97,116,105,111,110,0,91,108,111,99,97,108,32,116,111,32,102,105,108,101,93,0,50,57,65,80,52,95,77,97,114,108,105,110,73,112,109,112,65,116,111,109,84,121,112,101,72,97,110,100,108,101,114,0,49,50,65,80,52,95,77,107,105,100,65,116,111,109,0,75,73,68,0,99,111,110,116,101,110,116,95,105,100,0,50,53,65,80,52,95,77,97,114,108,105,110,73,112,109,112,65,116,111,109,70,97,99,116,111,114,121,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,77,107,105,100,65,116,111,109,53,69,110,116,114,121,69,69,0,0,56,65,80,52,95,70,105,108,101,0,49,50,65,80,52,95,83,105,100,120,65,116,111,109,0,114,101,102,101,114,101,110,99,101,95,73,68,0,116,105,109,101,115,99,97,108,101,0,101,97,114,108,105,101,115,116,95,112,114,101,115,101,110,116,97,116,105,111,110,95,116,105,109,101,0,102,105,114,115,116,95,111,102,102,115,101,116,0,114,101,102,101,114,101,110,99,101,95,116,121,112,101,61,37,100,44,32,114,101,102,101,114,101,110,99,101,100,95,115,105,122,101,61,37,117,44,32,115,117,98,115,101,103,109,101,110,116,95,100,117,114,97,116,105,111,110,61,37,117,44,32,115,116,97,114,116,115,95,119,105,116,104,95,83,65,80,61,37,100,44,32,83,65,80,95,116,121,112,101,61,37,100,44,32,83,65,80,95,100,101,108,116,97,95,116,105,109,101,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,83,105,100,120,65,116,111,109,57,82,101,102,101,114,101,110,99,101,69,69,0,49,50,65,80,52,95,83,98,103,112,65,116,111,109,0,103,114,111,117,112,105,110,103,95,116,121,112,101,0,103,114,111,117,112,105,110,103,95,116,121,112,101,95,112,97,114,97,109,101,116,101,114,0,101,110,116,114,121,32,37,48,50,100,0,99,58,37,117,44,103,58,37,117,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,83,98,103,112,65,116,111,109,53,69,110,116,114,121,69,69,0,49,57,65,80,52,95,65,116,111,109,83,97,109,112,108,101,84,97,98,108,101,0,116,107,104,100,0,109,100,105,97,47,109,100,104,100,0,49,50,65,80,52,95,84,101,110,99,65,116,111,109,0,56,65,80,52,95,65,116,111,109,0,49,56,65,80,52,95,65,116,111,109,76,105,115,116,87,114,105,116,101,114,0,49,53,65,80,52,95,85,110,107,110,111,119,110,65,116,111,109,0,50,56,65,80,52,95,78,117,108,108,84,101,114,109,105,110,97,116,101,100,83,116,114,105,110,103,65,116,111,109,0,49,52,65,80,52,95,65,116,111,109,80,97,114,101,110,116,0,115,105,122,101,32,60,61,32,48,120,70,70,70,70,70,70,70,70,0,83,111,117,114,99,101,47,67,43,43,47,67,111,114,101,47,65,112,52,65,116,111,109,46,99,112,112,0,65,80,52,95,85,110,107,110,111,119,110,65,116,111,109,0,115,116,114,105,110,103,32,118,97,108,117,101,0,98,121,116,101,115,95,119,114,105,116,116,101,110,32,60,61,32,97,116,111,109,45,62,71,101,116,83,105,122,101,40,41,0,65,99,116,105,111,110,0,87,65,82,78,73,78,71,58,32,97,116,111,109,32,115,101,114,105,97,108,105,122,101,100,32,116,111,32,102,101,119,101,114,32,98,121,116,101,115,32,116,104,97,110,32,100,101,99,108,97,114,101,100,32,115,105,122,101,10,0,87,65,82,78,73,78,71,58,32,112,97,100,100,105,110,103,32,119,111,117,108,100,32,98,101,32,116,111,111,32,108,97,114,103,101,10,0,78,56,65,80,52,95,76,105,115,116,73,56,65,80,52,95,65,116,111,109,69,52,73,116,101,109,54,70,105,110,100,101,114,69,0,49,52,65,80,52,95,65,116,111,109,70,105,110,100,101,114,0,49,55,65,80,52,95,67,111,110,116,97,105,110,101,114,65,116,111,109,0,49,50,65,80,52,95,83,116,116,115,65,116,111,109,0,101,110,116,114,121,95,99,111,117,110,116,0,101,110,116,114,121,32,37,56,100,0,115,97,109,112,108,101,95,99,111,117,110,116,61,37,100,44,32,115,97,109,112,108,101,95,100,117,114,97,116,105,111,110,61,37,100,0,57,65,80,52,95,65,114,114,97,121,73,49,56,65,80,52,95,83,116,116,115,84,97,98,108,101,69,110,116,114,121,69,0,137,116,219,206,123,231,76,81,132,249,113,72,249,136,37,84,162,57,79,82,90,155,79,20,162,68,108,66,124,100,141,244,50,55,65,80,52,95,80,105,102,102,84,114,97,99,107,69,110,99,114,121,112,116,105,111,110,65,116,111,109,0,50,56,65,80,52,95,80,105,102,102,83,97,109,112,108,101,69,110,99,114,121,112,116,105,111,110,65,116,111,109,0,49,50,65,80,52,95,84,114,101,120,65,116,111,109,0,116,114,97,99,107,32,105,100,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,100,101,115,99,114,105,112,116,105,111,110,32,105,110,100,101,120,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,100,117,114,97,116,105,111,110,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,115,105,122,101,0,100,101,102,97,117,108,116,32,115,97,109,112,108,101,32,102,108,97,103,115,0,49,50,65,80,52,95,84,114,117,110,65,116,111,109,0,115,97,109,112,108,101,32,99,111,117,110,116,0,100,97,116,97,32,111,102,102,115,101,116,0,102,105,114,115,116,32,115,97,109,112,108,101,32,102,108,97,103,115,0,37,48,52,100,0,0,100,58,37,117,0,44,0,37,115,115,58,37,117,0,37,115,102,58,37,120,0,37,115,99,58,37,117,0,37,115,37,115,37,115,37,115,0,101,110,116,114,121,32,37,48,52,100,0,115,97,109,112,108,101,95,100,117,114,97,116,105,111,110,58,37,117,0,44,32,0,37,115,115,97,109,112,108,101,95,115,105,122,101,58,37,117,0,37,115,115,97,109,112,108,101,95,102,108,97,103,115,58,37,120,0,37,115,115,97,109,112,108,101,95,99,111,109,112,111,115,105,116,105,111,110,95,116,105,109,101,95,111,102,102,115,101,116,58,37,117,0,49,50,65,80,52,95,73,115,102,109,65,116,111,109,0,115,101,108,101,99,116,105,118,101,95,101,110,99,114,121,112,116,105,111,110,0,107,101,121,95,105,110,100,105,99,97,116,111,114,95,108,101,110,103,116,104,0,73,86,95,108,101,110,103,116,104,0,49,50,65,80,52,95,73,115,108,116,65,116,111,109,0,115,97,108,116,0,49,50,65,80,52,95,86,109,104,100,65,116,111,109,0,103,114,97,112,104,105,99,115,95,109,111,100,101,0,37,48,52,120,44,37,48,52,120,44,37,48,52,120,0,111,112,95,99,111,108,111,114,0,49,56,65,80,52,95,65,101,115,66,108,111,99,107,67,105,112,104,101,114,0,50,49,65,80,52,95,65,101,115,67,98,99,66,108,111,99,107,67,105,112,104,101,114,0,50,49,65,80,52,95,65,101,115,67,116,114,66,108,111,99,107,67,105,112,104,101,114,0,49,53,65,80,52,95,66,108,111,99,107,67,105,112,104,101,114,0,50,55,65,80,52,95,77,101,116,97,68,97,116,97,65,116,111,109,84,121,112,101,72,97,110,100,108,101,114,0,49,50,65,80,52,95,68,97,116,97,65,116,111,109,0,50,50,65,80,52,95,77,101,116,97,68,97,116,97,83,116,114,105,110,103,65,116,111,109,0,50,55,65,80,52,95,51,71,112,112,76,111,99,97,108,105,122,101,100,83,116,114,105,110,103,65,116,111,109,0,49,55,65,80,52,95,68,99,102,83,116,114,105,110,103,65,116,111,109,0,49,50,65,80,52,95,68,99,102,100,65,116,111,109,0,116,121,112,101,0,108,97,110,103,0,118,97,108,117,101,0,108,97,110,103,117,97,103,101,0,100,117,114,97,116,105,111,110,0,57,65,80,52,95,65,114,114,97,121,73,78,49,50,65,80,52,95,77,101,116,97,68,97,116,97,55,75,101,121,73,110,102,111,69,69,0,56,65,80,52,95,76,105,115,116,73,78,49,50,65,80,52,95,77,101,116,97,68,97,116,97,53,69,110,116,114,121,69,69,0,78,97,109,101,0,65,114,116,105,115,116,0,65,108,98,117,109,65,114,116,105,115,116,0,65,108,98,117,109,32,65,114,116,105,115,116,0,67,111,109,112,111,115,101,114,0,87,114,105,116,101,114,0,65,108,98,117,109,0,71,101,110,114,101,67,111,100,101,0,71,101,110,114,101,0,71,101,110,114,101,78,97,109,101,0,71,114,111,117,112,105,110,103,0,68,97,116,101,0,84,111,111,108,0,69,110,99,111,100,105,110,103,32,84,111,111,108,0,67,111,109,109,101,110,116,0,76,121,114,105,99,115,0,67,111,112,121,114,105,103,104,116,0,84,114,97,99,107,0,84,114,97,99,107,32,78,117,109,98,101,114,0,68,105,115,99,0,68,105,115,99,32,78,117,109,98,101,114,0,67,111,118,101,114,0,67,111,118,101,114,32,65,114,116,0,68,101,115,99,114,105,112,116,105,111,110,0,82,97,116,105,110,103,0,84,101,109,112,111,0,67,111,109,112,105,108,97,116,105,111,110,0,73,115,71,97,112,108,101,115,115,0,73,115,32,71,97,112,108,101,115,115,0,84,105,116,108,101,0,83,116,111,114,101,70,114,111,110,116,73,68,0,83,116,111,114,101,32,70,114,111,110,116,32,73,68,0,70,105,108,101,75,105,110,100,0,70,105,108,101,32,75,105,110,100,0,83,104,111,119,78,97,109,101,0,83,104,111,119,32,78,97,109,101,0,83,104,111,119,83,101,97,115,111,110,0,83,104,111,119,32,83,101,97,115,111,110,32,78,117,109,98,101,114,0,83,104,111,119,69,112,105,115,111,100,101,78,117,109,98,101,114,0,83,104,111,119,32,69,112,105,115,111,100,101,32,78,117,109,98,101,114,0,83,104,111,119,69,112,105,115,111,100,101,78,97,109,101,0,83,104,111,119,32,69,112,105,115,111,100,101,32,78,97,109,101,0,84,86,78,101,116,119,111,114,107,78,97,109,101,0,84,86,32,78,101,116,119,111,114,107,32,78,97,109,101,0,73,115,80,111,100,99,97,115,116,0,73,115,32,97,32,80,111,100,99,97,115,116,0,80,111,100,99,97,115,116,85,114,108,0,80,111,100,99,97,115,116,32,85,82,76,0,80,111,100,99,97,115,116,71,117,105,100,0,80,111,100,99,97,115,116,32,71,85,73,68,0,80,111,100,99,97,115,116,67,97,116,101,103,111,114,121,0,80,111,100,99,97,115,116,32,67,97,116,101,103,111,114,121,0,75,101,121,119,111,114,100,115,0,80,117,114,99,104,97,115,101,68,97,116,101,0,80,117,114,99,104,97,115,101,32,68,97,116,101,0,73,99,111,110,85,114,105,0,73,99,111,110,32,85,82,73,0,73,110,102,111,85,114,108,0,73,110,102,111,32,85,82,76,0,67,111,118,101,114,85,114,105,0,67,111,118,101,114,32,65,114,116,32,85,82,73,0,76,121,114,105,99,115,85,114,105,0,76,121,114,105,99,115,32,85,82,73,0,68,117,114,97,116,105,111,110,0,80,101,114,102,111,114,109,101,114,0,65,117,116,104,111,114,0,50,50,65,80,52,95,83,116,100,99,70,105,108,101,66,121,116,101,83,116,114,101,97,109,0,45,115,116,100,105,110,0,45,115,116,100,111,117,116,0,45,115,116,100,101,114,114,0,114,98,0,119,98,43,0,114,43,98,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+52393);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_resume=true;

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (stream.node.file) {
            if (position < Module['readBufferPos'] || length + position > Module['readBuffer'].length + Module['readBufferPos']) {
              Module['readBuffer'].fill(0);
              var chunkSize = 10*1024*1024;
              Module['readBuffer'] = new Uint8Array(new FileReaderSync().readAsArrayBuffer(stream.node.file.slice(position, position + Math.max(chunkSize, length))));
              Module['readBufferPos'] = position;
            }
            var readBytes = Math.min(length, Module['readBuffer'].length - position + Module['readBufferPos']);
            for (var i = 0; i < readBytes; i++) {
              buffer[offset + i] = Module['readBuffer'][i + position - Module['readBufferPos']];
            }
            return readBytes;
          } else {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
              buffer.set(contents.subarray(position, position + size), offset);
            } else {
              for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
            }
            return size;
          }
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (node.entry) {
            // Mp4split выполняет запись последовательно
            // Для непоследовательной записи нужно добавить определение непоследовательности и в этом случае, не дожидаясь наполнения буфера, также записывать в файл
            if (Module['writeBufferEntry'] != node.entry) {
              if (Module['writeBufferOffset']) {
                var writer = Module['writeBufferEntry'].createWriter();
                writer.write(new Blob([Module['writeBuffer'].subarray(0, Module['writeBufferOffset'])]));
                Module['writeBuffer'].fill(0);
                Module['writeBufferOffset'] = 0;
              }
              Module['writeBufferEntry'] = node.entry;
            }
            if (Module['writeBufferOffset'] + length > Module['writeBuffer'].length) {
              throw 'Too small writeBuffer length ' + Module['writeBuffer'].length + ' to write ' + (Module['writeBufferOffset'] + length) + ' bytes';
            }
            for (var i = 0; i < length; i++) {
              Module['writeBuffer'][Module['writeBufferOffset'] + i] = buffer[offset + i];
            }
            Module['writeBufferOffset'] += length;
          } else {
            if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
              if (canOwn) { // Can we just reuse the buffer we are given?
                assert(position === 0, 'canOwn must imply no weird position inside the file');
                node.contents = buffer.subarray(offset, offset + length);
                node.usedBytes = length;
                return length;
              } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                node.usedBytes = length;
                return length;
              } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                node.contents.set(buffer.subarray(offset, offset + length), position);
                return length;
              }
            }
    
            // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
            MEMFS.expandFileStorage(node, position+length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
            else {
              for (var i = 0; i < length; i++) {
               node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
              }
            }
            node.usedBytes = Math.max(node.usedBytes, position+length);
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={entry:Module['fs'],root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
        if (parent && parent.entry) {
          if (FS.isFile(node.mode)) {
            node.entry = parent.entry.getFile(name, { create: true });
          } else if (FS.isDir(node.mode)) {
            node.entry = parent.entry.getDirectory(name, { create: true });
          }
        }
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        var node = FS.mknod(path, mode, 0);
        if (FS.entry) {
          node.entry = FS.entry.root.getDirectory(path, { create: true });
        }
        return node;
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _UItoD=true;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _DtoIHigh=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidi(x) { Module["printErr"]("Invalid function pointer called with signature 'viidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viidi": nullFunc_viidi, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viidi": invoke_viidi, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_key_create": _pthread_key_create, "_pthread_cleanup_push": _pthread_cleanup_push, "_abort": _abort, "___setErrNo": ___setErrNo, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_pthread_getspecific": _pthread_getspecific, "_pthread_self": _pthread_self, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "___cxa_throw": ___cxa_throw, "__exit": __exit, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___cxa_pure_virtual": ___cxa_pure_virtual, "_time": _time, "_atexit": _atexit, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viidi=env.nullFunc_viidi;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidi=env.invoke_viidi;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_self=env._pthread_self;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var __exit=env.__exit;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _time=env._time;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN9AP4_ArrayIjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3072);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$$i$1$i = 0, $$$i$i = 0, $$17 = 0, $$18 = 0, $$20 = 0, $$22 = 0, $$lcssa = 0, $$lcssa110 = 0, $$not = 0, $$pr35 = 0, $$pr59 = 0, $$pre = 0, $$pre$i$8$i = 0, $$pre$i$i = 0, $$pre$pre$i$3$i = 0, $$pre$pre$i$i = 0, $$pre95 = 0, $$pre96 = 0, $$pre98 = 0, $$pre99 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $args$0$be = 0, $args$089 = 0, $atom8 = 0, $child$085 = 0, $child$182 = 0, $cursor$0 = 0, $exitcond = 0, $exitcond$i$6$i = 0, $exitcond$i$i = 0, $i$01$i$i$5$i = 0, $i$01$i$i$i = 0, $i$014$i = 0, $i$014$i$lcssa = 0, $i$074 = 0, $input = 0, $new_count$0$i$2$i = 0, $new_count$0$i$i = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond24 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond31 = 0, $or$cond9 = 0, $output = 0, $p = 0, $segment_name = 0, $strlenfirst = 0, $track_id$077 = 0, $track_id$1$lcssa = 0, $track_id$168 = 0, $track_id$4 = 0, $track_id$6 = 0, $track_index$1$i = 0, $traf_count$0$lcssa = 0, $traf_count$069 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $input = sp + 100|0;
 $output = sp + 96|0;
 $atom8 = sp + 92|0;
 $segment_name = sp + 104|0;
 $p = sp;
 $0 = ($argc|0)<(2);
 if ($0) {
  $1 = HEAP32[8837]|0;
  (_fprintf($1,37433,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 HEAP8[2992] = 0;
 HEAP32[(2996)>>2] = 0;
 HEAP32[(3000)>>2] = 36356;
 HEAP32[(3004)>>2] = 36365;
 HEAP32[(3008)>>2] = 36389;
 HEAP32[(3012)>>2] = 1;
 $2 = ((($argv)) + 4|0);
 ;HEAP32[(3016)>>2]=0|0;HEAP32[(3016)+4>>2]=0|0;HEAP32[(3016)+8>>2]=0|0;HEAP8[(3016)+12>>0]=0|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($argv)) + 8|0);
   $12 = $5;$6 = $3;$args$089 = $2;
   L6: while(1) {
    $7 = (_strcmp($6,36392)|0);
    $8 = ($7|0)==(0);
    do {
     if ($8) {
      HEAP8[2992] = 1;
      $args$0$be = $12;
     } else {
      $9 = (_strcmp($6,36402)|0);
      $10 = ($9|0)==(0);
      if ($10) {
       $11 = HEAP32[$12>>2]|0;
       $13 = ($11|0)==(0|0);
       if ($13) {
        label = 9;
        break L6;
       }
       $15 = ((($args$089)) + 8|0);
       HEAP32[(3000)>>2] = $11;
       $args$0$be = $15;
       break;
      }
      $19 = (_strcmp($6,36470)|0);
      $20 = ($19|0)==(0);
      if ($20) {
       $21 = HEAP32[$12>>2]|0;
       $22 = ($21|0)==(0|0);
       if ($22) {
        label = 14;
        break L6;
       }
       $24 = ((($args$089)) + 8|0);
       HEAP32[(3004)>>2] = $21;
       $args$0$be = $24;
       break;
      }
      $25 = (_strcmp($6,36540)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = HEAP32[$12>>2]|0;
       $28 = ($27|0)==(0|0);
       if ($28) {
        label = 18;
        break L6;
       }
       $30 = ((($args$089)) + 8|0);
       HEAP32[(3008)>>2] = $27;
       $args$0$be = $30;
       break;
      }
      $31 = (_strcmp($6,36616)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = ((($args$089)) + 8|0);
       $34 = HEAP32[$12>>2]|0;
       $35 = (_strtoul($34,0,10)|0);
       HEAP32[(3016)>>2] = $35;
       $args$0$be = $33;
       break;
      }
      $36 = (_strcmp($6,36627)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $38 = ((($args$089)) + 8|0);
       $39 = HEAP32[$12>>2]|0;
       $40 = (_strtoul($39,0,10)|0);
       HEAP32[(3012)>>2] = $40;
       $args$0$be = $38;
       break;
      }
      $41 = (_strcmp($6,36642)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       HEAP8[(3022)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $43 = (_strcmp($6,36654)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       HEAP8[(3023)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $45 = (_strcmp($6,36667)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       HEAP8[(3020)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $47 = (_strcmp($6,36675)|0);
      $48 = ($47|0)==(0);
      if ($48) {
       HEAP8[(3021)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $49 = (_strcmp($6,36683)|0);
      $50 = ($49|0)==(0);
      if ($50) {
       HEAP8[(3028)>>0] = 1;
       $args$0$be = $12;
       break;
      }
      $51 = HEAP32[(2996)>>2]|0;
      $52 = ($51|0)==(0|0);
      if (!($52)) {
       label = 36;
       break L6;
      }
      HEAP32[(2996)>>2] = $6;
      $args$0$be = $12;
     }
    } while(0);
    $16 = ((($args$0$be)) + 4|0);
    $17 = HEAP32[$args$0$be>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     label = 37;
     break;
    } else {
     $12 = $16;$6 = $17;$args$089 = $args$0$be;
    }
   }
   if ((label|0) == 9) {
    $14 = HEAP32[8837]|0;
    (_fwrite(36417,52,1,$14)|0);
    $$22 = 1;
    STACKTOP = sp;return ($$22|0);
   }
   else if ((label|0) == 14) {
    $23 = HEAP32[8837]|0;
    (_fwrite(36486,53,1,$23)|0);
    $$22 = 1;
    STACKTOP = sp;return ($$22|0);
   }
   else if ((label|0) == 18) {
    $29 = HEAP32[8837]|0;
    (_fwrite(36561,54,1,$29)|0);
    $$22 = 1;
    STACKTOP = sp;return ($$22|0);
   }
   else if ((label|0) == 36) {
    $53 = HEAP32[8837]|0;
    (_fwrite(36690,27,1,$53)|0);
    $$22 = 1;
    STACKTOP = sp;return ($$22|0);
   }
   else if ((label|0) == 37) {
    $$pre = HEAP32[(2996)>>2]|0;
    $54 = ($$pre|0)==(0|0);
    if ($54) {
     break;
    }
    $56 = HEAP16[(3020)>>1]|0;
    $57 = $56&255;
    $58 = ($57<<24>>24)==(0);
    $59 = ($56&65535) >>> 8;
    $60 = $59&255;
    if ($58) {
     label = 41;
    } else {
     $61 = ($60<<24>>24)!=(0);
     $62 = HEAP32[(3016)>>2]|0;
     $63 = ($62|0)!=(0);
     $or$cond = $61 | $63;
     if (!($or$cond)) {
      label = 41;
     }
    }
    do {
     if ((label|0) == 41) {
      $64 = ($60<<24>>24)==(0);
      if ($64) {
       $$pr35 = HEAP32[(3016)>>2]|0;
       $68 = ($$pr35|0)==(0);
       if (!($68)) {
        $69 = $59 | $56;
        $70 = $69&255;
        $71 = ($70<<24>>24)==(0);
        if (!($71)) {
         break;
        }
       }
      } else {
       $65 = ($57<<24>>24)!=(0);
       $66 = HEAP32[(3016)>>2]|0;
       $67 = ($66|0)!=(0);
       $or$cond9 = $65 | $67;
       if ($or$cond9) {
        break;
       }
      }
      $73 = HEAP32[(3008)>>2]|0;
      $strlenfirst = HEAP8[$73>>0]|0;
      $74 = ($strlenfirst<<24>>24)==(0);
      if ($74) {
       $75 = HEAP32[8837]|0;
       (_fwrite(36820,46,1,$75)|0);
       $$22 = 1;
       STACKTOP = sp;return ($$22|0);
      }
      $76 = (_strlen($73)|0);
      $77 = ($76>>>0)>(2);
      if ($77) {
       $78 = HEAP32[8837]|0;
       (_fwrite(36867,45,1,$78)|0);
       $$22 = 1;
       STACKTOP = sp;return ($$22|0);
      } else {
       $79 = $strlenfirst;$cursor$0 = $73;
      }
      L65: while(1) {
       switch ($79<<24>>24) {
       case 0:  {
        break L65;
        break;
       }
       case 78: case 73:  {
        break;
       }
       default: {
        $$lcssa110 = $79;
        label = 51;
        break L65;
       }
       }
       $82 = ((($cursor$0)) + 1|0);
       $$pre95 = HEAP8[$82>>0]|0;
       $79 = $$pre95;$cursor$0 = $82;
      }
      if ((label|0) == 51) {
       $80 = $$lcssa110 << 24 >> 24;
       $81 = HEAP32[8837]|0;
       HEAP32[$vararg_buffer1>>2] = $80;
       (_fprintf($81,36913,$vararg_buffer1)|0);
       $$22 = 1;
       STACKTOP = sp;return ($$22|0);
      }
      HEAP32[$input>>2] = 0;
      $83 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($$pre,0,$input)|0);
      $84 = ($83|0)==(0);
      L72: do {
       if ($84) {
        $86 = (__Znwj(36)|0);
        $87 = HEAP32[$input>>2]|0;
        __THREW__ = 0;
        invoke_viiii(846,($86|0),($87|0),(4320|0),1);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         $94 = ___cxa_find_matching_catch()|0;
         $95 = tempRet0;
         __ZdlPv($86);
         ___resumeException($94|0);
         // unreachable;
        }
        $90 = ((($86)) + 20|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==(0|0);
        if ($92) {
         $93 = HEAP32[8837]|0;
         (_fwrite(36983,23,1,$93)|0);
         $$20 = 1;
         break;
        }
        $96 = HEAP16[(3020)>>1]|0;
        $97 = $96&255;
        $98 = ($97<<24>>24)==(0);
        do {
         if ($98) {
          $103 = ($96&65535)<(256);
          if (!($103)) {
           $104 = (__ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($91,2,0)|0);
           $105 = ($104|0)==(0|0);
           if ($105) {
            $107 = HEAP32[8837]|0;
            (_fwrite(37059,51,1,$107)|0);
            $$20 = 1;
            break L72;
           } else {
            $106 = (__ZNK9AP4_Track5GetIdEv($104)|0);
            HEAP32[(3024)>>2] = $106;
            break;
           }
          }
          $108 = HEAP32[(3016)>>2]|0;
          $109 = ($108|0)==(0);
          if (!($109)) {
           $110 = (__ZN9AP4_Movie8GetTrackEj($91,$108)|0);
           $111 = ($110|0)==(0|0);
           if ($111) {
            $113 = HEAP32[8837]|0;
            (_fwrite(37111,53,1,$113)|0);
            $$20 = 1;
            break L72;
           } else {
            $112 = (__ZNK9AP4_Track5GetIdEv($110)|0);
            HEAP32[(3024)>>2] = $112;
            break;
           }
          }
         } else {
          $99 = (__ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($91,1,0)|0);
          $100 = ($99|0)==(0|0);
          if ($100) {
           $102 = HEAP32[8837]|0;
           (_fwrite(37007,51,1,$102)|0);
           $$20 = 1;
           break L72;
          } else {
           $101 = (__ZNK9AP4_Track5GetIdEv($99)|0);
           HEAP32[(3024)>>2] = $101;
           break;
          }
         }
        } while(0);
        HEAP32[$output>>2] = 0;
        $114 = HEAP8[(3023)>>0]|0;
        $115 = ($114<<24>>24)==(0);
        L97: do {
         if ($115) {
          $116 = HEAP32[(3000)>>2]|0;
          $117 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($116,1,$output)|0);
          $118 = ($117|0)==(0);
          if (!($118)) {
           $119 = HEAP32[8837]|0;
           HEAP32[$vararg_buffer6>>2] = $117;
           (_fprintf($119,37165,$vararg_buffer6)|0);
           $$18 = 1;
           break;
          }
          $120 = ((($86)) + 24|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = ($121|0)==(0|0);
          do {
           if (!($122)) {
            $123 = HEAP32[$121>>2]|0;
            $124 = ((($123)) + 12|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = HEAP32[$output>>2]|0;
            $127 = (FUNCTION_TABLE_iii[$125 & 2047]($121,$126)|0);
            $128 = ($127|0)==(0);
            if ($128) {
             break;
            }
            $129 = HEAP32[8837]|0;
            HEAP32[$vararg_buffer9>>2] = $127;
            (_fprintf($129,37202,$vararg_buffer9)|0);
            $$18 = 1;
            break L97;
           }
          } while(0);
          $130 = HEAP32[(3024)>>2]|0;
          $131 = ($130|0)==(0);
          $132 = HEAP8[(3028)>>0]|0;
          $133 = ($132<<24>>24)==(0);
          $or$cond24 = $131 & $133;
          $$pre99 = ((($91)) + 4|0);
          do {
           if (!($or$cond24)) {
            $134 = HEAP32[$$pre99>>2]|0;
            $135 = ((($134)) + 48|0);
            $136 = HEAP32[$135>>2]|0;
            $137 = ($136|0)==(0|0);
            L108: do {
             if (!($137)) {
              $144 = $132;$child$085 = $136;
              while(1) {
               $138 = HEAP32[$child$085>>2]|0;
               $139 = ((($child$085)) + 4|0);
               $140 = HEAP32[$139>>2]|0;
               $141 = ((($138)) + 4|0);
               $142 = HEAP32[$141>>2]|0;
               $143 = ($142|0)!=(1836476516);
               $145 = ($144<<24>>24)==(0);
               $or$cond26 = $143 | $145;
               L111: do {
                if ($or$cond26) {
                 $151 = ($142|0)==(1953653099);
                 if (!($151)) {
                  break;
                 }
                 $152 = ((($138)) + 36|0);
                 $153 = HEAP32[$152>>2]|0;
                 $154 = ((($153)) + 20|0);
                 $155 = HEAP32[$154>>2]|0;
                 $156 = (FUNCTION_TABLE_iiii[$155 & 2047]($152,1953196132,0)|0);
                 $157 = ($156|0)!=(0|0);
                 $158 = HEAP32[(3024)>>2]|0;
                 $159 = ($158|0)!=(0);
                 $or$cond11 = $157 & $159;
                 do {
                  if ($or$cond11) {
                   $160 = ((($156)) + 56|0);
                   $161 = HEAP32[$160>>2]|0;
                   $162 = ($161|0)==($158|0);
                   if ($162) {
                    break;
                   }
                   $163 = HEAP32[$138>>2]|0;
                   $164 = ((($163)) + 44|0);
                   $165 = HEAP32[$164>>2]|0;
                   (FUNCTION_TABLE_ii[$165 & 2047]($138)|0);
                   $166 = HEAP32[$138>>2]|0;
                   $167 = ((($166)) + 4|0);
                   $168 = HEAP32[$167>>2]|0;
                   FUNCTION_TABLE_vi[$168 & 2047]($138);
                   break L111;
                  }
                 } while(0);
                 $$not = $157 ^ 1;
                 $170 = HEAP8[(3028)>>0]|0;
                 $171 = ($170<<24>>24)==(0);
                 $or$cond28 = $171 | $$not;
                 if ($or$cond28) {
                  break;
                 }
                 $172 = ((($156)) + 64|0);
                 $173 = $172;
                 $174 = $173;
                 HEAP32[$174>>2] = 0;
                 $175 = (($173) + 4)|0;
                 $176 = $175;
                 HEAP32[$176>>2] = 0;
                } else {
                 $146 = ((($138)) + 64|0);
                 $147 = $146;
                 $148 = $147;
                 HEAP32[$148>>2] = 0;
                 $149 = (($147) + 4)|0;
                 $150 = $149;
                 HEAP32[$150>>2] = 0;
                }
               } while(0);
               $169 = ($140|0)==(0|0);
               if ($169) {
                break L108;
               }
               $$pre96 = HEAP8[(3028)>>0]|0;
               $144 = $$pre96;$child$085 = $140;
              }
             }
            } while(0);
            $177 = ((($134)) + 36|0);
            $178 = HEAP32[$177>>2]|0;
            $179 = ((($178)) + 20|0);
            $180 = HEAP32[$179>>2]|0;
            $181 = (FUNCTION_TABLE_iiii[$180 & 2047]($177,1836475768,0)|0);
            $182 = ($181|0)==(0|0);
            if ($182) {
             break;
            }
            $183 = (___dynamic_cast($181,2392,2480,0)|0);
            $184 = ($183|0)==(0|0);
            if ($184) {
             break;
            }
            $185 = ((($183)) + 48|0);
            $186 = HEAP32[$185>>2]|0;
            $187 = ($186|0)==(0|0);
            if ($187) {
             break;
            } else {
             $child$182 = $186;
            }
            while(1) {
             $188 = HEAP32[$child$182>>2]|0;
             $189 = ((($child$182)) + 4|0);
             $190 = HEAP32[$189>>2]|0;
             $191 = ((($188)) + 4|0);
             $192 = HEAP32[$191>>2]|0;
             $193 = ($192|0)==(1953654136);
             do {
              if ($193) {
               $194 = ($188|0)==(0|0);
               if ($194) {
                break;
               }
               $195 = (___dynamic_cast($188,2392,2600,0)|0);
               $196 = ($195|0)==(0|0);
               if ($196) {
                break;
               }
               $197 = ((($195)) + 36|0);
               $198 = HEAP32[$197>>2]|0;
               $199 = HEAP32[(3024)>>2]|0;
               $200 = ($198|0)==($199|0);
               if ($200) {
                break;
               }
               $201 = HEAP32[$188>>2]|0;
               $202 = ((($201)) + 44|0);
               $203 = HEAP32[$202>>2]|0;
               (FUNCTION_TABLE_ii[$203 & 2047]($188)|0);
               $204 = HEAP32[$188>>2]|0;
               $205 = ((($204)) + 4|0);
               $206 = HEAP32[$205>>2]|0;
               FUNCTION_TABLE_vi[$206 & 2047]($188);
              } else {
               $207 = ($192|0)!=(1835362404);
               $208 = HEAP8[(3028)>>0]|0;
               $209 = ($208<<24>>24)==(0);
               $or$cond30 = $207 | $209;
               if ($or$cond30) {
                break;
               }
               $211 = (___dynamic_cast($188,2392,2128,0)|0);
               $212 = ((($211)) + 40|0);
               $213 = $212;
               $214 = $213;
               HEAP32[$214>>2] = 0;
               $215 = (($213) + 4)|0;
               $216 = $215;
               HEAP32[$216>>2] = 0;
              }
             } while(0);
             $210 = ($190|0)==(0|0);
             if ($210) {
              break;
             } else {
              $child$182 = $190;
             }
            }
           }
          } while(0);
          $217 = HEAP32[$$pre99>>2]|0;
          $218 = HEAP32[$217>>2]|0;
          $219 = ((($218)) + 12|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = HEAP32[$output>>2]|0;
          $222 = (FUNCTION_TABLE_iii[$220 & 2047]($217,$221)|0);
          $223 = ($222|0)==(0);
          if ($223) {
           label = 102;
           break;
          }
          $224 = HEAP32[8837]|0;
          HEAP32[$vararg_buffer12>>2] = $222;
          (_fprintf($224,37241,$vararg_buffer12)|0);
          $$18 = 1;
         } else {
          label = 102;
         }
        } while(0);
        if ((label|0) == 102) {
         HEAP32[$atom8>>2] = 0;
         $225 = HEAP8[(3022)>>0]|0;
         $226 = ($225<<24>>24)==(0);
         L139: do {
          if ($226) {
           $227 = ((($p)) + 8|0);
           $track_id$077 = 0;
           L141: while(1) {
            $228 = HEAP32[$input>>2]|0;
            $229 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(4320,$228,$atom8)|0);
            $230 = ($229|0)==(0);
            if (!($230)) {
             label = 167;
             break L139;
            }
            $231 = HEAP32[$atom8>>2]|0;
            $232 = ((($231)) + 4|0);
            $233 = HEAP32[$232>>2]|0;
            $234 = ($233|0)==(1836019558);
            if ($234) {
             $235 = ($231|0)==(0|0);
             if ($235) {
              $238 = 0;
             } else {
              $236 = (___dynamic_cast($231,2392,2480,0)|0);
              $238 = $236;
             }
             $237 = ((($238)) + 36|0);
             $239 = HEAP32[$237>>2]|0;
             $240 = ((($239)) + 20|0);
             $241 = HEAP32[$240>>2]|0;
             $242 = (FUNCTION_TABLE_iiii[$241 & 2047]($237,1953653094,0)|0);
             $243 = ($242|0)==(0|0);
             do {
              if ($243) {
               $track_id$4 = $track_id$077;
              } else {
               $244 = $242;$track_id$168 = $track_id$077;$traf_count$069 = 0;
               while(1) {
                $245 = (___dynamic_cast($244,2392,2480,0)|0);
                $246 = ($245|0)==(0|0);
                if ($246) {
                 $track_id$1$lcssa = $track_id$168;$traf_count$0$lcssa = $traf_count$069;
                 break;
                }
                $247 = ((($245)) + 36|0);
                $248 = HEAP32[$247>>2]|0;
                $249 = ((($248)) + 20|0);
                $250 = HEAP32[$249>>2]|0;
                $251 = (FUNCTION_TABLE_iiii[$250 & 2047]($247,1952868452,0)|0);
                $252 = ($251|0)==(0|0);
                if ($252) {
                 label = 112;
                 break L141;
                }
                $253 = (___dynamic_cast($251,2392,304,0)|0);
                $254 = ($253|0)==(0|0);
                if ($254) {
                 label = 112;
                 break L141;
                }
                $256 = ((($253)) + 36|0);
                $257 = HEAP32[$256>>2]|0;
                $258 = (($traf_count$069) + 1)|0;
                $259 = HEAP32[$237>>2]|0;
                $260 = ((($259)) + 20|0);
                $261 = HEAP32[$260>>2]|0;
                $262 = (FUNCTION_TABLE_iiii[$261 & 2047]($237,1953653094,$258)|0);
                $263 = ($262|0)==(0|0);
                if ($263) {
                 $track_id$1$lcssa = $257;$traf_count$0$lcssa = $258;
                 break;
                } else {
                 $244 = $262;$track_id$168 = $257;$traf_count$069 = $258;
                }
               }
               $264 = ($traf_count$0$lcssa>>>0)>(1);
               if (!($264)) {
                $track_id$4 = $track_id$1$lcssa;
                break;
               }
               $265 = HEAP16[(3020)>>1]|0;
               $266 = $265&255;
               $267 = ($266<<24>>24)==(0);
               if (!($267)) {
                label = 116;
                break L141;
               }
               $269 = ($265&65535)<(256);
               if ($269) {
                $track_id$4 = 0;
               } else {
                label = 118;
                break L141;
               }
              }
             } while(0);
             $271 = HEAP32[$output>>2]|0;
             $272 = ($271|0)==(0|0);
             if (!($272)) {
              $273 = HEAP32[$271>>2]|0;
              $274 = ((($273)) + 12|0);
              $275 = HEAP32[$274>>2]|0;
              FUNCTION_TABLE_vi[$275 & 2047]($271);
              HEAP32[$output>>2] = 0;
             }
             $276 = HEAP32[(3024)>>2]|0;
             $277 = ($276|0)==(0);
             $278 = ($276|0)==($track_id$4|0);
             $or$cond31 = $277 | $278;
             if ($or$cond31) {
              ;HEAP32[$p>>2]=0|0;HEAP32[$p+4>>2]=0|0;HEAP32[$p+8>>2]=0|0;HEAP32[$p+12>>2]=0|0;
              $279 = HEAP32[(3008)>>2]|0;
              $280 = (_strlen($279)|0);
              $281 = ($280|0)==(0);
              L164: do {
               if ($281) {
                label = 155;
               } else {
                $283 = $279;$i$074 = 0;
                while(1) {
                 $282 = (($283) + ($i$074)|0);
                 $284 = HEAP8[$282>>0]|0;
                 switch ($284<<24>>24) {
                 case 73:  {
                  $285 = (($p) + ($i$074<<3)|0);
                  $286 = $285;
                  $287 = $286;
                  HEAP32[$287>>2] = $track_id$4;
                  $288 = (($286) + 4)|0;
                  $289 = $288;
                  HEAP32[$289>>2] = 0;
                  break;
                 }
                 case 78:  {
                  $290 = HEAP32[(3040)>>2]|0;
                  $291 = ($290|0)==(0);
                  L171: do {
                   if ($291) {
                    label = 132;
                   } else {
                    $292 = HEAP32[(3044)>>2]|0;
                    $i$014$i = 0;
                    while(1) {
                     $293 = (($292) + ($i$014$i<<2)|0);
                     $294 = HEAP32[$293>>2]|0;
                     $295 = ($294|0)==($track_id$4|0);
                     if ($295) {
                      $i$014$i$lcssa = $i$014$i;
                      break;
                     }
                     $296 = (($i$014$i) + 1)|0;
                     $297 = ($296>>>0)<($290>>>0);
                     if ($297) {
                      $i$014$i = $296;
                     } else {
                      label = 132;
                      break L171;
                     }
                    }
                    $298 = ($i$014$i$lcssa|0)==(-1);
                    if ($298) {
                     label = 132;
                    } else {
                     $track_index$1$i = $i$014$i$lcssa;
                    }
                   }
                  } while(0);
                  L177: do {
                   if ((label|0) == 132) {
                    label = 0;
                    $299 = HEAP32[(3056)>>2]|0;
                    $300 = HEAP32[(3036)>>2]|0;
                    $301 = (($290) + 1)|0;
                    $302 = ($300>>>0)<($301>>>0);
                    do {
                     if ($302) {
                      $303 = ($300|0)==(0);
                      $304 = $300 << 1;
                      $$$i$1$i = $303 ? 64 : $304;
                      $305 = ($$$i$1$i>>>0)<($301>>>0);
                      $new_count$0$i$2$i = $305 ? $301 : $$$i$1$i;
                      $306 = ($300>>>0)<($new_count$0$i$2$i>>>0);
                      if (!($306)) {
                       $319 = $290;
                       label = 140;
                       break;
                      }
                      $307 = $new_count$0$i$2$i << 2;
                      $308 = (__Znwj($307)|0);
                      $309 = ($308|0)==(0|0);
                      if ($309) {
                       break;
                      }
                      $310 = HEAP32[(3040)>>2]|0;
                      $311 = ($310|0)==(0);
                      do {
                       if ($311) {
                        $$pre$i$8$i = 0;
                       } else {
                        $312 = HEAP32[(3044)>>2]|0;
                        $313 = ($312|0)==(0|0);
                        if ($313) {
                         $$pre$i$8$i = $310;
                         break;
                        } else {
                         $i$01$i$i$5$i = 0;
                        }
                        while(1) {
                         $314 = (($308) + ($i$01$i$i$5$i<<2)|0);
                         $315 = (($312) + ($i$01$i$i$5$i<<2)|0);
                         $316 = HEAP32[$315>>2]|0;
                         HEAP32[$314>>2] = $316;
                         $317 = (($i$01$i$i$5$i) + 1)|0;
                         $exitcond$i$6$i = ($317|0)==($310|0);
                         if ($exitcond$i$6$i) {
                          break;
                         } else {
                          $i$01$i$i$5$i = $317;
                         }
                        }
                        __ZdlPv($312);
                        $$pre$pre$i$3$i = HEAP32[(3040)>>2]|0;
                        $$pre$i$8$i = $$pre$pre$i$3$i;
                       }
                      } while(0);
                      HEAP32[(3044)>>2] = $308;
                      HEAP32[(3036)>>2] = $new_count$0$i$2$i;
                      $319 = $$pre$i$8$i;
                      label = 140;
                     } else {
                      $319 = $290;
                      label = 140;
                     }
                    } while(0);
                    if ((label|0) == 140) {
                     label = 0;
                     $318 = (($319) + 1)|0;
                     HEAP32[(3040)>>2] = $318;
                     $320 = HEAP32[(3044)>>2]|0;
                     $321 = (($320) + ($319<<2)|0);
                     HEAP32[$321>>2] = $track_id$4;
                    }
                    $322 = HEAP32[(3052)>>2]|0;
                    $323 = HEAP32[(3056)>>2]|0;
                    $324 = (($323) + 1)|0;
                    $325 = ($322>>>0)<($324>>>0);
                    do {
                     if ($325) {
                      $326 = ($322|0)==(0);
                      $327 = $322 << 1;
                      $$$i$i = $326 ? 64 : $327;
                      $328 = ($$$i$i>>>0)<($324>>>0);
                      $new_count$0$i$i = $328 ? $324 : $$$i$i;
                      $329 = ($322>>>0)<($new_count$0$i$i>>>0);
                      if (!($329)) {
                       $342 = $323;
                       break;
                      }
                      $330 = $new_count$0$i$i << 2;
                      $331 = (__Znwj($330)|0);
                      $332 = ($331|0)==(0|0);
                      if ($332) {
                       $track_index$1$i = $299;
                       break L177;
                      }
                      $333 = HEAP32[(3056)>>2]|0;
                      $334 = ($333|0)==(0);
                      do {
                       if ($334) {
                        $$pre$i$i = 0;
                       } else {
                        $335 = HEAP32[(3060)>>2]|0;
                        $336 = ($335|0)==(0|0);
                        if ($336) {
                         $$pre$i$i = $333;
                         break;
                        } else {
                         $i$01$i$i$i = 0;
                        }
                        while(1) {
                         $337 = (($331) + ($i$01$i$i$i<<2)|0);
                         $338 = (($335) + ($i$01$i$i$i<<2)|0);
                         $339 = HEAP32[$338>>2]|0;
                         HEAP32[$337>>2] = $339;
                         $340 = (($i$01$i$i$i) + 1)|0;
                         $exitcond$i$i = ($340|0)==($333|0);
                         if ($exitcond$i$i) {
                          break;
                         } else {
                          $i$01$i$i$i = $340;
                         }
                        }
                        __ZdlPv($335);
                        $$pre$pre$i$i = HEAP32[(3056)>>2]|0;
                        $$pre$i$i = $$pre$pre$i$i;
                       }
                      } while(0);
                      HEAP32[(3060)>>2] = $331;
                      HEAP32[(3052)>>2] = $new_count$0$i$i;
                      $342 = $$pre$i$i;
                     } else {
                      $342 = $323;
                     }
                    } while(0);
                    $341 = (($342) + 1)|0;
                    HEAP32[(3056)>>2] = $341;
                    $343 = HEAP32[(3060)>>2]|0;
                    $344 = (($343) + ($342<<2)|0);
                    HEAP32[$344>>2] = 0;
                    $track_index$1$i = $299;
                   }
                  } while(0);
                  $345 = HEAP32[(3060)>>2]|0;
                  $346 = (($345) + ($track_index$1$i<<2)|0);
                  $347 = HEAP32[$346>>2]|0;
                  $348 = (($347) + 1)|0;
                  HEAP32[$346>>2] = $348;
                  $349 = HEAP32[(3012)>>2]|0;
                  $350 = (($349) + ($347))|0;
                  $351 = (($p) + ($i$074<<3)|0);
                  $352 = $351;
                  $353 = $352;
                  HEAP32[$353>>2] = $350;
                  $354 = (($352) + 4)|0;
                  $355 = $354;
                  HEAP32[$355>>2] = 0;
                  break;
                 }
                 default: {
                 }
                 }
                 $356 = (($i$074) + 1)|0;
                 $exitcond = ($356|0)==($280|0);
                 if ($exitcond) {
                  break;
                 }
                 $$pre98 = HEAP32[(3008)>>2]|0;
                 $283 = $$pre98;$i$074 = $356;
                }
                switch ($280|0) {
                case 1:  {
                 $357 = HEAP32[(3004)>>2]|0;
                 $358 = $p;
                 $359 = $358;
                 $360 = HEAP32[$359>>2]|0;
                 $361 = (($358) + 4)|0;
                 $362 = $361;
                 $363 = HEAP32[$362>>2]|0;
                 $364 = $vararg_buffer15;
                 $365 = $364;
                 HEAP32[$365>>2] = $360;
                 $366 = (($364) + 4)|0;
                 $367 = $366;
                 HEAP32[$367>>2] = $363;
                 (_sprintf($segment_name,$357,$vararg_buffer15)|0);
                 break L164;
                 break;
                }
                case 2:  {
                 $368 = HEAP32[(3004)>>2]|0;
                 $369 = $p;
                 $370 = $369;
                 $371 = HEAP32[$370>>2]|0;
                 $372 = (($369) + 4)|0;
                 $373 = $372;
                 $374 = HEAP32[$373>>2]|0;
                 $375 = $227;
                 $376 = $375;
                 $377 = HEAP32[$376>>2]|0;
                 $378 = (($375) + 4)|0;
                 $379 = $378;
                 $380 = HEAP32[$379>>2]|0;
                 $381 = $vararg_buffer18;
                 $382 = $381;
                 HEAP32[$382>>2] = $371;
                 $383 = (($381) + 4)|0;
                 $384 = $383;
                 HEAP32[$384>>2] = $374;
                 $vararg_ptr21 = ((($vararg_buffer18)) + 8|0);
                 $385 = $vararg_ptr21;
                 $386 = $385;
                 HEAP32[$386>>2] = $377;
                 $387 = (($385) + 4)|0;
                 $388 = $387;
                 HEAP32[$388>>2] = $380;
                 (_sprintf($segment_name,$368,$vararg_buffer18)|0);
                 break L164;
                 break;
                }
                default: {
                 label = 155;
                 break L164;
                }
                }
               }
              } while(0);
              if ((label|0) == 155) {
               label = 0;
               HEAP8[$segment_name>>0] = 0;
              }
              $389 = (__ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($segment_name,1,$output)|0);
              $390 = ($389|0)==(0);
              if (!($390)) {
               $$lcssa = $389;
               label = 159;
               break;
              }
             }
             $track_id$6 = $track_id$4;
            } else {
             $track_id$6 = $track_id$077;
            }
            $392 = HEAP32[$output>>2]|0;
            $393 = ($392|0)==(0|0);
            do {
             if ($393) {
              label = 163;
             } else {
              $394 = HEAP32[$atom8>>2]|0;
              $395 = ((($394)) + 4|0);
              $396 = HEAP32[$395>>2]|0;
              $397 = ($396|0)==(1835430497);
              if ($397) {
               $401 = $394;
               break;
              }
              $398 = HEAP32[$394>>2]|0;
              $399 = ((($398)) + 12|0);
              $400 = HEAP32[$399>>2]|0;
              (FUNCTION_TABLE_iii[$400 & 2047]($394,$392)|0);
              label = 163;
             }
            } while(0);
            if ((label|0) == 163) {
             label = 0;
             $$pr59 = HEAP32[$atom8>>2]|0;
             $401 = $$pr59;
            }
            $402 = ($401|0)==(0|0);
            if (!($402)) {
             $403 = HEAP32[$401>>2]|0;
             $404 = ((($403)) + 4|0);
             $405 = HEAP32[$404>>2]|0;
             FUNCTION_TABLE_vi[$405 & 2047]($401);
            }
            $406 = HEAP8[(3022)>>0]|0;
            $407 = ($406<<24>>24)==(0);
            if ($407) {
             $track_id$077 = $track_id$6;
            } else {
             label = 167;
             break L139;
            }
           }
           if ((label|0) == 112) {
            $255 = HEAP32[8837]|0;
            (_fwrite(37280,28,1,$255)|0);
            $$17 = 1;
            break;
           }
           else if ((label|0) == 116) {
            $268 = HEAP32[8837]|0;
            (_fwrite(37309,61,1,$268)|0);
            $$17 = 1;
            break;
           }
           else if ((label|0) == 118) {
            $270 = HEAP32[8837]|0;
            (_fwrite(37371,61,1,$270)|0);
            $$17 = 1;
            break;
           }
           else if ((label|0) == 159) {
            $391 = HEAP32[8837]|0;
            HEAP32[$vararg_buffer22>>2] = $$lcssa;
            (_fprintf($391,37165,$vararg_buffer22)|0);
            $$17 = 1;
            break;
           }
          } else {
           label = 167;
          }
         } while(0);
         do {
          if ((label|0) == 167) {
           $408 = HEAP32[$86>>2]|0;
           $409 = ((($408)) + 4|0);
           $410 = HEAP32[$409>>2]|0;
           FUNCTION_TABLE_vi[$410 & 2047]($86);
           $411 = HEAP32[$input>>2]|0;
           $412 = ($411|0)==(0|0);
           if (!($412)) {
            $413 = HEAP32[$411>>2]|0;
            $414 = ((($413)) + 12|0);
            $415 = HEAP32[$414>>2]|0;
            FUNCTION_TABLE_vi[$415 & 2047]($411);
           }
           $416 = HEAP32[$output>>2]|0;
           $417 = ($416|0)==(0|0);
           if ($417) {
            $$17 = 0;
            break;
           }
           $418 = HEAP32[$416>>2]|0;
           $419 = ((($418)) + 12|0);
           $420 = HEAP32[$419>>2]|0;
           FUNCTION_TABLE_vi[$420 & 2047]($416);
           $$17 = 0;
          }
         } while(0);
         $$18 = $$17;
        }
        $$20 = $$18;
       } else {
        $85 = HEAP32[8837]|0;
        HEAP32[$vararg_buffer3>>2] = $83;
        (_fprintf($85,36952,$vararg_buffer3)|0);
        $$20 = 1;
       }
      } while(0);
      $$22 = $$20;
      STACKTOP = sp;return ($$22|0);
     }
    } while(0);
    $72 = HEAP32[8837]|0;
    (_fwrite(36750,69,1,$72)|0);
    $$22 = 1;
    STACKTOP = sp;return ($$22|0);
   }
  }
 } while(0);
 $55 = HEAP32[8837]|0;
 (_fwrite(36718,31,1,$55)|0);
 $$22 = 1;
 STACKTOP = sp;return ($$22|0);
}
function __ZN9AP4_ArrayIjED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (3072);
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __ZdlPv($2);
 __ZdlPv($this);
 return;
}
function __GLOBAL__sub_I_Mp4Split_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[758] = (3072);
 HEAP32[(3036)>>2] = 0;
 HEAP32[(3040)>>2] = 0;
 HEAP32[(3044)>>2] = 0;
 (___cxa_atexit((1|0),(3032|0),(___dso_handle|0))|0);
 HEAP32[762] = (3072);
 HEAP32[(3052)>>2] = 0;
 HEAP32[(3056)>>2] = 0;
 HEAP32[(3060)>>2] = 0;
 (___cxa_atexit((1|0),(3048|0),(___dso_handle|0))|0);
 return;
}
function __ZN12AP4_UuidAtomC2EyPKh($this,$0,$1,$uuid) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $uuid = $uuid|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $uuid;
 $9 = $2;
 $10 = $3;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 __ZN8AP4_AtomC2Ejyb($9,1970628964,$12,$15,0);
 $16 = 3088;
 HEAP32[$9>>2] = $16;
 $17 = ((($9)) + 36|0);
 $18 = $4;
 dest=$17; src=$18; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN12AP4_UuidAtomC2EyPKhhj($this,$0,$1,$uuid,$version,$flags) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $uuid = $uuid|0;
 $version = $version|0;
 $flags = $flags|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $7 = $3;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $4 = $uuid;
 $5 = $version;
 $6 = $flags;
 $11 = $2;
 $12 = $3;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = $6;
 __ZN8AP4_AtomC2Ejybhj($11,1970628964,$14,$17,0,$18,$19);
 $20 = 3088;
 HEAP32[$11>>2] = $20;
 $21 = ((($11)) + 36|0);
 $22 = $4;
 dest=$21; src=$22; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZNK12AP4_UuidAtom13GetHeaderSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 $5 = $4 ? 28 : 24;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 $9 = $8 ? 8 : 0;
 $10 = (($5) + ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN12AP4_UuidAtom11WriteHeaderER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $11 = $2;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $18 = ((($3)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $2;
  $22 = ((($3)) + 16|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZN14AP4_ByteStream9WriteUI64Ey($21,$25,$28)|0);
  $result = $29;
  $30 = $result;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $result;
   $0 = $32;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $33 = $2;
 $34 = ((($3)) + 36|0);
 $35 = (__ZN14AP4_ByteStream5WriteEPKvj($33,$34,16)|0);
 $result = $35;
 $36 = $result;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $result;
  $0 = $38;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $39 = ((($3)) + 24|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&1;
 if ($41) {
  $42 = $2;
  $43 = ((($3)) + 25|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = (__ZN14AP4_ByteStream9WriteUI08Eh($42,$44)|0);
  $result = $45;
  $46 = $result;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $result;
   $0 = $48;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
  $49 = $2;
  $50 = ((($3)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (__ZN14AP4_ByteStream9WriteUI24Ej($49,$51)|0);
  $result = $52;
  $53 = $result;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $result;
   $0 = $55;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function __ZN12AP4_UuidAtom13InspectHeaderER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $uuid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uuid = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($uuid)) + 36|0);
 HEAP8[$3>>0] = 0;
 $dst = $uuid;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(16);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($2)) + 36|0);
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 >> 4;
  $12 = (__Z13AP4_NibbleHexj($11)|0);
  $13 = $dst;
  $14 = ((($13)) + 1|0);
  $dst = $14;
  HEAP8[$13>>0] = $12;
  $15 = $i;
  $16 = ((($2)) + 36|0);
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 & 15;
  $21 = (__Z13AP4_NibbleHexj($20)|0);
  $22 = $dst;
  $23 = ((($22)) + 1|0);
  $dst = $23;
  HEAP8[$22>>0] = $21;
  $24 = $i;
  $25 = ($24|0)==(5);
  $26 = $i;
  $27 = ($26|0)==(7);
  $or$cond = $25 | $27;
  $28 = $i;
  $29 = ($28|0)==(9);
  $or$cond3 = $or$cond | $29;
  $30 = $i;
  $31 = ($30|0)==(11);
  $or$cond5 = $or$cond3 | $31;
  if ($or$cond5) {
   $32 = $dst;
   $33 = ((($32)) + 1|0);
   $dst = $33;
   HEAP8[$32>>0] = 45;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $1;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($2)) + 25|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ((($2)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$2>>2]|0;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_ii[$46 & 2047]($2)|0);
 $48 = (__ZNK8AP4_Atom7GetSizeEv($2)|0);
 $49 = tempRet0;
 FUNCTION_TABLE_viiiiiii[$39 & 2047]($36,$uuid,$41,$43,$47,$48,$49);
 STACKTOP = sp;return 0;
}
function __ZN19AP4_UnknownUuidAtomC2EyPKhR14AP4_ByteStream($this,$0,$1,$uuid,$stream) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $uuid = $uuid|0;
 $stream = $stream|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $8 = $3;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $4 = $uuid;
 $5 = $stream;
 $12 = $2;
 $13 = $3;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 __ZN12AP4_UuidAtomC2EyPKh($12,$15,$18,$19);
 $20 = 3148;
 HEAP32[$12>>2] = $20;
 $21 = ((($12)) + 52|0);
 __THREW__ = 0;
 invoke_vi(847,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $51 = ___cxa_find_matching_catch()|0;
  $52 = tempRet0;
  $6 = $51;
  $7 = $52;
 } else {
  $24 = ((($12)) + 52|0);
  $25 = $3;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$12>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  $34 = (invoke_ii($33|0,($12|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   $37 = (($27) - ($34))|0;
   __THREW__ = 0;
   (invoke_iii(848,($24|0),($37|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if (!($39)) {
    $40 = $5;
    $41 = ((($12)) + 52|0);
    __THREW__ = 0;
    $42 = (invoke_ii(849,($41|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if (!($44)) {
     $45 = ((($12)) + 52|0);
     __THREW__ = 0;
     $46 = (invoke_ii(850,($45|0))|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      __THREW__ = 0;
      (invoke_iiii(851,($40|0),($42|0),($46|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if (!($50)) {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $6 = $53;
  $7 = $54;
  __THREW__ = 0;
  invoke_vi(486,($21|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   $61 = ___cxa_find_matching_catch(0|0)|0;
   $62 = tempRet0;
   ___clang_call_terminate($61);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(3,($12|0));
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $61 = ___cxa_find_matching_catch(0|0)|0;
  $62 = tempRet0;
  ___clang_call_terminate($61);
  // unreachable;
 } else {
  $59 = $6;
  $60 = $7;
  ___resumeException($59|0);
  // unreachable;
 }
}
function __ZN19AP4_UnknownUuidAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 52|0);
 $5 = (__ZNK14AP4_DataBuffer7GetDataEv($4)|0);
 $6 = ((($2)) + 52|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN8AP4_AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNK8AP4_Atom7GetSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($1)) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $8;
  tempRet0 = ($14);
  STACKTOP = sp;return ($15|0);
 } else {
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = 0;$15 = $13;
  tempRet0 = ($14);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN14AP4_DataBuffer7UseDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK14AP4_DataBuffer11GetDataSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_UuidAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK14AP4_DataBuffer7GetDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN19AP4_UnknownUuidAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(16,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_UnknownUuidAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3148;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN12AP4_UuidAtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN8AP4_Atom9GetParentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_Atom9SetParentEP14AP4_AtomParent($this,$parent) {
 $this = $this|0;
 $parent = $parent|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $parent;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 32|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return 0;
}
function __ZN8AP4_Atom13InspectFieldsER17AP4_AtomInspector($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_UuidAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SaioAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(852,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SaioAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $entry = 0, $entry1 = 0, $entry_count = 0, $i = 0, $remains = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 20|0;
 $entry = sp + 8|0;
 $entry1 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1935763823,$8,$9,$10);
 $11 = 3208;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($7)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(853,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $5 = $38;
  $6 = $39;
 } else {
  $17 = $1;
  $18 = HEAP32[$7>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_ii($20|0,($7|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  L4: do {
   if (!($23)) {
    $24 = (($17) - ($21))|0;
    $remains = $24;
    $25 = $3;
    $26 = $25 & 1;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $4;
     $29 = ((($7)) + 36|0);
     __THREW__ = 0;
     (invoke_iii(854,($28|0),($29|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = $4;
     $33 = ((($7)) + 40|0);
     __THREW__ = 0;
     (invoke_iii(854,($32|0),($33|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break;
     }
     $36 = $remains;
     $37 = (($36) - 8)|0;
     $remains = $37;
    }
    HEAP32[$entry_count>>2] = 0;
    $44 = $4;
    __THREW__ = 0;
    $45 = (invoke_iii(854,($44|0),($entry_count|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $result = $45;
     $48 = $result;
     $49 = ($48|0)!=(0);
     if ($49) {
      STACKTOP = sp;return;
     }
     $50 = $remains;
     $51 = (($50) - 4)|0;
     $remains = $51;
     $52 = $remains;
     $53 = HEAP32[$entry_count>>2]|0;
     $54 = ((($7)) + 25|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = ($56|0)==(0);
     $58 = $57 ? 4 : 8;
     $59 = Math_imul($53, $58)|0;
     $60 = ($52>>>0)<($59>>>0);
     if ($60) {
      STACKTOP = sp;return;
     }
     $61 = ((($7)) + 44|0);
     $62 = HEAP32[$entry_count>>2]|0;
     __THREW__ = 0;
     (invoke_iii(855,($61|0),($62|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if (!($64)) {
      $i = 0;
      while(1) {
       $65 = $i;
       $66 = HEAP32[$entry_count>>2]|0;
       $67 = ($65>>>0)<($66>>>0);
       if (!($67)) {
        label = 25;
        break;
       }
       $68 = ((($7)) + 25|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = $69&255;
       $71 = ($70|0)==(0);
       if ($71) {
        HEAP32[$entry>>2] = 0;
        $72 = $4;
        __THREW__ = 0;
        $73 = (invoke_iii(854,($72|0),($entry|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L4;
        }
        $result = $73;
        $76 = $result;
        $77 = ($76|0)!=(0);
        if ($77) {
         label = 25;
         break;
        }
        $78 = HEAP32[$entry>>2]|0;
        $79 = ((($7)) + 44|0);
        $80 = $i;
        __THREW__ = 0;
        $81 = (invoke_iii(856,($79|0),($80|0))|0);
        $82 = __THREW__; __THREW__ = 0;
        $83 = $82&1;
        if ($83) {
         break L4;
        }
        $84 = $81;
        $85 = $84;
        HEAP32[$85>>2] = $78;
        $86 = (($84) + 4)|0;
        $87 = $86;
        HEAP32[$87>>2] = 0;
       } else {
        $88 = $entry1;
        $89 = $88;
        HEAP32[$89>>2] = 0;
        $90 = (($88) + 4)|0;
        $91 = $90;
        HEAP32[$91>>2] = 0;
        $92 = $4;
        __THREW__ = 0;
        $93 = (invoke_iii(857,($92|0),($entry1|0))|0);
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         break L4;
        }
        $result = $93;
        $96 = $result;
        $97 = ($96|0)!=(0);
        if ($97) {
         label = 25;
         break;
        }
        $98 = $entry1;
        $99 = $98;
        $100 = HEAP32[$99>>2]|0;
        $101 = (($98) + 4)|0;
        $102 = $101;
        $103 = HEAP32[$102>>2]|0;
        $104 = ((($7)) + 44|0);
        $105 = $i;
        __THREW__ = 0;
        $106 = (invoke_iii(856,($104|0),($105|0))|0);
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if ($108) {
         break L4;
        }
        $109 = $106;
        $110 = $109;
        HEAP32[$110>>2] = $100;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $103;
       }
       $113 = $i;
       $114 = (($113) + 1)|0;
       $i = $114;
      }
      if ((label|0) == 25) {
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $5 = $40;
  $6 = $41;
  __THREW__ = 0;
  invoke_vi(26,($14|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $119 = ___cxa_find_matching_catch(0|0)|0;
   $120 = tempRet0;
   ___clang_call_terminate($119);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $115 = __THREW__; __THREW__ = 0;
 $116 = $115&1;
 if ($116) {
  $119 = ___cxa_find_matching_catch(0|0)|0;
  $120 = tempRet0;
  ___clang_call_terminate($119);
  // unreachable;
 } else {
  $117 = $5;
  $118 = $6;
  ___resumeException($117|0);
  // unreachable;
 }
}
function __ZN12AP4_SaioAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = ((($3)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$10)|0);
  $result = $11;
  $12 = $result;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $result;
   $0 = $14;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
  $15 = $2;
  $16 = ((($3)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 }
 $22 = $2;
 $23 = ((($3)) + 44|0);
 $24 = (__ZNK9AP4_ArrayIyE9ItemCountEv($23)|0);
 $25 = (__ZN14AP4_ByteStream9WriteUI32Ej($22,$24)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ((($3)) + 44|0);
  $31 = (__ZNK9AP4_ArrayIyE9ItemCountEv($30)|0);
  $32 = ($29>>>0)<($31>>>0);
  if (!($32)) {
   label = 16;
   break;
  }
  $33 = ((($3)) + 25|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)==(0);
  $37 = $2;
  $38 = ((($3)) + 44|0);
  $39 = $i;
  $40 = (__ZN9AP4_ArrayIyEixEm($38,$39)|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  if ($36) {
   $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($37,$43)|0);
   $result = $47;
   $48 = $result;
   $49 = ($48|0)!=(0);
   if ($49) {
    label = 12;
    break;
   }
  } else {
   $51 = (__ZN14AP4_ByteStream9WriteUI64Ey($37,$43,$46)|0);
   $result = $51;
   $52 = $result;
   $53 = ($52|0)!=(0);
   if ($53) {
    label = 14;
    break;
   }
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 if ((label|0) == 12) {
  $50 = $result;
  $0 = $50;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 14) {
  $54 = $result;
  $0 = $54;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function __ZN12AP4_SaioAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($2)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 2047]($7,43592,$12,0,1);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,43606,$18,0,1);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 44|0);
 $24 = (__ZNK9AP4_ArrayIyE9ItemCountEv($23)|0);
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,42752,$24,0,0);
 $25 = $1;
 $26 = (__ZN17AP4_AtomInspector12GetVerbosityEv($25)|0);
 $27 = ($26>>>0)>=(2);
 if (!($27)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = ((($2)) + 44|0);
  $30 = (__ZNK9AP4_ArrayIyE9ItemCountEv($29)|0);
  $31 = ($28>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  HEAP32[$vararg_buffer>>2] = $32;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($2)) + 44|0);
  $38 = $i;
  $39 = (__ZN9AP4_ArrayIyEixEm($37,$38)|0);
  $40 = $39;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_viiiii[$36 & 2047]($33,$header,$42,$45,0);
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIyEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3268;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIyE6AppendERKy($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayIyE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<3)|0);
 $36 = $2;
 $37 = $36;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $35;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZNK9AP4_ArrayIyE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIyEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayIyED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3268;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIyE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIyE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $21 = (__ZN9AP4_ArrayIyE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<3)|0);
  $34 = $33;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = 0;
  $38 = $i1;
  $39 = (($38) + 1)|0;
  $i1 = $39;
 }
 $40 = $2;
 $41 = ((($3)) + 8|0);
 HEAP32[$41>>2] = $40;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZN17AP4_AtomInspector12GetVerbosityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIyE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<3)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<3)|0);
    $30 = $29;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $25;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    $40 = $i;
    $41 = (($40) + 1)|0;
    $i = $41;
   }
   $42 = ((($3)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   __ZdlPv($43);
  }
 }
 $44 = $new_items;
 $45 = ((($3)) + 12|0);
 HEAP32[$45>>2] = $44;
 $46 = $2;
 $47 = ((($3)) + 4|0);
 HEAP32[$47>>2] = $46;
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function __ZN9AP4_ArrayIyE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIyED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(26,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SaioAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(19,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SaioAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3208;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(26,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_SthdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(858,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SthdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$0) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $version;
 $4 = $flags;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN8AP4_AtomC2Ejjhj($6,1937008740,$7,$8,$9);
 $10 = 3284;
 HEAP32[$6>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN12AP4_SthdAtom11WriteFieldsER14AP4_ByteStream($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SthdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(28,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SthdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_AinfAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(72)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(859,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_AinfAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $other_boxes_size = 0, $payload = 0, $payload_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1634299494,$8,$9,$10);
 $11 = 3344;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 40|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $5 = $79;
  $6 = $80;
 } else {
  $15 = ((($7)) + 48|0);
  __THREW__ = 0;
  invoke_vi(847,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $81 = ___cxa_find_matching_catch()|0;
   $82 = tempRet0;
   $5 = $81;
   $6 = $82;
  } else {
   $18 = $4;
   $19 = ((($7)) + 36|0);
   __THREW__ = 0;
   (invoke_iii(854,($18|0),($19|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   L7: do {
    if ($21) {
     label = 21;
    } else {
     $22 = $1;
     $23 = ($22>>>0)>(16);
     $24 = $1;
     $25 = ($24>>>0)<(16777216);
     $or$cond = $23 & $25;
     if (!($or$cond)) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(847,($payload|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 21;
     } else {
      $28 = $1;
      $29 = (($28) - 12)|0;
      $30 = (($29) - 4)|0;
      $payload_size = $30;
      $31 = $payload_size;
      $32 = (($31) + 1)|0;
      __THREW__ = 0;
      (invoke_iii(848,($payload|0),($32|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      do {
       if (!($34)) {
        $35 = $payload_size;
        __THREW__ = 0;
        $36 = (invoke_ii(849,($payload|0))|0);
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if (!($38)) {
         $39 = (($36) + ($35)|0);
         HEAP8[$39>>0] = 0;
         $40 = $4;
         __THREW__ = 0;
         $41 = (invoke_ii(849,($payload|0))|0);
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if (!($43)) {
          $44 = $payload_size;
          __THREW__ = 0;
          (invoke_iiii(851,($40|0),($41|0),($44|0))|0);
          $45 = __THREW__; __THREW__ = 0;
          $46 = $45&1;
          if (!($46)) {
           $47 = ((($7)) + 40|0);
           __THREW__ = 0;
           $48 = (invoke_ii(861,($payload|0))|0);
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if (!($50)) {
            __THREW__ = 0;
            (invoke_iii(862,($47|0),($48|0))|0);
            $51 = __THREW__; __THREW__ = 0;
            $52 = $51&1;
            if (!($52)) {
             $53 = $payload_size;
             $54 = ((($7)) + 40|0);
             __THREW__ = 0;
             $55 = (invoke_ii(863,($54|0))|0);
             $56 = __THREW__; __THREW__ = 0;
             $57 = $56&1;
             if (!($57)) {
              $58 = (($55) + 1)|0;
              $59 = ($53>>>0)>($58>>>0);
              if ($59) {
               $60 = $payload_size;
               $61 = ((($7)) + 40|0);
               __THREW__ = 0;
               $62 = (invoke_ii(863,($61|0))|0);
               $63 = __THREW__; __THREW__ = 0;
               $64 = $63&1;
               if ($64) {
                break;
               }
               $65 = (($60) - ($62))|0;
               $66 = (($65) - 1)|0;
               $other_boxes_size = $66;
               $67 = ((($7)) + 48|0);
               $68 = $other_boxes_size;
               __THREW__ = 0;
               (invoke_iii(848,($67|0),($68|0))|0);
               $69 = __THREW__; __THREW__ = 0;
               $70 = $69&1;
               if ($70) {
                break;
               }
               $71 = ((($7)) + 48|0);
               __THREW__ = 0;
               $72 = (invoke_ii(849,($71|0))|0);
               $73 = __THREW__; __THREW__ = 0;
               $74 = $73&1;
               if ($74) {
                break;
               }
               __THREW__ = 0;
               $75 = (invoke_ii(861,($payload|0))|0);
               $76 = __THREW__; __THREW__ = 0;
               $77 = $76&1;
               if ($77) {
                break;
               }
               $78 = $other_boxes_size;
               _memcpy(($72|0),($75|0),($78|0))|0;
              }
              __THREW__ = 0;
              invoke_vi(486,($payload|0));
              $89 = __THREW__; __THREW__ = 0;
              $90 = $89&1;
              if ($90) {
               label = 21;
               break L7;
              }
              STACKTOP = sp;return;
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      $85 = ___cxa_find_matching_catch()|0;
      $86 = tempRet0;
      $5 = $85;
      $6 = $86;
      __THREW__ = 0;
      invoke_vi(486,($payload|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $99 = ___cxa_find_matching_catch(0|0)|0;
       $100 = tempRet0;
       ___clang_call_terminate($99);
       // unreachable;
      }
     }
    }
   } while(0);
   if ((label|0) == 21) {
    $83 = ___cxa_find_matching_catch()|0;
    $84 = tempRet0;
    $5 = $83;
    $6 = $84;
   }
   __THREW__ = 0;
   invoke_vi(486,($15|0));
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $99 = ___cxa_find_matching_catch(0|0)|0;
    $100 = tempRet0;
    ___clang_call_terminate($99);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $93 = __THREW__; __THREW__ = 0;
  $94 = $93&1;
  if ($94) {
   $99 = ___cxa_find_matching_catch(0|0)|0;
   $100 = tempRet0;
   ___clang_call_terminate($99);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $99 = ___cxa_find_matching_catch(0|0)|0;
  $100 = tempRet0;
  ___clang_call_terminate($99);
  // unreachable;
 } else {
  $97 = $5;
  $98 = $6;
  ___resumeException($97|0);
  // unreachable;
 }
}
function __ZN12AP4_AinfAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $11 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
 $12 = tempRet0;
 $13 = ($12>>>0)<(0);
 $14 = ($11>>>0)<=(16);
 $15 = ($12|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($17) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $18 = $2;
 $19 = ((($3)) + 40|0);
 $20 = (__ZNK10AP4_String8GetCharsEv($19)|0);
 $21 = ((($3)) + 40|0);
 $22 = (__ZNK10AP4_String9GetLengthEv($21)|0);
 $23 = (($22) + 1)|0;
 $24 = (__ZN14AP4_ByteStream5WriteEPKvj($18,$20,$23)|0);
 $result = $24;
 $25 = $result;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $result;
  $0 = $27;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $28 = ((($3)) + 48|0);
 $29 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $2;
  $32 = ((($3)) + 48|0);
  $33 = (__ZNK14AP4_DataBuffer7GetDataEv($32)|0);
  $34 = ((($3)) + 48|0);
  $35 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($34)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($31,$33,$35)|0);
 }
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function __ZN12AP4_AinfAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($v,$4);
 $5 = ((($v)) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 2047]($6,38442,$v,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 40|0);
 $15 = (__ZNK10AP4_String8GetCharsEv($14)|0);
 FUNCTION_TABLE_viiii[$13 & 2047]($10,38458,$15,0);
 STACKTOP = sp;return 0;
}
function __ZNK10AP4_String9GetLengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK10AP4_String8GetCharsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN12AP4_AinfAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(31,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_AinfAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3344;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 48|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN14AP4_Descriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 12|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf($name,20,38504,$vararg_buffer)|0);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $10 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$8 & 2047]($5,$name,$9,$10,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 2047]($11);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_UnknownDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $tag;
 $3 = $header_size;
 $4 = $payload_size;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 __ZN14AP4_DescriptorC2Ehjj($7,$8,$9,$10);
 $11 = 3404;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 20|0);
 __THREW__ = 0;
 invoke_vi(847,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $5 = $27;
  $6 = $28;
 } else {
  $15 = ((($7)) + 20|0);
  $16 = $4;
  __THREW__ = 0;
  (invoke_iii(848,($15|0),($16|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = $1;
   $20 = ((($7)) + 20|0);
   __THREW__ = 0;
   $21 = (invoke_ii(849,($20|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = $4;
    __THREW__ = 0;
    (invoke_iiii(851,($19|0),($21|0),($24|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     STACKTOP = sp;return;
    }
   }
  }
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $5 = $29;
  $6 = $30;
  __THREW__ = 0;
  invoke_vi(486,($12|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   $37 = ___cxa_find_matching_catch(0|0)|0;
   $38 = tempRet0;
   ___clang_call_terminate($37);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($7|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $35 = $5;
  $36 = $6;
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZN21AP4_UnknownDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = (__ZNK14AP4_DataBuffer7GetDataEv($4)|0);
 $6 = ((($2)) + 20|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 (__ZN14AP4_ByteStream5WriteEPKvj($3,$5,$7)|0);
 STACKTOP = sp;return 0;
}
function __ZN14AP4_Expandable13GetHeaderSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14AP4_Expandable7GetSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN14AP4_DescriptorC2Ehjj($this,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $tag;
 $2 = $header_size;
 $3 = $payload_size;
 $4 = $0;
 $5 = $1;
 $6 = $5&255;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($4,$6,0,$7,$8);
 $9 = 3432;
 HEAP32[$4>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN14AP4_DescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_ExpandableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_UnknownDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(35,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_UnknownDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3404;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN14AP4_DescriptorD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN14AP4_DescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN14AP4_ExpandableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN12AP4_SchmAtom6CreateEjP9AP4_ArrayIjER14AP4_ByteStream($size,$context,$stream) {
 $size = $size|0;
 $context = $context|0;
 $stream = $stream|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $context_depth = 0, $flags = 0, $short_form = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 33|0;
 $flags = sp + 12|0;
 $1 = $size;
 $2 = $context;
 $3 = $stream;
 $6 = $3;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $12 = $1;
 $13 = ($12>>>0)<(18);
 if ($13) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $short_form = 0;
 $14 = $1;
 $15 = ($14>>>0)<(20);
 $$ = $15 ? 1 : 0;
 $short_form = $$;
 $16 = $2;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $2;
  $19 = (__ZNK9AP4_ArrayIjE9ItemCountEv($18)|0);
  $context_depth = $19;
  $20 = $context_depth;
  $21 = ($20>>>0)>=(2);
  if ($21) {
   $22 = $2;
   $23 = $context_depth;
   $24 = (($23) - 2)|0;
   $25 = (__ZN9AP4_ArrayIjEixEm($22,$24)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(1836215406);
   if ($27) {
    $short_form = 1;
   }
  }
 }
 $28 = (__Znwj(56)|0);
 $29 = $1;
 $30 = HEAP8[$version>>0]|0;
 $31 = HEAP32[$flags>>2]|0;
 $32 = $short_form;
 $33 = $32&1;
 $34 = $3;
 __THREW__ = 0;
 invoke_viiiiii(865,($28|0),($29|0),($30|0),($31|0),($33|0),($34|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $4 = $37;
  $5 = $38;
  __ZdlPv($28);
  $39 = $4;
  $40 = $5;
  ___resumeException($39|0);
  // unreachable;
 }
 $0 = $28;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __ZN12AP4_SchmAtomC2EjjPKcb($this,$scheme_type,$scheme_version,$scheme_uri,$short_form) {
 $this = $this|0;
 $scheme_type = $scheme_type|0;
 $scheme_version = $scheme_version|0;
 $scheme_uri = $scheme_uri|0;
 $short_form = $short_form|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $scheme_type;
 $2 = $scheme_version;
 $3 = $scheme_uri;
 $7 = $short_form&1;
 $4 = $7;
 $8 = $0;
 $9 = $4;
 $10 = $9&1;
 $11 = $10 ? 2 : 4;
 $12 = (16 + ($11))|0;
 __ZN8AP4_AtomC2Ejjhj($8,1935894637,$12,0,0);
 $13 = 3460;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 36|0);
 $15 = $4;
 $16 = $15&1;
 $17 = $16&1;
 HEAP8[$14>>0] = $17;
 $18 = ((($8)) + 40|0);
 $19 = $1;
 HEAP32[$18>>2] = $19;
 $20 = ((($8)) + 44|0);
 $21 = $2;
 HEAP32[$20>>2] = $21;
 $22 = ((($8)) + 48|0);
 __THREW__ = 0;
 invoke_vi(860,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $5 = $40;
  $6 = $41;
 } else {
  $25 = $3;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   STACKTOP = sp;return;
  }
  $27 = ((($8)) + 48|0);
  $28 = $3;
  __THREW__ = 0;
  (invoke_iii(862,($27|0),($28|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   $31 = ((($8)) + 28|0);
   HEAP32[$31>>2] = 1;
   $32 = ((($8)) + 48|0);
   __THREW__ = 0;
   $33 = (invoke_ii(863,($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $36 = (($33) + 1)|0;
    $37 = ((($8)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($36))|0;
    HEAP32[$37>>2] = $39;
    STACKTOP = sp;return;
   }
  }
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $5 = $42;
  $6 = $43;
  __THREW__ = 0;
  invoke_vi(864,($22|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $50 = ___cxa_find_matching_catch(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($8|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $5;
  $49 = $6;
  ___resumeException($48|0);
  // unreachable;
 }
}
function __ZN12AP4_SchmAtomC2EjhjbR14AP4_ByteStream($this,$size,$version,$flags,$short_form,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $short_form = $short_form|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $short_version = 0, $str = 0, $str_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $short_version = sp + 32|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $8 = $short_form&1;
 $4 = $8;
 $5 = $stream;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __ZN8AP4_AtomC2Ejjhj($9,1935894637,$10,$11,$12);
 $13 = 3460;
 HEAP32[$9>>2] = $13;
 $14 = ((($9)) + 36|0);
 $15 = $4;
 $16 = $15&1;
 $17 = $16&1;
 HEAP8[$14>>0] = $17;
 $18 = ((($9)) + 48|0);
 __THREW__ = 0;
 invoke_vi(860,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $6 = $33;
  $7 = $34;
 } else {
  $21 = $5;
  $22 = ((($9)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(854,($21|0),($22|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  do {
   if (!($24)) {
    $25 = $4;
    $26 = $25&1;
    $27 = $5;
    if ($26) {
     __THREW__ = 0;
     (invoke_iii(866,($27|0),($short_version|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      break;
     }
     $30 = HEAP16[$short_version>>1]|0;
     $31 = $30&65535;
     $32 = ((($9)) + 44|0);
     HEAP32[$32>>2] = $31;
    } else {
     $39 = ((($9)) + 44|0);
     __THREW__ = 0;
     (invoke_iii(854,($27|0),($39|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break;
     }
    }
    $42 = ((($9)) + 28|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $43 & 1;
    $45 = ($44|0)!=(0);
    if (!($45)) {
     STACKTOP = sp;return;
    }
    $46 = $1;
    $47 = (($46) - 20)|0;
    $str_size = $47;
    $48 = $str_size;
    $49 = ($48|0)>(0);
    if (!($49)) {
     STACKTOP = sp;return;
    }
    $50 = $str_size;
    $51 = ($50|0)<(0);
    $52 = $51 ? -1 : $50;
    __THREW__ = 0;
    $53 = (invoke_ii(867,($52|0))|0);
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $str = $53;
     $56 = $5;
     $57 = $str;
     $58 = $str_size;
     __THREW__ = 0;
     (invoke_iiii(851,($56|0),($57|0),($58|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if (!($60)) {
      $61 = $str_size;
      $62 = (($61) - 1)|0;
      $63 = $str;
      $64 = (($63) + ($62)|0);
      HEAP8[$64>>0] = 0;
      $65 = ((($9)) + 48|0);
      $66 = $str;
      __THREW__ = 0;
      (invoke_iii(862,($65|0),($66|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if (!($68)) {
       $69 = $str;
       $70 = ($69|0)==(0|0);
       if ($70) {
        STACKTOP = sp;return;
       }
       __ZdaPv($69);
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $6 = $35;
  $7 = $36;
  __THREW__ = 0;
  invoke_vi(864,($18|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   $75 = ___cxa_find_matching_catch(0|0)|0;
   $76 = tempRet0;
   ___clang_call_terminate($75);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($9|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $75 = ___cxa_find_matching_catch(0|0)|0;
  $76 = tempRet0;
  ___clang_call_terminate($75);
  // unreachable;
 } else {
  $73 = $6;
  $74 = $7;
  ___resumeException($73|0);
  // unreachable;
 }
}
function __ZN12AP4_SchmAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fields_size = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $11 = ((($3)) + 36|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 $14 = $2;
 $15 = ((($3)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 if ($13) {
  $17 = $16&65535;
  $18 = (__ZN14AP4_ByteStream9WriteUI16Et($14,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } else {
  $22 = (__ZN14AP4_ByteStream9WriteUI32Ej($14,$16)|0);
  $result = $22;
  $23 = $result;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $result;
   $0 = $25;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 }
 $26 = ((($3)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 1;
 $29 = ($28|0)!=(0);
 L13: do {
  if ($29) {
   $30 = $2;
   $31 = ((($3)) + 48|0);
   $32 = (__ZNK10AP4_String8GetCharsEv($31)|0);
   $33 = ((($3)) + 48|0);
   $34 = (__ZNK10AP4_String9GetLengthEv($33)|0);
   $35 = (($34) + 1)|0;
   $36 = (__ZN14AP4_ByteStream5WriteEPKvj($30,$32,$35)|0);
   $result = $36;
   $37 = $result;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $result;
    $0 = $39;
    $59 = $0;
    STACKTOP = sp;return ($59|0);
   }
   $40 = ((($3)) + 36|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&1;
   $43 = $42 ? 2 : 4;
   $44 = (4 + ($43))|0;
   $fields_size = $44;
   $45 = ((($3)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $fields_size;
   $48 = (12 + ($47))|0;
   $49 = ((($3)) + 48|0);
   $50 = (__ZNK10AP4_String9GetLengthEv($49)|0);
   $51 = (($48) + ($50))|0;
   $52 = (($51) + 1)|0;
   $53 = (($46) - ($52))|0;
   $padding = $53;
   while(1) {
    $54 = $padding;
    $55 = (($54) + -1)|0;
    $padding = $55;
    $56 = ($54|0)!=(0);
    if (!($56)) {
     break L13;
    }
    $57 = $2;
    (__ZN14AP4_ByteStream9WriteUI08Eh($57,0)|0);
   }
  }
 } while(0);
 $58 = $result;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZN12AP4_SchmAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($st,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,38535,$st,0);
 $9 = ((($2)) + 36|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($2)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 if ($11) {
  FUNCTION_TABLE_viiiii[$15 & 2047]($12,38547,$17,0,0);
 } else {
  FUNCTION_TABLE_viiiii[$15 & 2047]($12,38570,$17,0,0);
 }
 $18 = ((($2)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($2)) + 48|0);
 $27 = (__ZNK10AP4_String8GetCharsEv($26)|0);
 FUNCTION_TABLE_viiii[$25 & 2047]($22,38585,$27,0);
 STACKTOP = sp;return 0;
}
function __ZNK9AP4_ArrayIjE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIjEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_SchmAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(42,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SchmAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3460;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 48|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN22AP4_SLConfigDescriptorC2Ej($this,$header_size) {
 $this = $this|0;
 $header_size = $header_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $header_size;
 $2 = $0;
 $3 = $1;
 __ZN14AP4_DescriptorC2Ehjj($2,6,$3,1);
 $4 = 3520;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 20|0);
 HEAP8[$5>>0] = 2;
 STACKTOP = sp;return;
}
function __ZN22AP4_SLConfigDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = HEAP8[$4>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($3,$5)|0);
 STACKTOP = sp;return 0;
}
function __ZN22AP4_SLConfigDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(46,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_SLConfigDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_DescriptorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3AP4C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP8[$1>>0] = 1;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_Ap4_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3AP4C2Ev(38621);
 return;
}
function __ZN12AP4_IkmsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(868,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_IkmsAtomC2EPKcjj($this,$kms_uri,$kms_id,$kms_version) {
 $this = $this|0;
 $kms_uri = $kms_uri|0;
 $kms_id = $kms_id|0;
 $kms_version = $kms_version|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $kms_uri;
 $2 = $kms_id;
 $3 = $kms_version;
 $6 = $0;
 __ZN8AP4_AtomC2Ejjhj($6,1766542675,12,0,0);
 $7 = 3548;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 36|0);
 $9 = $1;
 __THREW__ = 0;
 invoke_vii(869,($8|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $4 = $24;
  $5 = $25;
 } else {
  $12 = ((($6)) + 44|0);
  $13 = $2;
  HEAP32[$12>>2] = $13;
  $14 = ((($6)) + 48|0);
  $15 = $3;
  HEAP32[$14>>2] = $15;
  $16 = ((($6)) + 36|0);
  __THREW__ = 0;
  $17 = (invoke_ii(863,($16|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = (($17) + 1)|0;
   $21 = ((($6)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($20))|0;
   HEAP32[$21>>2] = $23;
   STACKTOP = sp;return;
  }
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  $4 = $26;
  $5 = $27;
  __THREW__ = 0;
  invoke_vi(864,($8|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $34 = ___cxa_find_matching_catch(0|0)|0;
   $35 = tempRet0;
   ___clang_call_terminate($34);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($6|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  $32 = $4;
  $33 = $5;
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN12AP4_IkmsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $str = 0, $string_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1766542675,$8,$9,$10);
 $11 = 3548;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $5 = $33;
  $6 = $34;
 } else {
  $15 = $1;
  $16 = (($15) - 12)|0;
  $string_size = $16;
  $17 = ((($7)) + 25|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(1);
  $21 = $string_size;
  $22 = ($21>>>0)>=(8);
  $or$cond = $20 & $22;
  if ($or$cond) {
   $23 = $string_size;
   $24 = (($23) - 8)|0;
   $string_size = $24;
   $25 = $4;
   $26 = ((($7)) + 44|0);
   __THREW__ = 0;
   (invoke_iii(854,($25|0),($26|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = $4;
    $30 = ((($7)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(854,($29|0),($30|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     label = 8;
    }
   }
  } else {
   $39 = ((($7)) + 44|0);
   HEAP32[$39>>2] = 0;
   $40 = ((($7)) + 48|0);
   HEAP32[$40>>2] = 0;
   label = 8;
  }
  if ((label|0) == 8) {
   $41 = $string_size;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    STACKTOP = sp;return;
   }
   $43 = $string_size;
   __THREW__ = 0;
   $44 = (invoke_ii(867,($43|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if (!($46)) {
    $str = $44;
    $47 = $4;
    $48 = $str;
    $49 = $string_size;
    __THREW__ = 0;
    (invoke_iiii(851,($47|0),($48|0),($49|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if (!($51)) {
     $52 = $string_size;
     $53 = (($52) - 1)|0;
     $54 = $str;
     $55 = (($54) + ($53)|0);
     HEAP8[$55>>0] = 0;
     $56 = ((($7)) + 36|0);
     $57 = $str;
     __THREW__ = 0;
     (invoke_iii(862,($56|0),($57|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if (!($59)) {
      $60 = $str;
      $61 = ($60|0)==(0|0);
      if ($61) {
       STACKTOP = sp;return;
      }
      __ZdaPv($60);
      STACKTOP = sp;return;
     }
    }
   }
  }
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $5 = $35;
  $6 = $36;
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   $66 = ___cxa_find_matching_catch(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $5;
  $65 = $6;
  ___resumeException($64|0);
  // unreachable;
 }
}
function __ZN12AP4_IkmsAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(56)|0);
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 $6 = (invoke_ii(870,($5|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = ((($3)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($3)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  invoke_viiii(871,($4|0),($6|0),($10|0),($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $1 = $15;
 $2 = $16;
 __ZdlPv($4);
 $17 = $1;
 $18 = $2;
 ___resumeException($17|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_IkmsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $2;
  $9 = ((($3)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($8,$10)|0);
  $11 = $2;
  $12 = ((($3)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 }
 $14 = $2;
 $15 = ((($3)) + 36|0);
 $16 = (__ZNK10AP4_String8GetCharsEv($15)|0);
 $17 = ((($3)) + 36|0);
 $18 = (__ZNK10AP4_String9GetLengthEv($17)|0);
 $19 = (($18) + 1)|0;
 $20 = (__ZN14AP4_ByteStream5WriteEPKvj($14,$16,$19)|0);
 $result = $20;
 $21 = $result;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $result;
  $0 = $23;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $24 = ((($3)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($3)) + 36|0);
 $27 = (__ZNK10AP4_String9GetLengthEv($26)|0);
 $28 = (12 + ($27))|0;
 $29 = (($28) + 1)|0;
 $30 = (($25) - ($29))|0;
 $padding = $30;
 $31 = ((($3)) + 25|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)==(1);
 if ($34) {
  $35 = $padding;
  $36 = (($35) - 8)|0;
  $padding = $36;
 }
 while(1) {
  $37 = $padding;
  $38 = (($37) + -1)|0;
  $padding = $38;
  $39 = ($37|0)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $2;
  (__ZN14AP4_ByteStream9WriteUI08Eh($40,0)|0);
 }
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __ZN12AP4_IkmsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 25|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = ((($2)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __Z19AP4_FormatFourCharsPcj($id,$8);
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiii[$12 & 2047]($9,38637,$id,0);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,38644,$18,0,0);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 36|0);
 $24 = (__ZNK10AP4_String8GetCharsEv($23)|0);
 FUNCTION_TABLE_viiii[$22 & 2047]($19,38656,$24,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_IkmsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(49,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IkmsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3548;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_NmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(872,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_NmhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$0) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $version;
 $4 = $flags;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN8AP4_AtomC2Ejjhj($6,1852663908,$7,$8,$9);
 $10 = 3608;
 HEAP32[$6>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN12AP4_NmhdAtom11WriteFieldsER14AP4_ByteStream($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_NmhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(54,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_NmhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_TkhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(136)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(873,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_TkhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coefficient = 0, $creation_time = 0, $duration = 0;
 var $i = 0, $modification_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 24|0;
 $modification_time = sp + 12|0;
 $duration = sp + 8|0;
 $coefficient = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1953196132,$8,$9,$10);
 $11 = 3668;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 25|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 $16 = $4;
 if ($15) {
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($creation_time|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = HEAP32[$creation_time>>2]|0;
   $20 = ((($7)) + 40|0);
   $21 = $20;
   $22 = $21;
   HEAP32[$22>>2] = $19;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   $25 = $4;
   __THREW__ = 0;
   (invoke_iii(854,($25|0),($modification_time|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = HEAP32[$modification_time>>2]|0;
    $29 = ((($7)) + 48|0);
    $30 = $29;
    $31 = $30;
    HEAP32[$31>>2] = $28;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = 0;
    $34 = $4;
    $35 = ((($7)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(854,($34|0),($35|0))|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if (!($37)) {
     $38 = $4;
     $39 = ((($7)) + 60|0);
     __THREW__ = 0;
     (invoke_iii(854,($38|0),($39|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $42 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($42|0),($duration|0))|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       $45 = HEAP32[$duration>>2]|0;
       $46 = ((($7)) + 64|0);
       $47 = $46;
       $48 = $47;
       HEAP32[$48>>2] = $45;
       $49 = (($47) + 4)|0;
       $50 = $49;
       HEAP32[$50>>2] = 0;
       label = 14;
      }
     }
    }
   }
  }
 } else {
  $55 = ((($7)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(857,($16|0),($55|0))|0);
  $56 = __THREW__; __THREW__ = 0;
  $57 = $56&1;
  if (!($57)) {
   $58 = $4;
   $59 = ((($7)) + 48|0);
   __THREW__ = 0;
   (invoke_iii(857,($58|0),($59|0))|0);
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if (!($61)) {
    $62 = $4;
    $63 = ((($7)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(854,($62|0),($63|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if (!($65)) {
     $66 = $4;
     $67 = ((($7)) + 60|0);
     __THREW__ = 0;
     (invoke_iii(854,($66|0),($67|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if (!($69)) {
      $70 = $4;
      $71 = ((($7)) + 64|0);
      __THREW__ = 0;
      (invoke_iii(857,($70|0),($71|0))|0);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if (!($73)) {
       label = 14;
      }
     }
    }
   }
  }
 }
 L13: do {
  if ((label|0) == 14) {
   $74 = $4;
   $75 = ((($7)) + 72|0);
   __THREW__ = 0;
   (invoke_iiii(851,($74|0),($75|0),8)|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if (!($77)) {
    $78 = $4;
    $79 = ((($7)) + 80|0);
    __THREW__ = 0;
    (invoke_iii(866,($78|0),($79|0))|0);
    $80 = __THREW__; __THREW__ = 0;
    $81 = $80&1;
    if (!($81)) {
     $82 = $4;
     $83 = ((($7)) + 82|0);
     __THREW__ = 0;
     (invoke_iii(866,($82|0),($83|0))|0);
     $84 = __THREW__; __THREW__ = 0;
     $85 = $84&1;
     if (!($85)) {
      $86 = $4;
      $87 = ((($7)) + 84|0);
      __THREW__ = 0;
      (invoke_iii(866,($86|0),($87|0))|0);
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if (!($89)) {
       $90 = $4;
       $91 = ((($7)) + 86|0);
       __THREW__ = 0;
       (invoke_iii(866,($90|0),($91|0))|0);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if (!($93)) {
        $i = 0;
        while(1) {
         $94 = $i;
         $95 = ($94|0)<(9);
         if (!($95)) {
          break;
         }
         HEAP32[$coefficient>>2] = 0;
         $96 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($96|0),($coefficient|0))|0);
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          break L13;
         }
         $99 = HEAP32[$coefficient>>2]|0;
         $100 = $i;
         $101 = ((($7)) + 88|0);
         $102 = (($101) + ($100<<2)|0);
         HEAP32[$102>>2] = $99;
         $103 = $i;
         $104 = (($103) + 1)|0;
         $i = $104;
        }
        $105 = $4;
        $106 = ((($7)) + 124|0);
        __THREW__ = 0;
        (invoke_iii(854,($105|0),($106|0))|0);
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = $4;
         $110 = ((($7)) + 128|0);
         __THREW__ = 0;
         (invoke_iii(854,($109|0),($110|0))|0);
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if (!($112)) {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $5 = $51;
 $6 = $52;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 } else {
  $113 = $5;
  $114 = $6;
  ___resumeException($113|0);
  // unreachable;
 }
}
function __ZN12AP4_TkhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = ((($3)) + 40|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 if ($7) {
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
  $result = $16;
  $17 = $result;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $result;
   $0 = $19;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $20 = $2;
  $21 = ((($3)) + 48|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($20,$24)|0);
  $result = $28;
  $29 = $result;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $result;
   $0 = $31;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $32 = $2;
  $33 = ((($3)) + 56|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (__ZN14AP4_ByteStream9WriteUI32Ej($32,$34)|0);
  $result = $35;
  $36 = $result;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $result;
   $0 = $38;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $39 = $2;
  $40 = ((($3)) + 60|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (__ZN14AP4_ByteStream9WriteUI32Ej($39,$41)|0);
  $result = $42;
  $43 = $result;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $result;
   $0 = $45;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $46 = $2;
  $47 = ((($3)) + 64|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (__ZN14AP4_ByteStream9WriteUI32Ej($46,$50)|0);
  $result = $54;
  $55 = $result;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $result;
   $0 = $57;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
 } else {
  $58 = (__ZN14AP4_ByteStream9WriteUI64Ey($8,$12,$15)|0);
  $result = $58;
  $59 = $result;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $result;
   $0 = $61;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $62 = $2;
  $63 = ((($3)) + 48|0);
  $64 = $63;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (__ZN14AP4_ByteStream9WriteUI64Ey($62,$66,$69)|0);
  $result = $70;
  $71 = $result;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $result;
   $0 = $73;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $74 = $2;
  $75 = ((($3)) + 56|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (__ZN14AP4_ByteStream9WriteUI32Ej($74,$76)|0);
  $result = $77;
  $78 = $result;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $result;
   $0 = $80;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $81 = $2;
  $82 = ((($3)) + 60|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (__ZN14AP4_ByteStream9WriteUI32Ej($81,$83)|0);
  $result = $84;
  $85 = $result;
  $86 = ($85|0)!=(0);
  if ($86) {
   $87 = $result;
   $0 = $87;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
  $88 = $2;
  $89 = ((($3)) + 64|0);
  $90 = $89;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + 4)|0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (__ZN14AP4_ByteStream9WriteUI64Ey($88,$92,$95)|0);
  $result = $96;
  $97 = $result;
  $98 = ($97|0)!=(0);
  if ($98) {
   $99 = $result;
   $0 = $99;
   $158 = $0;
   STACKTOP = sp;return ($158|0);
  }
 }
 $100 = $2;
 $101 = ((($3)) + 72|0);
 $102 = (__ZN14AP4_ByteStream5WriteEPKvj($100,$101,8)|0);
 $result = $102;
 $103 = $result;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $result;
  $0 = $105;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $106 = $2;
 $107 = ((($3)) + 80|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = (__ZN14AP4_ByteStream9WriteUI16Et($106,$108)|0);
 $result = $109;
 $110 = $result;
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = $result;
  $0 = $112;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $113 = $2;
 $114 = ((($3)) + 82|0);
 $115 = HEAP16[$114>>1]|0;
 $116 = (__ZN14AP4_ByteStream9WriteUI16Et($113,$115)|0);
 $result = $116;
 $117 = $result;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $result;
  $0 = $119;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $120 = $2;
 $121 = ((($3)) + 84|0);
 $122 = HEAP16[$121>>1]|0;
 $123 = (__ZN14AP4_ByteStream9WriteUI16Et($120,$122)|0);
 $result = $123;
 $124 = $result;
 $125 = ($124|0)!=(0);
 if ($125) {
  $126 = $result;
  $0 = $126;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $127 = $2;
 $128 = ((($3)) + 86|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = (__ZN14AP4_ByteStream9WriteUI16Et($127,$129)|0);
 $result = $130;
 $131 = $result;
 $132 = ($131|0)!=(0);
 if ($132) {
  $133 = $result;
  $0 = $133;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $i = 0;
 while(1) {
  $134 = $i;
  $135 = ($134|0)<(9);
  $136 = $2;
  if (!($135)) {
   break;
  }
  $137 = $i;
  $138 = ((($3)) + 88|0);
  $139 = (($138) + ($137<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (__ZN14AP4_ByteStream9WriteUI32Ej($136,$140)|0);
  $result = $141;
  $142 = $result;
  $143 = ($142|0)!=(0);
  if ($143) {
   label = 35;
   break;
  }
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 if ((label|0) == 35) {
  $144 = $result;
  $0 = $144;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 $147 = ((($3)) + 124|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (__ZN14AP4_ByteStream9WriteUI32Ej($136,$148)|0);
 $result = $149;
 $150 = $result;
 $151 = ($150|0)!=(0);
 if ($151) {
  $152 = $result;
  $0 = $152;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 } else {
  $153 = $2;
  $154 = ((($3)) + 128|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (__ZN14AP4_ByteStream9WriteUI32Ej($153,$155)|0);
  $result = $156;
  $157 = $result;
  $0 = $157;
  $158 = $0;
  STACKTOP = sp;return ($158|0);
 }
 return (0)|0;
}
function __ZN12AP4_TkhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)!=(0);
 $11 = $10 ? 1 : 0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,38694,$11,$13,2);
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiii[$17 & 2047]($14,40440,$19,0,0);
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($2)) + 64|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_viiiii[$23 & 2047]($20,46674,$27,$30,0);
 $31 = $1;
 $32 = (__ZN17AP4_AtomInspector12GetVerbosityEv($31)|0);
 $33 = ($32>>>0)>(0);
 if (!($33)) {
  $135 = $1;
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($136)) + 28|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($2)) + 124|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (+($140>>>0));
  $142 = $141 / 65536.0;
  FUNCTION_TABLE_viidi[$138 & 0]($135,42147,$142,0);
  $143 = $1;
  $144 = HEAP32[$143>>2]|0;
  $145 = ((($144)) + 28|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($2)) + 128|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (+($148>>>0));
  $150 = $149 / 65536.0;
  FUNCTION_TABLE_viidi[$146 & 0]($143,42153,$150,0);
  STACKTOP = sp;return 0;
 }
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($2)) + 84|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 FUNCTION_TABLE_viiiii[$37 & 2047]($34,38702,$40,0,0);
 $41 = $1;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($2)) + 80|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 FUNCTION_TABLE_viiiii[$44 & 2047]($41,38709,$47,0,0);
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($2)) + 82|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 FUNCTION_TABLE_viiiii[$51 & 2047]($48,38715,$54,0,0);
 $55 = $1;
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($2)) + 88|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (+($60|0));
 $62 = $61 / 65536.0;
 FUNCTION_TABLE_viidi[$58 & 0]($55,38731,$62,0);
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 28|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($2)) + 88|0);
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $70 / 65536.0;
 FUNCTION_TABLE_viidi[$66 & 0]($63,38740,$71,0);
 $72 = $1;
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 28|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($2)) + 88|0);
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (+($78|0));
 $80 = $79 / 65536.0;
 FUNCTION_TABLE_viidi[$75 & 0]($72,38749,$80,0);
 $81 = $1;
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($2)) + 88|0);
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (+($87|0));
 $89 = $88 / 65536.0;
 FUNCTION_TABLE_viidi[$84 & 0]($81,38758,$89,0);
 $90 = $1;
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 28|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($2)) + 88|0);
 $95 = ((($94)) + 16|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (+($96|0));
 $98 = $97 / 65536.0;
 FUNCTION_TABLE_viidi[$93 & 0]($90,38767,$98,0);
 $99 = $1;
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($2)) + 88|0);
 $104 = ((($103)) + 20|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (+($105|0));
 $107 = $106 / 65536.0;
 FUNCTION_TABLE_viidi[$102 & 0]($99,38776,$107,0);
 $108 = $1;
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($109)) + 28|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($2)) + 88|0);
 $113 = ((($112)) + 24|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (+($114|0));
 $116 = $115 / 65536.0;
 FUNCTION_TABLE_viidi[$111 & 0]($108,38785,$116,0);
 $117 = $1;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 28|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ((($2)) + 88|0);
 $122 = ((($121)) + 28|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (+($123|0));
 $125 = $124 / 65536.0;
 FUNCTION_TABLE_viidi[$120 & 0]($117,38794,$125,0);
 $126 = $1;
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($127)) + 28|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($2)) + 88|0);
 $131 = ((($130)) + 32|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (+($132|0));
 $134 = $133 / 65536.0;
 FUNCTION_TABLE_viidi[$129 & 0]($126,38803,$134,0);
 $135 = $1;
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($136)) + 28|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($2)) + 124|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (+($140>>>0));
 $142 = $141 / 65536.0;
 FUNCTION_TABLE_viidi[$138 & 0]($135,42147,$142,0);
 $143 = $1;
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 28|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ((($2)) + 128|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (+($148>>>0));
 $150 = $149 / 65536.0;
 FUNCTION_TABLE_viidi[$146 & 0]($143,42153,$150,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TkhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(57,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TkhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_PdinAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(874,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_PdinAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1885628782,$8,$9,$10);
 $11 = 3728;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(875,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $5 = $44;
  $6 = $45;
 } else {
  $15 = $1;
  $16 = (($15) - 12)|0;
  $17 = (($16>>>0) / 8)&-1;
  $entry_count = $17;
  $18 = ((($7)) + 36|0);
  $19 = $entry_count;
  __THREW__ = 0;
  (invoke_iii(876,($18|0),($19|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  L4: do {
   if (!($21)) {
    $i = 0;
    while(1) {
     $22 = $i;
     $23 = $entry_count;
     $24 = ($22>>>0)<($23>>>0);
     if (!($24)) {
      break;
     }
     $25 = $4;
     $26 = ((($7)) + 36|0);
     $27 = $i;
     __THREW__ = 0;
     $28 = (invoke_iii(877,($26|0),($27|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      break L4;
     }
     __THREW__ = 0;
     (invoke_iii(854,($25|0),($28|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break L4;
     }
     $33 = $4;
     $34 = ((($7)) + 36|0);
     $35 = $i;
     __THREW__ = 0;
     $36 = (invoke_iii(877,($34|0),($35|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      break L4;
     }
     $39 = ((($36)) + 4|0);
     __THREW__ = 0;
     (invoke_iii(854,($33|0),($39|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break L4;
     }
     $42 = $i;
     $43 = (($42) + 1)|0;
     $i = $43;
    }
    STACKTOP = sp;return;
   }
  } while(0);
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $5 = $46;
  $6 = $47;
  __THREW__ = 0;
  invoke_vi(65,($12|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $54 = ___cxa_find_matching_catch(0|0)|0;
   $55 = tempRet0;
   ___clang_call_terminate($54);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $54 = ___cxa_find_matching_catch(0|0)|0;
  $55 = tempRet0;
  ___clang_call_terminate($54);
  // unreachable;
 } else {
  $52 = $5;
  $53 = $6;
  ___resumeException($52|0);
  // unreachable;
 }
}
function __ZN12AP4_PdinAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ((($3)) + 36|0);
  $6 = (__ZNK9AP4_ArrayIN12AP4_PdinAtom5EntryEE9ItemCountEv($5)|0);
  $7 = ($4>>>0)<($6>>>0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $2;
  $9 = ((($3)) + 36|0);
  $10 = $i;
  $11 = (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm($9,$10)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
  $result = $13;
  $14 = $result;
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 4;
   break;
  }
  $17 = $2;
  $18 = ((($3)) + 36|0);
  $19 = $i;
  $20 = (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm($18,$19)|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN14AP4_ByteStream9WriteUI32Ej($17,$22)|0);
  $result = $23;
  $24 = $result;
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 6;
   break;
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 if ((label|0) == 4) {
  $16 = $result;
  $0 = $16;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $26 = $result;
  $0 = $26;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZN12AP4_PdinAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 24|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ((($2)) + 36|0);
  $5 = (__ZNK9AP4_ArrayIN12AP4_PdinAtom5EntryEE9ItemCountEv($4)|0);
  $6 = ($3>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  HEAP32[$vararg_buffer>>2] = $7;
  (_snprintf($header,32,38827,$vararg_buffer)|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($2)) + 36|0);
  $13 = $i;
  $14 = (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm($12,$13)|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_viiiii[$11 & 2047]($8,$header,$15,0,0);
  $16 = $i;
  HEAP32[$vararg_buffer1>>2] = $16;
  (_snprintf($header,32,38836,$vararg_buffer1)|0);
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 36|0);
  $22 = $i;
  $23 = (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm($21,$22)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_viiiii[$20 & 2047]($17,$header,$25,0,0);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3788;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN12AP4_PdinAtom5EntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayIN12AP4_PdinAtom5EntryEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<3)|0);
  __ZN12AP4_PdinAtom5EntryC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3788;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<3)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<3)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(65,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_PdinAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(61,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_PdinAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3728;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(65,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_IproAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $2;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(56)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(878,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_IproAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 44|0;
 $bytes_available = sp;
 $atom = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $5 = $atom_factory;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN17AP4_ContainerAtomC2Ejybhj($8,1768977007,$9,0,0,$10,$11);
 $12 = 3804;
 HEAP32[$8>>2] = $12;
 $13 = ((($8)) + 36|0);
 $14 = 3880;
 HEAP32[$13>>2] = $14;
 $15 = $4;
 __THREW__ = 0;
 (invoke_iii(866,($15|0),($entry_count|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 L1: do {
  if (!($17)) {
   $18 = $1;
   $19 = (($18) - 12)|0;
   $20 = (($19) - 2)|0;
   $21 = $bytes_available;
   $22 = $21;
   HEAP32[$22>>2] = $20;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   $i = 0;
   while(1) {
    $25 = $i;
    $26 = HEAP16[$entry_count>>1]|0;
    $27 = $26&65535;
    $28 = ($25>>>0)<($27>>>0);
    if (!($28)) {
     break;
    }
    $29 = $5;
    $30 = $4;
    __THREW__ = 0;
    $31 = (invoke_iiiii(879,($29|0),($30|0),($bytes_available|0),($atom|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     break L1;
    }
    $34 = ($31|0)==(0);
    if ($34) {
     $35 = HEAP32[$atom>>2]|0;
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($36)) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($8)) + 36|0);
     __THREW__ = 0;
     (invoke_iii($38|0,($35|0),($39|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break L1;
     }
     $42 = ((($8)) + 36|0);
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$atom>>2]|0;
     __THREW__ = 0;
     (invoke_iii(880,($43|0),($44|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      break L1;
     }
    }
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i = $52;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 $6 = $47;
 $7 = $48;
 __THREW__ = 0;
 invoke_vi(726,($8|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $55 = ___cxa_find_matching_catch(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 } else {
  $53 = $6;
  $54 = $7;
  ___resumeException($53|0);
  // unreachable;
 }
}
function __ZN12AP4_IproAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 36|0);
 $9 = ((($8)) + 4|0);
 $10 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($9)|0);
 $11 = $10&65535;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($7,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $16 = ((($6)) + 36|0);
 $17 = ((($16)) + 4|0);
 $18 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$18);
 __THREW__ = 0;
 $19 = (invoke_iii(881,($17|0),($3|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if (!($21)) {
  $0 = $19;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $4 = $22;
 $5 = $23;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $29 = ___cxa_find_matching_catch(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $4;
  $28 = $5;
  ___resumeException($27|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_IproAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 36|0);
 $11 = ((($10)) + 4|0);
 $12 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($11)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,42989,$12,0,0);
 $13 = ((($5)) + 36|0);
 $14 = ((($13)) + 4|0);
 $15 = $1;
 __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($2,$15);
 __THREW__ = 0;
 (invoke_iii(881,($14|0),($2|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __ZN21AP4_AtomListInspectorD2Ev($2);
  STACKTOP = sp;return 0;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(89,($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $3;
  $23 = $4;
  ___resumeException($22|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8AP4_ListI8AP4_AtomE3AddEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(882,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListI8AP4_AtomE3AddEPNS1_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN17AP4_ContainerAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(716,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorC2Ev($2);
 $3 = 12352;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI8AP4_AtomE5ApplyERKNS1_4Item8OperatorE($this,$op) {
 $this = $this|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $op;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $item = $4;
 while(1) {
  $5 = $item;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iii[$10 & 2047]($7,$12)|0);
  $13 = $item;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $item = $15;
 }
 STACKTOP = sp;return 0;
}
function __ZN18AP4_AtomListWriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorC2Ev($2);
 $3 = 3952;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN21AP4_AtomListInspectorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE4ItemC2EPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE3AddEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZThn36_N12AP4_IproAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_IproAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_IproAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(67,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IproAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ContainerAtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_IproAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_IproAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 (FUNCTION_TABLE_iii[$6 & 2047]($3,$8)|0);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_AtomListInspectorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(89,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(87,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE4Item8OperatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3932;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN12AP4_Dec3Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $payload = 0, $payload_data = 0, $payload_size = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp + 20|0;
 $1 = $size;
 $2 = $stream;
 $6 = $1;
 $7 = (($6) - 8)|0;
 $payload_size = $7;
 $8 = $payload_size;
 __ZN14AP4_DataBufferC2Ej($payload_data,$8);
 $9 = $2;
 __THREW__ = 0;
 $10 = (invoke_ii(849,($payload_data|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 5;
  } else {
   $13 = $payload_size;
   __THREW__ = 0;
   $14 = (invoke_iiii(851,($9|0),($10|0),($13|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 5;
   } else {
    $result = $14;
    $17 = $result;
    $18 = ($17|0)!=(0);
    if ($18) {
     $0 = 0;
     $5 = 1;
     __ZN14AP4_DataBufferD2Ev($payload_data);
     $33 = $0;
     STACKTOP = sp;return ($33|0);
    }
    __THREW__ = 0;
    $21 = (invoke_ii(861,($payload_data|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 5;
    } else {
     $payload = $21;
     __THREW__ = 0;
     $24 = (invoke_ii(883,80)|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 5;
     } else {
      $27 = $1;
      $28 = $payload;
      __THREW__ = 0;
      invoke_viii(884,($24|0),($27|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $31 = ___cxa_find_matching_catch()|0;
       $32 = tempRet0;
       $3 = $31;
       $4 = $32;
       __ZdlPv($24);
       break;
      }
      $0 = $24;
      $5 = 1;
      __ZN14AP4_DataBufferD2Ev($payload_data);
      $33 = $0;
      STACKTOP = sp;return ($33|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
 }
 __THREW__ = 0;
 invoke_vi(486,($payload_data|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $3;
  $37 = $4;
  ___resumeException($36|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_Dec3AtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $payload_size = 0, $substream_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $payload;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1684366131,$6);
 $7 = 3972;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($5)) + 40|0);
 __THREW__ = 0;
 invoke_vi(885,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $3 = $24;
  $4 = $25;
 } else {
  $12 = ((($5)) + 56|0);
  __THREW__ = 0;
  invoke_vi(847,($12|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $3 = $26;
   $4 = $27;
  } else {
   $15 = $1;
   $16 = (($15) - 8)|0;
   $payload_size = $16;
   $17 = ((($5)) + 56|0);
   $18 = $2;
   $19 = $payload_size;
   __THREW__ = 0;
   (invoke_iiii(886,($17|0),($18|0),($19|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   L7: do {
    if (!($21)) {
     $22 = $payload_size;
     $23 = ($22>>>0)<(2);
     if ($23) {
      STACKTOP = sp;return;
     }
     $32 = $2;
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 << 5;
     $36 = $2;
     $37 = ((($36)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 >> 3;
     $41 = $35 | $40;
     $42 = ((($5)) + 36|0);
     HEAP32[$42>>2] = $41;
     $43 = $2;
     $44 = ((($43)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = $46 & 7;
     $48 = (1 + ($47))|0;
     $substream_count = $48;
     $49 = $2;
     $50 = ((($49)) + 2|0);
     $2 = $50;
     $51 = $payload_size;
     $52 = (($51) - 2)|0;
     $payload_size = $52;
     $53 = ((($5)) + 40|0);
     $54 = $substream_count;
     __THREW__ = 0;
     (invoke_iii(887,($53|0),($54|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $i = 0;
      while(1) {
       $57 = $i;
       $58 = $substream_count;
       $59 = ($57>>>0)<($58>>>0);
       if (!($59)) {
        break;
       }
       $60 = $payload_size;
       $61 = ($60>>>0)<(3);
       do {
        if ($61) {
         $62 = ((($5)) + 40|0);
         $63 = $i;
         __THREW__ = 0;
         $64 = (invoke_iii(888,($62|0),($63|0))|0);
         $65 = __THREW__; __THREW__ = 0;
         $66 = $65&1;
         if ($66) {
          break L7;
         }
         HEAP32[$64>>2] = 0;
         $67 = ((($5)) + 40|0);
         $68 = $i;
         __THREW__ = 0;
         $69 = (invoke_iii(888,($67|0),($68|0))|0);
         $70 = __THREW__; __THREW__ = 0;
         $71 = $70&1;
         if ($71) {
          break L7;
         }
         $72 = ((($69)) + 4|0);
         HEAP32[$72>>2] = 0;
         $73 = ((($5)) + 40|0);
         $74 = $i;
         __THREW__ = 0;
         $75 = (invoke_iii(888,($73|0),($74|0))|0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          break L7;
         }
         $78 = ((($75)) + 8|0);
         HEAP32[$78>>2] = 0;
         $79 = ((($5)) + 40|0);
         $80 = $i;
         __THREW__ = 0;
         $81 = (invoke_iii(888,($79|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if ($83) {
          break L7;
         }
         $84 = ((($81)) + 12|0);
         HEAP32[$84>>2] = 0;
         $85 = ((($5)) + 40|0);
         $86 = $i;
         __THREW__ = 0;
         $87 = (invoke_iii(888,($85|0),($86|0))|0);
         $88 = __THREW__; __THREW__ = 0;
         $89 = $88&1;
         if ($89) {
          break L7;
         }
         $90 = ((($87)) + 16|0);
         HEAP32[$90>>2] = 0;
         $91 = ((($5)) + 40|0);
         $92 = $i;
         __THREW__ = 0;
         $93 = (invoke_iii(888,($91|0),($92|0))|0);
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if ($95) {
          break L7;
         }
         $96 = ((($93)) + 20|0);
         HEAP32[$96>>2] = 0;
         $97 = ((($5)) + 40|0);
         $98 = $i;
         __THREW__ = 0;
         $99 = (invoke_iii(888,($97|0),($98|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          break L7;
         }
         $102 = ((($99)) + 24|0);
         HEAP32[$102>>2] = 0;
        } else {
         $103 = $2;
         $104 = HEAP8[$103>>0]|0;
         $105 = $104&255;
         $106 = $105 >> 6;
         $107 = $106 & 3;
         $108 = ((($5)) + 40|0);
         $109 = $i;
         __THREW__ = 0;
         $110 = (invoke_iii(888,($108|0),($109|0))|0);
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if ($112) {
          break L7;
         }
         HEAP32[$110>>2] = $107;
         $113 = $2;
         $114 = HEAP8[$113>>0]|0;
         $115 = $114&255;
         $116 = $115 >> 1;
         $117 = $116 & 31;
         $118 = ((($5)) + 40|0);
         $119 = $i;
         __THREW__ = 0;
         $120 = (invoke_iii(888,($118|0),($119|0))|0);
         $121 = __THREW__; __THREW__ = 0;
         $122 = $121&1;
         if ($122) {
          break L7;
         }
         $123 = ((($120)) + 4|0);
         HEAP32[$123>>2] = $117;
         $124 = $2;
         $125 = HEAP8[$124>>0]|0;
         $126 = $125&255;
         $127 = $126 << 4;
         $128 = $2;
         $129 = ((($128)) + 1|0);
         $130 = HEAP8[$129>>0]|0;
         $131 = $130&255;
         $132 = $131 >> 4;
         $133 = $127 | $132;
         $134 = $133 & 31;
         $135 = ((($5)) + 40|0);
         $136 = $i;
         __THREW__ = 0;
         $137 = (invoke_iii(888,($135|0),($136|0))|0);
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         if ($139) {
          break L7;
         }
         $140 = ((($137)) + 8|0);
         HEAP32[$140>>2] = $134;
         $141 = $2;
         $142 = ((($141)) + 1|0);
         $143 = HEAP8[$142>>0]|0;
         $144 = $143&255;
         $145 = $144 >> 1;
         $146 = $145 & 7;
         $147 = ((($5)) + 40|0);
         $148 = $i;
         __THREW__ = 0;
         $149 = (invoke_iii(888,($147|0),($148|0))|0);
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          break L7;
         }
         $152 = ((($149)) + 12|0);
         HEAP32[$152>>2] = $146;
         $153 = $2;
         $154 = ((($153)) + 1|0);
         $155 = HEAP8[$154>>0]|0;
         $156 = $155&255;
         $157 = $156 & 1;
         $158 = ((($5)) + 40|0);
         $159 = $i;
         __THREW__ = 0;
         $160 = (invoke_iii(888,($158|0),($159|0))|0);
         $161 = __THREW__; __THREW__ = 0;
         $162 = $161&1;
         if ($162) {
          break L7;
         }
         $163 = ((($160)) + 16|0);
         HEAP32[$163>>2] = $157;
         $164 = $2;
         $165 = ((($164)) + 2|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = $166&255;
         $168 = $167 >> 1;
         $169 = $168 & 15;
         $170 = ((($5)) + 40|0);
         $171 = $i;
         __THREW__ = 0;
         $172 = (invoke_iii(888,($170|0),($171|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L7;
         }
         $175 = ((($172)) + 20|0);
         HEAP32[$175>>2] = $169;
         $176 = ((($5)) + 40|0);
         $177 = $i;
         __THREW__ = 0;
         $178 = (invoke_iii(888,($176|0),($177|0))|0);
         $179 = __THREW__; __THREW__ = 0;
         $180 = $179&1;
         if ($180) {
          break L7;
         }
         $181 = ((($178)) + 20|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = ($182|0)!=(0);
         if ($183) {
          $184 = $2;
          $185 = ((($184)) + 2|0);
          $186 = HEAP8[$185>>0]|0;
          $187 = $186&255;
          $188 = $187 << 7;
          $189 = $2;
          $190 = ((($189)) + 3|0);
          $191 = HEAP8[$190>>0]|0;
          $192 = $191&255;
          $193 = $188 | $192;
          $194 = $193 & 31;
          $195 = ((($5)) + 40|0);
          $196 = $i;
          __THREW__ = 0;
          $197 = (invoke_iii(888,($195|0),($196|0))|0);
          $198 = __THREW__; __THREW__ = 0;
          $199 = $198&1;
          if ($199) {
           break L7;
          }
          $200 = ((($197)) + 24|0);
          HEAP32[$200>>2] = $194;
          $201 = $2;
          $202 = ((($201)) + 4|0);
          $2 = $202;
          $203 = $payload_size;
          $204 = (($203) - 4)|0;
          $payload_size = $204;
          break;
         } else {
          $205 = ((($5)) + 40|0);
          $206 = $i;
          __THREW__ = 0;
          $207 = (invoke_iii(888,($205|0),($206|0))|0);
          $208 = __THREW__; __THREW__ = 0;
          $209 = $208&1;
          if ($209) {
           break L7;
          }
          $210 = ((($207)) + 24|0);
          HEAP32[$210>>2] = 0;
          $211 = $2;
          $212 = ((($211)) + 3|0);
          $2 = $212;
          $213 = $payload_size;
          $214 = (($213) - 3)|0;
          $payload_size = $214;
          break;
         }
        }
       } while(0);
       $215 = $i;
       $216 = (($215) + 1)|0;
       $i = $216;
      }
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $28 = ___cxa_find_matching_catch()|0;
   $29 = tempRet0;
   $3 = $28;
   $4 = $29;
   __THREW__ = 0;
   invoke_vi(486,($12|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $223 = ___cxa_find_matching_catch(0|0)|0;
    $224 = tempRet0;
    ___clang_call_terminate($223);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(97,($9|0));
  $217 = __THREW__; __THREW__ = 0;
  $218 = $217&1;
  if ($218) {
   $223 = ___cxa_find_matching_catch(0|0)|0;
   $224 = tempRet0;
   ___clang_call_terminate($223);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $219 = __THREW__; __THREW__ = 0;
 $220 = $219&1;
 if ($220) {
  $223 = ___cxa_find_matching_catch(0|0)|0;
  $224 = tempRet0;
  ___clang_call_terminate($223);
  // unreachable;
 } else {
  $221 = $3;
  $222 = $4;
  ___resumeException($221|0);
  // unreachable;
 }
}
function __ZN12AP4_Dec3Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 56|0);
 $5 = (__ZNK14AP4_DataBuffer7GetDataEv($4)|0);
 $6 = ((($2)) + 56|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN12AP4_Dec3Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $name = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 304|0;
 $value = sp + 48|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,38980,$8,0,0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($2)) + 40|0);
  $11 = (__ZNK9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE9ItemCountEv($10)|0);
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  HEAP32[$vararg_buffer>>2] = $13;
  (_snprintf($name,16,38990,$vararg_buffer)|0);
  $14 = ((($2)) + 40|0);
  $15 = $i;
  $16 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($14,$15)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($2)) + 40|0);
  $19 = $i;
  $20 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($18,$19)|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($2)) + 40|0);
  $24 = $i;
  $25 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($23,$24)|0);
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($2)) + 40|0);
  $29 = $i;
  $30 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($28,$29)|0);
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($2)) + 40|0);
  $34 = $i;
  $35 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($33,$34)|0);
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($2)) + 40|0);
  $39 = $i;
  $40 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($38,$39)|0);
  $41 = ((($40)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($2)) + 40|0);
  $44 = $i;
  $45 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($43,$44)|0);
  $46 = ((($45)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $17;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $27;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $32;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $37;
  $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $42;
  $vararg_ptr9 = ((($vararg_buffer1)) + 24|0);
  HEAP32[$vararg_ptr9>>2] = $47;
  (_snprintf($value,256,38997,$vararg_buffer1)|0);
  $48 = $1;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  FUNCTION_TABLE_viiii[$51 & 2047]($48,$name,$value,0);
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4032;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($30*28)|0)|0);
  __ZN12AP4_Dec3Atom9SubStreamC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*28)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4032;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_Dec3Atom9SubStreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ($8*28)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*28)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*28)|0)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$29+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$29+20>>2]|0;HEAP32[$25+24>>2]=HEAP32[$29+24>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(97,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_Dec3Atom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(80)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 56|0);
 __THREW__ = 0;
 $8 = (invoke_ii(861,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  invoke_viii(884,($4|0),($6|0),($8|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __ZdlPv($4);
 $15 = $1;
 $16 = $2;
 ___resumeException($15|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_Dec3AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(92,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_Dec3AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3972;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 56|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(97,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(97,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN12AP4_TfhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(0);
 if ($10) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $11 = $1;
 $12 = HEAP32[$flags>>2]|0;
 $13 = (__ZN12AP4_TfhdAtom11ComputeSizeEj($12)|0);
 $14 = ($11>>>0)<($13>>>0);
 if ($14) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $15 = (__Znwj(64)|0);
 $16 = $1;
 $17 = HEAP8[$version>>0]|0;
 $18 = HEAP32[$flags>>2]|0;
 $19 = $2;
 __THREW__ = 0;
 invoke_viiiii(889,($15|0),($16|0),($17|0),($18|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $3 = $22;
  $4 = $23;
  __ZdlPv($15);
  $24 = $3;
  $25 = $4;
  ___resumeException($24|0);
  // unreachable;
 }
 $0 = $15;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZN12AP4_TfhdAtom11ComputeSizeEj($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flags;
 $size = 16;
 $1 = $0;
 $2 = $1 & 1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $size;
  $5 = (($4) + 8)|0;
  $size = $5;
 }
 $6 = $0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $size;
  $10 = (($9) + 4)|0;
  $size = $10;
 }
 $11 = $0;
 $12 = $11 & 8;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $size;
  $15 = (($14) + 4)|0;
  $size = $15;
 }
 $16 = $0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $size;
  $20 = (($19) + 4)|0;
  $size = $20;
 }
 $21 = $0;
 $22 = $21 & 32;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $26 = $size;
  STACKTOP = sp;return ($26|0);
 }
 $24 = $size;
 $25 = (($24) + 4)|0;
 $size = $25;
 $26 = $size;
 STACKTOP = sp;return ($26|0);
}
function __ZN12AP4_TfhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1952868452,$8,$9,$10);
 $11 = 4048;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if (!($15)) {
   $16 = $3;
   $17 = $16 & 1;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $4;
    $20 = ((($7)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(857,($19|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     break;
    }
   } else {
    $27 = ((($7)) + 40|0);
    $28 = $27;
    $29 = $28;
    HEAP32[$29>>2] = 0;
    $30 = (($28) + 4)|0;
    $31 = $30;
    HEAP32[$31>>2] = 0;
   }
   $32 = $3;
   $33 = $32 & 2;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $4;
    $36 = ((($7)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(854,($35|0),($36|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     break;
    }
   } else {
    $39 = ((($7)) + 48|0);
    HEAP32[$39>>2] = 1;
   }
   $40 = $3;
   $41 = $40 & 8;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $4;
    $44 = ((($7)) + 52|0);
    __THREW__ = 0;
    (invoke_iii(854,($43|0),($44|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    }
   } else {
    $47 = ((($7)) + 52|0);
    HEAP32[$47>>2] = 0;
   }
   $48 = $3;
   $49 = $48 & 16;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = $4;
    $52 = ((($7)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(854,($51|0),($52|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     break;
    }
   } else {
    $55 = ((($7)) + 56|0);
    HEAP32[$55>>2] = 0;
   }
   $56 = $3;
   $57 = $56 & 32;
   $58 = ($57|0)!=(0);
   if ($58) {
    $59 = $4;
    $60 = ((($7)) + 60|0);
    __THREW__ = 0;
    (invoke_iii(854,($59|0),($60|0))|0);
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     break;
    }
    STACKTOP = sp;return;
   } else {
    $63 = ((($7)) + 60|0);
    HEAP32[$63>>2] = 0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $5 = $23;
 $6 = $24;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $5;
  $65 = $6;
  ___resumeException($64|0);
  // unreachable;
 }
}
function __ZN12AP4_TfhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $2;
  $16 = ((($3)) + 40|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN14AP4_ByteStream9WriteUI64Ey($15,$19,$22)|0);
  $result = $23;
  $24 = $result;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $result;
   $0 = $26;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $27 = ((($3)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 2;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $2;
  $32 = ((($3)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (__ZN14AP4_ByteStream9WriteUI32Ej($31,$33)|0);
  $result = $34;
  $35 = $result;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $result;
   $0 = $37;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $38 = ((($3)) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 8;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $2;
  $43 = ((($3)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($42,$44)|0);
  $45 = $result;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $result;
   $0 = $47;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $48 = ((($3)) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 & 16;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $2;
  $53 = ((($3)) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($52,$54)|0);
  $55 = $result;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $result;
   $0 = $57;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $58 = ((($3)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & 32;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $2;
  $63 = ((($3)) + 60|0);
  $64 = HEAP32[$63>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($62,$64)|0);
  $65 = $result;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $result;
   $0 = $67;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $0 = 0;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function __ZN12AP4_TfhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,39128,$8,0,0);
 $9 = ((($2)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 40|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,39137,$20,$23,0);
 }
 $24 = ((($2)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 2;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($2)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_viiiii[$31 & 2047]($28,39154,$33,0,0);
 }
 $34 = ((($2)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 8;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $1;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($2)) + 52|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_viiiii[$41 & 2047]($38,46016,$43,0,0);
 }
 $44 = ((($2)) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & 16;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $1;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 24|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($2)) + 56|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_viiiii[$51 & 2047]($48,46040,$53,0,0);
 }
 $54 = ((($2)) + 28|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 & 32;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return 0;
 }
 $58 = $1;
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($2)) + 60|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_viiiii[$61 & 2047]($58,46060,$63,0,1);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TfhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(99,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TfhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_StszAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(890,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_StszAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejjhj($3,1937011578,20,0,0);
 $4 = 4108;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(891,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZN12AP4_StszAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $buffer = 0;
 var $i = 0, $result = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1937011578,$8,$9,$10);
 $11 = 4108;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(891,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $5 = $48;
  $6 = $49;
 } else {
  $15 = $4;
  $16 = ((($7)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($16|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if (!($18)) {
    $19 = $4;
    $20 = ((($7)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(854,($19|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ((($7)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if (!($25)) {
      STACKTOP = sp;return;
     }
     $26 = ((($7)) + 40|0);
     $27 = HEAP32[$26>>2]|0;
     $sample_count = $27;
     $28 = ((($7)) + 44|0);
     $29 = $sample_count;
     __THREW__ = 0;
     (invoke_iii(892,($28|0),($29|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $32 = $sample_count;
      $33 = $32<<2;
      __THREW__ = 0;
      $34 = (invoke_ii(867,($33|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if (!($36)) {
       $buffer = $34;
       $37 = $4;
       $38 = $buffer;
       $39 = $sample_count;
       $40 = $39<<2;
       __THREW__ = 0;
       $41 = (invoke_iiii(851,($37|0),($38|0),($40|0))|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if (!($43)) {
        $result = $41;
        $44 = $result;
        $45 = ($44|0)!=(0);
        if ($45) {
         $46 = $buffer;
         $47 = ($46|0)==(0|0);
         if ($47) {
          STACKTOP = sp;return;
         }
         __ZdaPv($46);
         STACKTOP = sp;return;
        }
        $i = 0;
        while(1) {
         $54 = $i;
         $55 = $sample_count;
         $56 = ($54>>>0)<($55>>>0);
         if (!($56)) {
          break;
         }
         $57 = $i;
         $58 = $57<<2;
         $59 = $buffer;
         $60 = (($59) + ($58)|0);
         __THREW__ = 0;
         $61 = (invoke_ii(893,($60|0))|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if ($63) {
          break L4;
         }
         $64 = ((($7)) + 44|0);
         $65 = $i;
         __THREW__ = 0;
         $66 = (invoke_iii(894,($64|0),($65|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L4;
         }
         HEAP32[$66>>2] = $61;
         $69 = $i;
         $70 = (($69) + 1)|0;
         $i = $70;
        }
        $71 = $buffer;
        $72 = ($71|0)==(0|0);
        if ($72) {
         STACKTOP = sp;return;
        }
        __ZdaPv($71);
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  } while(0);
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $5 = $50;
  $6 = $51;
  __THREW__ = 0;
  invoke_vi(1,($12|0));
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if ($53) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $77 = ___cxa_find_matching_catch(0|0)|0;
  $78 = tempRet0;
  ___clang_call_terminate($77);
  // unreachable;
 } else {
  $75 = $5;
  $76 = $6;
  ___resumeException($75|0);
  // unreachable;
 }
}
function __ZN12AP4_StszAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $11 = $2;
 $12 = ((($3)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $18 = ((($3)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 L9: do {
  if ($20) {
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = ((($3)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21>>>0)<($23>>>0);
    if (!($24)) {
     break L9;
    }
    $25 = $2;
    $26 = ((($3)) + 44|0);
    $27 = $i;
    $28 = (__ZN9AP4_ArrayIjEixEm($26,$27)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (__ZN14AP4_ByteStream9WriteUI32Ej($25,$29)|0);
    $result = $30;
    $31 = $result;
    $32 = ($31|0)!=(0);
    if ($32) {
     break;
    }
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
   $33 = $result;
   $0 = $33;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 } while(0);
 $36 = $result;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN12AP4_StszAtom14GetSampleCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_StszAtom13GetSampleSizeEjRj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $sample_size;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $11 = $3;
  HEAP32[$11>>2] = 0;
  $0 = -12;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = ((($4)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = ((($4)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  HEAP32[$17>>2] = $16;
 } else {
  $18 = ((($4)) + 44|0);
  $19 = $2;
  $20 = (($19) - 1)|0;
  $21 = (__ZN9AP4_ArrayIjEixEm($18,$20)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  HEAP32[$23>>2] = $22;
 }
 $0 = 0;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_StszAtom13SetSampleSizeEjj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $sample_size;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -12;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $11 = ((($4)) + 44|0);
 $12 = (__ZNK9AP4_ArrayIjE9ItemCountEv($11)|0);
 $13 = ($12|0)==(0);
 $14 = $3;
 if ($13) {
  $15 = ((($4)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)!=($16|0);
  if ($17) {
   $18 = $2;
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = $3;
    $21 = ((($4)) + 36|0);
    HEAP32[$21>>2] = $20;
    $0 = 0;
    $26 = $0;
    STACKTOP = sp;return ($26|0);
   } else {
    $0 = -3;
    $26 = $0;
    STACKTOP = sp;return ($26|0);
   }
  }
 } else {
  $22 = ((($4)) + 44|0);
  $23 = $2;
  $24 = (($23) - 1)|0;
  $25 = (__ZN9AP4_ArrayIjEixEm($22,$24)|0);
  HEAP32[$25>>2] = $14;
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZN12AP4_StszAtom8AddEntryEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 HEAP32[$1>>2] = $size;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 (__ZN9AP4_ArrayIjE6AppendERKj($3,$1)|0);
 $4 = ((($2)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 4)|0;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StszAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,42112,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 44|0);
 $14 = (__ZNK9AP4_ArrayIjE9ItemCountEv($13)|0);
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,41758,$14,0,0);
 $15 = $1;
 $16 = (__ZN17AP4_AtomInspector12GetVerbosityEv($15)|0);
 $17 = ($16>>>0)>=(2);
 if (!($17)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ((($2)) + 44|0);
  $20 = (__ZNK9AP4_ArrayIjE9ItemCountEv($19)|0);
  $21 = ($18>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $i;
  HEAP32[$vararg_buffer>>2] = $22;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($2)) + 44|0);
  $28 = $i;
  $29 = (__ZN9AP4_ArrayIjEixEm($27,$28)|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_viiiii[$26 & 2047]($23,$header,$30,0,0);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIjEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3072;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIjE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIjE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __Z19AP4_BytesToUInt32BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $4 | $9;
 $11 = $0;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $10 | $15;
 $17 = $0;
 $18 = ((($17)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $16 | $20;
 STACKTOP = sp;return ($21|0);
}
function __ZN9AP4_ArrayIjE6AppendERKj($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0;
 var $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayIjE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<2)|0);
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIjE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 $9 = $8<<2;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<2)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$25>>2] = $30;
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   $33 = ((($3)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   __ZdlPv($34);
  }
 }
 $35 = $new_items;
 $36 = ((($3)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = $2;
 $38 = ((($3)) + 4|0);
 HEAP32[$38>>2] = $37;
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN12AP4_StszAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(103,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_StszAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4108;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_SencAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(96)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(895,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SencAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1936027235,$8,$9,$10);
 $11 = 4184;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 $13 = 4244;
 HEAP32[$12>>2] = $13;
 $14 = ((($7)) + 36|0);
 $15 = $1;
 $16 = $4;
 __THREW__ = 0;
 invoke_viiii(896,($14|0),($7|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  $19 = 4184;
  HEAP32[$7>>2] = $19;
  $20 = ((($7)) + 36|0);
  $21 = 4244;
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $5 = $22;
 $6 = $23;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $5;
  $27 = $6;
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZN12AP4_SencAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = $1;
 $5 = (__ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN12AP4_SencAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = $1;
 $5 = (__ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZThn36_N12AP4_SencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_SencAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_SencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(111,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_CencSampleEncryptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(117,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_CencSampleEncryptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4260;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 36|0);
 __ZN14AP4_DataBufferD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN12AP4_SencAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(117,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_SencAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_SencAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN33AP4_DecoderSpecificInfoDescriptorC2ERK14AP4_DataBuffer($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($5)|0);
 $7 = (__ZN14AP4_Expandable13MinHeaderSizeEj($6)|0);
 $8 = $1;
 $9 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($8)|0);
 __ZN14AP4_DescriptorC2Ehjj($4,5,$7,$9);
 $10 = 4276;
 HEAP32[$4>>2] = $10;
 $11 = ((($4)) + 20|0);
 $12 = $1;
 __THREW__ = 0;
 invoke_vii(897,($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $2 = $15;
 $3 = $16;
 __THREW__ = 0;
 invoke_vi(40,($4|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $19 = $2;
  $20 = $3;
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,5,$7,$8);
 $9 = 4276;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 20|0);
 __THREW__ = 0;
 invoke_vi(847,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $4 = $25;
  $5 = $26;
 } else {
  $13 = ((($6)) + 20|0);
  $14 = $3;
  __THREW__ = 0;
  (invoke_iii(848,($13|0),($14|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $17 = $1;
   $18 = ((($6)) + 20|0);
   __THREW__ = 0;
   $19 = (invoke_ii(849,($18|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = $3;
    __THREW__ = 0;
    (invoke_iiii(851,($17|0),($19|0),($22|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     STACKTOP = sp;return;
    }
   }
  }
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $4 = $27;
  $5 = $28;
  __THREW__ = 0;
  invoke_vi(486,($10|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $35 = ___cxa_find_matching_catch(0|0)|0;
   $36 = tempRet0;
   ___clang_call_terminate($35);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 } else {
  $33 = $4;
  $34 = $5;
  ___resumeException($33|0);
  // unreachable;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4276;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN14AP4_DescriptorD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(119,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN33AP4_DecoderSpecificInfoDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($2)) + 20|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 $9 = $1;
 $10 = ((($2)) + 20|0);
 $11 = (__ZNK14AP4_DataBuffer7GetDataEv($10)|0);
 $12 = ((($2)) + 20|0);
 $13 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($12)|0);
 (__ZN14AP4_ByteStream5WriteEPKvj($9,$11,$13)|0);
 STACKTOP = sp;return 0;
}
function __ZN33AP4_DecoderSpecificInfoDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $info = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($3)|0);
 $5 = ($4*3)|0;
 $6 = (($5) + 1)|0;
 $7 = (__Znaj($6)|0);
 $info = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ((($2)) + 20|0);
  $10 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($9)|0);
  $11 = ($8>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = ($12*3)|0;
  $14 = $info;
  $15 = (($14) + ($13)|0);
  $16 = $i;
  $17 = ((($2)) + 20|0);
  $18 = (__ZN14AP4_DataBuffer7UseDataEv($17)|0);
  $19 = (($18) + ($16)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  HEAP32[$vararg_buffer>>2] = $21;
  (_snprintf($15,4,39272,$vararg_buffer)|0);
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = ((($2)) + 20|0);
 $25 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($24)|0);
 $26 = ($25*3)|0;
 $27 = $info;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $info;
 FUNCTION_TABLE_viiii[$32 & 2047]($29,39278,$33,0);
 $34 = $info;
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return 0;
 }
 __ZdaPv($34);
 STACKTOP = sp;return 0;
}
function __ZNK33AP4_DecoderSpecificInfoDescriptor22GetDecoderSpecificInfoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN15AP4_SampleTableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6136;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNK8AP4_Atom7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15AP4_SampleTableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK8AP4_Atom8GetFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10AP4_Sample7SetSizeEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 16|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample7GetSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10AP4_Sample11SetDurationEj($this,$duration) {
 $this = $this|0;
 $duration = $duration|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $duration;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample7SetSyncEb($this,$is_sync) {
 $this = $this|0;
 $is_sync = $is_sync|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $is_sync&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 44|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample19SetDescriptionIndexEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample9SetOffsetEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($8)) + 8|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $11;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample6SetDtsEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($8)) + 32|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $11;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample11SetCtsDeltaEj($this,$delta) {
 $this = $this|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $delta;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 40|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNK10AP4_Sample11GetDurationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15AP4_AtomFactoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4308;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 __THREW__ = 0;
 (invoke_ii(898,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $1 = $12;
   $2 = $13;
   $14 = ((($3)) + 20|0);
   __THREW__ = 0;
   invoke_vi(129,($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $24 = ___cxa_find_matching_catch(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 20|0);
   __THREW__ = 0;
   invoke_vi(129,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $17 = ___cxa_find_matching_catch()|0;
    $18 = tempRet0;
    $1 = $17;
    $2 = $18;
    break;
   } else {
    $11 = ((($3)) + 4|0);
    __ZN9AP4_ArrayIjED2Ev($11);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $19 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(1,($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $1;
  $23 = $2;
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN15AP4_AtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(124,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15AP4_AtomFactory14AddTypeHandlerEPNS_11TypeHandlerE($this,$handler) {
 $this = $this|0;
 $handler = $handler|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $handler;
 $2 = $0;
 $3 = ((($2)) + 20|0);
 $4 = $1;
 $5 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE3AddEPS1_($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom($this,$stream,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $bytes_available = 0, $or$cond = 0, $stream_position = 0, $stream_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stream_size = sp + 16|0;
 $stream_position = sp + 8|0;
 $bytes_available = sp;
 $0 = $this;
 $1 = $stream;
 $2 = $atom;
 $3 = $0;
 $4 = $stream_size;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $stream_position;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = $bytes_available;
 $13 = $12;
 HEAP32[$13>>2] = -1;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = -1;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iii[$19 & 2047]($16,$stream_size)|0);
 $21 = ($20|0)==(0);
 $22 = $stream_size;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24|0)!=(0);
 $29 = ($27|0)!=(0);
 $30 = $28 | $29;
 $or$cond = $21 & $30;
 if ($or$cond) {
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iii[$34 & 2047]($31,$stream_position)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   $37 = $stream_position;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = $stream_size;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($42>>>0)<($48>>>0);
   $50 = ($39>>>0)<=($45>>>0);
   $51 = ($42|0)==($48|0);
   $52 = $51 & $50;
   $53 = $49 | $52;
   if ($53) {
    $54 = $stream_size;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = $stream_position;
    $61 = $60;
    $62 = HEAP32[$61>>2]|0;
    $63 = (($60) + 4)|0;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (_i64Subtract(($56|0),($59|0),($62|0),($65|0))|0);
    $67 = tempRet0;
    $68 = $bytes_available;
    $69 = $68;
    HEAP32[$69>>2] = $66;
    $70 = (($68) + 4)|0;
    $71 = $70;
    HEAP32[$71>>2] = $67;
   }
  }
 }
 $72 = $1;
 $73 = $2;
 $74 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($3,$72,$bytes_available,$73)|0);
 STACKTOP = sp;return ($74|0);
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($this,$stream,$bytes_available,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $bytes_available = $bytes_available|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom_is_large = 0, $force_64 = 0;
 var $or$cond = 0, $payload_offset = 0, $result = 0, $size = 0, $size_32 = 0, $start = 0, $stream_size = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 16|0;
 $size_32 = sp + 40|0;
 $size = sp + 8|0;
 $type = sp + 36|0;
 $stream_size = sp;
 $1 = $this;
 $2 = $stream;
 $3 = $bytes_available;
 $4 = $atom;
 $7 = $1;
 $8 = $4;
 HEAP32[$8>>2] = 0;
 $9 = $3;
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15>>>0)<(0);
 $17 = ($12>>>0)<(8);
 $18 = ($15|0)==(0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 if ($20) {
  $0 = -7;
  $317 = $0;
  STACKTOP = sp;return ($317|0);
 }
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 (FUNCTION_TABLE_iii[$24 & 2047]($21,$start)|0);
 $25 = $2;
 $26 = (__ZN14AP4_ByteStream8ReadUI32ERj($25,$size_32)|0);
 $result = $26;
 $27 = $result;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $2;
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $start;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  (FUNCTION_TABLE_iiii[$32 & 2047]($29,$35,$38)|0);
  $39 = $result;
  $0 = $39;
  $317 = $0;
  STACKTOP = sp;return ($317|0);
 }
 $40 = HEAP32[$size_32>>2]|0;
 $41 = $size;
 $42 = $41;
 HEAP32[$42>>2] = $40;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = $2;
 $46 = (__ZN14AP4_ByteStream8ReadUI32ERj($45,$type)|0);
 $result = $46;
 $47 = $result;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $2;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $start;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_iiii[$52 & 2047]($49,$55,$58)|0);
  $59 = $result;
  $0 = $59;
  $317 = $0;
  STACKTOP = sp;return ($317|0);
 }
 $atom_is_large = 0;
 $force_64 = 0;
 $60 = $size;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62|0)==(0);
 $67 = ($65|0)==(0);
 $68 = $66 & $67;
 do {
  if ($68) {
   $69 = $stream_size;
   $70 = $69;
   HEAP32[$70>>2] = 0;
   $71 = (($69) + 4)|0;
   $72 = $71;
   HEAP32[$72>>2] = 0;
   $73 = $2;
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 32|0);
   $76 = HEAP32[$75>>2]|0;
   (FUNCTION_TABLE_iii[$76 & 2047]($73,$stream_size)|0);
   $77 = $stream_size;
   $78 = $77;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + 4)|0;
   $81 = $80;
   $82 = HEAP32[$81>>2]|0;
   $83 = $start;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($83) + 4)|0;
   $87 = $86;
   $88 = HEAP32[$87>>2]|0;
   $89 = ($82>>>0)>($88>>>0);
   $90 = ($79>>>0)>=($85>>>0);
   $91 = ($82|0)==($88|0);
   $92 = $91 & $90;
   $93 = $89 | $92;
   if ($93) {
    $94 = $stream_size;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 4)|0;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = $start;
    $101 = $100;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($100) + 4)|0;
    $104 = $103;
    $105 = HEAP32[$104>>2]|0;
    $106 = (_i64Subtract(($96|0),($99|0),($102|0),($105|0))|0);
    $107 = tempRet0;
    $108 = $size;
    $109 = $108;
    HEAP32[$109>>2] = $106;
    $110 = (($108) + 4)|0;
    $111 = $110;
    HEAP32[$111>>2] = $107;
   }
  } else {
   $112 = $size;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = ($114|0)==(1);
   $119 = ($117|0)==(0);
   $120 = $118 & $119;
   if ($120) {
    $atom_is_large = 1;
    $121 = $3;
    $122 = $121;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = (($122) + 4)|0;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127>>>0)<(0);
    $129 = ($124>>>0)<(16);
    $130 = ($127|0)==(0);
    $131 = $130 & $129;
    $132 = $128 | $131;
    $133 = $2;
    if ($132) {
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 24|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $start;
     $138 = $137;
     $139 = HEAP32[$138>>2]|0;
     $140 = (($137) + 4)|0;
     $141 = $140;
     $142 = HEAP32[$141>>2]|0;
     (FUNCTION_TABLE_iiii[$136 & 2047]($133,$139,$142)|0);
     $0 = -10;
     $317 = $0;
     STACKTOP = sp;return ($317|0);
    } else {
     (__ZN14AP4_ByteStream8ReadUI64ERy($133,$size)|0);
     $143 = $size;
     $144 = $143;
     $145 = HEAP32[$144>>2]|0;
     $146 = (($143) + 4)|0;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148>>>0)<(0);
     $150 = ($145>>>0)<=(4294967295);
     $151 = ($148|0)==(0);
     $152 = $151 & $150;
     $153 = $149 | $152;
     if (!($153)) {
      break;
     }
     $force_64 = 1;
     break;
    }
   }
  }
 } while(0);
 $154 = $size;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = (($154) + 4)|0;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159>>>0)>(0);
 $161 = ($156>>>0)>(0);
 $162 = ($159|0)==(0);
 $163 = $162 & $161;
 $164 = $160 | $163;
 $165 = $size;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = (($165) + 4)|0;
 $169 = $168;
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170>>>0)<(0);
 $172 = ($167>>>0)<(8);
 $173 = ($170|0)==(0);
 $174 = $173 & $172;
 $175 = $171 | $174;
 $or$cond = $164 & $175;
 if (!($or$cond)) {
  $176 = $size;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = (($176) + 4)|0;
  $180 = $179;
  $181 = HEAP32[$180>>2]|0;
  $182 = $3;
  $183 = $182;
  $184 = $183;
  $185 = HEAP32[$184>>2]|0;
  $186 = (($183) + 4)|0;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = ($181>>>0)>($188>>>0);
  $190 = ($178>>>0)>($185>>>0);
  $191 = ($181|0)==($188|0);
  $192 = $191 & $190;
  $193 = $189 | $192;
  if (!($193)) {
   $204 = HEAP32[$7>>2]|0;
   $205 = ((($204)) + 8|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $2;
   $208 = HEAP32[$type>>2]|0;
   $209 = HEAP32[$size_32>>2]|0;
   $210 = $size;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = $4;
   $217 = (FUNCTION_TABLE_iiiiiiii[$206 & 127]($7,$207,$208,$209,$212,$215,$216)|0);
   $result = $217;
   $218 = $result;
   $219 = ($218|0)!=(0);
   if ($219) {
    $220 = $result;
    $0 = $220;
    $317 = $0;
    STACKTOP = sp;return ($317|0);
   }
   $221 = $4;
   $222 = HEAP32[$221>>2]|0;
   $223 = ($222|0)==(0|0);
   do {
    if ($223) {
     $payload_offset = 8;
     $224 = $atom_is_large;
     $225 = $224&1;
     if ($225) {
      $226 = $payload_offset;
      $227 = (($226) + 8)|0;
      $payload_offset = $227;
     }
     $228 = $2;
     $229 = HEAP32[$228>>2]|0;
     $230 = ((($229)) + 24|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = $start;
     $233 = $232;
     $234 = HEAP32[$233>>2]|0;
     $235 = (($232) + 4)|0;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = $payload_offset;
     $239 = (_i64Add(($234|0),($237|0),($238|0),0)|0);
     $240 = tempRet0;
     (FUNCTION_TABLE_iiii[$231 & 2047]($228,$239,$240)|0);
     $241 = (__Znwj(72)|0);
     $242 = HEAP32[$type>>2]|0;
     $243 = $size;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     $249 = $2;
     __THREW__ = 0;
     invoke_viiiii(899,($241|0),($242|0),($245|0),($248|0),($249|0));
     $250 = __THREW__; __THREW__ = 0;
     $251 = $250&1;
     if ($251) {
      $253 = ___cxa_find_matching_catch()|0;
      $254 = tempRet0;
      $5 = $253;
      $6 = $254;
      __ZdlPv($241);
      $255 = $5;
      $256 = $6;
      ___resumeException($255|0);
      // unreachable;
     } else {
      $252 = $4;
      HEAP32[$252>>2] = $241;
      break;
     }
    }
   } while(0);
   $257 = $force_64;
   $258 = $257&1;
   if ($258) {
    $259 = $4;
    $260 = HEAP32[$259>>2]|0;
    __ZN8AP4_Atom9SetSize32Ej($260,1);
    $261 = $4;
    $262 = HEAP32[$261>>2]|0;
    $263 = $size;
    $264 = $263;
    $265 = HEAP32[$264>>2]|0;
    $266 = (($263) + 4)|0;
    $267 = $266;
    $268 = HEAP32[$267>>2]|0;
    __ZN8AP4_Atom9SetSize64Ey($262,$265,$268);
   }
   $269 = $size;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = (($269) + 4)|0;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $275 = $3;
   $276 = $275;
   $277 = $276;
   $278 = HEAP32[$277>>2]|0;
   $279 = (($276) + 4)|0;
   $280 = $279;
   $281 = HEAP32[$280>>2]|0;
   $282 = (_i64Subtract(($278|0),($281|0),($271|0),($274|0))|0);
   $283 = tempRet0;
   $284 = $275;
   $285 = $284;
   HEAP32[$285>>2] = $282;
   $286 = (($284) + 4)|0;
   $287 = $286;
   HEAP32[$287>>2] = $283;
   $288 = $2;
   $289 = HEAP32[$288>>2]|0;
   $290 = ((($289)) + 24|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $start;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = $size;
   $299 = $298;
   $300 = HEAP32[$299>>2]|0;
   $301 = (($298) + 4)|0;
   $302 = $301;
   $303 = HEAP32[$302>>2]|0;
   $304 = (_i64Add(($294|0),($297|0),($300|0),($303|0))|0);
   $305 = tempRet0;
   $306 = (FUNCTION_TABLE_iiii[$291 & 2047]($288,$304,$305)|0);
   $result = $306;
   $307 = $result;
   $308 = ($307|0)!=(0);
   if (!($308)) {
    $0 = 0;
    $317 = $0;
    STACKTOP = sp;return ($317|0);
   }
   $309 = $4;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(0|0);
   if (!($311)) {
    $312 = HEAP32[$310>>2]|0;
    $313 = ((($312)) + 4|0);
    $314 = HEAP32[$313>>2]|0;
    FUNCTION_TABLE_vi[$314 & 2047]($310);
   }
   $315 = $4;
   HEAP32[$315>>2] = 0;
   $316 = $result;
   $0 = $316;
   $317 = $0;
   STACKTOP = sp;return ($317|0);
  }
 }
 $194 = $2;
 $195 = HEAP32[$194>>2]|0;
 $196 = ((($195)) + 24|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = $start;
 $199 = $198;
 $200 = HEAP32[$199>>2]|0;
 $201 = (($198) + 4)|0;
 $202 = $201;
 $203 = HEAP32[$202>>2]|0;
 (FUNCTION_TABLE_iiii[$197 & 2047]($194,$200,$203)|0);
 $0 = -10;
 $317 = $0;
 STACKTOP = sp;return ($317|0);
}
function __ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamjjyRP8AP4_Atom($this,$stream,$type,$size_32,$0,$1,$atom) {
 $this = $this|0;
 $stream = $stream|0;
 $type = $type|0;
 $size_32 = $size_32|0;
 $0 = $0|0;
 $1 = $1|0;
 $atom = $atom|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom_is_large = 0, $force_64 = 0, $handler = 0, $handler2 = 0, $handler_item = 0, $handler_item1 = 0, $result = 0, $switch$split1002D = 0, $switch$split102D = 0, $switch$split1032D = 0, $switch$split1062D = 0;
 var $switch$split1092D = 0, $switch$split1122D = 0, $switch$split1152D = 0, $switch$split1182D = 0, $switch$split1212D = 0, $switch$split1242D = 0, $switch$split1272D = 0, $switch$split12D = 0, $switch$split1302D = 0, $switch$split132D = 0, $switch$split1332D = 0, $switch$split1362D = 0, $switch$split1392D = 0, $switch$split1422D = 0, $switch$split1452D = 0, $switch$split1482D = 0, $switch$split1512D = 0, $switch$split1542D = 0, $switch$split1572D = 0, $switch$split1602D = 0;
 var $switch$split162D = 0, $switch$split1632D = 0, $switch$split1662D = 0, $switch$split1692D = 0, $switch$split1722D = 0, $switch$split1752D = 0, $switch$split1782D = 0, $switch$split1812D = 0, $switch$split1842D = 0, $switch$split1872D = 0, $switch$split1902D = 0, $switch$split192D = 0, $switch$split1932D = 0, $switch$split1962D = 0, $switch$split1992D = 0, $switch$split2022D = 0, $switch$split2052D = 0, $switch$split2082D = 0, $switch$split2112D = 0, $switch$split2142D = 0;
 var $switch$split2172D = 0, $switch$split2202D = 0, $switch$split222D = 0, $switch$split2232D = 0, $switch$split2262D = 0, $switch$split2292D = 0, $switch$split2322D = 0, $switch$split2352D = 0, $switch$split2382D = 0, $switch$split2412D = 0, $switch$split2442D = 0, $switch$split2472D = 0, $switch$split2502D = 0, $switch$split252D = 0, $switch$split2532D = 0, $switch$split2562D = 0, $switch$split2592D = 0, $switch$split2622D = 0, $switch$split2652D = 0, $switch$split2682D = 0;
 var $switch$split2712D = 0, $switch$split2742D = 0, $switch$split2772D = 0, $switch$split2802D = 0, $switch$split282D = 0, $switch$split2832D = 0, $switch$split2862D = 0, $switch$split2892D = 0, $switch$split2922D = 0, $switch$split2952D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split522D = 0;
 var $switch$split552D = 0, $switch$split582D = 0, $switch$split612D = 0, $switch$split642D = 0, $switch$split672D = 0, $switch$split702D = 0, $switch$split72D = 0, $switch$split732D = 0, $switch$split762D = 0, $switch$split792D = 0, $switch$split822D = 0, $switch$split852D = 0, $switch$split882D = 0, $switch$split912D = 0, $switch$split942D = 0, $switch$split972D = 0, $uuid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $uuid = sp + 64|0;
 $3 = $this;
 $4 = $stream;
 $5 = $type;
 $6 = $size_32;
 $11 = $7;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $8 = $atom;
 $15 = $3;
 $16 = $6;
 $17 = ($16|0)==(1);
 $18 = $17&1;
 $atom_is_large = $18;
 $19 = $6;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $7;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0);
  $28 = (0)==(0);
  $29 = $27 & $28;
  $31 = $29;
 } else {
  $31 = 0;
 }
 $30 = $31&1;
 $force_64 = $30;
 $32 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
 $33 = ($32|0)==(1937011556);
 L4: do {
  if ($33) {
   $34 = $atom_is_large;
   $35 = $34&1;
   if ($35) {
    $2 = -10;
    $688 = $2;
    STACKTOP = sp;return ($688|0);
   }
   $36 = $5;
   $switch$split2D = ($36|0)<(1685353324);
   L10: do {
    if ($switch$split2D) {
     $switch$split42D = ($36|0)<(1635148596);
     L12: do {
      if ($switch$split42D) {
       $switch$split162D = ($36|0)<(1635148593);
       if (!($switch$split162D)) {
        switch ($36|0) {
        case 1635148595: case 1635148594: case 1635148593:  {
         break L12;
         break;
        }
        default: {
         break L10;
        }
        }
       }
       $switch$split402D = ($36|0)<(1634492771);
       if ($switch$split402D) {
        switch ($36|0) {
        case 1633889587:  {
         label = 34;
         break L10;
         break;
        }
        default: {
         break L10;
        }
        }
       } else {
        switch ($36|0) {
        case 1634492771:  {
         label = 34;
         break L10;
         break;
        }
        default: {
         break L10;
        }
        }
       }
      } else {
       $switch$split192D = ($36|0)<(1685353315);
       if (!($switch$split192D)) {
        switch ($36|0) {
        case 1685353317: case 1685353320: case 1685353315:  {
         label = 34;
         break L10;
         break;
        }
        default: {
         break L10;
        }
        }
       }
       $switch$split432D = ($36|0)<(1685220713);
       if ($switch$split432D) {
        switch ($36|0) {
        case 1635148596:  {
         break L12;
         break;
        }
        default: {
         break L10;
        }
        }
       }
       switch ($36|0) {
       case 1685220723:  {
        $77 = (__Znwj(160)|0);
        $78 = $6;
        $79 = $4;
        __THREW__ = 0;
        invoke_viiii(905,($77|0),($78|0),($79|0),($15|0));
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if (!($81)) {
         $82 = $8;
         HEAP32[$82>>2] = $77;
         break L4;
        }
        $83 = ___cxa_find_matching_catch()|0;
        $84 = tempRet0;
        $9 = $83;
        $10 = $84;
        __ZdlPv($77);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
        break;
       }
       case 1685220713:  {
        $85 = (__Znwj(112)|0);
        $86 = $6;
        $87 = $4;
        __THREW__ = 0;
        invoke_viiii(906,($85|0),($86|0),($87|0),($15|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if (!($89)) {
         $90 = $8;
         HEAP32[$90>>2] = $85;
         break L4;
        }
        $91 = ___cxa_find_matching_catch()|0;
        $92 = tempRet0;
        $9 = $91;
        $10 = $92;
        __ZdlPv($85);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
        break;
       }
       default: {
        break L10;
       }
       }
      }
     } while(0);
     $93 = (__Znwj(112)|0);
     $94 = $5;
     $95 = $6;
     $96 = $4;
     __THREW__ = 0;
     invoke_viiiii(907,($93|0),($94|0),($95|0),($96|0),($15|0));
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if (!($98)) {
      $99 = $8;
      HEAP32[$99>>2] = $93;
      break L4;
     }
     $100 = ___cxa_find_matching_catch()|0;
     $101 = tempRet0;
     $9 = $100;
     $10 = $101;
     __ZdlPv($93);
     $689 = $9;
     $690 = $10;
     ___resumeException($689|0);
     // unreachable;
    } else {
     $switch$split72D = ($36|0)<(1752589105);
     L44: do {
      if ($switch$split72D) {
       $switch$split222D = ($36|0)<(1701733217);
       if ($switch$split222D) {
        $switch$split462D = ($36|0)<(1700998451);
        if ($switch$split462D) {
         switch ($36|0) {
         case 1685353324:  {
          label = 34;
          break L10;
          break;
         }
         default: {
          break L10;
         }
         }
        } else {
         switch ($36|0) {
         case 1700998451:  {
          label = 34;
          break L10;
          break;
         }
         default: {
          break L10;
         }
         }
        }
       }
       $switch$split492D = ($36|0)<(1701733238);
       if ($switch$split492D) {
        switch ($36|0) {
        case 1701733217:  {
         break;
        }
        default: {
         break L10;
        }
        }
        $61 = (__Znwj(160)|0);
        $62 = $6;
        $63 = $4;
        __THREW__ = 0;
        invoke_viiii(903,($61|0),($62|0),($63|0),($15|0));
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if (!($65)) {
         $66 = $8;
         HEAP32[$66>>2] = $61;
         break L4;
        }
        $67 = ___cxa_find_matching_catch()|0;
        $68 = tempRet0;
        $9 = $67;
        $10 = $68;
        __ZdlPv($61);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
       }
       $switch$split822D = ($36|0)<(1751479857);
       if (!($switch$split822D)) {
        switch ($36|0) {
        case 1751479857:  {
         break L44;
         break;
        }
        default: {
         break L10;
        }
        }
       }
       switch ($36|0) {
       case 1701733238:  {
        break;
       }
       default: {
        break L10;
       }
       }
       $69 = (__Znwj(112)|0);
       $70 = $6;
       $71 = $4;
       __THREW__ = 0;
       invoke_viiii(904,($69|0),($70|0),($71|0),($15|0));
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if (!($73)) {
        $74 = $8;
        HEAP32[$74>>2] = $69;
        break L4;
       }
       $75 = ___cxa_find_matching_catch()|0;
       $76 = tempRet0;
       $9 = $75;
       $10 = $76;
       __ZdlPv($69);
       $689 = $9;
       $690 = $10;
       ___resumeException($689|0);
       // unreachable;
      } else {
       $switch$split252D = ($36|0)<(1836070006);
       if ($switch$split252D) {
        $switch$split522D = ($36|0)<(1836069985);
        if ($switch$split522D) {
         switch ($36|0) {
         case 1752589105:  {
          break L44;
          break;
         }
         default: {
          break L10;
         }
         }
        }
        switch ($36|0) {
        case 1836069985:  {
         $37 = (__Znwj(160)|0);
         $38 = $6;
         $39 = $4;
         __THREW__ = 0;
         invoke_viiii(900,($37|0),($38|0),($39|0),($15|0));
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if (!($41)) {
          $42 = $8;
          HEAP32[$42>>2] = $37;
          break L4;
         }
         $43 = ___cxa_find_matching_catch()|0;
         $44 = tempRet0;
         $9 = $43;
         $10 = $44;
         __ZdlPv($37);
         $689 = $9;
         $690 = $10;
         ___resumeException($689|0);
         // unreachable;
         break;
        }
        case 1836070003:  {
         $53 = (__Znwj(64)|0);
         $54 = $6;
         $55 = $4;
         __THREW__ = 0;
         invoke_viiii(902,($53|0),($54|0),($55|0),($15|0));
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if (!($57)) {
          $58 = $8;
          HEAP32[$58>>2] = $53;
          break L4;
         }
         $59 = ___cxa_find_matching_catch()|0;
         $60 = tempRet0;
         $9 = $59;
         $10 = $60;
         __ZdlPv($53);
         $689 = $9;
         $690 = $10;
         ___resumeException($689|0);
         // unreachable;
         break;
        }
        default: {
         break L10;
        }
        }
       }
       $switch$split552D = ($36|0)<(1920233504);
       if ($switch$split552D) {
        switch ($36|0) {
        case 1836070006:  {
         break;
        }
        default: {
         break L10;
        }
        }
        $45 = (__Znwj(112)|0);
        $46 = $6;
        $47 = $4;
        __THREW__ = 0;
        invoke_viiii(901,($45|0),($46|0),($47|0),($15|0));
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if (!($49)) {
         $50 = $8;
         HEAP32[$50>>2] = $45;
         break L4;
        }
        $51 = ___cxa_find_matching_catch()|0;
        $52 = tempRet0;
        $9 = $51;
        $10 = $52;
        __ZdlPv($45);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
       }
       $switch$split852D = ($36|0)<(1937010800);
       if ($switch$split852D) {
        switch ($36|0) {
        case 1920233504:  {
         break;
        }
        default: {
         break L10;
        }
        }
        $120 = (__Znwj(72)|0);
        $121 = $6;
        $122 = $4;
        __THREW__ = 0;
        invoke_viiii(910,($120|0),($121|0),($122|0),($15|0));
        $123 = __THREW__; __THREW__ = 0;
        $124 = $123&1;
        if (!($124)) {
         $125 = $8;
         HEAP32[$125>>2] = $120;
         break L4;
        }
        $126 = ___cxa_find_matching_catch()|0;
        $127 = tempRet0;
        $9 = $126;
        $10 = $127;
        __ZdlPv($120);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
       } else {
        switch ($36|0) {
        case 1937010800:  {
         break;
        }
        default: {
         break L10;
        }
        }
        $128 = (__Znwj(88)|0);
        $129 = $5;
        $130 = $6;
        $131 = $4;
        __THREW__ = 0;
        invoke_viiiii(911,($128|0),($129|0),($130|0),($131|0),($15|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if (!($133)) {
         $134 = $8;
         HEAP32[$134>>2] = $128;
         break L4;
        }
        $135 = ___cxa_find_matching_catch()|0;
        $136 = tempRet0;
        $9 = $135;
        $10 = $136;
        __ZdlPv($128);
        $689 = $9;
        $690 = $10;
        ___resumeException($689|0);
        // unreachable;
       }
      }
     } while(0);
     $102 = (__Znwj(112)|0);
     $103 = $5;
     $104 = $6;
     $105 = $4;
     __THREW__ = 0;
     invoke_viiiii(908,($102|0),($103|0),($104|0),($105|0),($15|0));
     $106 = __THREW__; __THREW__ = 0;
     $107 = $106&1;
     if (!($107)) {
      $108 = $8;
      HEAP32[$108>>2] = $102;
      break L4;
     }
     $109 = ___cxa_find_matching_catch()|0;
     $110 = tempRet0;
     $9 = $109;
     $10 = $110;
     __ZdlPv($102);
     $689 = $9;
     $690 = $10;
     ___resumeException($689|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 34) {
    $111 = (__Znwj(160)|0);
    $112 = $5;
    $113 = $6;
    $114 = $4;
    __THREW__ = 0;
    invoke_viiiii(909,($111|0),($112|0),($113|0),($114|0),($15|0));
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if (!($116)) {
     $117 = $8;
     HEAP32[$117>>2] = $111;
     break;
    }
    $118 = ___cxa_find_matching_catch()|0;
    $119 = tempRet0;
    $9 = $118;
    $10 = $119;
    __ZdlPv($111);
    $689 = $9;
    $690 = $10;
    ___resumeException($689|0);
    // unreachable;
   }
   $137 = ((($15)) + 20|0);
   $138 = (__ZNK8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE9FirstItemEv($137)|0);
   $handler_item = $138;
   while(1) {
    $139 = $handler_item;
    $140 = ($139|0)!=(0|0);
    if (!($140)) {
     break;
    }
    $141 = $handler_item;
    $142 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetDataEv($141)|0);
    $handler = $142;
    $143 = $handler;
    $144 = HEAP32[$143>>2]|0;
    $145 = ((($144)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $5;
    $148 = $6;
    $149 = $4;
    $150 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
    $151 = $8;
    $152 = (FUNCTION_TABLE_iiiiiii[$146 & 1023]($143,$147,$148,$149,$150,$151)|0);
    $153 = ($152|0)==(0);
    if ($153) {
     break;
    }
    $154 = $handler_item;
    $155 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetNextEv($154)|0);
    $handler_item = $155;
   }
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)==(0|0);
   if ($158) {
    $159 = (__Znwj(88)|0);
    $160 = $5;
    $161 = $7;
    $162 = $161;
    $163 = HEAP32[$162>>2]|0;
    $164 = (($161) + 4)|0;
    $165 = $164;
    $166 = HEAP32[$165>>2]|0;
    $167 = $4;
    __THREW__ = 0;
    invoke_viiii(912,($159|0),($160|0),($163|0),($167|0));
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if (!($169)) {
     $170 = $8;
     HEAP32[$170>>2] = $159;
     break;
    }
    $171 = ___cxa_find_matching_catch()|0;
    $172 = tempRet0;
    $9 = $171;
    $10 = $172;
    __ZdlPv($159);
    $689 = $9;
    $690 = $10;
    ___resumeException($689|0);
    // unreachable;
   }
  } else {
   $173 = $5;
   $switch$split12D = ($173|0)<(1836476516);
   L130: do {
    if ($switch$split12D) {
     $switch$split102D = ($173|0)<(1752069225);
     if (!($switch$split102D)) {
      $switch$split312D = ($173|0)<(1835297121);
      if (!($switch$split312D)) {
       $switch$split672D = ($173|0)<(1835430511);
       if ($switch$split672D) {
        $switch$split1062D = ($173|0)<(1835365473);
        if ($switch$split1062D) {
         $switch$split1692D = ($173|0)<(1835299433);
         if ($switch$split1692D) {
          switch ($173|0) {
          case 1835297121:  {
           label = 260;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         }
         $switch$split2502D = ($173|0)<(1835362404);
         if ($switch$split2502D) {
          switch ($173|0) {
          case 1835299433:  {
           label = 260;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         }
         switch ($173|0) {
         case 1835362404:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $186 = $atom_is_large;
         $187 = $186&1;
         if (!($187)) {
          $188 = $6;
          $189 = $4;
          $190 = (__ZN12AP4_MehdAtom6CreateEjR14AP4_ByteStream($188,$189)|0);
          $191 = $8;
          HEAP32[$191>>2] = $190;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        } else {
         $switch$split1722D = ($173|0)<(1835427940);
         if ($switch$split1722D) {
          switch ($173|0) {
          case 1835365473:  {
           label = 265;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         }
         $switch$split2532D = ($173|0)<(1835430497);
         if (!($switch$split2532D)) {
          switch ($173|0) {
          case 1835430497:  {
           label = 260;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         }
         switch ($173|0) {
         case 1835427940:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $192 = $atom_is_large;
         $193 = $192&1;
         if (!($193)) {
          $194 = $6;
          $195 = $4;
          $196 = (__ZN12AP4_MfhdAtom6CreateEjR14AP4_ByteStream($194,$195)|0);
          $197 = $8;
          HEAP32[$197>>2] = $196;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
       }
       $switch$split1092D = ($173|0)<(1836019558);
       if (!($switch$split1092D)) {
        $switch$split1782D = ($173|0)<(1836085092);
        if (!($switch$split1782D)) {
         $switch$split2592D = ($173|0)<(1836475768);
         if ($switch$split2592D) {
          switch ($173|0) {
          case 1836085092:  {
           label = 256;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         } else {
          switch ($173|0) {
          case 1836475768:  {
           label = 260;
           break L130;
           break;
          }
          default: {
           label = 266;
           break L130;
          }
          }
         }
        }
        switch ($173|0) {
        case 1836019558:  {
         label = 260;
         break L130;
         break;
        }
        case 1836019574:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $174 = $atom_is_large;
        $175 = $174&1;
        if (!($175)) {
         $176 = $6;
         $177 = $4;
         $178 = (__ZN12AP4_MoovAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($176,$177,$15)|0);
         $179 = $8;
         HEAP32[$179>>2] = $178;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split1752D = ($173|0)<(1835626086);
       if ($switch$split1752D) {
        switch ($173|0) {
        case 1835430511:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $240 = $atom_is_large;
        $241 = $240&1;
        if (!($241)) {
         $242 = $6;
         $243 = $4;
         $244 = (__ZN12AP4_MfroAtom6CreateEjR14AP4_ByteStream($242,$243)|0);
         $245 = $8;
         HEAP32[$245>>2] = $244;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2562D = ($173|0)<(1835755876);
       if ($switch$split2562D) {
        switch ($173|0) {
        case 1835626086:  {
         label = 260;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1835755876:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $604 = $atom_is_large;
       $605 = $604&1;
       if ($605) {
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       } else {
        $606 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
        $607 = ($606|0)==(1835102828);
        if (!($607)) {
         break L4;
        }
        $608 = $6;
        $609 = $4;
        $610 = (__ZN12AP4_MkidAtom6CreateEjR14AP4_ByteStream($608,$609)|0);
        $611 = $8;
        HEAP32[$611>>2] = $610;
        break L4;
       }
      }
      $switch$split642D = ($173|0)<(1768907891);
      if (!($switch$split642D)) {
       $switch$split1032D = ($173|0)<(1835102828);
       if (!($switch$split1032D)) {
        $switch$split1662D = ($173|0)<(1835295092);
        if ($switch$split1662D) {
         switch ($173|0) {
         case 1835102828:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $643 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
         $644 = ($643|0)==(0);
         if (!($644)) {
          break L4;
         }
         $645 = $5;
         $646 = $7;
         $647 = $646;
         $648 = HEAP32[$647>>2]|0;
         $649 = (($646) + 4)|0;
         $650 = $649;
         $651 = HEAP32[$650>>2]|0;
         $652 = $force_64;
         $653 = $652&1;
         $654 = $4;
         $655 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($645,$648,$651,0,$653,$654,$15)|0);
         $656 = $8;
         HEAP32[$656>>2] = $655;
         break L4;
        }
        switch ($173|0) {
        case 1835295092:  {
         break L4;
         break;
        }
        case 1835296868:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $246 = $atom_is_large;
        $247 = $246&1;
        if (!($247)) {
         $248 = $6;
         $249 = $4;
         $250 = (__ZN12AP4_MdhdAtom6CreateEjR14AP4_ByteStream($248,$249)|0);
         $251 = $8;
         HEAP32[$251>>2] = $250;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split1632D = ($173|0)<(1768974706);
       if ($switch$split1632D) {
        switch ($173|0) {
        case 1768907891:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $306 = $atom_is_large;
        $307 = $306&1;
        if (!($307)) {
         $308 = $6;
         $309 = $4;
         $310 = (__ZN12AP4_IodsAtom6CreateEjR14AP4_ByteStream($308,$309)|0);
         $311 = $8;
         HEAP32[$311>>2] = $310;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2472D = ($173|0)<(1768977007);
       if ($switch$split2472D) {
        switch ($173|0) {
        case 1768974706:  {
         label = 256;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1768977007:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $520 = $atom_is_large;
       $521 = $520&1;
       if (!($521)) {
        $522 = $6;
        $523 = $4;
        $524 = (__ZN12AP4_IproAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($522,$523,$15)|0);
        $525 = $8;
        HEAP32[$525>>2] = $524;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split1002D = ($173|0)<(1767065165);
      if ($switch$split1002D) {
       $switch$split1572D = ($173|0)<(1752589123);
       if ($switch$split1572D) {
        switch ($173|0) {
        case 1752069225:  {
         label = 260;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       $switch$split2412D = ($173|0)<(1766542675);
       if ($switch$split2412D) {
        switch ($173|0) {
        case 1752589123:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $324 = $atom_is_large;
        $325 = $324&1;
        if (!($325)) {
         $326 = $6;
         $327 = $4;
         $328 = (__ZN12AP4_HvccAtom6CreateEjR14AP4_ByteStream($326,$327)|0);
         $329 = $8;
         HEAP32[$329>>2] = $328;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       } else {
        switch ($173|0) {
        case 1766542675:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $469 = $atom_is_large;
        $470 = $469&1;
        if (!($470)) {
         $471 = $6;
         $472 = $4;
         $473 = (__ZN12AP4_IkmsAtom6CreateEjR14AP4_ByteStream($471,$472)|0);
         $474 = $8;
         HEAP32[$474>>2] = $473;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
      } else {
       $switch$split1602D = ($173|0)<(1767066708);
       if ($switch$split1602D) {
        switch ($173|0) {
        case 1767065165:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $475 = $atom_is_large;
        $476 = $475&1;
        if (!($476)) {
         $477 = $6;
         $478 = $4;
         $479 = (__ZN12AP4_IsfmAtom6CreateEjR14AP4_ByteStream($477,$478)|0);
         $480 = $8;
         HEAP32[$480>>2] = $479;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2442D = ($173|0)<(1768715124);
       if (!($switch$split2442D)) {
        switch ($173|0) {
        case 1768715124:  {
         label = 260;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1767066708:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $481 = $atom_is_large;
       $482 = $481&1;
       if (!($482)) {
        $483 = $6;
        $484 = $4;
        $485 = (__ZN12AP4_IsltAtom6CreateEjR14AP4_ByteStream($483,$484)|0);
        $486 = $8;
        HEAP32[$486>>2] = $485;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
     }
     $switch$split282D = ($173|0)<(1685089892);
     if (!($switch$split282D)) {
      $switch$split612D = ($173|0)<(1718775137);
      if ($switch$split612D) {
       $switch$split942D = ($173|0)<(1701606260);
       if ($switch$split942D) {
        $switch$split1452D = ($173|0)<(1685218662);
        if ($switch$split1452D) {
         switch ($173|0) {
         case 1685089892:  {
          label = 256;
          break L130;
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
        }
        $switch$split2292D = ($173|0)<(1701082227);
        if (!($switch$split2292D)) {
         switch ($173|0) {
         case 1701082227:  {
          label = 260;
          break L130;
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
        }
        switch ($173|0) {
        case 1685218662:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $390 = $atom_is_large;
        $391 = $390&1;
        if (!($391)) {
         $392 = $6;
         $393 = $4;
         $394 = (__ZN12AP4_DrefAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($392,$393,$15)|0);
         $395 = $8;
         HEAP32[$395>>2] = $394;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split1482D = ($173|0)<(1702061171);
       if ($switch$split1482D) {
        switch ($173|0) {
        case 1701606260:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $402 = $atom_is_large;
        $403 = $402&1;
        if (!($403)) {
         $404 = $6;
         $405 = $4;
         $406 = (__ZN12AP4_ElstAtom6CreateEjR14AP4_ByteStream($404,$405)|0);
         $407 = $8;
         HEAP32[$407>>2] = $406;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2322D = ($173|0)<(1718773093);
       if (!($switch$split2322D)) {
        switch ($173|0) {
        case 1718773093:  {
         break L4;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1702061171:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $312 = $atom_is_large;
       $313 = $312&1;
       if (!($313)) {
        $314 = $6;
        $315 = $4;
        $316 = (__ZN12AP4_EsdsAtom6CreateEjR14AP4_ByteStream($314,$315)|0);
        $317 = $8;
        HEAP32[$317>>2] = $316;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split972D = ($173|0)<(1751411826);
      if (!($switch$split972D)) {
       $switch$split1542D = ($173|0)<(1751740020);
       if ($switch$split1542D) {
        switch ($173|0) {
        case 1751411826:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $210 = $atom_is_large;
        $211 = $210&1;
        if (!($211)) {
         $212 = $6;
         $213 = $4;
         $214 = (__ZN12AP4_HdlrAtom6CreateEjR14AP4_ByteStream($212,$213)|0);
         $215 = $8;
         HEAP32[$215>>2] = $214;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2382D = ($173|0)<(1752000612);
       if ($switch$split2382D) {
        switch ($173|0) {
        case 1751740020:  {
         label = 256;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1752000612:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $432 = $atom_is_large;
       $433 = $432&1;
       if (!($433)) {
        $434 = $6;
        $435 = $4;
        $436 = (__ZN12AP4_HmhdAtom6CreateEjR14AP4_ByteStream($434,$435)|0);
        $437 = $8;
        HEAP32[$437>>2] = $436;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split1512D = ($173|0)<(1718909296);
      if ($switch$split1512D) {
       switch ($173|0) {
       case 1718775137:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $438 = $atom_is_large;
       $439 = $438&1;
       if (!($439)) {
        $440 = $6;
        $441 = $4;
        $442 = (__ZN12AP4_FrmaAtom6CreateEjR14AP4_ByteStream($440,$441)|0);
        $443 = $8;
        HEAP32[$443>>2] = $442;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2352D = ($173|0)<(1735553129);
      if ($switch$split2352D) {
       switch ($173|0) {
       case 1718909296:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $451 = $atom_is_large;
       $452 = $451&1;
       if (!($452)) {
        $453 = $6;
        $454 = $4;
        $455 = (__ZN12AP4_FtypAtom6CreateEjR14AP4_ByteStream($453,$454)|0);
        $456 = $8;
        HEAP32[$456>>2] = $455;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      } else {
       switch ($173|0) {
       case 1735553129:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $514 = $atom_is_large;
       $515 = $514&1;
       if (!($515)) {
        $516 = $6;
        $517 = $4;
        $518 = (__ZN12AP4_GrpiAtom6CreateEjR14AP4_ByteStream($516,$517)|0);
        $519 = $8;
        HEAP32[$519>>2] = $518;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
     }
     $switch$split582D = ($173|0)<(1667527523);
     if (!($switch$split582D)) {
      $switch$split912D = ($173|0)<(1668576371);
      if ($switch$split912D) {
       $switch$split1392D = ($173|0)<(1667785072);
       if ($switch$split1392D) {
        switch ($173|0) {
        case 1667527523:  {
         label = 256;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       $switch$split2232D = ($173|0)<(1668232756);
       if ($switch$split2232D) {
        switch ($173|0) {
        case 1667785072:  {
         label = 256;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1668232756:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $270 = $atom_is_large;
       $271 = $270&1;
       if (!($271)) {
        $272 = $6;
        $273 = $4;
        $274 = (__ZN12AP4_Co64Atom6CreateEjR14AP4_ByteStream($272,$273)|0);
        $275 = $8;
        HEAP32[$275>>2] = $274;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split1422D = ($173|0)<(1684366131);
      if ($switch$split1422D) {
       switch ($173|0) {
       case 1668576371:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $294 = $atom_is_large;
       $295 = $294&1;
       if (!($295)) {
        $296 = $6;
        $297 = $4;
        $298 = (__ZN12AP4_CttsAtom6CreateEjR14AP4_ByteStream($296,$297)|0);
        $299 = $8;
        HEAP32[$299>>2] = $298;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2262D = ($173|0)<(1684631142);
      if (!($switch$split2262D)) {
       switch ($173|0) {
       case 1684631142:  {
        label = 260;
        break L130;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      switch ($173|0) {
      case 1684366131:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $612 = $atom_is_large;
      $613 = $612&1;
      if ($613) {
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      } else {
       $614 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
       $615 = ($614|0)==(1700998451);
       if (!($615)) {
        break L4;
       }
       $616 = $6;
       $617 = $4;
       $618 = (__ZN12AP4_Dec3Atom6CreateEjR14AP4_ByteStream($616,$617)|0);
       $619 = $8;
       HEAP32[$619>>2] = $618;
       break L4;
      }
     }
     $switch$split882D = ($173|0)<(1634494835);
     if (!($switch$split882D)) {
      $switch$split1362D = ($173|0)<(1635148611);
      if ($switch$split1362D) {
       switch ($173|0) {
       case 1634494835:  {
        label = 256;
        break L130;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      $switch$split2202D = ($173|0)<(1651273571);
      if ($switch$split2202D) {
       switch ($173|0) {
       case 1635148611:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $318 = $atom_is_large;
       $319 = $318&1;
       if (!($319)) {
        $320 = $6;
        $321 = $4;
        $322 = (__ZN12AP4_AvccAtom6CreateEjR14AP4_ByteStream($320,$321)|0);
        $323 = $8;
        HEAP32[$323>>2] = $322;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      } else {
       switch ($173|0) {
       case 1651273571:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $568 = $atom_is_large;
       $569 = $568&1;
       if (!($569)) {
        $570 = $6;
        $571 = $4;
        $572 = (__ZN12AP4_BlocAtom6CreateEjR14AP4_ByteStream($570,$571)|0);
        $573 = $8;
        HEAP32[$573>>2] = $572;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
     }
     $switch$split1332D = ($173|0)<(946431008);
     if ($switch$split1332D) {
      switch ($173|0) {
      case 945972332:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $384 = $atom_is_large;
      $385 = $384&1;
      if (!($385)) {
       $386 = $6;
       $387 = $4;
       $388 = (__ZN12AP4_8bdlAtom6CreateEjR14AP4_ByteStream($386,$387)|0);
       $389 = $8;
       HEAP32[$389>>2] = $388;
       break L4;
      }
      $2 = -10;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
     $switch$split2172D = ($173|0)<(1634299494);
     if ($switch$split2172D) {
      switch ($173|0) {
      case 946431008:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $370 = (__Znwj(48)|0);
      $371 = $5;
      $372 = $7;
      $373 = $372;
      $374 = HEAP32[$373>>2]|0;
      $375 = (($372) + 4)|0;
      $376 = $375;
      $377 = HEAP32[$376>>2]|0;
      $378 = $4;
      __THREW__ = 0;
      invoke_viiiii(914,($370|0),($371|0),($374|0),($377|0),($378|0));
      $379 = __THREW__; __THREW__ = 0;
      $380 = $379&1;
      if (!($380)) {
       $381 = $8;
       HEAP32[$381>>2] = $370;
       break L4;
      }
      $382 = ___cxa_find_matching_catch()|0;
      $383 = tempRet0;
      $9 = $382;
      $10 = $383;
      __ZdlPv($370);
      $689 = $9;
      $690 = $10;
      ___resumeException($689|0);
      // unreachable;
     } else {
      switch ($173|0) {
      case 1634299494:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $574 = $atom_is_large;
      $575 = $574&1;
      if (!($575)) {
       $576 = $6;
       $577 = $4;
       $578 = (__ZN12AP4_AinfAtom6CreateEjR14AP4_ByteStream($576,$577)|0);
       $579 = $8;
       HEAP32[$579>>2] = $578;
       break L4;
      }
      $2 = -10;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
    } else {
     $switch$split132D = ($173|0)<(1937008740);
     if ($switch$split132D) {
      $switch$split342D = ($173|0)<(1935763834);
      if ($switch$split342D) {
       $switch$split702D = ($173|0)<(1868853869);
       if ($switch$split702D) {
        $switch$split1122D = ($173|0)<(1868850273);
        if (!($switch$split1122D)) {
         switch ($173|0) {
         case 1868852077:  {
          label = 265;
          break L130;
          break;
         }
         case 1868851301:  {
          break;
         }
         case 1868850273:  {
          $499 = $7;
          $500 = $499;
          $501 = HEAP32[$500>>2]|0;
          $502 = (($499) + 4)|0;
          $503 = $502;
          $504 = HEAP32[$503>>2]|0;
          $505 = $4;
          $506 = (__ZN12AP4_OddaAtom6CreateEyR14AP4_ByteStream($501,$504,$505)|0);
          $507 = $8;
          HEAP32[$507>>2] = $506;
          break L4;
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $487 = $atom_is_large;
         $488 = $487&1;
         if (!($488)) {
          $489 = $6;
          $490 = $4;
          $491 = (__ZN12AP4_OdheAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($489,$490,$15)|0);
          $492 = $8;
          HEAP32[$492>>2] = $491;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
        $switch$split1812D = ($173|0)<(1852663908);
        if ($switch$split1812D) {
         switch ($173|0) {
         case 1836476516:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $180 = $atom_is_large;
         $181 = $180&1;
         if (!($181)) {
          $182 = $6;
          $183 = $4;
          $184 = (__ZN12AP4_MvhdAtom6CreateEjR14AP4_ByteStream($182,$183)|0);
          $185 = $8;
          HEAP32[$185>>2] = $184;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
        $switch$split2622D = ($173|0)<(1868849510);
        if ($switch$split2622D) {
         switch ($173|0) {
         case 1852663908:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $420 = $atom_is_large;
         $421 = $420&1;
         if (!($421)) {
          $422 = $6;
          $423 = $4;
          $424 = (__ZN12AP4_NmhdAtom6CreateEjR14AP4_ByteStream($422,$423)|0);
          $425 = $8;
          HEAP32[$425>>2] = $424;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        } else {
         switch ($173|0) {
         case 1868849510:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $508 = $atom_is_large;
         $509 = $508&1;
         if (!($509)) {
          $510 = $6;
          $511 = $4;
          $512 = (__ZN12AP4_OdafAtom6CreateEjR14AP4_ByteStream($510,$511)|0);
          $513 = $8;
          HEAP32[$513>>2] = $512;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
       }
       $switch$split1152D = ($173|0)<(1886614376);
       if ($switch$split1152D) {
        $switch$split1842D = ($173|0)<(1869112434);
        if ($switch$split1842D) {
         switch ($173|0) {
         case 1868853869:  {
          label = 265;
          break L130;
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
        }
        $switch$split2652D = ($173|0)<(1885628782);
        if ($switch$split2652D) {
         switch ($173|0) {
         case 1869112434:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $493 = $atom_is_large;
         $494 = $493&1;
         if (!($494)) {
          $495 = $6;
          $496 = $4;
          $497 = (__ZN12AP4_OhdrAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($495,$496,$15)|0);
          $498 = $8;
          HEAP32[$498>>2] = $497;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        } else {
         switch ($173|0) {
         case 1885628782:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $562 = $atom_is_large;
         $563 = $562&1;
         if (!($563)) {
          $564 = $6;
          $565 = $4;
          $566 = (__ZN12AP4_PdinAtom6CreateEjR14AP4_ByteStream($564,$565)|0);
          $567 = $8;
          HEAP32[$567>>2] = $566;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
       }
       $switch$split1872D = ($173|0)<(1920233504);
       if ($switch$split1872D) {
        switch ($173|0) {
        case 1886614376:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $580 = $atom_is_large;
        $581 = $580&1;
        if (!($581)) {
         $582 = $6;
         $583 = $4;
         $584 = (__ZN12AP4_PsshAtom6CreateEjR14AP4_ByteStream($582,$583)|0);
         $585 = $8;
         HEAP32[$585>>2] = $584;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2682D = ($173|0)<(1935763823);
       if ($switch$split2682D) {
        switch ($173|0) {
        case 1920233504:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $526 = $atom_is_large;
        $527 = $526&1;
        if (!($527)) {
         $528 = $6;
         $529 = $4;
         $530 = (__ZN11AP4_RtpAtom6CreateEjR14AP4_ByteStream($528,$529)|0);
         $531 = $8;
         HEAP32[$531>>2] = $530;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       } else {
        switch ($173|0) {
        case 1935763823:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $556 = $atom_is_large;
        $557 = $556&1;
        if (!($557)) {
         $558 = $6;
         $559 = $4;
         $560 = (__ZN12AP4_SaioAtom6CreateEjR14AP4_ByteStream($558,$559)|0);
         $561 = $8;
         HEAP32[$561>>2] = $560;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
      }
      $switch$split732D = ($173|0)<(1936158820);
      if (!($switch$split732D)) {
       $switch$split1212D = ($173|0)<(1936549988);
       if (!($switch$split1212D)) {
        $switch$split1992D = ($173|0)<(1937007212);
        if ($switch$split1992D) {
         switch ($173|0) {
         case 1936549988:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $414 = $atom_is_large;
         $415 = $414&1;
         if (!($415)) {
          $416 = $6;
          $417 = $4;
          $418 = (__ZN12AP4_SmhdAtom6CreateEjR14AP4_ByteStream($416,$417)|0);
          $419 = $8;
          HEAP32[$419>>2] = $418;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        } else {
         switch ($173|0) {
         case 1937007212:  {
          label = 260;
          break L130;
          break;
         }
         case 1937007471:  {
          break;
         }
         default: {
          label = 266;
          break L130;
         }
         }
         $264 = $atom_is_large;
         $265 = $264&1;
         if (!($265)) {
          $266 = $6;
          $267 = $4;
          $268 = (__ZN12AP4_StcoAtom6CreateEjR14AP4_ByteStream($266,$267)|0);
          $269 = $8;
          HEAP32[$269>>2] = $268;
          break L4;
         }
         $2 = -10;
         $688 = $2;
         STACKTOP = sp;return ($688|0);
        }
       }
       $switch$split1962D = ($173|0)<(1936286840);
       if ($switch$split1962D) {
        switch ($173|0) {
        case 1936158820:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $598 = $atom_is_large;
        $599 = $598&1;
        if (!($599)) {
         $600 = $6;
         $601 = $4;
         $602 = (__ZN12AP4_SgpdAtom6CreateEjR14AP4_ByteStream($600,$601)|0);
         $603 = $8;
         HEAP32[$603>>2] = $602;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2772D = ($173|0)<(1936289382);
       if (!($switch$split2772D)) {
        switch ($173|0) {
        case 1936289382:  {
         label = 260;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1936286840:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $586 = $atom_is_large;
       $587 = $586&1;
       if (!($587)) {
        $588 = $6;
        $589 = $4;
        $590 = (__ZN12AP4_SidxAtom6CreateEjR14AP4_ByteStream($588,$589)|0);
        $591 = $8;
        HEAP32[$591>>2] = $590;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split1182D = ($173|0)<(1935894637);
      if ($switch$split1182D) {
       $switch$split1902D = ($173|0)<(1935828848);
       if ($switch$split1902D) {
        switch ($173|0) {
        case 1935763834:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $550 = $atom_is_large;
        $551 = $550&1;
        if (!($551)) {
         $552 = $6;
         $553 = $4;
         $554 = (__ZN12AP4_SaizAtom6CreateEjR14AP4_ByteStream($552,$553)|0);
         $555 = $8;
         HEAP32[$555>>2] = $554;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2712D = ($173|0)<(1935894633);
       if (!($switch$split2712D)) {
        switch ($173|0) {
        case 1935894633:  {
         label = 260;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1935828848:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $592 = $atom_is_large;
       $593 = $592&1;
       if (!($593)) {
        $594 = $6;
        $595 = $4;
        $596 = (__ZN12AP4_SbgpAtom6CreateEjR14AP4_ByteStream($594,$595)|0);
        $597 = $8;
        HEAP32[$597>>2] = $596;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split1932D = ($173|0)<(1935962144);
      if ($switch$split1932D) {
       switch ($173|0) {
       case 1935894637:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $444 = $atom_is_large;
       $445 = $444&1;
       if (!($445)) {
        $446 = $6;
        $447 = ((($15)) + 4|0);
        $448 = $4;
        $449 = (__ZN12AP4_SchmAtom6CreateEjP9AP4_ArrayIjER14AP4_ByteStream($446,$447,$448)|0);
        $450 = $8;
        HEAP32[$450>>2] = $449;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2742D = ($173|0)<(1936027235);
      if ($switch$split2742D) {
       switch ($173|0) {
       case 1935962144:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $463 = $atom_is_large;
       $464 = $463&1;
       if (!($464)) {
        $465 = $6;
        $466 = $4;
        $467 = (__ZN11AP4_SdpAtom6CreateEjR14AP4_ByteStream($465,$466)|0);
        $468 = $8;
        HEAP32[$468>>2] = $467;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      } else {
       switch ($173|0) {
       case 1936027235:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $544 = $atom_is_large;
       $545 = $544&1;
       if (!($545)) {
        $546 = $6;
        $547 = $4;
        $548 = (__ZN12AP4_SencAtom6CreateEjR14AP4_ByteStream($546,$547)|0);
        $549 = $8;
        HEAP32[$549>>2] = $548;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
     }
     $switch$split372D = ($173|0)<(1953066355);
     if ($switch$split372D) {
      $switch$split762D = ($173|0)<(1937013298);
      if ($switch$split762D) {
       switch ($173|0) {
       case 1937011556:  {
        $252 = $atom_is_large;
        $253 = $252&1;
        if (!($253)) {
         $254 = $6;
         $255 = $4;
         $256 = (__ZN12AP4_StsdAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($254,$255,$15)|0);
         $257 = $8;
         HEAP32[$257>>2] = $256;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1937011555:  {
        $258 = $atom_is_large;
        $259 = $258&1;
        if (!($259)) {
         $260 = $6;
         $261 = $4;
         $262 = (__ZN12AP4_StscAtom6CreateEjR14AP4_ByteStream($260,$261)|0);
         $263 = $8;
         HEAP32[$263>>2] = $262;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1937011578:  {
        $276 = $atom_is_large;
        $277 = $276&1;
        if (!($277)) {
         $278 = $6;
         $279 = $4;
         $280 = (__ZN12AP4_StszAtom6CreateEjR14AP4_ByteStream($278,$279)|0);
         $281 = $8;
         HEAP32[$281>>2] = $280;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1937011827:  {
        $288 = $atom_is_large;
        $289 = $288&1;
        if (!($289)) {
         $290 = $6;
         $291 = $4;
         $292 = (__ZN12AP4_SttsAtom6CreateEjR14AP4_ByteStream($290,$291)|0);
         $293 = $8;
         HEAP32[$293>>2] = $292;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1937011571:  {
        $300 = $atom_is_large;
        $301 = $300&1;
        if (!($301)) {
         $302 = $6;
         $303 = $4;
         $304 = (__ZN12AP4_StssAtom6CreateEjR14AP4_ByteStream($302,$303)|0);
         $305 = $8;
         HEAP32[$305>>2] = $304;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1937008740:  {
        $426 = $atom_is_large;
        $427 = $426&1;
        if (!($427)) {
         $428 = $6;
         $429 = $4;
         $430 = (__ZN12AP4_SthdAtom6CreateEjR14AP4_ByteStream($428,$429)|0);
         $431 = $8;
         HEAP32[$431>>2] = $430;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      $switch$split1242D = ($173|0)<(1952867444);
      if ($switch$split1242D) {
       $switch$split2022D = ($173|0)<(1937337955);
       if ($switch$split2022D) {
        switch ($173|0) {
        case 1937013298:  {
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
        $282 = $atom_is_large;
        $283 = $282&1;
        if (!($283)) {
         $284 = $6;
         $285 = $4;
         $286 = (__ZN12AP4_Stz2Atom6CreateEjR14AP4_ByteStream($284,$285)|0);
         $287 = $8;
         HEAP32[$287>>2] = $286;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
       }
       $switch$split2802D = ($173|0)<(1952804451);
       if ($switch$split2802D) {
        switch ($173|0) {
        case 1937337955:  {
         label = 256;
         break L130;
         break;
        }
        default: {
         label = 266;
         break L130;
        }
        }
       }
       switch ($173|0) {
       case 1952804451:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $538 = $atom_is_large;
       $539 = $538&1;
       if (!($539)) {
        $540 = $6;
        $541 = $4;
        $542 = (__ZN12AP4_TencAtom6CreateEjR14AP4_ByteStream($540,$541)|0);
        $543 = $8;
        HEAP32[$543>>2] = $542;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2052D = ($173|0)<(1952868452);
      if ($switch$split2052D) {
       switch ($173|0) {
       case 1952867444:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $532 = $atom_is_large;
       $533 = $532&1;
       if (!($533)) {
        $534 = $6;
        $535 = $4;
        $536 = (__ZN12AP4_TfdtAtom6CreateEjR14AP4_ByteStream($534,$535)|0);
        $537 = $8;
        HEAP32[$537>>2] = $536;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2832D = ($173|0)<(1952871009);
      if ($switch$split2832D) {
       switch ($173|0) {
       case 1952868452:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $222 = $atom_is_large;
       $223 = $222&1;
       if (!($223)) {
        $224 = $6;
        $225 = $4;
        $226 = (__ZN12AP4_TfhdAtom6CreateEjR14AP4_ByteStream($224,$225)|0);
        $227 = $8;
        HEAP32[$227>>2] = $226;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      } else {
       switch ($173|0) {
       case 1952871009:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $234 = $atom_is_large;
       $235 = $234&1;
       if (!($235)) {
        $236 = $6;
        $237 = $4;
        $238 = (__ZN12AP4_TfraAtom6CreateEjR14AP4_ByteStream($236,$237)|0);
        $239 = $8;
        HEAP32[$239>>2] = $238;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
     }
     $switch$split792D = ($173|0)<(1953658222);
     if ($switch$split792D) {
      $switch$split1272D = ($173|0)<(1953653099);
      if (!($switch$split1272D)) {
       switch ($173|0) {
       case 1953654118:  {
        label = 260;
        break L130;
        break;
       }
       case 1953653099:  {
        $198 = $atom_is_large;
        $199 = $198&1;
        if (!($199)) {
         $200 = $6;
         $201 = $4;
         $202 = (__ZN12AP4_TrakAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($200,$201,$15)|0);
         $203 = $8;
         HEAP32[$203>>2] = $202;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       case 1953654136:  {
        $204 = $atom_is_large;
        $205 = $204&1;
        if (!($205)) {
         $206 = $6;
         $207 = $4;
         $208 = (__ZN12AP4_TrexAtom6CreateEjR14AP4_ByteStream($206,$207)|0);
         $209 = $8;
         HEAP32[$209>>2] = $208;
         break L4;
        }
        $2 = -10;
        $688 = $2;
        STACKTOP = sp;return ($688|0);
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      $switch$split2082D = ($173|0)<(1953196132);
      if ($switch$split2082D) {
       switch ($173|0) {
       case 1953066355:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $457 = $atom_is_large;
       $458 = $457&1;
       if (!($458)) {
        $459 = $6;
        $460 = $4;
        $461 = (__ZN12AP4_TimsAtom6CreateEjR14AP4_ByteStream($459,$460)|0);
        $462 = $8;
        HEAP32[$462>>2] = $461;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2862D = ($173|0)<(1953653094);
      if (!($switch$split2862D)) {
       switch ($173|0) {
       case 1953653094:  {
        label = 260;
        break L130;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      switch ($173|0) {
      case 1953196132:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $216 = $atom_is_large;
      $217 = $216&1;
      if (!($217)) {
       $218 = $6;
       $219 = $4;
       $220 = (__ZN12AP4_TkhdAtom6CreateEjR14AP4_ByteStream($218,$219)|0);
       $221 = $8;
       HEAP32[$221>>2] = $220;
       break L4;
      }
      $2 = -10;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
     $switch$split1302D = ($173|0)<(1970628964);
     if ($switch$split1302D) {
      $switch$split2112D = ($173|0)<(1969517665);
      if ($switch$split2112D) {
       switch ($173|0) {
       case 1953658222:  {
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
       $228 = $atom_is_large;
       $229 = $228&1;
       if (!($229)) {
        $230 = $6;
        $231 = $4;
        $232 = (__ZN12AP4_TrunAtom6CreateEjR14AP4_ByteStream($230,$231)|0);
        $233 = $8;
        HEAP32[$233>>2] = $232;
        break L4;
       }
       $2 = -10;
       $688 = $2;
       STACKTOP = sp;return ($688|0);
      }
      $switch$split2892D = ($173|0)<(1970433056);
      if ($switch$split2892D) {
       switch ($173|0) {
       case 1969517665:  {
        label = 260;
        break L130;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
      switch ($173|0) {
      case 1970433056:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $396 = $atom_is_large;
      $397 = $396&1;
      if (!($397)) {
       $398 = $6;
       $399 = $4;
       $400 = (__ZN11AP4_UrlAtom6CreateEjR14AP4_ByteStream($398,$399)|0);
       $401 = $8;
       HEAP32[$401>>2] = $400;
       break L4;
      }
      $2 = -10;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
     $switch$split2142D = ($173|0)<(2002876005);
     if (!($switch$split2142D)) {
      $switch$split2952D = ($173|0)<(2003395685);
      if ($switch$split2952D) {
       switch ($173|0) {
       case 2002876005:  {
        label = 260;
        break L130;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      } else {
       switch ($173|0) {
       case 2003395685:  {
        break L4;
        break;
       }
       default: {
        label = 266;
        break L130;
       }
       }
      }
     }
     $switch$split2922D = ($173|0)<(1986881636);
     if (!($switch$split2922D)) {
      switch ($173|0) {
      case 1986881636:  {
       break;
      }
      default: {
       label = 266;
       break L130;
      }
      }
      $408 = $atom_is_large;
      $409 = $408&1;
      if (!($409)) {
       $410 = $6;
       $411 = $4;
       $412 = (__ZN12AP4_VmhdAtom6CreateEjR14AP4_ByteStream($410,$411)|0);
       $413 = $8;
       HEAP32[$413>>2] = $412;
       break L4;
      }
      $2 = -10;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
     switch ($173|0) {
     case 1970628964:  {
      break;
     }
     default: {
      label = 266;
      break L130;
     }
     }
     $330 = $4;
     $331 = (__ZN14AP4_ByteStream4ReadEPvj($330,$uuid,16)|0);
     $result = $331;
     $332 = $result;
     $333 = ($332|0)!=(0);
     if ($333) {
      $334 = $result;
      $2 = $334;
      $688 = $2;
      STACKTOP = sp;return ($688|0);
     }
     $335 = (_memcmp($uuid,45866,16)|0);
     $336 = ($335|0)==(0);
     if ($336) {
      $337 = $7;
      $338 = $337;
      $339 = HEAP32[$338>>2]|0;
      $340 = (($337) + 4)|0;
      $341 = $340;
      $342 = HEAP32[$341>>2]|0;
      $343 = $4;
      $344 = (__ZN27AP4_PiffTrackEncryptionAtom6CreateEjR14AP4_ByteStream($339,$343)|0);
      $345 = $8;
      HEAP32[$345>>2] = $344;
      break L4;
     }
     $346 = (_memcmp($uuid,45882,16)|0);
     $347 = ($346|0)==(0);
     if ($347) {
      $348 = $7;
      $349 = $348;
      $350 = HEAP32[$349>>2]|0;
      $351 = (($348) + 4)|0;
      $352 = $351;
      $353 = HEAP32[$352>>2]|0;
      $354 = $4;
      $355 = (__ZN28AP4_PiffSampleEncryptionAtom6CreateEjR14AP4_ByteStream($350,$354)|0);
      $356 = $8;
      HEAP32[$356>>2] = $355;
      break L4;
     }
     $357 = (__Znwj(72)|0);
     $358 = $7;
     $359 = $358;
     $360 = HEAP32[$359>>2]|0;
     $361 = (($358) + 4)|0;
     $362 = $361;
     $363 = HEAP32[$362>>2]|0;
     $364 = $4;
     __THREW__ = 0;
     invoke_viiiii(913,($357|0),($360|0),($363|0),($uuid|0),($364|0));
     $365 = __THREW__; __THREW__ = 0;
     $366 = $365&1;
     if (!($366)) {
      $367 = $8;
      HEAP32[$367>>2] = $357;
      break L4;
     }
     $368 = ___cxa_find_matching_catch()|0;
     $369 = tempRet0;
     $9 = $368;
     $10 = $369;
     __ZdlPv($357);
     $689 = $9;
     $690 = $10;
     ___resumeException($689|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 256) {
    $620 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
    $621 = ($620|0)==(1953654118);
    if (!($621)) {
     break;
    }
    $622 = $atom_is_large;
    $623 = $622&1;
    if (!($623)) {
     $624 = $5;
     $625 = $6;
     $626 = $4;
     $627 = (__ZN16AP4_TrefTypeAtom6CreateEjjR14AP4_ByteStream($624,$625,$626)|0);
     $628 = $8;
     HEAP32[$628>>2] = $627;
     break;
    }
    $2 = -10;
    $688 = $2;
    STACKTOP = sp;return ($688|0);
   }
   else if ((label|0) == 260) {
    $629 = $atom_is_large;
    $630 = $629&1;
    if (!($630)) {
     $631 = $5;
     $632 = $7;
     $633 = $632;
     $634 = HEAP32[$633>>2]|0;
     $635 = (($632) + 4)|0;
     $636 = $635;
     $637 = HEAP32[$636>>2]|0;
     $638 = $force_64;
     $639 = $638&1;
     $640 = $4;
     $641 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($631,$634,$637,0,$639,$640,$15)|0);
     $642 = $8;
     HEAP32[$642>>2] = $641;
     break;
    }
    $2 = -10;
    $688 = $2;
    STACKTOP = sp;return ($688|0);
   }
   else if ((label|0) == 265) {
    $657 = $5;
    $658 = $7;
    $659 = $658;
    $660 = HEAP32[$659>>2]|0;
    $661 = (($658) + 4)|0;
    $662 = $661;
    $663 = HEAP32[$662>>2]|0;
    $664 = $force_64;
    $665 = $664&1;
    $666 = $4;
    $667 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($657,$660,$663,1,$665,$666,$15)|0);
    $668 = $8;
    HEAP32[$668>>2] = $667;
    break;
   }
   else if ((label|0) == 266) {
    $669 = ((($15)) + 20|0);
    $670 = (__ZNK8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE9FirstItemEv($669)|0);
    $handler_item1 = $670;
    while(1) {
     $671 = $handler_item1;
     $672 = ($671|0)!=(0|0);
     if (!($672)) {
      break L4;
     }
     $673 = $handler_item1;
     $674 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetDataEv($673)|0);
     $handler2 = $674;
     $675 = $handler2;
     $676 = HEAP32[$675>>2]|0;
     $677 = ((($676)) + 8|0);
     $678 = HEAP32[$677>>2]|0;
     $679 = $5;
     $680 = $6;
     $681 = $4;
     $682 = (__ZN15AP4_AtomFactory10GetContextEj($15,0)|0);
     $683 = $8;
     $684 = (FUNCTION_TABLE_iiiiiii[$678 & 1023]($675,$679,$680,$681,$682,$683)|0);
     $685 = ($684|0)==(0);
     if ($685) {
      break L4;
     }
     $686 = $handler_item1;
     $687 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetNextEv($686)|0);
     $handler_item1 = $687;
    }
   }
  }
 } while(0);
 $2 = 0;
 $688 = $2;
 STACKTOP = sp;return ($688|0);
}
function __ZN15AP4_AtomFactory10GetContextEj($this,$depth) {
 $this = $this|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $depth;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = (__ZNK9AP4_ArrayIjE9ItemCountEv($4)|0);
 $available = $5;
 $6 = $2;
 $7 = $available;
 $8 = ($6>>>0)>=($7>>>0);
 if ($8) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = ((($3)) + 4|0);
  $10 = $available;
  $11 = $2;
  $12 = (($10) - ($11))|0;
  $13 = (($12) - 1)|0;
  $14 = (__ZN9AP4_ArrayIjEixEm($9,$13)|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN15AP4_AtomFactory11PushContextEj($this,$context) {
 $this = $this|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 HEAP32[$1>>2] = $context;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 (__ZN9AP4_ArrayIjE6AppendERKj($3,$1)|0);
 STACKTOP = sp;return;
}
function __ZN15AP4_AtomFactory10PopContextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 (__ZN9AP4_ArrayIjE10RemoveLastEv($2)|0);
 STACKTOP = sp;return;
}
function __ZN22AP4_DefaultAtomFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN15AP4_AtomFactoryC2Ev($3);
 $4 = 4368;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(915,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(124,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN22AP4_DefaultAtomFactory10InitializeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(8)|0);
 __THREW__ = 0;
 invoke_vii(916,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZdlPv($4);
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 }
 $7 = (__ZN15AP4_AtomFactory14AddTypeHandlerEPNS_11TypeHandlerE($3,$4)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $15 = $result;
  STACKTOP = sp;return ($15|0);
 }
 $10 = ((($3)) + 36|0);
 HEAP8[$10>>0] = 1;
 $15 = $result;
 STACKTOP = sp;return ($15|0);
}
function __GLOBAL__sub_I_Ap4AtomFactory_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_90();
 return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE16DeleteReferencesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vi[$16 & 2047]($12);
  }
  $17 = $item;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   invoke_vi(917,($17|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 9;
    break;
   }
   __ZdlPv($17);
  }
  $21 = $next;
  $item = $21;
 }
 if ((label|0) == 9) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $1 = $22;
  $2 = $23;
  __ZdlPv($17);
  $24 = $1;
  $25 = $2;
  ___resumeException($24|0);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $26 = ((($3)) + 12|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($3)) + 8|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($3)) + 4|0);
  HEAP32[$28>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4388;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE3AddEPS1_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(918,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE3AddEPNS2_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN8AP4_Atom9SetSize32Ej($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN8AP4_Atom9SetSize64Ey($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($8)) + 16|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $11;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE9FirstItemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4Item7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_MoovAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $2 = $atom_factory;
 $5 = (__Znwj(80)|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __THREW__ = 0;
 invoke_viiii(919,($5|0),($6|0),($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZdlPv($5);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN12AP4_TrakAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $2 = $atom_factory;
 $5 = (__Znwj(64)|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __THREW__ = 0;
 invoke_viiii(920,($5|0),($6|0),($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZdlPv($5);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN12AP4_FrmaAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $4 = (__Znwj(40)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(921,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN12AP4_FtypAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $4 = (__Znwj(64)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(922,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN12AP4_TimsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $4 = (__Znwj(40)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(923,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN11AP4_SdpAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $4 = (__Znwj(48)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(924,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN12AP4_IsltAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = $stream;
 $5 = $1;
 $6 = ($5|0)!=(16);
 if ($6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $7 = (__Znwj(48)|0);
 $8 = $1;
 $9 = $2;
 __THREW__ = 0;
 invoke_viii(925,($7|0),($8|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZdlPv($7);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 }
 $0 = $7;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZN11AP4_RtpAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $stream;
 $4 = (__Znwj(48)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(926,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN16AP4_TrefTypeAtom6CreateEjjR14AP4_ByteStream($type,$size,$stream) {
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $size;
 $2 = $stream;
 $5 = (__Znwj(56)|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __THREW__ = 0;
 invoke_viiii(927,($5|0),($6|0),($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZdlPv($5);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN9AP4_ArrayIjE10RemoveLastEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$6>>2] = $8;
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = -12;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN15AP4_AtomFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4308;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __ZN9AP4_ArrayIjEC2Ev($5);
 $6 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(928,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 }
}
function __ZN27AP4_MetaDataAtomTypeHandlerC2EP15AP4_AtomFactory($this,$atom_factory) {
 $this = $this|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom_factory;
 $2 = $0;
 __ZN15AP4_AtomFactory11TypeHandlerC2Ev($2);
 $3 = 34336;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN22AP4_DefaultAtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(127,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4ItemC2EPS1_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE3AddEPNS2_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(917,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN15AP4_AtomFactory11TypeHandlerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(131,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15AP4_AtomFactory11TypeHandlerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN15AP4_AtomFactory11TypeHandlerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4404;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(129,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4388;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN22AP4_DefaultAtomFactoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15AP4_AtomFactoryD2Ev($1);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_90() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN22AP4_DefaultAtomFactoryC2Ev(4320);
 (___cxa_atexit((127|0),(4320|0),(___dso_handle|0))|0);
 return;
}
function __ZN12AP4_Co64Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(929,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_Co64AtomC2EPyj($this,$entries,$entry_count) {
 $this = $this|0;
 $entries = $entries|0;
 $entry_count = $entry_count|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $entries;
 $2 = $entry_count;
 $5 = $0;
 $6 = $2;
 $7 = $6<<3;
 $8 = (16 + ($7))|0;
 __ZN8AP4_AtomC2Ejjhj($5,1668232756,$8,0,0);
 $9 = 4424;
 HEAP32[$5>>2] = $9;
 $10 = ((($5)) + 36|0);
 $11 = $2;
 $$arith = $11<<3;
 $$overflow = ($11>>>0)>(536870911);
 $12 = $$overflow ? -1 : $$arith;
 __THREW__ = 0;
 $13 = (invoke_ii(867,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  HEAP32[$10>>2] = $13;
  $16 = ((($5)) + 40|0);
  $17 = $2;
  HEAP32[$16>>2] = $17;
  $18 = ((($5)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ((($5)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<3;
  _memcpy(($19|0),($20|0),($23|0))|0;
  STACKTOP = sp;return;
 }
 $24 = ___cxa_find_matching_catch()|0;
 $25 = tempRet0;
 $3 = $24;
 $4 = $25;
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $3;
  $29 = $4;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN12AP4_Co64AtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1668232756,$8,$9,$10);
 $11 = 4424;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 40|0);
 __THREW__ = 0;
 (invoke_iii(854,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if (!($15)) {
   $16 = ((($7)) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) - 12)|0;
   $20 = (($19) - 4)|0;
   $21 = (($20>>>0) / 8)&-1;
   $22 = ($17>>>0)>($21>>>0);
   if ($22) {
    $23 = $1;
    $24 = (($23) - 12)|0;
    $25 = (($24) - 4)|0;
    $26 = (($25>>>0) / 8)&-1;
    $27 = ((($7)) + 40|0);
    HEAP32[$27>>2] = $26;
   }
   $32 = ((($7)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $$arith = $33<<3;
   $$overflow = ($33>>>0)>(536870911);
   $34 = $$overflow ? -1 : $$arith;
   __THREW__ = 0;
   $35 = (invoke_ii(867,($34|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    $38 = ((($7)) + 36|0);
    HEAP32[$38>>2] = $35;
    $i = 0;
    while(1) {
     $39 = $i;
     $40 = ((($7)) + 40|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($39>>>0)<($41>>>0);
     if (!($42)) {
      break;
     }
     $43 = $4;
     $44 = $i;
     $45 = ((($7)) + 36|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + ($44<<3)|0);
     __THREW__ = 0;
     (invoke_iii(857,($43|0),($47|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      break L1;
     }
     $50 = $i;
     $51 = (($50) + 1)|0;
     $i = $51;
    }
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $5 = $28;
 $6 = $29;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $54 = ___cxa_find_matching_catch(0|0)|0;
  $55 = tempRet0;
  ___clang_call_terminate($54);
  // unreachable;
 } else {
  $52 = $5;
  $53 = $6;
  ___resumeException($52|0);
  // unreachable;
 }
}
function __ZN12AP4_Co64AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4424;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdaPv($4);
 }
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_Co64AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(133,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_Co64Atom14GetChunkOffsetEjRy($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $chunk;
 $3 = $chunk_offset;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -12;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $11 = $2;
  $12 = (($11) - 1)|0;
  $13 = ((($4)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<3)|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = $22;
  $24 = $23;
  HEAP32[$24>>2] = $18;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $21;
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN12AP4_Co64Atom14SetChunkOffsetEjy($this,$chunk,$0,$1) {
 $this = $this|0;
 $chunk = $chunk|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $this;
 $4 = $chunk;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $3;
 $11 = $4;
 $12 = ((($10)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 $15 = $4;
 $16 = ($15|0)==(0);
 $or$cond = $14 | $16;
 if ($or$cond) {
  $2 = -12;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $17 = $5;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($23) - 1)|0;
  $25 = ((($10)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24<<3)|0);
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = $19;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $22;
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN12AP4_Co64Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($3)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $2;
  $16 = $i;
  $17 = ((($3)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<3)|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZN14AP4_ByteStream9WriteUI64Ey($15,$22,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   label = 6;
   break;
  }
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 if ((label|0) == 6) {
  $29 = $result;
  $0 = $29;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 8) {
  $32 = $result;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN12AP4_Co64Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $9 = $1;
 $10 = (__ZN17AP4_AtomInspector12GetVerbosityEv($9)|0);
 $11 = ($10>>>0)>=(1);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($2)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  HEAP32[$vararg_buffer>>2] = $16;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $i;
  $22 = ((($2)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($21<<3)|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_viiiii[$20 & 2047]($17,$header,$27,$30,0);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_BlocAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(1064)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(930,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_BlocAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1651273571,$8,$9,$10);
 $11 = 4484;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 $13 = ((($12)) + 256|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($7)) + 293|0);
 $15 = ((($14)) + 256|0);
 HEAP8[$15>>0] = 0;
 $16 = $4;
 $17 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iiii(851,($16|0),($17|0),256)|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = $4;
  $21 = ((($7)) + 293|0);
  __THREW__ = 0;
  (invoke_iiii(851,($20|0),($21|0),256)|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = $4;
   $25 = ((($7)) + 550|0);
   __THREW__ = 0;
   (invoke_iiii(851,($24|0),($25|0),512)|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    STACKTOP = sp;return;
   }
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $5 = $28;
 $6 = $29;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  $32 = $5;
  $33 = $6;
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN12AP4_BlocAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = (__ZN14AP4_ByteStream5WriteEPKvj($4,$5,256)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $result;
   $0 = $9;
  } else {
   $10 = $2;
   $11 = ((($3)) + 293|0);
   $12 = (__ZN14AP4_ByteStream5WriteEPKvj($10,$11,256)|0);
   $result = $12;
   $13 = $result;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $result;
    $0 = $15;
    break;
   }
   $16 = $2;
   $17 = ((($3)) + 550|0);
   $18 = (__ZN14AP4_ByteStream5WriteEPKvj($16,$17,512)|0);
   $result = $18;
   $19 = $result;
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $result;
    $0 = $21;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_BlocAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN12AP4_BlocAtom15GetBaseLocationEv($2)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,39448,$7,0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN12AP4_BlocAtom19GetPurchaseLocationEv($2)|0);
 FUNCTION_TABLE_viiii[$11 & 2047]($8,39462,$12,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_BlocAtom15GetBaseLocationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12AP4_BlocAtom19GetPurchaseLocationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 293|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12AP4_BlocAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(137,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_BlocAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_PsshAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(120)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(931,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_PsshAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $computed_size = 0, $data_size = 0, $padding_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data_size = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1886614376,$8,$9,$10);
 $11 = 4544;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 52|0);
 __THREW__ = 0;
 invoke_vi(847,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $5 = $38;
  $6 = $39;
 } else {
  $15 = ((($7)) + 72|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($7)) + 76|0);
  __THREW__ = 0;
  invoke_vi(847,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $40 = ___cxa_find_matching_catch()|0;
   $41 = tempRet0;
   $5 = $40;
   $6 = $41;
  } else {
   $19 = ((($7)) + 96|0);
   __THREW__ = 0;
   invoke_vi(847,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    $5 = $42;
    $6 = $43;
   } else {
    $22 = $4;
    $23 = ((($7)) + 36|0);
    __THREW__ = 0;
    (invoke_iiii(851,($22|0),($23|0),16)|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    do {
     if (!($25)) {
      $26 = ((($7)) + 25|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $29 = ($28|0)>(0);
      if ($29) {
       $30 = $4;
       $31 = ((($7)) + 72|0);
       __THREW__ = 0;
       (invoke_iii(854,($30|0),($31|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
       $34 = ((($7)) + 72|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $1;
       $37 = ($35>>>0)>($36>>>0);
       if ($37) {
        STACKTOP = sp;return;
       }
       $48 = ((($7)) + 76|0);
       $49 = ((($7)) + 72|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = $50<<4;
       __THREW__ = 0;
       (invoke_iii(848,($48|0),($51|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break;
       }
       $54 = $4;
       $55 = ((($7)) + 76|0);
       __THREW__ = 0;
       $56 = (invoke_ii(849,($55|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       $59 = ((($7)) + 72|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = $60<<4;
       __THREW__ = 0;
       (invoke_iiii(851,($54|0),($56|0),($61|0))|0);
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
      }
      HEAP32[$data_size>>2] = 0;
      $64 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($64|0),($data_size|0))|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if (!($66)) {
       $67 = HEAP32[$data_size>>2]|0;
       $68 = ($67>>>0)>(16777216);
       if ($68) {
        STACKTOP = sp;return;
       }
       $69 = ((($7)) + 52|0);
       $70 = HEAP32[$data_size>>2]|0;
       __THREW__ = 0;
       (invoke_iii(848,($69|0),($70|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if (!($72)) {
        $73 = $4;
        $74 = ((($7)) + 52|0);
        __THREW__ = 0;
        $75 = (invoke_ii(849,($74|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if (!($77)) {
         $78 = HEAP32[$data_size>>2]|0;
         __THREW__ = 0;
         (invoke_iiii(851,($73|0),($75|0),($78|0))|0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if (!($80)) {
          __THREW__ = 0;
          $81 = (invoke_ii(932,($7|0))|0);
          $82 = __THREW__; __THREW__ = 0;
          $83 = $82&1;
          if (!($83)) {
           $computed_size = $81;
           $84 = $1;
           $85 = $computed_size;
           $86 = ($84>>>0)>($85>>>0);
           if (!($86)) {
            STACKTOP = sp;return;
           }
           $87 = $1;
           $88 = $computed_size;
           $89 = (($87) - ($88))|0;
           $padding_size = $89;
           $90 = ((($7)) + 96|0);
           $91 = $padding_size;
           __THREW__ = 0;
           (invoke_iii(848,($90|0),($91|0))|0);
           $92 = __THREW__; __THREW__ = 0;
           $93 = $92&1;
           if (!($93)) {
            $94 = $4;
            $95 = ((($7)) + 96|0);
            __THREW__ = 0;
            $96 = (invoke_ii(849,($95|0))|0);
            $97 = __THREW__; __THREW__ = 0;
            $98 = $97&1;
            if (!($98)) {
             $99 = $padding_size;
             __THREW__ = 0;
             (invoke_iiii(851,($94|0),($96|0),($99|0))|0);
             $100 = __THREW__; __THREW__ = 0;
             $101 = $100&1;
             if (!($101)) {
              STACKTOP = sp;return;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $44 = ___cxa_find_matching_catch()|0;
    $45 = tempRet0;
    $5 = $44;
    $6 = $45;
    __THREW__ = 0;
    invoke_vi(486,($19|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $110 = ___cxa_find_matching_catch(0|0)|0;
     $111 = tempRet0;
     ___clang_call_terminate($110);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(486,($16|0));
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $110 = ___cxa_find_matching_catch(0|0)|0;
    $111 = tempRet0;
    ___clang_call_terminate($110);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(486,($12|0));
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if ($105) {
   $110 = ___cxa_find_matching_catch(0|0)|0;
   $111 = tempRet0;
   ___clang_call_terminate($110);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if ($107) {
  $110 = ___cxa_find_matching_catch(0|0)|0;
  $111 = tempRet0;
  ___clang_call_terminate($110);
  // unreachable;
 } else {
  $108 = $5;
  $109 = $6;
  ___resumeException($108|0);
  // unreachable;
 }
}
function __ZN12AP4_PsshAtom15GetComputedSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 25|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(0);
 if ($5) {
  $10 = 0;
 } else {
  $6 = ((($1)) + 76|0);
  $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
  $8 = (4 + ($7))|0;
  $10 = $8;
 }
 $9 = (28 + ($10))|0;
 $11 = (($9) + 4)|0;
 $12 = ((($1)) + 52|0);
 $13 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($12)|0);
 $14 = (($11) + ($13))|0;
 $15 = ((($1)) + 96|0);
 $16 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($15)|0);
 $17 = (($14) + ($16))|0;
 STACKTOP = sp;return ($17|0);
}
function __ZN12AP4_PsshAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = (__ZN14AP4_ByteStream5WriteEPKvj($4,$5,16)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $result;
  $0 = $9;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $10 = ((($3)) + 25|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = $2;
  $15 = ((($3)) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN14AP4_ByteStream9WriteUI32Ej($14,$16)|0);
  $result = $17;
  $18 = $result;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $result;
   $0 = $20;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
  $21 = $2;
  $22 = ((($3)) + 76|0);
  $23 = (__ZNK14AP4_DataBuffer7GetDataEv($22)|0);
  $24 = ((($3)) + 72|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25<<4;
  $27 = (__ZN14AP4_ByteStream5WriteEPKvj($21,$23,$26)|0);
  $result = $27;
  $28 = $result;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $result;
   $0 = $30;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $31 = $2;
 $32 = ((($3)) + 52|0);
 $33 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($32)|0);
 $34 = (__ZN14AP4_ByteStream9WriteUI32Ej($31,$33)|0);
 $result = $34;
 $35 = $result;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $result;
  $0 = $37;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $38 = ((($3)) + 52|0);
 $39 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $2;
  $42 = ((($3)) + 52|0);
  $43 = (__ZNK14AP4_DataBuffer7GetDataEv($42)|0);
  $44 = ((($3)) + 52|0);
  $45 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($44)|0);
  $46 = (__ZN14AP4_ByteStream5WriteEPKvj($41,$43,$45)|0);
  $result = $46;
  $47 = $result;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $result;
   $0 = $49;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $50 = ((($3)) + 96|0);
 $51 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($50)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $2;
  $54 = ((($3)) + 96|0);
  $55 = (__ZNK14AP4_DataBuffer7GetDataEv($54)|0);
  $56 = ((($3)) + 96|0);
  $57 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($56)|0);
  $58 = (__ZN14AP4_ByteStream5WriteEPKvj($53,$55,$57)|0);
  $result = $58;
  $59 = $result;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $result;
   $0 = $61;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function __ZN12AP4_PsshAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $atom = 0, $atom_factory = 0, $i = 0, $kid_name = 0, $mbs = 0, $position = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $kid_name = sp + 48|0;
 $atom = sp + 16|0;
 $position = sp;
 $0 = $this;
 $1 = $inspector;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($4)) + 36|0);
 FUNCTION_TABLE_viiiii[$8 & 2047]($5,39495,$9,16,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($4)) + 52|0);
 $15 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($14)|0);
 FUNCTION_TABLE_viiiii[$13 & 2047]($10,39505,$15,0,0);
 $16 = ((($4)) + 25|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(0);
 L1: do {
  if ($19) {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = ((($4)) + 72|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20>>>0)<($22>>>0);
    if (!($23)) {
     break L1;
    }
    $24 = $i;
    HEAP32[$vararg_buffer>>2] = $24;
    (_snprintf($kid_name,32,39515,$vararg_buffer)|0);
    $25 = $1;
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($4)) + 76|0);
    $30 = (__ZNK14AP4_DataBuffer7GetDataEv($29)|0);
    $31 = $i;
    $32 = $31<<4;
    $33 = (($30) + ($32)|0);
    FUNCTION_TABLE_viiiii[$28 & 2047]($25,$kid_name,$33,16,0);
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
  }
 } while(0);
 $36 = $1;
 $37 = (__ZN17AP4_AtomInspector12GetVerbosityEv($36)|0);
 $38 = ($37>>>0)>=(1);
 if (!($38)) {
  STACKTOP = sp;return 0;
 }
 $39 = ((($4)) + 36|0);
 $40 = (_memcmp($39,39522,16)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $81 = $1;
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($4)) + 52|0);
  $86 = (__ZNK14AP4_DataBuffer7GetDataEv($85)|0);
  $87 = ((($4)) + 52|0);
  $88 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($87)|0);
  FUNCTION_TABLE_viiiii[$84 & 2047]($81,39538,$86,$88,0);
  STACKTOP = sp;return 0;
 }
 $42 = (__Znwj(32)|0);
 $43 = ((($4)) + 52|0);
 __THREW__ = 0;
 invoke_vii(933,($42|0),($43|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $2 = $74;
  $3 = $75;
  __ZdlPv($42);
  $76 = $2;
  $77 = $3;
  ___resumeException($76|0);
  // unreachable;
 }
 $mbs = $42;
 $atom_factory = 4320;
 while(1) {
  $46 = $atom_factory;
  $47 = $mbs;
  $48 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom($46,$47,$atom)|0);
  $49 = ($48|0)==(0);
  $50 = $mbs;
  if (!($49)) {
   break;
  }
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  (FUNCTION_TABLE_iii[$53 & 2047]($50,$position)|0);
  $54 = HEAP32[$atom>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $1;
  (FUNCTION_TABLE_iii[$57 & 2047]($54,$58)|0);
  $59 = $mbs;
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $position;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  (FUNCTION_TABLE_iiii[$62 & 2047]($59,$65,$68)|0);
  $69 = HEAP32[$atom>>2]|0;
  $70 = ($69|0)==(0|0);
  if ($70) {
   continue;
  }
  $71 = HEAP32[$69>>2]|0;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vi[$73 & 2047]($69);
 }
 $78 = HEAP32[$50>>2]|0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 FUNCTION_TABLE_vi[$80 & 2047]($50);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_PsshAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(141,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_PsshAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4544;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 96|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 76|0);
   __THREW__ = 0;
   invoke_vi(486,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $8 = ((($3)) + 76|0);
   __THREW__ = 0;
   invoke_vi(486,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $11 = ((($3)) + 52|0);
   __THREW__ = 0;
   invoke_vi(486,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 52|0);
  __THREW__ = 0;
  invoke_vi(486,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN12AP4_TimsAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1953066355,$6);
 $7 = 4604;
 HEAP32[$5>>2] = $7;
 $8 = $2;
 $9 = ((($5)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($8|0),($9|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $3;
  $17 = $4;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN12AP4_TimsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_TimsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45014,$8,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TimsAtom12GetTimeScaleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_TimsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(145,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TimsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_EsdsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(934,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_EsdsAtomC2EP16AP4_EsDescriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $4 = $0;
 __ZN8AP4_AtomC2Ejjhj($4,1702061171,12,0,0);
 $5 = 4668;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 36|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($4)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($4)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_ii(935,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = ((($4)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13))|0;
  HEAP32[$16>>2] = $18;
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $2 = $19;
 $3 = $20;
 __THREW__ = 0;
 invoke_vi(706,($4|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 } else {
  $23 = $2;
  $24 = $3;
  ___resumeException($23|0);
  // unreachable;
 }
}
function __ZN12AP4_EsdsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1702061171,$8,$9,$10);
 $11 = 4668;
 HEAP32[$7>>2] = $11;
 HEAP32[$descriptor>>2] = 0;
 $12 = $4;
 __THREW__ = 0;
 $13 = (invoke_iii(936,($12|0),($descriptor|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $5 = $20;
  $6 = $21;
  __THREW__ = 0;
  invoke_vi(706,($7|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $29 = ___cxa_find_matching_catch(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  } else {
   $27 = $5;
   $28 = $6;
   ___resumeException($27|0);
   // unreachable;
  }
 }
 $16 = ($13|0)==(0);
 if (!($16)) {
  $26 = ((($7)) + 36|0);
  HEAP32[$26>>2] = 0;
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$descriptor>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $25 = 0;
 } else {
  $19 = (___dynamic_cast($17,104,1832,0)|0);
  $25 = $19;
 }
 $24 = ((($7)) + 36|0);
 HEAP32[$24>>2] = $25;
 STACKTOP = sp;return;
}
function __ZN12AP4_EsdsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4668;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_vi($10|0,($6|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_EsdsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(150,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_EsdsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = ((($3)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (FUNCTION_TABLE_iii[$11 & 2047]($8,$12)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZN12AP4_EsdsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($2)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 (FUNCTION_TABLE_iii[$10 & 2047]($7,$11)|0);
 STACKTOP = sp;return 0;
}
function __ZN27AP4_DecoderConfigDescriptorC2EhhjjjP33AP4_DecoderSpecificInfoDescriptor($this,$stream_type,$oti,$buffer_size,$max_bitrate,$avg_bitrate,$dsi) {
 $this = $this|0;
 $stream_type = $stream_type|0;
 $oti = $oti|0;
 $buffer_size = $buffer_size|0;
 $max_bitrate = $max_bitrate|0;
 $avg_bitrate = $avg_bitrate|0;
 $dsi = $dsi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream_type;
 $2 = $oti;
 $3 = $buffer_size;
 $4 = $max_bitrate;
 $5 = $avg_bitrate;
 $6 = $dsi;
 $9 = $0;
 __ZN14AP4_DescriptorC2Ehjj($9,4,2,13);
 $10 = 4728;
 HEAP32[$9>>2] = $10;
 $11 = ((($9)) + 20|0);
 $12 = $1;
 HEAP8[$11>>0] = $12;
 $13 = ((($9)) + 21|0);
 $14 = $2;
 HEAP8[$13>>0] = $14;
 $15 = ((($9)) + 22|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($9)) + 24|0);
 $17 = $3;
 HEAP32[$16>>2] = $17;
 $18 = ((($9)) + 28|0);
 $19 = $4;
 HEAP32[$18>>2] = $19;
 $20 = ((($9)) + 32|0);
 $21 = $5;
 HEAP32[$20>>2] = $21;
 $22 = ((($9)) + 36|0);
 __THREW__ = 0;
 invoke_vi(937,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $7 = $44;
  $8 = $45;
 } else {
  $25 = $6;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   STACKTOP = sp;return;
  }
  $27 = ((($9)) + 36|0);
  $28 = $6;
  __THREW__ = 0;
  (invoke_iii(938,($27|0),($28|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if (!($30)) {
   $31 = $6;
   __THREW__ = 0;
   $32 = (invoke_ii(935,($31|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $35 = ((($9)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + ($32))|0;
    HEAP32[$35>>2] = $37;
    $38 = ((($9)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    __THREW__ = 0;
    $40 = (invoke_ii(939,($39|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if (!($42)) {
     $43 = ((($9)) + 12|0);
     HEAP32[$43>>2] = $40;
     STACKTOP = sp;return;
    }
   }
  }
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $7 = $46;
  $8 = $47;
  __THREW__ = 0;
  invoke_vi(177,($22|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $54 = ___cxa_find_matching_catch(0|0)|0;
   $55 = tempRet0;
   ___clang_call_terminate($54);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($9|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $54 = ___cxa_find_matching_catch(0|0)|0;
  $55 = tempRet0;
  ___clang_call_terminate($54);
  // unreachable;
 } else {
  $52 = $7;
  $53 = $8;
  ___resumeException($52|0);
  // unreachable;
 }
}
function __ZN27AP4_DecoderConfigDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $bits = 0, $descriptor = 0, $start = 0, $substream = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp;
 $bits = sp + 40|0;
 $descriptor = sp + 8|0;
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,4,$7,$8);
 $9 = 4728;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 36|0);
 __THREW__ = 0;
 invoke_vi(937,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $4 = $76;
  $5 = $77;
 } else {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  (invoke_iii($16|0,($13|0),($start|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if ($18) {
    label = 15;
   } else {
    $19 = $1;
    $20 = ((($6)) + 21|0);
    __THREW__ = 0;
    (invoke_iii(940,($19|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 15;
    } else {
     $23 = $1;
     __THREW__ = 0;
     (invoke_iii(940,($23|0),($bits|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 15;
     } else {
      $26 = HEAP8[$bits>>0]|0;
      $27 = $26&255;
      $28 = $27 >> 2;
      $29 = $28 & 63;
      $30 = $29&255;
      $31 = ((($6)) + 20|0);
      HEAP8[$31>>0] = $30;
      $32 = HEAP8[$bits>>0]|0;
      $33 = $32&255;
      $34 = $33 & 2;
      $35 = ($34|0)!=(0);
      $36 = $35 ? 1 : 0;
      $37 = ((($6)) + 22|0);
      $38 = $36&1;
      HEAP8[$37>>0] = $38;
      $39 = $1;
      $40 = ((($6)) + 24|0);
      __THREW__ = 0;
      (invoke_iii(941,($39|0),($40|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 15;
      } else {
       $43 = $1;
       $44 = ((($6)) + 28|0);
       __THREW__ = 0;
       (invoke_iii(854,($43|0),($44|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 15;
       } else {
        $47 = $1;
        $48 = ((($6)) + 32|0);
        __THREW__ = 0;
        (invoke_iii(854,($47|0),($48|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         label = 15;
        } else {
         __THREW__ = 0;
         $51 = (invoke_ii(883,40)|0);
         $52 = __THREW__; __THREW__ = 0;
         $53 = $52&1;
         if ($53) {
          label = 15;
         } else {
          $54 = $1;
          $55 = $start;
          $56 = $55;
          $57 = HEAP32[$56>>2]|0;
          $58 = (($55) + 4)|0;
          $59 = $58;
          $60 = HEAP32[$59>>2]|0;
          $61 = (_i64Add(($57|0),($60|0),13,0)|0);
          $62 = tempRet0;
          $63 = $3;
          $64 = (($63) - 13)|0;
          __THREW__ = 0;
          invoke_viiiiii(942,($51|0),($54|0),($61|0),($62|0),($64|0),0);
          $65 = __THREW__; __THREW__ = 0;
          $66 = $65&1;
          if ($66) {
           $80 = ___cxa_find_matching_catch()|0;
           $81 = tempRet0;
           $4 = $80;
           $5 = $81;
           __ZdlPv($51);
           break;
          }
          $substream = $51;
          HEAP32[$descriptor>>2] = 0;
          while(1) {
           $67 = $substream;
           __THREW__ = 0;
           $68 = (invoke_iii(936,($67|0),($descriptor|0))|0);
           $69 = __THREW__; __THREW__ = 0;
           $70 = $69&1;
           if ($70) {
            label = 15;
            break L4;
           }
           $71 = ($68|0)==(0);
           if (!($71)) {
            break;
           }
           $72 = ((($6)) + 36|0);
           $73 = HEAP32[$descriptor>>2]|0;
           __THREW__ = 0;
           (invoke_iii(938,($72|0),($73|0))|0);
           $74 = __THREW__; __THREW__ = 0;
           $75 = $74&1;
           if ($75) {
            label = 15;
            break L4;
           }
          }
          $82 = $substream;
          $83 = HEAP32[$82>>2]|0;
          $84 = ((($83)) + 12|0);
          $85 = HEAP32[$84>>2]|0;
          __THREW__ = 0;
          invoke_vi($85|0,($82|0));
          $86 = __THREW__; __THREW__ = 0;
          $87 = $86&1;
          if ($87) {
           label = 15;
          } else {
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   $78 = ___cxa_find_matching_catch()|0;
   $79 = tempRet0;
   $4 = $78;
   $5 = $79;
  }
  __THREW__ = 0;
  invoke_vi(177,($10|0));
  $88 = __THREW__; __THREW__ = 0;
  $89 = $88&1;
  if ($89) {
   $94 = ___cxa_find_matching_catch(0|0)|0;
   $95 = tempRet0;
   ___clang_call_terminate($94);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $94 = ___cxa_find_matching_catch(0|0)|0;
  $95 = tempRet0;
  ___clang_call_terminate($94);
  // unreachable;
 } else {
  $92 = $4;
  $93 = $5;
  ___resumeException($92|0);
  // unreachable;
 }
}
function __ZN27AP4_DecoderConfigDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4728;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 (invoke_ii(943,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 36|0);
   __THREW__ = 0;
   invoke_vi(177,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 36|0);
   __THREW__ = 0;
   invoke_vi(177,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN14AP4_DescriptorD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN27AP4_DecoderConfigDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(154,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN27AP4_DecoderConfigDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $stream;
 $5 = $0;
 $6 = $1;
 $7 = ((($5)) + 21|0);
 $8 = HEAP8[$7>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($6,$8)|0);
 $9 = ((($5)) + 20|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 2;
 $13 = ((($5)) + 22|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 $16 = $15 ? 2 : 0;
 $17 = $12 | $16;
 $18 = $17 | 1;
 $19 = $18&255;
 $bits = $19;
 $20 = $1;
 $21 = $bits;
 (__ZN14AP4_ByteStream9WriteUI08Eh($20,$21)|0);
 $22 = $1;
 $23 = ((($5)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI24Ej($22,$24)|0);
 $25 = $1;
 $26 = ((($5)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($25,$27)|0);
 $28 = $1;
 $29 = ((($5)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($28,$30)|0);
 $31 = ((($5)) + 36|0);
 $32 = $1;
 __ZN24AP4_DescriptorListWriterC2ER14AP4_ByteStream($2,$32);
 __THREW__ = 0;
 (invoke_iii(944,($31|0),($2|0))|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  __ZN24AP4_DescriptorListWriterD2Ev($2);
  STACKTOP = sp;return 0;
 }
 $35 = ___cxa_find_matching_catch()|0;
 $36 = tempRet0;
 $3 = $35;
 $4 = $36;
 __THREW__ = 0;
 invoke_vi(174,($2|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $3;
  $40 = $4;
  ___resumeException($39|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN27AP4_DecoderConfigDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN14AP4_Expandable13GetHeaderSizeEv($5)|0);
 $11 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,39603,$10,$11,0);
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($5)) + 20|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 FUNCTION_TABLE_viiiii[$15 & 2047]($12,39617,$18,0,0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 21|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,39629,$25,0,0);
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($5)) + 22|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&1;
 $33 = $32&1;
 FUNCTION_TABLE_viiiii[$29 & 2047]($26,39641,$33,0,0);
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($5)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_viiiii[$37 & 2047]($34,39651,$39,0,0);
 $40 = $1;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($5)) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_viiiii[$43 & 2047]($40,42905,$45,0,0);
 $46 = $1;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($5)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_viiiii[$49 & 2047]($46,42917,$51,0,0);
 $52 = ((($5)) + 36|0);
 $53 = $1;
 __ZN27AP4_DescriptorListInspectorC2ER17AP4_AtomInspector($2,$53);
 __THREW__ = 0;
 (invoke_iii(944,($52|0),($2|0))|0);
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if (!($55)) {
  __ZN27AP4_DescriptorListInspectorD2Ev($2);
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vi[$59 & 2047]($56);
  STACKTOP = sp;return 0;
 }
 $60 = ___cxa_find_matching_catch()|0;
 $61 = tempRet0;
 $3 = $60;
 $4 = $61;
 __THREW__ = 0;
 invoke_vi(171,($2|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $3;
  $65 = $4;
  ___resumeException($64|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNK27AP4_DecoderConfigDescriptor32GetDecoderSpecificInfoDescriptorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor = sp + 20|0;
 $2 = sp + 8|0;
 $1 = $this;
 $5 = $1;
 HEAP32[$descriptor>>2] = 0;
 $6 = ((($5)) + 36|0);
 __ZN20AP4_DescriptorFinderC2Eh($2,5);
 __THREW__ = 0;
 $7 = (invoke_iiii(945,($6|0),($2|0),($descriptor|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $3 = $15;
  $4 = $16;
  __THREW__ = 0;
  invoke_vi(168,($2|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  } else {
   $21 = $3;
   $22 = $4;
   ___resumeException($21|0);
   // unreachable;
  }
 }
 __ZN20AP4_DescriptorFinderD2Ev($2);
 $result = $7;
 $10 = $result;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $12 = HEAP32[$descriptor>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $19 = 0;
 } else {
  $14 = (___dynamic_cast($12,104,376,0)|0);
  $19 = $14;
 }
 $0 = $19;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZN8AP4_ListI14AP4_DescriptorEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4880;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE3AddEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(946,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListI14AP4_DescriptorE3AddEPNS1_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN8AP4_ListI14AP4_DescriptorED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4880;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListI14AP4_DescriptorE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE16DeleteReferencesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vi[$16 & 2047]($12);
  }
  $17 = $item;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   invoke_vi(947,($17|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 9;
    break;
   }
   __ZdlPv($17);
  }
  $21 = $next;
  $item = $21;
 }
 if ((label|0) == 9) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $1 = $22;
  $2 = $23;
  __ZdlPv($17);
  $24 = $1;
  $25 = $2;
  ___resumeException($24|0);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $26 = ((($3)) + 12|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($3)) + 8|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($3)) + 4|0);
  HEAP32[$28>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN24AP4_DescriptorListWriterC2ER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorC2Ev($2);
 $3 = 4860;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI14AP4_DescriptorE5ApplyERKNS1_4Item8OperatorE($this,$op) {
 $this = $this|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $op;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $item = $4;
 while(1) {
  $5 = $item;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iii[$10 & 2047]($7,$12)|0);
  $13 = $item;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $item = $15;
 }
 STACKTOP = sp;return 0;
}
function __ZN24AP4_DescriptorListWriterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN27AP4_DescriptorListInspectorC2ER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorC2Ev($2);
 $3 = 4840;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN27AP4_DescriptorListInspectorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN20AP4_DescriptorFinderC2Eh($this,$tag) {
 $this = $this|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $tag;
 $2 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderC2Ev($2);
 $3 = 4820;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI14AP4_DescriptorE4FindERKNS1_4Item6FinderERPS0_($this,$finder,$data) {
 $this = $this|0;
 $finder = $finder|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $finder;
 $3 = $data;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $item = $6;
 while(1) {
  $7 = $item;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $item;
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$12 & 2047]($9,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $item;
  if ($16) {
   label = 4;
   break;
  }
  $20 = ((($17)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $item = $21;
 }
 if ((label|0) == 4) {
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $22 = $3;
  HEAP32[$22>>2] = 0;
  $0 = -11;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZN20AP4_DescriptorFinderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE4ItemC2EPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE3AddEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI14AP4_DescriptorE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(947,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI14AP4_DescriptorED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(177,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK27AP4_DecoderConfigDescriptor13GetAvgBitrateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetMaxBitrateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetBufferSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK27AP4_DecoderConfigDescriptor13GetStreamTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK27AP4_DecoderConfigDescriptor23GetObjectTypeIndicationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 21|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14AP4_Descriptor6GetTagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 STACKTOP = sp;return ($4|0);
}
function __ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN14AP4_Descriptor6GetTagEv($3)|0);
 $5 = $4&255;
 $6 = ((($2)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($5|0)==($8|0);
 $10 = $9 ? 0 : -1;
 STACKTOP = sp;return ($10|0);
}
function __ZN20AP4_DescriptorFinderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(168,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(166,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item6FinderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4800;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 (FUNCTION_TABLE_iii[$6 & 2047]($3,$8)|0);
 STACKTOP = sp;return 0;
}
function __ZN27AP4_DescriptorListInspectorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(171,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$6 & 2047]($3,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN24AP4_DescriptorListWriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(174,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(164,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4780;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN25AP4_IpmpDescriptorPointerC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,10,$7,$8);
 $9 = 4896;
 HEAP32[$6>>2] = $9;
 $10 = $1;
 $11 = ((($6)) + 20|0);
 __THREW__ = 0;
 (invoke_iii(940,($10|0),($11|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = ((($6)) + 20|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(255);
  $18 = $3;
  $19 = ($18>>>0)>=(5);
  $or$cond = $17 & $19;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $20 = $1;
  $21 = ((($6)) + 22|0);
  __THREW__ = 0;
  (invoke_iii(866,($20|0),($21|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = $1;
   $25 = ((($6)) + 24|0);
   __THREW__ = 0;
   (invoke_iii(866,($24|0),($25|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    STACKTOP = sp;return;
   }
  }
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $4 = $28;
 $5 = $29;
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  $32 = $4;
  $33 = $5;
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN25AP4_IpmpDescriptorPointer11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = HEAP8[$4>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($3,$5)|0);
 $6 = ((($2)) + 20|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(255);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = $1;
 $11 = ((($2)) + 22|0);
 $12 = HEAP16[$11>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($10,$12)|0);
 $13 = $1;
 $14 = ((($2)) + 24|0);
 $15 = HEAP16[$14>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($13,$15)|0);
 STACKTOP = sp;return 0;
}
function __ZN25AP4_IpmpDescriptorPointer7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $8 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,39906,$7,$8,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 20|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,39929,$15,0,0);
 $16 = ((($2)) + 20|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(255);
 if (!($19)) {
  $34 = $1;
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vi[$37 & 2047]($34);
  STACKTOP = sp;return 0;
 }
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($2)) + 22|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 FUNCTION_TABLE_viiiii[$23 & 2047]($20,39947,$26,0,0);
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 24|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 FUNCTION_TABLE_viiiii[$30 & 2047]($27,39967,$33,0,0);
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_vi[$37 & 2047]($34);
 STACKTOP = sp;return 0;
}
function __ZN18AP4_IpmpDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $fields_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,11,$7,$8);
 $9 = 4924;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 24|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($6)) + 42|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($6)) + 43|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($6)) + 44|0);
 __THREW__ = 0;
 invoke_vi(860,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $4 = $58;
  $5 = $59;
 } else {
  $16 = ((($6)) + 52|0);
  __THREW__ = 0;
  invoke_vi(847,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $60 = ___cxa_find_matching_catch()|0;
   $61 = tempRet0;
   $4 = $60;
   $5 = $61;
  } else {
   $19 = $1;
   $20 = ((($6)) + 20|0);
   __THREW__ = 0;
   (invoke_iii(940,($19|0),($20|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   do {
    if (!($22)) {
     $23 = $1;
     $24 = ((($6)) + 22|0);
     __THREW__ = 0;
     (invoke_iii(866,($23|0),($24|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      $27 = ((($6)) + 26|0);
      ;HEAP16[$27>>1]=0|0;HEAP16[$27+2>>1]=0|0;HEAP16[$27+4>>1]=0|0;HEAP16[$27+6>>1]=0|0;HEAP16[$27+8>>1]=0|0;HEAP16[$27+10>>1]=0|0;HEAP16[$27+12>>1]=0|0;HEAP16[$27+14>>1]=0|0;
      $28 = ((($6)) + 20|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = ($30|0)==(255);
      if ($31) {
       $32 = ((($6)) + 22|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = $33&65535;
       $35 = ($34|0)==(65535);
       if ($35) {
        $fields_size = 6;
        $36 = $1;
        $37 = ((($6)) + 24|0);
        __THREW__ = 0;
        (invoke_iii(866,($36|0),($37|0))|0);
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         break;
        }
        $40 = $1;
        $41 = ((($6)) + 26|0);
        __THREW__ = 0;
        (invoke_iiii(851,($40|0),($41|0),16)|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         break;
        }
        $44 = $1;
        $45 = ((($6)) + 42|0);
        __THREW__ = 0;
        (invoke_iii(940,($44|0),($45|0))|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         break;
        }
        $48 = ((($6)) + 42|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = $49&255;
        $51 = ($50|0)>(0);
        if ($51) {
         $52 = $1;
         $53 = ((($6)) + 43|0);
         __THREW__ = 0;
         (invoke_iii(940,($52|0),($53|0))|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = $fields_size;
         $57 = (($56) + 1)|0;
         $fields_size = $57;
        }
        $66 = $fields_size;
        $67 = $3;
        $68 = ($66>>>0)<($67>>>0);
        if (!($68)) {
         STACKTOP = sp;return;
        }
        $69 = ((($6)) + 52|0);
        $70 = $3;
        $71 = $fields_size;
        $72 = (($70) - ($71))|0;
        __THREW__ = 0;
        (invoke_iii(848,($69|0),($72|0))|0);
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         break;
        }
        $75 = $1;
        $76 = ((($6)) + 52|0);
        __THREW__ = 0;
        $77 = (invoke_ii(849,($76|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         break;
        }
        $80 = $3;
        $81 = $fields_size;
        $82 = (($80) - ($81))|0;
        __THREW__ = 0;
        (invoke_iiii(851,($75|0),($77|0),($82|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         break;
        }
        STACKTOP = sp;return;
       }
      }
      $85 = ((($6)) + 22|0);
      $86 = HEAP16[$85>>1]|0;
      $87 = $86&65535;
      $88 = ($87|0)==(0);
      $89 = $3;
      $90 = ($89>>>0)>(3);
      if (!($88)) {
       if (!($90)) {
        STACKTOP = sp;return;
       }
       $115 = ((($6)) + 52|0);
       $116 = $3;
       $117 = (($116) - 3)|0;
       __THREW__ = 0;
       (invoke_iii(848,($115|0),($117|0))|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        break;
       }
       $120 = $1;
       $121 = ((($6)) + 52|0);
       __THREW__ = 0;
       $122 = (invoke_ii(849,($121|0))|0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        break;
       }
       $125 = $3;
       $126 = (($125) - 3)|0;
       __THREW__ = 0;
       (invoke_iiii(851,($120|0),($122|0),($126|0))|0);
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        break;
       }
       STACKTOP = sp;return;
      }
      if (!($90)) {
       STACKTOP = sp;return;
      }
      $91 = $3;
      $92 = (1 + ($91))|0;
      $93 = (($92) - 3)|0;
      __THREW__ = 0;
      $94 = (invoke_ii(867,($93|0))|0);
      $95 = __THREW__; __THREW__ = 0;
      $96 = $95&1;
      if (!($96)) {
       $buffer = $94;
       $97 = $3;
       $98 = (($97) - 3)|0;
       $99 = $buffer;
       $100 = (($99) + ($98)|0);
       HEAP8[$100>>0] = 0;
       $101 = $1;
       $102 = $buffer;
       $103 = $3;
       $104 = (($103) - 3)|0;
       __THREW__ = 0;
       (invoke_iiii(851,($101|0),($102|0),($104|0))|0);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if (!($106)) {
        $107 = ((($6)) + 44|0);
        $108 = $buffer;
        $109 = $3;
        $110 = (($109) - 3)|0;
        __THREW__ = 0;
        invoke_viii(948,($107|0),($108|0),($110|0));
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if (!($112)) {
         $113 = $buffer;
         $114 = ($113|0)==(0|0);
         if ($114) {
          STACKTOP = sp;return;
         }
         __ZdaPv($113);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   } while(0);
   $62 = ___cxa_find_matching_catch()|0;
   $63 = tempRet0;
   $4 = $62;
   $5 = $63;
   __THREW__ = 0;
   invoke_vi(486,($16|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $135 = ___cxa_find_matching_catch(0|0)|0;
    $136 = tempRet0;
    ___clang_call_terminate($135);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($13|0));
  $129 = __THREW__; __THREW__ = 0;
  $130 = $129&1;
  if ($130) {
   $135 = ___cxa_find_matching_catch(0|0)|0;
   $136 = tempRet0;
   ___clang_call_terminate($135);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $135 = ___cxa_find_matching_catch(0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $133 = $4;
  $134 = $5;
  ___resumeException($133|0);
  // unreachable;
 }
}
function __ZN18AP4_IpmpDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = HEAP8[$4>>0]|0;
 (__ZN14AP4_ByteStream9WriteUI08Eh($3,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 22|0);
 $8 = HEAP16[$7>>1]|0;
 (__ZN14AP4_ByteStream9WriteUI16Et($6,$8)|0);
 $9 = ((($2)) + 20|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(255);
 if ($12) {
  $13 = ((($2)) + 22|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($15|0)==(65535);
  if ($16) {
   $17 = $1;
   $18 = ((($2)) + 24|0);
   $19 = HEAP16[$18>>1]|0;
   (__ZN14AP4_ByteStream9WriteUI16Et($17,$19)|0);
   $20 = $1;
   $21 = ((($2)) + 26|0);
   (__ZN14AP4_ByteStream5WriteEPKvj($20,$21,16)|0);
   $22 = $1;
   $23 = ((($2)) + 42|0);
   $24 = HEAP8[$23>>0]|0;
   (__ZN14AP4_ByteStream9WriteUI08Eh($22,$24)|0);
   $25 = ((($2)) + 42|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)>(0);
   if ($28) {
    $29 = $1;
    $30 = ((($2)) + 43|0);
    $31 = HEAP8[$30>>0]|0;
    (__ZN14AP4_ByteStream9WriteUI08Eh($29,$31)|0);
   }
   $32 = ((($2)) + 52|0);
   $33 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    STACKTOP = sp;return 0;
   }
   $35 = $1;
   $36 = ((($2)) + 52|0);
   $37 = (__ZNK14AP4_DataBuffer7GetDataEv($36)|0);
   $38 = ((($2)) + 52|0);
   $39 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($38)|0);
   (__ZN14AP4_ByteStream5WriteEPKvj($35,$37,$39)|0);
   STACKTOP = sp;return 0;
  }
 }
 $40 = ((($2)) + 22|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = ($42|0)==(0);
 $44 = $1;
 if ($43) {
  $45 = ((($2)) + 44|0);
  $46 = (__ZNK10AP4_String8GetCharsEv($45)|0);
  $47 = ((($2)) + 44|0);
  $48 = (__ZNK10AP4_String9GetLengthEv($47)|0);
  $49 = (($48) + 1)|0;
  (__ZN14AP4_ByteStream5WriteEPKvj($44,$46,$49)|0);
  STACKTOP = sp;return 0;
 } else {
  $50 = ((($2)) + 52|0);
  $51 = (__ZNK14AP4_DataBuffer7GetDataEv($50)|0);
  $52 = ((($2)) + 52|0);
  $53 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($52)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($44,$51,$53)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN18AP4_IpmpDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $8 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,39978,$7,$8,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 20|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,39929,$15,0,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 22|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 FUNCTION_TABLE_viiiii[$19 & 2047]($16,39994,$22,0,1);
 $23 = ((($2)) + 20|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(255);
 if ($26) {
  $27 = ((($2)) + 22|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = ($29|0)==(65535);
  if ($30) {
   $31 = $1;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($2)) + 24|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   FUNCTION_TABLE_viiiii[$34 & 2047]($31,39947,$37,0,0);
   $38 = $1;
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($2)) + 26|0);
   FUNCTION_TABLE_viiiii[$41 & 2047]($38,40005,$42,16,1);
   $43 = $1;
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($2)) + 42|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   FUNCTION_TABLE_viiiii[$46 & 2047]($43,40017,$49,0,0);
   $50 = ((($2)) + 42|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ($52|0)>(0);
   if (!($53)) {
    $76 = $1;
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 20|0);
    $79 = HEAP32[$78>>2]|0;
    FUNCTION_TABLE_vi[$79 & 2047]($76);
    STACKTOP = sp;return 0;
   }
   $54 = $1;
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 24|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($2)) + 43|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   FUNCTION_TABLE_viiiii[$57 & 2047]($54,40034,$60,0,0);
   $76 = $1;
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($77)) + 20|0);
   $79 = HEAP32[$78>>2]|0;
   FUNCTION_TABLE_vi[$79 & 2047]($76);
   STACKTOP = sp;return 0;
  }
 }
 $61 = ((($2)) + 22|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = ($63|0)==(0);
 $65 = $1;
 if ($64) {
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 32|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($2)) + 44|0);
  $70 = (__ZNK10AP4_String8GetCharsEv($69)|0);
  FUNCTION_TABLE_viiii[$68 & 2047]($65,40047,$70,0);
  $76 = $1;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vi[$79 & 2047]($76);
  STACKTOP = sp;return 0;
 } else {
  $71 = HEAP32[$65>>2]|0;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($2)) + 52|0);
  $75 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($74)|0);
  FUNCTION_TABLE_viiiii[$73 & 2047]($65,40051,$75,0,0);
  $76 = $1;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vi[$79 & 2047]($76);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN18AP4_IpmpDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(183,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN18AP4_IpmpDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4924;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 44|0);
   __THREW__ = 0;
   invoke_vi(864,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 44|0);
   __THREW__ = 0;
   invoke_vi(864,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN14AP4_DescriptorD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN25AP4_IpmpDescriptorPointerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(179,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN25AP4_IpmpDescriptorPointerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_DescriptorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14AP4_ByteStream4ReadEPvj($this,$buffer,$bytes_to_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_read = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_read = sp + 4|0;
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_read;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 while(1) {
  $7 = $3;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = $3;
  $14 = (FUNCTION_TABLE_iiiii[$11 & 2047]($4,$12,$13,$bytes_read)|0);
  $result = $14;
  $15 = $result;
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 5;
   break;
  }
  $18 = HEAP32[$bytes_read>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 7;
   break;
  }
  $20 = HEAP32[$bytes_read>>2]|0;
  $21 = $3;
  $22 = ($20>>>0)<=($21>>>0);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = HEAP32[$bytes_read>>2]|0;
  $24 = $3;
  $25 = (($24) - ($23))|0;
  $3 = $25;
  $26 = $2;
  $27 = HEAP32[$bytes_read>>2]|0;
  $28 = (($26) + ($27)|0);
  $2 = $28;
 }
 if ((label|0) == 5) {
  $17 = $result;
  $0 = $17;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 7) {
  $0 = -13;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 9) {
  ___assert_fail((40117|0),(40145|0),58,(40179|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream5WriteEPKvj($this,$buffer,$bytes_to_write) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_written = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes_written = sp + 4|0;
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_write;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 while(1) {
  $7 = $3;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = $3;
  $14 = (FUNCTION_TABLE_iiiii[$11 & 2047]($4,$12,$13,$bytes_written)|0);
  $result = $14;
  $15 = $result;
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 5;
   break;
  }
  $18 = HEAP32[$bytes_written>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 7;
   break;
  }
  $20 = HEAP32[$bytes_written>>2]|0;
  $21 = $3;
  $22 = ($20>>>0)<=($21>>>0);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = HEAP32[$bytes_written>>2]|0;
  $24 = $3;
  $25 = (($24) - ($23))|0;
  $3 = $25;
  $26 = $2;
  $27 = HEAP32[$bytes_written>>2]|0;
  $28 = (($26) + ($27)|0);
  $2 = $28;
 }
 if ((label|0) == 5) {
  $17 = $result;
  $0 = $17;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 7) {
  $0 = -13;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 9) {
  ___assert_fail((40184|0),(40145|0),81,(44780|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream11WriteStringEPKc($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $string_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   $6 = $2;
   $7 = (_strlen($6)|0);
   $string_length = $7;
   $8 = $string_length;
   $9 = ($8|0)==(0);
   if ($9) {
    $0 = 0;
    break;
   } else {
    $10 = $2;
    $11 = $string_length;
    $12 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$10,$11)|0);
    $0 = $12;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function __ZN14AP4_ByteStream11WriteDoubleEd($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __Z21AP4_BytesFromDoubleBEPhd($buffer,$3);
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($2,$buffer,8)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN14AP4_ByteStream9WriteUI64Ey($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $buffer = sp + 16|0;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 __Z21AP4_BytesFromUInt64BEPhy($buffer,$11,$14);
 $15 = (__ZN14AP4_ByteStream5WriteEPKvj($8,$buffer,8)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZN14AP4_ByteStream9WriteUI32Ej($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 8|0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __Z21AP4_BytesFromUInt32BEPhj($buffer,$3);
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($2,$buffer,4)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN14AP4_ByteStream9WriteUI24Ej($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 8|0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __Z21AP4_BytesFromUInt24BEPhj($buffer,$3);
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($2,$buffer,3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN14AP4_ByteStream9WriteUI16Et($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 6|0;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __Z21AP4_BytesFromUInt16BEPht($buffer,$3);
 $4 = (__ZN14AP4_ByteStream5WriteEPKvj($2,$buffer,2)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN14AP4_ByteStream9WriteUI08Eh($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $this;
 HEAP8[$1>>0] = $value;
 $2 = $0;
 $3 = (__ZN14AP4_ByteStream5WriteEPKvj($2,$1,1)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN14AP4_ByteStream8ReadUI64ERy($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,8)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = $7;
  $9 = $8;
  HEAP32[$9>>2] = 0;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = 0;
  $12 = $result;
  $0 = $12;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $13 = (__Z19AP4_BytesToUInt64BEPKh($buffer)|0);
  $14 = tempRet0;
  $15 = $2;
  $16 = $15;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $14;
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream10ReadDoubleERd($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,8)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  HEAPF64[$7>>3] = 0.0;
  $8 = $result;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = (+__Z19AP4_BytesToDoubleBEPKh($buffer));
  $10 = $2;
  HEAPF64[$10>>3] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI32ERj($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,4)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  HEAP32[$7>>2] = 0;
  $8 = $result;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = (__Z19AP4_BytesToUInt32BEPKh($buffer)|0);
  $10 = $2;
  HEAP32[$10>>2] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI24ERj($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,3)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  HEAP32[$7>>2] = 0;
  $8 = $result;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = (__Z19AP4_BytesToUInt24BEPKh($buffer)|0);
  $10 = $2;
  HEAP32[$10>>2] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI16ERt($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,2)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  HEAP16[$7>>1] = 0;
  $8 = $result;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = (__Z19AP4_BytesToUInt16BEPKh($buffer)|0);
  $10 = $2;
  HEAP16[$10>>1] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream8ReadUI08ERh($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZN14AP4_ByteStream4ReadEPvj($3,$buffer,1)|0);
 $result = $4;
 $5 = $result;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  HEAP8[$7>>0] = 0;
  $8 = $result;
  $0 = $8;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = HEAP8[$buffer>>0]|0;
  $10 = $2;
  HEAP8[$10>>0] = $9;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($this,$string) {
 $this = $this|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $c = 0, $result = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 20|0;
 $c = sp + 52|0;
 $1 = $this;
 $2 = $string;
 $6 = $1;
 __ZN14AP4_DataBufferC2Ev($buffer);
 $size = 0;
 HEAP8[$c>>0] = 0;
 while(1) {
  __THREW__ = 0;
  $7 = (invoke_iii(940,($6|0),($c|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   break;
  }
  $result = $7;
  $10 = $result;
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
   break;
  }
  $17 = $size;
  $18 = (($17) + 1)|0;
  __THREW__ = 0;
  (invoke_iii(848,($buffer|0),($18|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   break;
  }
  $21 = HEAP8[$c>>0]|0;
  $22 = $size;
  __THREW__ = 0;
  $23 = (invoke_ii(849,($buffer|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   break;
  }
  $26 = (($23) + ($22)|0);
  HEAP8[$26>>0] = $21;
  $27 = $size;
  $28 = (($27) + 1)|0;
  $size = $28;
  $29 = HEAP8[$c>>0]|0;
  $30 = ($29<<24>>24)!=(0);
  if (!($30)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 4) {
  $12 = $result;
  $0 = $12;
  $5 = 1;
  __ZN14AP4_DataBufferD2Ev($buffer);
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 if ((label|0) == 9) {
  $31 = $2;
  __THREW__ = 0;
  $32 = (invoke_ii(861,($buffer|0))|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $35 = $size;
   __THREW__ = 0;
   invoke_viii(948,($31|0),($32|0),($35|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    $0 = 0;
    $5 = 1;
    __ZN14AP4_DataBufferD2Ev($buffer);
    $38 = $0;
    STACKTOP = sp;return ($38|0);
   }
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __THREW__ = 0;
 invoke_vi(486,($buffer|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $3;
  $40 = $4;
  ___resumeException($39|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN14AP4_ByteStream6CopyToERS_y($this,$stream,$0,$1) {
 $this = $this|0;
 $stream = $stream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $bytes_read = 0, $bytes_to_read = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $buffer = sp + 32|0;
 $bytes_read = sp + 16|0;
 $3 = $this;
 $4 = $stream;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $3;
 while(1) {
  $11 = $5;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)!=(0);
  $18 = ($16|0)!=(0);
  $19 = $17 | $18;
  if (!($19)) {
   label = 12;
   break;
  }
  $20 = $5;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25>>>0)>(0);
  $27 = ($22>>>0)>=(65536);
  $28 = ($25|0)==(0);
  $29 = $28 & $27;
  $30 = $26 | $29;
  if ($30) {
   $bytes_to_read = 65536;
  } else {
   $31 = $5;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $bytes_to_read = $33;
  }
  $37 = HEAP32[$10>>2]|0;
  $38 = ((($37)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $bytes_to_read;
  $41 = (FUNCTION_TABLE_iiiii[$39 & 2047]($10,$buffer,$40,$bytes_read)|0);
  $result = $41;
  $42 = $result;
  $43 = ($42|0)!=(0);
  if ($43) {
   label = 7;
   break;
  }
  $45 = HEAP32[$bytes_read>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $4;
   $48 = HEAP32[$bytes_read>>2]|0;
   $49 = (__ZN14AP4_ByteStream5WriteEPKvj($47,$buffer,$48)|0);
   $result = $49;
   $50 = $result;
   $51 = ($50|0)!=(0);
   if ($51) {
    label = 10;
    break;
   }
  }
  $53 = HEAP32[$bytes_read>>2]|0;
  $54 = $5;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (_i64Subtract(($56|0),($59|0),($53|0),0)|0);
  $61 = tempRet0;
  $62 = $5;
  $63 = $62;
  HEAP32[$63>>2] = $60;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $61;
 }
 if ((label|0) == 7) {
  $44 = $result;
  $2 = $44;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 10) {
  $52 = $result;
  $2 = $52;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 12) {
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function __ZN13AP4_SubStreamC2ER14AP4_ByteStreamyy($this,$container,$0,$1,$2,$3) {
 $this = $this|0;
 $container = $container|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 8|0;
 $7 = sp;
 $4 = $this;
 $5 = $container;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $2;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $3;
 $18 = $4;
 __ZN14AP4_ByteStreamC2Ev($18);
 $19 = 4952;
 HEAP32[$18>>2] = $19;
 $20 = ((($18)) + 4|0);
 $21 = $5;
 HEAP32[$20>>2] = $21;
 $22 = ((($18)) + 8|0);
 $23 = $6;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $22;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = ((($18)) + 16|0);
 $34 = $7;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $33;
 $41 = $40;
 HEAP32[$41>>2] = $36;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = ((($18)) + 24|0);
 $45 = $44;
 $46 = $45;
 HEAP32[$46>>2] = 0;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = 0;
 $49 = ((($18)) + 32|0);
 HEAP32[$49>>2] = 1;
 $50 = ((($18)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 __THREW__ = 0;
 invoke_vi($54|0,($51|0));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 $8 = $57;
 $9 = $58;
 __THREW__ = 0;
 invoke_vi(207,($18|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $63 = ___cxa_find_matching_catch(0|0)|0;
  $64 = tempRet0;
  ___clang_call_terminate($63);
  // unreachable;
 } else {
  $61 = $8;
  $62 = $9;
  ___resumeException($61|0);
  // unreachable;
 }
}
function __ZN13AP4_SubStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4952;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_vi($9|0,($6|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __ZN14AP4_ByteStreamD2Ev($3);
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __THREW__ = 0;
 invoke_vi(207,($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN13AP4_SubStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(187,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN13AP4_SubStream11ReadPartialEPvjRj($this,$buffer,$bytes_to_read,$bytes_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 $bytes_read = $bytes_read|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_read;
 $4 = $bytes_read;
 $5 = $1;
 $6 = $4;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $9 = ((($5)) + 24|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = (_i64Add(($12|0),($15|0),($16|0),0)|0);
 $18 = tempRet0;
 $19 = ((($5)) + 16|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($18>>>0)>($25>>>0);
 $27 = ($17>>>0)>($22>>>0);
 $28 = ($18|0)==($25|0);
 $29 = $28 & $27;
 $30 = $26 | $29;
 if ($30) {
  $31 = ((($5)) + 16|0);
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($5)) + 24|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (_i64Subtract(($34|0),($37|0),($41|0),($44|0))|0);
  $46 = tempRet0;
  $3 = $45;
 }
 $47 = $3;
 $48 = ($47|0)==(0);
 if ($48) {
  $0 = -7;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $49 = ((($5)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($5)) + 8|0);
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($5)) + 24|0);
 $62 = $61;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (_i64Add(($57|0),($60|0),($64|0),($67|0))|0);
 $69 = tempRet0;
 $70 = (FUNCTION_TABLE_iiii[$53 & 2047]($50,$68,$69)|0);
 $result = $70;
 $71 = $result;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $result;
  $0 = $73;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $74 = ((($5)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $2;
 $80 = $3;
 $81 = $4;
 $82 = (FUNCTION_TABLE_iiiii[$78 & 2047]($75,$79,$80,$81)|0);
 $result = $82;
 $83 = $result;
 $84 = ($83|0)==(0);
 if ($84) {
  $85 = $4;
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($5)) + 24|0);
  $88 = $87;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 4)|0;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (_i64Add(($90|0),($93|0),($86|0),0)|0);
  $95 = tempRet0;
  $96 = $87;
  $97 = $96;
  HEAP32[$97>>2] = $94;
  $98 = (($96) + 4)|0;
  $99 = $98;
  HEAP32[$99>>2] = $95;
 }
 $100 = $result;
 $0 = $100;
 $101 = $0;
 STACKTOP = sp;return ($101|0);
}
function __ZN13AP4_SubStream12WritePartialEPKvjRj($this,$buffer,$bytes_to_write,$bytes_written) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 $bytes_written = $bytes_written|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_write;
 $4 = $bytes_written;
 $5 = $1;
 $6 = $4;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $9 = ((($5)) + 24|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = (_i64Add(($12|0),($15|0),($16|0),0)|0);
 $18 = tempRet0;
 $19 = ((($5)) + 16|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($18>>>0)>($25>>>0);
 $27 = ($17>>>0)>($22>>>0);
 $28 = ($18|0)==($25|0);
 $29 = $28 & $27;
 $30 = $26 | $29;
 if ($30) {
  $31 = ((($5)) + 16|0);
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($5)) + 24|0);
  $39 = $38;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (_i64Subtract(($34|0),($37|0),($41|0),($44|0))|0);
  $46 = tempRet0;
  $3 = $45;
 }
 $47 = $3;
 $48 = ($47|0)==(0);
 if ($48) {
  $0 = -7;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $49 = ((($5)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($5)) + 8|0);
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($5)) + 24|0);
 $62 = $61;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (_i64Add(($57|0),($60|0),($64|0),($67|0))|0);
 $69 = tempRet0;
 $70 = (FUNCTION_TABLE_iiii[$53 & 2047]($50,$68,$69)|0);
 $result = $70;
 $71 = $result;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $result;
  $0 = $73;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $74 = ((($5)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 20|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $2;
 $80 = $3;
 $81 = $4;
 $82 = (FUNCTION_TABLE_iiiii[$78 & 2047]($75,$79,$80,$81)|0);
 $result = $82;
 $83 = $result;
 $84 = ($83|0)==(0);
 if ($84) {
  $85 = $4;
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($5)) + 24|0);
  $88 = $87;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 4)|0;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (_i64Add(($90|0),($93|0),($86|0),0)|0);
  $95 = tempRet0;
  $96 = $87;
  $97 = $96;
  HEAP32[$97>>2] = $94;
  $98 = (($96) + 4)|0;
  $99 = $98;
  HEAP32[$99>>2] = $95;
 }
 $100 = $result;
 $0 = $100;
 $101 = $0;
 STACKTOP = sp;return ($101|0);
}
function __ZN13AP4_SubStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $this;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($9)) + 24|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($12|0)==($19|0);
 $24 = ($15|0)==($22|0);
 $25 = $23 & $24;
 if ($25) {
  $2 = 0;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 $26 = $4;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($9)) + 16|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($31>>>0)>($38>>>0);
 $40 = ($28>>>0)>($35>>>0);
 $41 = ($31|0)==($38|0);
 $42 = $41 & $40;
 $43 = $39 | $42;
 if ($43) {
  $2 = -1;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 } else {
  $44 = $4;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($9)) + 24|0);
  $51 = $50;
  $52 = $51;
  HEAP32[$52>>2] = $46;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = $49;
  $2 = 0;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function __ZN13AP4_SubStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN13AP4_SubStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($4|0)!=(0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vi[$9 & 2047]($1);
 STACKTOP = sp;return;
}
function __ZN20AP4_MemoryByteStreamC2Ej($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $4 = $0;
 __ZN14AP4_ByteStreamC2Ev($4);
 $5 = 5004;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 8|0);
 HEAP8[$6>>0] = 1;
 $7 = ((($4)) + 16|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = ((($4)) + 24|0);
 HEAP32[$12>>2] = 1;
 __THREW__ = 0;
 $13 = (invoke_ii(883,20)|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if ($15) {
   label = 6;
  } else {
   $16 = $1;
   __THREW__ = 0;
   invoke_vii(949,($13|0),($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $2 = $33;
    $3 = $34;
    __ZdlPv($13);
    break;
   }
   $19 = ((($4)) + 4|0);
   HEAP32[$19>>2] = $13;
   $20 = ((($4)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   $22 = (invoke_ii(849,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 6;
   } else {
    $25 = $1;
    _memset(($22|0),0,($25|0))|0;
    $26 = ((($4)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $1;
    __THREW__ = 0;
    (invoke_iii(848,($27|0),($28|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 6;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $2 = $31;
  $3 = $32;
 }
 __THREW__ = 0;
 invoke_vi(207,($4|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  $37 = $2;
  $38 = $3;
  ___resumeException($37|0);
  // unreachable;
 }
}
function __ZN20AP4_MemoryByteStreamC2ER14AP4_DataBuffer($this,$data_buffer) {
 $this = $this|0;
 $data_buffer = $data_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data_buffer;
 $2 = $0;
 __ZN14AP4_ByteStreamC2Ev($2);
 $3 = 5004;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($2)) + 8|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($2)) + 16|0);
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = ((($2)) + 24|0);
 HEAP32[$12>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN20AP4_MemoryByteStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5004;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if (!($7)) {
  __ZN14AP4_ByteStreamD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  __ZN14AP4_ByteStreamD2Ev($3);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __THREW__ = 0;
 invoke_vi($13|0,($9|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZN14AP4_ByteStreamD2Ev($3);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $1 = $16;
 $2 = $17;
 __THREW__ = 0;
 invoke_vi(207,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN20AP4_MemoryByteStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(198,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN20AP4_MemoryByteStream11ReadPartialEPvjRj($this,$buffer,$bytes_to_read,$bytes_read) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_read = $bytes_to_read|0;
 $bytes_read = $bytes_read|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_read;
 $4 = $bytes_read;
 $5 = $1;
 $6 = $4;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $9 = ((($5)) + 16|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = (_i64Add(($12|0),($15|0),($16|0),0)|0);
 $18 = tempRet0;
 $19 = ((($5)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($20)|0);
 $22 = ($18>>>0)>(0);
 $23 = ($17>>>0)>($21>>>0);
 $24 = ($18|0)==(0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 if ($26) {
  $27 = ((($5)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($28)|0);
  $30 = ((($5)) + 16|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_i64Subtract(($29|0),0,($33|0),($36|0))|0);
  $38 = tempRet0;
  $3 = $37;
 }
 $39 = $3;
 $40 = ($39|0)==(0);
 if ($40) {
  $0 = -7;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 } else {
  $41 = $2;
  $42 = ((($5)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (__ZNK14AP4_DataBuffer7GetDataEv($43)|0);
  $45 = ((($5)) + 16|0);
  $46 = $45;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($44) + ($48)|0);
  $53 = $3;
  _memcpy(($41|0),($52|0),($53|0))|0;
  $54 = $3;
  $55 = ((($5)) + 16|0);
  $56 = $55;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (_i64Add(($58|0),($61|0),($54|0),0)|0);
  $63 = tempRet0;
  $64 = $55;
  $65 = $64;
  HEAP32[$65>>2] = $62;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = $63;
  $68 = $3;
  $69 = $4;
  HEAP32[$69>>2] = $68;
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZN20AP4_MemoryByteStream12WritePartialEPKvjRj($this,$buffer,$bytes_to_write,$bytes_written) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytes_to_write = $bytes_to_write|0;
 $bytes_written = $bytes_written|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $result = 0, $space_needed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytes_to_write;
 $4 = $bytes_written;
 $5 = $1;
 $6 = $4;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $9 = ((($5)) + 16|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = (_i64Add(($12|0),($15|0),($16|0),0)|0);
 $18 = tempRet0;
 $19 = ($18>>>0)>(0);
 $20 = ($17>>>0)>(67108864);
 $21 = ($18|0)==(0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 if ($23) {
  $0 = -12;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $24 = ((($5)) + 16|0);
 $25 = $24;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = (_i64Add(($27|0),($30|0),($31|0),0)|0);
 $33 = tempRet0;
 $space_needed = $32;
 $34 = ((($5)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $space_needed;
 $37 = (__ZN14AP4_DataBuffer7ReserveEj($35,$36)|0);
 $result = $37;
 $38 = $result;
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = $space_needed;
  $41 = ((($5)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($42)|0);
  $44 = ($40>>>0)>($43>>>0);
  if ($44) {
   $45 = ((($5)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $space_needed;
   (__ZN14AP4_DataBuffer11SetDataSizeEj($46,$47)|0);
  }
 } else {
  $48 = ((($5)) + 16|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  $56 = (_i64Add(($51|0),($54|0),($55|0),0)|0);
  $57 = tempRet0;
  $58 = ((($5)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($59)|0);
  $61 = ($57>>>0)>(0);
  $62 = ($56>>>0)>($60>>>0);
  $63 = ($57|0)==(0);
  $64 = $63 & $62;
  $65 = $61 | $64;
  if ($65) {
   $66 = ((($5)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($67)|0);
   $69 = ((($5)) + 16|0);
   $70 = $69;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (_i64Subtract(($68|0),0,($72|0),($75|0))|0);
   $77 = tempRet0;
   $3 = $76;
  }
 }
 $78 = $3;
 $79 = ($78|0)==(0);
 if ($79) {
  $0 = -7;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 } else {
  $80 = ((($5)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (__ZN14AP4_DataBuffer7UseDataEv($81)|0);
  $83 = ((($5)) + 16|0);
  $84 = $83;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($82) + ($86)|0);
  $91 = $2;
  $92 = $3;
  _memcpy(($90|0),($91|0),($92|0))|0;
  $93 = $3;
  $94 = ((($5)) + 16|0);
  $95 = $94;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (_i64Add(($97|0),($100|0),($93|0),0)|0);
  $102 = tempRet0;
  $103 = $94;
  $104 = $103;
  HEAP32[$104>>2] = $101;
  $105 = (($103) + 4)|0;
  $106 = $105;
  HEAP32[$106>>2] = $102;
  $107 = $3;
  $108 = $4;
  HEAP32[$108>>2] = $107;
  $0 = 0;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 return (0)|0;
}
function __ZN20AP4_MemoryByteStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $this;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($9)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($17)|0);
 $19 = ($15>>>0)>(0);
 $20 = ($12>>>0)>($18>>>0);
 $21 = ($15|0)==(0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 if ($23) {
  $2 = -1;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $4;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($9)) + 16|0);
  $31 = $30;
  $32 = $31;
  HEAP32[$32>>2] = $26;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $29;
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZN20AP4_MemoryByteStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN20AP4_MemoryByteStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($4|0)!=(0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vi[$9 & 2047]($1);
 STACKTOP = sp;return;
}
function __Z21AP4_BytesFromUInt32BEPhj($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $value;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >>> 16;
 $9 = $8 & 255;
 $10 = $9&255;
 $11 = $0;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >>> 8;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $0;
 $18 = ((($17)) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $0;
 $23 = ((($22)) + 3|0);
 HEAP8[$23>>0] = $21;
 STACKTOP = sp;return;
}
function __Z21AP4_BytesFromUInt24BEPhj($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $value;
 $2 = $1;
 $3 = $2 >>> 16;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >>> 8;
 $9 = $8 & 255;
 $10 = $9&255;
 $11 = $0;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $0;
 $17 = ((($16)) + 2|0);
 HEAP8[$17>>0] = $15;
 STACKTOP = sp;return;
}
function __Z21AP4_BytesFromUInt16BEPht($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $value;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 >> 8;
 $5 = $4 & 255;
 $6 = $5&255;
 $7 = $0;
 HEAP8[$7>>0] = $6;
 $8 = $1;
 $9 = $8&65535;
 $10 = $9 & 255;
 $11 = $10&255;
 $12 = $0;
 $13 = ((($12)) + 1|0);
 HEAP8[$13>>0] = $11;
 STACKTOP = sp;return;
}
function __Z19AP4_BytesToUInt24BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 16;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $4 | $9;
 $11 = $0;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $10 | $14;
 STACKTOP = sp;return ($15|0);
}
function __Z19AP4_BytesToUInt16BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3&65535;
 $5 = $4 << 8;
 $6 = $0;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9&65535;
 $11 = $5 | $10;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function __ZN14AP4_ByteStreamC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ReferenceableC2Ev($1);
 $2 = 5056;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN14AP4_ByteStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ReferenceableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK14AP4_DataBuffer13GetBufferSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN20AP4_MemoryByteStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($4)|0);
 $6 = $1;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN20AP4_MemoryByteStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $position;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN13AP4_SubStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN13AP4_SubStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $position;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN14AP4_ByteStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(207,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN14AP4_ByteStream5FlushEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN17AP4_ReferenceableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(209,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN17AP4_ReferenceableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN17AP4_ReferenceableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5108;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN12AP4_AvccAtom14GetProfileNameEh($profile) {
 $profile = $profile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $profile;
 $2 = $1;
 $3 = $2&255;
 switch ($3|0) {
 case 66:  {
  $0 = 40251;
  break;
 }
 case 77:  {
  $0 = 41013;
  break;
 }
 case 88:  {
  $0 = 40260;
  break;
 }
 case 100:  {
  $0 = 40269;
  break;
 }
 case 110:  {
  $0 = 40274;
  break;
 }
 case 122:  {
  $0 = 40282;
  break;
 }
 case 144:  {
  $0 = 40293;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function __ZN12AP4_AvccAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cursor = 0, $i = 0, $i1 = 0, $num_pic_params = 0, $num_seq_params = 0, $payload = 0, $payload_data = 0, $payload_size = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp + 40|0;
 $1 = $size;
 $2 = $stream;
 $6 = $1;
 $7 = (($6) - 8)|0;
 $payload_size = $7;
 $8 = $payload_size;
 __ZN14AP4_DataBufferC2Ej($payload_data,$8);
 $9 = $2;
 __THREW__ = 0;
 $10 = (invoke_ii(849,($payload_data|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if ($12) {
   label = 5;
  } else {
   $13 = $payload_size;
   __THREW__ = 0;
   $14 = (invoke_iiii(851,($9|0),($10|0),($13|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 5;
   } else {
    $result = $14;
    $17 = $result;
    $18 = ($17|0)!=(0);
    do {
     if ($18) {
      $0 = 0;
      $5 = 1;
     } else {
      __THREW__ = 0;
      $21 = (invoke_ii(861,($payload_data|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 5;
       break L1;
      }
      $payload = $21;
      $24 = $payload;
      $25 = HEAP8[$24>>0]|0;
      $26 = $25&255;
      $27 = ($26|0)!=(1);
      if ($27) {
       $0 = 0;
       $5 = 1;
       break;
      }
      $28 = $payload_size;
      $29 = ($28>>>0)<(6);
      if ($29) {
       $0 = 0;
       $5 = 1;
       break;
      }
      $30 = $payload;
      $31 = ((($30)) + 5|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&255;
      $34 = $33 & 31;
      $num_seq_params = $34;
      $cursor = 6;
      $i = 0;
      while(1) {
       $35 = $i;
       $36 = $num_seq_params;
       $37 = ($35>>>0)<($36>>>0);
       $38 = $cursor;
       if (!($37)) {
        label = 19;
        break;
       }
       $39 = (($38) + 2)|0;
       $40 = $payload_size;
       $41 = ($39>>>0)>($40>>>0);
       if ($41) {
        label = 14;
        break;
       }
       $42 = $cursor;
       $43 = $payload;
       $44 = (($43) + ($42)|0);
       __THREW__ = 0;
       $45 = (invoke_ii(950,($44|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 5;
        break L1;
       }
       $48 = $45 << 16 >> 16;
       $49 = (2 + ($48))|0;
       $50 = $cursor;
       $51 = (($50) + ($49))|0;
       $cursor = $51;
       $52 = $cursor;
       $53 = $payload_size;
       $54 = ($52>>>0)>($53>>>0);
       if ($54) {
        label = 17;
        break;
       }
       $55 = $i;
       $56 = (($55) + 1)|0;
       $i = $56;
      }
      if ((label|0) == 14) {
       $0 = 0;
       $5 = 1;
       break;
      }
      else if ((label|0) == 17) {
       $0 = 0;
       $5 = 1;
       break;
      }
      else if ((label|0) == 19) {
       $57 = (($38) + 1)|0;
       $cursor = $57;
       $58 = $payload;
       $59 = (($58) + ($38)|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60&255;
       $num_pic_params = $61;
       $62 = $cursor;
       $63 = $payload_size;
       $64 = ($62>>>0)>($63>>>0);
       if ($64) {
        $0 = 0;
        $5 = 1;
        break;
       }
       $i1 = 0;
       while(1) {
        $65 = $i1;
        $66 = $num_pic_params;
        $67 = ($65>>>0)<($66>>>0);
        if (!($67)) {
         label = 29;
         break;
        }
        $68 = $cursor;
        $69 = (($68) + 2)|0;
        $70 = $payload_size;
        $71 = ($69>>>0)>($70>>>0);
        if ($71) {
         label = 24;
         break;
        }
        $72 = $cursor;
        $73 = $payload;
        $74 = (($73) + ($72)|0);
        __THREW__ = 0;
        $75 = (invoke_ii(950,($74|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 5;
         break L1;
        }
        $78 = $75 << 16 >> 16;
        $79 = (2 + ($78))|0;
        $80 = $cursor;
        $81 = (($80) + ($79))|0;
        $cursor = $81;
        $82 = $cursor;
        $83 = $payload_size;
        $84 = ($82>>>0)>($83>>>0);
        if ($84) {
         label = 27;
         break;
        }
        $85 = $i1;
        $86 = (($85) + 1)|0;
        $i1 = $86;
       }
       if ((label|0) == 24) {
        $0 = 0;
        $5 = 1;
        break;
       }
       else if ((label|0) == 27) {
        $0 = 0;
        $5 = 1;
        break;
       }
       else if ((label|0) == 29) {
        __THREW__ = 0;
        $87 = (invoke_ii(883,96)|0);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 5;
         break L1;
        }
        $90 = $1;
        $91 = $payload;
        __THREW__ = 0;
        invoke_viii(951,($87|0),($90|0),($91|0));
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         $94 = ___cxa_find_matching_catch()|0;
         $95 = tempRet0;
         $3 = $94;
         $4 = $95;
         __ZdlPv($87);
         break L1;
        } else {
         $0 = $87;
         $5 = 1;
         break;
        }
       }
      }
     }
    } while(0);
    __ZN14AP4_DataBufferD2Ev($payload_data);
    $96 = $0;
    STACKTOP = sp;return ($96|0);
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
 }
 __THREW__ = 0;
 invoke_vi(486,($payload_data|0));
 $97 = __THREW__; __THREW__ = 0;
 $98 = $97&1;
 if ($98) {
  $101 = ___cxa_find_matching_catch(0|0)|0;
  $102 = tempRet0;
  ___clang_call_terminate($101);
  // unreachable;
 } else {
  $99 = $3;
  $100 = $4;
  ___resumeException($99|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_AvccAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejj($3,1635148611,8);
 $4 = 5132;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($3)) + 37|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($3)) + 38|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($3)) + 39|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 40|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(952,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $1 = $28;
  $2 = $29;
 } else {
  $13 = ((($3)) + 60|0);
  __THREW__ = 0;
  invoke_vi(952,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $30 = ___cxa_find_matching_catch()|0;
   $31 = tempRet0;
   $1 = $30;
   $2 = $31;
  } else {
   $16 = ((($3)) + 76|0);
   __THREW__ = 0;
   invoke_vi(847,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $1 = $32;
    $2 = $33;
   } else {
    __THREW__ = 0;
    invoke_vi(953,($3|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $21 = ((($3)) + 76|0);
     __THREW__ = 0;
     $22 = (invoke_ii(850,($21|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $25 = ((($3)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + ($22))|0;
      HEAP32[$25>>2] = $27;
      STACKTOP = sp;return;
     }
    }
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $1 = $34;
    $2 = $35;
    __THREW__ = 0;
    invoke_vi(486,($16|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(215,($13|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $46 = ___cxa_find_matching_catch(0|0)|0;
    $47 = tempRet0;
    ___clang_call_terminate($46);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(215,($10|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $46 = ___cxa_find_matching_catch(0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $46 = ___cxa_find_matching_catch(0|0)|0;
  $47 = tempRet0;
  ___clang_call_terminate($46);
  // unreachable;
 } else {
  $44 = $1;
  $45 = $2;
  ___resumeException($44|0);
  // unreachable;
 }
}
function __ZN12AP4_AvccAtom14UpdateRawBytesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cursor = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $param_length = 0, $param_length4 = 0, $payload = 0;
 var $payload_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $payload_size = 6;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 44|0);
  $4 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($3)|0);
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = ((($1)) + 44|0);
  $7 = $i;
  $8 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($6,$7)|0);
  $9 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($8)|0);
  $10 = (2 + ($9))|0;
  $11 = $payload_size;
  $12 = (($11) + ($10))|0;
  $payload_size = $12;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $15 = $payload_size;
 $16 = (($15) + 1)|0;
 $payload_size = $16;
 $i1 = 0;
 while(1) {
  $17 = $i1;
  $18 = ((($1)) + 60|0);
  $19 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($18)|0);
  $20 = ($17>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = ((($1)) + 60|0);
  $22 = $i1;
  $23 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($21,$22)|0);
  $24 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($23)|0);
  $25 = (2 + ($24))|0;
  $26 = $payload_size;
  $27 = (($26) + ($25))|0;
  $payload_size = $27;
  $28 = $i1;
  $29 = (($28) + 1)|0;
  $i1 = $29;
 }
 $30 = ((($1)) + 76|0);
 $31 = $payload_size;
 (__ZN14AP4_DataBuffer11SetDataSizeEj($30,$31)|0);
 $32 = ((($1)) + 76|0);
 $33 = (__ZN14AP4_DataBuffer7UseDataEv($32)|0);
 $payload = $33;
 $34 = ((($1)) + 36|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $payload;
 HEAP8[$36>>0] = $35;
 $37 = ((($1)) + 37|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $payload;
 $40 = ((($39)) + 1|0);
 HEAP8[$40>>0] = $38;
 $41 = ((($1)) + 39|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $payload;
 $44 = ((($43)) + 2|0);
 HEAP8[$44>>0] = $42;
 $45 = ((($1)) + 38|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $payload;
 $48 = ((($47)) + 3|0);
 HEAP8[$48>>0] = $46;
 $49 = ((($1)) + 40|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = (($51) - 1)|0;
 $53 = 252 | $52;
 $54 = $53&255;
 $55 = $payload;
 $56 = ((($55)) + 4|0);
 HEAP8[$56>>0] = $54;
 $57 = ((($1)) + 44|0);
 $58 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($57)|0);
 $59 = $58&255;
 $60 = $59&255;
 $61 = 224 | $60;
 $62 = $61&255;
 $63 = $payload;
 $64 = ((($63)) + 5|0);
 HEAP8[$64>>0] = $62;
 $cursor = 6;
 $i2 = 0;
 while(1) {
  $65 = $i2;
  $66 = ((($1)) + 44|0);
  $67 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($66)|0);
  $68 = ($65>>>0)<($67>>>0);
  if (!($68)) {
   break;
  }
  $69 = ((($1)) + 44|0);
  $70 = $i2;
  $71 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($69,$70)|0);
  $72 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($71)|0);
  $73 = $72&65535;
  $param_length = $73;
  $74 = $cursor;
  $75 = $payload;
  $76 = (($75) + ($74)|0);
  $77 = $param_length;
  __Z21AP4_BytesFromUInt16BEPht($76,$77);
  $78 = $cursor;
  $79 = (($78) + 2)|0;
  $cursor = $79;
  $80 = $cursor;
  $81 = $payload;
  $82 = (($81) + ($80)|0);
  $83 = ((($1)) + 44|0);
  $84 = $i2;
  $85 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($83,$84)|0);
  $86 = (__ZNK14AP4_DataBuffer7GetDataEv($85)|0);
  $87 = $param_length;
  $88 = $87&65535;
  _memcpy(($82|0),($86|0),($88|0))|0;
  $89 = $param_length;
  $90 = $89&65535;
  $91 = $cursor;
  $92 = (($91) + ($90))|0;
  $cursor = $92;
  $93 = $i2;
  $94 = (($93) + 1)|0;
  $i2 = $94;
 }
 $95 = ((($1)) + 60|0);
 $96 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($95)|0);
 $97 = $96&255;
 $98 = $cursor;
 $99 = (($98) + 1)|0;
 $cursor = $99;
 $100 = $payload;
 $101 = (($100) + ($98)|0);
 HEAP8[$101>>0] = $97;
 $i3 = 0;
 while(1) {
  $102 = $i3;
  $103 = ((($1)) + 60|0);
  $104 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($103)|0);
  $105 = ($102>>>0)<($104>>>0);
  if (!($105)) {
   break;
  }
  $106 = ((($1)) + 60|0);
  $107 = $i3;
  $108 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($106,$107)|0);
  $109 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($108)|0);
  $110 = $109&65535;
  $param_length4 = $110;
  $111 = $cursor;
  $112 = $payload;
  $113 = (($112) + ($111)|0);
  $114 = $param_length4;
  __Z21AP4_BytesFromUInt16BEPht($113,$114);
  $115 = $cursor;
  $116 = (($115) + 2)|0;
  $cursor = $116;
  $117 = $cursor;
  $118 = $payload;
  $119 = (($118) + ($117)|0);
  $120 = ((($1)) + 60|0);
  $121 = $i3;
  $122 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($120,$121)|0);
  $123 = (__ZNK14AP4_DataBuffer7GetDataEv($122)|0);
  $124 = $param_length4;
  $125 = $124&65535;
  _memcpy(($119|0),($123|0),($125|0))|0;
  $126 = $param_length4;
  $127 = $126&65535;
  $128 = $cursor;
  $129 = (($128) + ($127))|0;
  $cursor = $129;
  $130 = $i3;
  $131 = (($130) + 1)|0;
  $i3 = $131;
 }
 STACKTOP = sp;return;
}
function __ZN12AP4_AvccAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN8AP4_AtomC2Ejj($4,1635148611,$7);
 $8 = 5132;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = $1;
 $11 = ((($10)) + 36|0);
 $12 = HEAP8[$11>>0]|0;
 HEAP8[$9>>0] = $12;
 $13 = ((($4)) + 37|0);
 $14 = $1;
 $15 = ((($14)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$13>>0] = $16;
 $17 = ((($4)) + 38|0);
 $18 = $1;
 $19 = ((($18)) + 38|0);
 $20 = HEAP8[$19>>0]|0;
 HEAP8[$17>>0] = $20;
 $21 = ((($4)) + 39|0);
 $22 = $1;
 $23 = ((($22)) + 39|0);
 $24 = HEAP8[$23>>0]|0;
 HEAP8[$21>>0] = $24;
 $25 = ((($4)) + 40|0);
 $26 = $1;
 $27 = ((($26)) + 40|0);
 $28 = HEAP8[$27>>0]|0;
 HEAP8[$25>>0] = $28;
 $29 = ((($4)) + 44|0);
 __THREW__ = 0;
 invoke_vi(952,($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $2 = $58;
  $3 = $59;
 } else {
  $32 = ((($4)) + 60|0);
  __THREW__ = 0;
  invoke_vi(952,($32|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   $60 = ___cxa_find_matching_catch()|0;
   $61 = tempRet0;
   $2 = $60;
   $3 = $61;
  } else {
   $35 = ((($4)) + 76|0);
   $36 = $1;
   $37 = ((($36)) + 76|0);
   __THREW__ = 0;
   invoke_vii(897,($35|0),($37|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    $2 = $62;
    $3 = $63;
   } else {
    $i = 0;
    $i = 0;
    while(1) {
     $40 = $i;
     $41 = $1;
     $42 = ((($41)) + 44|0);
     __THREW__ = 0;
     $43 = (invoke_ii(954,($42|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     }
     $46 = ($40>>>0)<($43>>>0);
     if (!($46)) {
      label = 14;
      break;
     }
     $47 = ((($4)) + 44|0);
     $48 = $1;
     $49 = ((($48)) + 44|0);
     $50 = $i;
     __THREW__ = 0;
     $51 = (invoke_iii(955,($49|0),($50|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      break;
     }
     __THREW__ = 0;
     (invoke_iii(956,($47|0),($51|0))|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      break;
     }
     $56 = $i;
     $57 = (($56) + 1)|0;
     $i = $57;
    }
    L16: do {
     if ((label|0) == 14) {
      $i = 0;
      while(1) {
       $68 = $i;
       $69 = $1;
       $70 = ((($69)) + 60|0);
       __THREW__ = 0;
       $71 = (invoke_ii(954,($70|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break L16;
       }
       $74 = ($68>>>0)<($71>>>0);
       if (!($74)) {
        break;
       }
       $75 = ((($4)) + 60|0);
       $76 = $1;
       $77 = ((($76)) + 60|0);
       $78 = $i;
       __THREW__ = 0;
       $79 = (invoke_iii(955,($77|0),($78|0))|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        break L16;
       }
       __THREW__ = 0;
       (invoke_iii(956,($75|0),($79|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        break L16;
       }
       $84 = $i;
       $85 = (($84) + 1)|0;
       $i = $85;
      }
      STACKTOP = sp;return;
     }
    } while(0);
    $64 = ___cxa_find_matching_catch()|0;
    $65 = tempRet0;
    $2 = $64;
    $3 = $65;
    __THREW__ = 0;
    invoke_vi(486,($35|0));
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if ($67) {
     $94 = ___cxa_find_matching_catch(0|0)|0;
     $95 = tempRet0;
     ___clang_call_terminate($94);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(215,($32|0));
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    $94 = ___cxa_find_matching_catch(0|0)|0;
    $95 = tempRet0;
    ___clang_call_terminate($94);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(215,($29|0));
  $88 = __THREW__; __THREW__ = 0;
  $89 = $88&1;
  if ($89) {
   $94 = ___cxa_find_matching_catch(0|0)|0;
   $95 = tempRet0;
   ___clang_call_terminate($94);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($4|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $94 = ___cxa_find_matching_catch(0|0)|0;
  $95 = tempRet0;
  ___clang_call_terminate($94);
  // unreachable;
 } else {
  $92 = $2;
  $93 = $3;
  ___resumeException($92|0);
  // unreachable;
 }
}
function __ZN12AP4_AvccAtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cursor = 0, $i = 0, $i1 = 0, $num_pic_params = 0, $num_seq_params = 0, $param_length = 0, $param_length2 = 0, $payload_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $6 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $payload;
 $7 = $0;
 $8 = $1;
 __ZN8AP4_AtomC2Ejj($7,1635148611,$8);
 $9 = 5132;
 HEAP32[$7>>2] = $9;
 $10 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(952,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $97 = ___cxa_find_matching_catch()|0;
  $98 = tempRet0;
  $3 = $97;
  $4 = $98;
 } else {
  $13 = ((($7)) + 60|0);
  __THREW__ = 0;
  invoke_vi(952,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $99 = ___cxa_find_matching_catch()|0;
   $100 = tempRet0;
   $3 = $99;
   $4 = $100;
  } else {
   $16 = ((($7)) + 76|0);
   __THREW__ = 0;
   invoke_vi(847,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $101 = ___cxa_find_matching_catch()|0;
    $102 = tempRet0;
    $3 = $101;
    $4 = $102;
   } else {
    $19 = $1;
    $20 = (($19) - 8)|0;
    $payload_size = $20;
    $21 = ((($7)) + 76|0);
    $22 = $2;
    $23 = $payload_size;
    __THREW__ = 0;
    (invoke_iiii(886,($21|0),($22|0),($23|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    L10: do {
     if ($25) {
      label = 18;
     } else {
      $26 = $2;
      $27 = HEAP8[$26>>0]|0;
      $28 = ((($7)) + 36|0);
      HEAP8[$28>>0] = $27;
      $29 = $2;
      $30 = ((($29)) + 1|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ((($7)) + 37|0);
      HEAP8[$32>>0] = $31;
      $33 = $2;
      $34 = ((($33)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ((($7)) + 39|0);
      HEAP8[$36>>0] = $35;
      $37 = $2;
      $38 = ((($37)) + 3|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = ((($7)) + 38|0);
      HEAP8[$40>>0] = $39;
      $41 = $2;
      $42 = ((($41)) + 4|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 3;
      $46 = (1 + ($45))|0;
      $47 = $46&255;
      $48 = ((($7)) + 40|0);
      HEAP8[$48>>0] = $47;
      $49 = $2;
      $50 = ((($49)) + 5|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = $52 & 31;
      $54 = $53&255;
      $num_seq_params = $54;
      $55 = ((($7)) + 44|0);
      $56 = $num_seq_params;
      $57 = $56&255;
      __THREW__ = 0;
      (invoke_iii(957,($55|0),($57|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 18;
      } else {
       $cursor = 6;
       $i = 0;
       while(1) {
        $60 = $i;
        $61 = $num_seq_params;
        $62 = $61&255;
        $63 = ($60>>>0)<($62>>>0);
        if (!($63)) {
         break;
        }
        $64 = ((($7)) + 44|0);
        __THREW__ = 0;
        invoke_vi(847,($5|0));
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         label = 18;
         break L10;
        }
        __THREW__ = 0;
        (invoke_iii(956,($64|0),($5|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         label = 19;
         break;
        }
        __THREW__ = 0;
        invoke_vi(486,($5|0));
        $69 = __THREW__; __THREW__ = 0;
        $70 = $69&1;
        if ($70) {
         label = 18;
         break L10;
        }
        $71 = $cursor;
        $72 = $2;
        $73 = (($72) + ($71)|0);
        __THREW__ = 0;
        $74 = (invoke_ii(950,($73|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 18;
         break L10;
        }
        $param_length = $74;
        $77 = ((($7)) + 44|0);
        $78 = $i;
        __THREW__ = 0;
        $79 = (invoke_iii(958,($77|0),($78|0))|0);
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if ($81) {
         label = 18;
         break L10;
        }
        $82 = $cursor;
        $83 = $2;
        $84 = (($83) + ($82)|0);
        $85 = ((($84)) + 2|0);
        $86 = $param_length;
        $87 = $86&65535;
        __THREW__ = 0;
        (invoke_iiii(886,($79|0),($85|0),($87|0))|0);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 18;
         break L10;
        }
        $90 = $param_length;
        $91 = $90&65535;
        $92 = (2 + ($91))|0;
        $93 = $cursor;
        $94 = (($93) + ($92))|0;
        $cursor = $94;
        $95 = $i;
        $96 = (($95) + 1)|0;
        $i = $96;
       }
       if ((label|0) == 19) {
        $105 = ___cxa_find_matching_catch()|0;
        $106 = tempRet0;
        $3 = $105;
        $4 = $106;
        __THREW__ = 0;
        invoke_vi(486,($5|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         break;
        }
        $170 = ___cxa_find_matching_catch(0|0)|0;
        $171 = tempRet0;
        ___clang_call_terminate($170);
        // unreachable;
       }
       $109 = $cursor;
       $110 = (($109) + 1)|0;
       $cursor = $110;
       $111 = $2;
       $112 = (($111) + ($109)|0);
       $113 = HEAP8[$112>>0]|0;
       $num_pic_params = $113;
       $114 = ((($7)) + 60|0);
       $115 = $num_pic_params;
       $116 = $115&255;
       __THREW__ = 0;
       (invoke_iii(957,($114|0),($116|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        label = 18;
       } else {
        $i1 = 0;
        while(1) {
         $119 = $i1;
         $120 = $num_pic_params;
         $121 = $120&255;
         $122 = ($119>>>0)<($121>>>0);
         if (!($122)) {
          label = 31;
          break;
         }
         $123 = ((($7)) + 60|0);
         __THREW__ = 0;
         invoke_vi(847,($6|0));
         $124 = __THREW__; __THREW__ = 0;
         $125 = $124&1;
         if ($125) {
          label = 18;
          break L10;
         }
         __THREW__ = 0;
         (invoke_iii(956,($123|0),($6|0))|0);
         $126 = __THREW__; __THREW__ = 0;
         $127 = $126&1;
         if ($127) {
          break;
         }
         __THREW__ = 0;
         invoke_vi(486,($6|0));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if ($129) {
          label = 18;
          break L10;
         }
         $130 = $cursor;
         $131 = $2;
         $132 = (($131) + ($130)|0);
         __THREW__ = 0;
         $133 = (invoke_ii(950,($132|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 18;
          break L10;
         }
         $param_length2 = $133;
         $136 = ((($7)) + 60|0);
         $137 = $i1;
         __THREW__ = 0;
         $138 = (invoke_iii(958,($136|0),($137|0))|0);
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         if ($140) {
          label = 18;
          break L10;
         }
         $141 = $cursor;
         $142 = $2;
         $143 = (($142) + ($141)|0);
         $144 = ((($143)) + 2|0);
         $145 = $param_length2;
         $146 = $145&65535;
         __THREW__ = 0;
         (invoke_iiii(886,($138|0),($144|0),($146|0))|0);
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 18;
          break L10;
         }
         $149 = $param_length2;
         $150 = $149&65535;
         $151 = (2 + ($150))|0;
         $152 = $cursor;
         $153 = (($152) + ($151))|0;
         $cursor = $153;
         $154 = $i1;
         $155 = (($154) + 1)|0;
         $i1 = $155;
        }
        if ((label|0) == 31) {
         STACKTOP = sp;return;
        }
        $156 = ___cxa_find_matching_catch()|0;
        $157 = tempRet0;
        $3 = $156;
        $4 = $157;
        __THREW__ = 0;
        invoke_vi(486,($6|0));
        $158 = __THREW__; __THREW__ = 0;
        $159 = $158&1;
        if ($159) {
         $170 = ___cxa_find_matching_catch(0|0)|0;
         $171 = tempRet0;
         ___clang_call_terminate($170);
         // unreachable;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     $103 = ___cxa_find_matching_catch()|0;
     $104 = tempRet0;
     $3 = $103;
     $4 = $104;
    }
    __THREW__ = 0;
    invoke_vi(486,($16|0));
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     $170 = ___cxa_find_matching_catch(0|0)|0;
     $171 = tempRet0;
     ___clang_call_terminate($170);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(215,($13|0));
   $162 = __THREW__; __THREW__ = 0;
   $163 = $162&1;
   if ($163) {
    $170 = ___cxa_find_matching_catch(0|0)|0;
    $171 = tempRet0;
    ___clang_call_terminate($170);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(215,($10|0));
  $164 = __THREW__; __THREW__ = 0;
  $165 = $164&1;
  if ($165) {
   $170 = ___cxa_find_matching_catch(0|0)|0;
   $171 = tempRet0;
   ___clang_call_terminate($170);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $166 = __THREW__; __THREW__ = 0;
 $167 = $166&1;
 if ($167) {
  $170 = ___cxa_find_matching_catch(0|0)|0;
  $171 = tempRet0;
  ___clang_call_terminate($170);
  // unreachable;
 } else {
  $168 = $3;
  $169 = $4;
  ___resumeException($168|0);
  // unreachable;
 }
}
function __ZN12AP4_AvccAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 76|0);
 $5 = (__ZNK14AP4_DataBuffer7GetDataEv($4)|0);
 $6 = ((($2)) + 76|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN12AP4_AvccAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $i = 0, $i1 = 0, $profile_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,41050,$9,0,0);
 $10 = ((($2)) + 37|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (__ZN12AP4_AvccAtom14GetProfileNameEh($11)|0);
 $profile_name = $12;
 $13 = $profile_name;
 $14 = ($13|0)!=(0|0);
 $15 = $1;
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $profile_name;
  FUNCTION_TABLE_viiii[$18 & 2047]($15,41086,$19,0);
 } else {
  $20 = HEAP32[$15>>2]|0;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($2)) + 37|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  FUNCTION_TABLE_viiiii[$22 & 2047]($15,41086,$25,0,0);
 }
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($2)) + 39|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 FUNCTION_TABLE_viiiii[$29 & 2047]($26,41099,$32,0,1);
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($2)) + 38|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 FUNCTION_TABLE_viiiii[$36 & 2047]($33,41132,$39,0,0);
 $40 = $1;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($2)) + 40|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 FUNCTION_TABLE_viiiii[$43 & 2047]($40,41302,$46,0,0);
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ((($2)) + 44|0);
  $49 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($48)|0);
  $50 = ($47>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $1;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 36|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($2)) + 44|0);
  $56 = $i;
  $57 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($55,$56)|0);
  $58 = (__ZNK14AP4_DataBuffer7GetDataEv($57)|0);
  $59 = ((($2)) + 44|0);
  $60 = $i;
  $61 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($59,$60)|0);
  $62 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($61)|0);
  FUNCTION_TABLE_viiiii[$54 & 2047]($51,40304,$58,$62,0);
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $i1 = 0;
 while(1) {
  $65 = $i1;
  $66 = ((($2)) + 44|0);
  $67 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($66)|0);
  $68 = ($65>>>0)<($67>>>0);
  if (!($68)) {
   break;
  }
  $69 = $1;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 36|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($2)) + 60|0);
  $74 = $i1;
  $75 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($73,$74)|0);
  $76 = (__ZNK14AP4_DataBuffer7GetDataEv($75)|0);
  $77 = ((($2)) + 60|0);
  $78 = $i1;
  $79 = (__ZN9AP4_ArrayI14AP4_DataBufferEixEm($77,$78)|0);
  $80 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($79)|0);
  FUNCTION_TABLE_viiiii[$72 & 2047]($69,40323,$76,$80,0);
  $81 = $i1;
  $82 = (($81) + 1)|0;
  $i1 = $82;
 }
 STACKTOP = sp;return 0;
}
function __Z18AP4_BytesToInt16BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = (__Z19AP4_BytesToUInt16BEPKh($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5192;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI14AP4_DataBufferED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5192;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayI14AP4_DataBufferE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK9AP4_ArrayI14AP4_DataBufferEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayI14AP4_DataBufferE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*20)|0)|0);
 $36 = $2;
 __ZN14AP4_DataBufferC2ERKS_($35,$36);
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $8 = $2;
 $9 = ($8*20)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*20)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*20)|0)|0);
    __ZN14AP4_DataBufferC2ERKS_($25,$29);
    $30 = $i;
    $31 = ((($3)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + (($30*20)|0)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vi[$35 & 2047]($33);
    $36 = $i;
    $37 = (($36) + 1)|0;
    $i = $37;
   }
   $38 = ((($3)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   __ZdlPv($39);
  }
 }
 $40 = $new_items;
 $41 = ((($3)) + 12|0);
 HEAP32[$41>>2] = $40;
 $42 = $2;
 $43 = ((($3)) + 4|0);
 HEAP32[$43>>2] = $42;
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*20)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 2047]($9);
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 $14 = ((($1)) + 8|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI14AP4_DataBufferED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(215,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_AvccAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(211,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_AvccAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5132;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 76|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 60|0);
   __THREW__ = 0;
   invoke_vi(215,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $8 = ((($3)) + 60|0);
   __THREW__ = 0;
   invoke_vi(215,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $11 = ((($3)) + 44|0);
   __THREW__ = 0;
   invoke_vi(215,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 44|0);
  __THREW__ = 0;
  invoke_vi(215,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN20AP4_ObjectDescriptorC2Ehjj($this,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $tag;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,$7,$8,$9);
 $10 = 5208;
 HEAP32[$6>>2] = $10;
 $11 = ((($6)) + 20|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($6)) + 22|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($6)) + 24|0);
 __THREW__ = 0;
 invoke_vi(860,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $4 = $19;
  $5 = $20;
 } else {
  $16 = ((($6)) + 32|0);
  __THREW__ = 0;
  invoke_vi(937,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $4 = $21;
  $5 = $22;
  __THREW__ = 0;
  invoke_vi(864,($13|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $29 = ___cxa_find_matching_catch(0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $29 = ___cxa_find_matching_catch(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $4;
  $28 = $5;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN20AP4_ObjectDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bits = 0, $descriptor = 0, $offset = 0, $start = 0, $substream = 0, $url = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 48|0;
 $url_length = sp + 312|0;
 $url = sp + 56|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 $0 = $this;
 $1 = $stream;
 $2 = $tag;
 $3 = $header_size;
 $4 = $payload_size;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 __ZN14AP4_DescriptorC2Ehjj($7,$8,$9,$10);
 $11 = 5208;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 24|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $5 = $55;
  $6 = $56;
 } else {
  $15 = ((($7)) + 32|0);
  __THREW__ = 0;
  invoke_vi(937,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $57 = ___cxa_find_matching_catch()|0;
   $58 = tempRet0;
   $5 = $57;
   $6 = $58;
  } else {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   (invoke_iii($21|0,($18|0),($start|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   L7: do {
    if ($23) {
     label = 11;
    } else {
     $24 = $1;
     __THREW__ = 0;
     (invoke_iii(866,($24|0),($bits|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 11;
     } else {
      $27 = HEAP16[$bits>>1]|0;
      $28 = $27&65535;
      $29 = $28 >> 6;
      $30 = $29&65535;
      $31 = ((($7)) + 20|0);
      HEAP16[$31>>1] = $30;
      $32 = HEAP16[$bits>>1]|0;
      $33 = $32&65535;
      $34 = $33 & 32;
      $35 = ($34|0)!=(0);
      $36 = ((($7)) + 22|0);
      $37 = $35&1;
      HEAP8[$36>>0] = $37;
      $38 = ((($7)) + 22|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = $39&1;
      if ($40) {
       $41 = $1;
       __THREW__ = 0;
       (invoke_iii(940,($41|0),($url_length|0))|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 11;
        break;
       }
       $44 = $1;
       $45 = HEAP8[$url_length>>0]|0;
       $46 = $45&255;
       __THREW__ = 0;
       (invoke_iiii(851,($44|0),($url|0),($46|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 11;
        break;
       }
       $49 = HEAP8[$url_length>>0]|0;
       $50 = $49&255;
       $51 = (($url) + ($50)|0);
       HEAP8[$51>>0] = 0;
       $52 = ((($7)) + 24|0);
       __THREW__ = 0;
       (invoke_iii(862,($52|0),($url|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        label = 11;
        break;
       }
      }
      $61 = $1;
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($62)) + 28|0);
      $64 = HEAP32[$63>>2]|0;
      __THREW__ = 0;
      (invoke_iii($64|0,($61|0),($offset|0))|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       label = 11;
      } else {
       __THREW__ = 0;
       $67 = (invoke_ii(883,40)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 11;
       } else {
        $70 = $1;
        $71 = $offset;
        $72 = $71;
        $73 = HEAP32[$72>>2]|0;
        $74 = (($71) + 4)|0;
        $75 = $74;
        $76 = HEAP32[$75>>2]|0;
        $77 = $4;
        $78 = $offset;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = $start;
        $85 = $84;
        $86 = HEAP32[$85>>2]|0;
        $87 = (($84) + 4)|0;
        $88 = $87;
        $89 = HEAP32[$88>>2]|0;
        $90 = (_i64Subtract(($80|0),($83|0),($86|0),($89|0))|0);
        $91 = tempRet0;
        $92 = (($77) - ($90))|0;
        __THREW__ = 0;
        invoke_viiiiii(942,($67|0),($70|0),($73|0),($76|0),($92|0),0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         $104 = ___cxa_find_matching_catch()|0;
         $105 = tempRet0;
         $5 = $104;
         $6 = $105;
         __ZdlPv($67);
         break;
        }
        $substream = $67;
        HEAP32[$descriptor>>2] = 0;
        while(1) {
         $95 = $substream;
         __THREW__ = 0;
         $96 = (invoke_iii(936,($95|0),($descriptor|0))|0);
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          label = 11;
          break L7;
         }
         $99 = ($96|0)==(0);
         if (!($99)) {
          break;
         }
         $100 = ((($7)) + 32|0);
         $101 = HEAP32[$descriptor>>2]|0;
         __THREW__ = 0;
         (invoke_iii(938,($100|0),($101|0))|0);
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          label = 11;
          break L7;
         }
        }
        $106 = $substream;
        $107 = HEAP32[$106>>2]|0;
        $108 = ((($107)) + 12|0);
        $109 = HEAP32[$108>>2]|0;
        __THREW__ = 0;
        invoke_vi($109|0,($106|0));
        $110 = __THREW__; __THREW__ = 0;
        $111 = $110&1;
        if ($111) {
         label = 11;
        } else {
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $59 = ___cxa_find_matching_catch()|0;
    $60 = tempRet0;
    $5 = $59;
    $6 = $60;
   }
   __THREW__ = 0;
   invoke_vi(177,($15|0));
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $120 = ___cxa_find_matching_catch(0|0)|0;
    $121 = tempRet0;
    ___clang_call_terminate($120);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $114 = __THREW__; __THREW__ = 0;
  $115 = $114&1;
  if ($115) {
   $120 = ___cxa_find_matching_catch(0|0)|0;
   $121 = tempRet0;
   ___clang_call_terminate($120);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($7|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $120 = ___cxa_find_matching_catch(0|0)|0;
  $121 = tempRet0;
  ___clang_call_terminate($120);
  // unreachable;
 } else {
  $118 = $5;
  $119 = $6;
  ___resumeException($118|0);
  // unreachable;
 }
}
function __ZN20AP4_ObjectDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5208;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 32|0);
 __THREW__ = 0;
 (invoke_ii(943,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 32|0);
   __THREW__ = 0;
   invoke_vi(177,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $8 = ((($3)) + 32|0);
   __THREW__ = 0;
   invoke_vi(177,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $11 = ((($3)) + 24|0);
   __THREW__ = 0;
   invoke_vi(864,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN14AP4_DescriptorD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 24|0);
  __THREW__ = 0;
  invoke_vi(864,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN20AP4_ObjectDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(217,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK20AP4_ObjectDescriptor17FindSubDescriptorEh($this,$tag) {
 $this = $this|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor = sp + 20|0;
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $tag;
 $6 = $1;
 HEAP32[$descriptor>>2] = 0;
 $7 = ((($6)) + 32|0);
 $8 = $2;
 __ZN20AP4_DescriptorFinderC2Eh($3,$8);
 __THREW__ = 0;
 $9 = (invoke_iiii(945,($7|0),($3|0),($descriptor|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __THREW__ = 0;
  invoke_vi(168,($3|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $22 = ___cxa_find_matching_catch(0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  } else {
   $20 = $4;
   $21 = $5;
   ___resumeException($20|0);
   // unreachable;
  }
 }
 __ZN20AP4_DescriptorFinderD2Ev($3);
 $result = $9;
 $12 = $result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $18 = HEAP32[$descriptor>>2]|0;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZN20AP4_ObjectDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 << 6;
 $11 = ((($6)) + 22|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 $14 = $13 ? 32 : 0;
 $15 = $10 | $14;
 $16 = $15 | 31;
 $17 = $16&65535;
 $bits = $17;
 $18 = $2;
 $19 = $bits;
 $20 = (__ZN14AP4_ByteStream9WriteUI16Et($18,$19)|0);
 $result = $20;
 $21 = $result;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $result;
  $0 = $23;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $24 = ((($6)) + 22|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = $2;
  $28 = ((($6)) + 24|0);
  $29 = (__ZNK10AP4_String9GetLengthEv($28)|0);
  $30 = $29&255;
  (__ZN14AP4_ByteStream9WriteUI08Eh($27,$30)|0);
  $31 = $2;
  $32 = ((($6)) + 24|0);
  $33 = (__ZNK10AP4_String8GetCharsEv($32)|0);
  $34 = ((($6)) + 24|0);
  $35 = (__ZNK10AP4_String9GetLengthEv($34)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($31,$33,$35)|0);
 }
 $36 = ((($6)) + 32|0);
 $37 = $2;
 __ZN24AP4_DescriptorListWriterC2ER14AP4_ByteStream($3,$37);
 __THREW__ = 0;
 (invoke_iii(944,($36|0),($3|0))|0);
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if (!($39)) {
  __ZN24AP4_DescriptorListWriterD2Ev($3);
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $40 = ___cxa_find_matching_catch()|0;
 $41 = tempRet0;
 $4 = $40;
 $5 = $41;
 __THREW__ = 0;
 invoke_vi(174,($3|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  $45 = $4;
  $46 = $5;
  ___resumeException($45|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN20AP4_ObjectDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN14AP4_Expandable13GetHeaderSizeEv($5)|0);
 $11 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,40423,$10,$11,0);
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($5)) + 20|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 FUNCTION_TABLE_viiiii[$15 & 2047]($12,40440,$18,0,0);
 $19 = ((($5)) + 22|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if ($21) {
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($5)) + 24|0);
  $27 = (__ZNK10AP4_String8GetCharsEv($26)|0);
  FUNCTION_TABLE_viiii[$25 & 2047]($22,40443,$27,0);
 }
 $28 = ((($5)) + 32|0);
 $29 = $1;
 __ZN27AP4_DescriptorListInspectorC2ER17AP4_AtomInspector($2,$29);
 __THREW__ = 0;
 (invoke_iii(944,($28|0),($2|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if (!($31)) {
  __ZN27AP4_DescriptorListInspectorD2Ev($2);
  $32 = $1;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  FUNCTION_TABLE_vi[$35 & 2047]($32);
  STACKTOP = sp;return 0;
 }
 $36 = ___cxa_find_matching_catch()|0;
 $37 = tempRet0;
 $3 = $36;
 $4 = $37;
 __THREW__ = 0;
 invoke_vi(171,($2|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $42 = ___cxa_find_matching_catch(0|0)|0;
  $43 = tempRet0;
  ___clang_call_terminate($42);
  // unreachable;
 } else {
  $40 = $3;
  $41 = $4;
  ___resumeException($40|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN20AP4_ObjectDescriptor16AddSubDescriptorEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $min_header_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = $1;
 (__ZN8AP4_ListI14AP4_DescriptorE3AddEPS0_($3,$4)|0);
 $5 = $1;
 $6 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 $7 = ((($2)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($2)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_Expandable13MinHeaderSizeEj($11)|0);
 $min_header_size = $12;
 $13 = $min_header_size;
 $14 = ((($2)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)>($15>>>0);
 if (!($16)) {
  STACKTOP = sp;return 0;
 }
 $17 = $min_header_size;
 $18 = ((($2)) + 12|0);
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return 0;
}
function __ZN27AP4_InitialObjectDescriptorC2ER14AP4_ByteStreamhjj($this,$stream,$tag,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $tag = $tag|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $descriptor = 0;
 var $offset = 0, $start = 0, $substream = 0, $url = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 48|0;
 $url_length = sp + 312|0;
 $url = sp + 56|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 $0 = $this;
 $1 = $stream;
 $2 = $tag;
 $3 = $header_size;
 $4 = $payload_size;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 __ZN20AP4_ObjectDescriptorC2Ehjj($7,$8,$9,$10);
 $11 = 5244;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 49|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($7)) + 50|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($7)) + 51|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($7)) + 52|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($7)) + 53|0);
 HEAP8[$16>>0] = 0;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 __THREW__ = 0;
 (invoke_iii($20|0,($17|0),($start|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 L1: do {
  if ($22) {
   label = 7;
  } else {
   $23 = $1;
   __THREW__ = 0;
   (invoke_iii(866,($23|0),($bits|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    label = 7;
   } else {
    $26 = HEAP16[$bits>>1]|0;
    $27 = $26&65535;
    $28 = $27 >> 6;
    $29 = $28&65535;
    $30 = ((($7)) + 20|0);
    HEAP16[$30>>1] = $29;
    $31 = HEAP16[$bits>>1]|0;
    $32 = $31&65535;
    $33 = $32 & 32;
    $34 = ($33|0)!=(0);
    $35 = ((($7)) + 22|0);
    $36 = $34&1;
    HEAP8[$35>>0] = $36;
    $37 = HEAP16[$bits>>1]|0;
    $38 = $37&65535;
    $39 = $38 & 16;
    $40 = ($39|0)!=(0);
    $41 = ((($7)) + 48|0);
    $42 = $40&1;
    HEAP8[$41>>0] = $42;
    $43 = ((($7)) + 22|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&1;
    $46 = $1;
    if ($45) {
     __THREW__ = 0;
     (invoke_iii(940,($46|0),($url_length|0))|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 7;
      break;
     }
     $49 = $1;
     $50 = HEAP8[$url_length>>0]|0;
     $51 = $50&255;
     __THREW__ = 0;
     (invoke_iiii(851,($49|0),($url|0),($51|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      label = 7;
      break;
     }
     $54 = HEAP8[$url_length>>0]|0;
     $55 = $54&255;
     $56 = (($url) + ($55)|0);
     HEAP8[$56>>0] = 0;
     $57 = ((($7)) + 24|0);
     __THREW__ = 0;
     (invoke_iii(862,($57|0),($url|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 7;
      break;
     }
    } else {
     $62 = ((($7)) + 49|0);
     __THREW__ = 0;
     (invoke_iii(940,($46|0),($62|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 7;
      break;
     }
     $65 = $1;
     $66 = ((($7)) + 50|0);
     __THREW__ = 0;
     (invoke_iii(940,($65|0),($66|0))|0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 7;
      break;
     }
     $69 = $1;
     $70 = ((($7)) + 51|0);
     __THREW__ = 0;
     (invoke_iii(940,($69|0),($70|0))|0);
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if ($72) {
      label = 7;
      break;
     }
     $73 = $1;
     $74 = ((($7)) + 52|0);
     __THREW__ = 0;
     (invoke_iii(940,($73|0),($74|0))|0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 7;
      break;
     }
     $77 = $1;
     $78 = ((($7)) + 53|0);
     __THREW__ = 0;
     (invoke_iii(940,($77|0),($78|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 7;
      break;
     }
    }
    $81 = $1;
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($82)) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    __THREW__ = 0;
    (invoke_iii($84|0,($81|0),($offset|0))|0);
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if ($86) {
     label = 7;
    } else {
     __THREW__ = 0;
     $87 = (invoke_ii(883,40)|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 7;
     } else {
      $90 = $1;
      $91 = $offset;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = $4;
      $98 = $offset;
      $99 = $98;
      $100 = HEAP32[$99>>2]|0;
      $101 = (($98) + 4)|0;
      $102 = $101;
      $103 = HEAP32[$102>>2]|0;
      $104 = $start;
      $105 = $104;
      $106 = HEAP32[$105>>2]|0;
      $107 = (($104) + 4)|0;
      $108 = $107;
      $109 = HEAP32[$108>>2]|0;
      $110 = (_i64Subtract(($100|0),($103|0),($106|0),($109|0))|0);
      $111 = tempRet0;
      $112 = (($97) - ($110))|0;
      __THREW__ = 0;
      invoke_viiiiii(942,($87|0),($90|0),($93|0),($96|0),($112|0),0);
      $113 = __THREW__; __THREW__ = 0;
      $114 = $113&1;
      if ($114) {
       $124 = ___cxa_find_matching_catch()|0;
       $125 = tempRet0;
       $5 = $124;
       $6 = $125;
       __ZdlPv($87);
       break;
      }
      $substream = $87;
      HEAP32[$descriptor>>2] = 0;
      while(1) {
       $115 = $substream;
       __THREW__ = 0;
       $116 = (invoke_iii(936,($115|0),($descriptor|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        label = 7;
        break L1;
       }
       $119 = ($116|0)==(0);
       if (!($119)) {
        break;
       }
       $120 = ((($7)) + 32|0);
       $121 = HEAP32[$descriptor>>2]|0;
       __THREW__ = 0;
       (invoke_iii(938,($120|0),($121|0))|0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 7;
        break L1;
       }
      }
      $126 = $substream;
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($127)) + 12|0);
      $129 = HEAP32[$128>>2]|0;
      __THREW__ = 0;
      invoke_vi($129|0,($126|0));
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       label = 7;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $5 = $60;
  $6 = $61;
 }
 __THREW__ = 0;
 invoke_vi(217,($7|0));
 $132 = __THREW__; __THREW__ = 0;
 $133 = $132&1;
 if ($133) {
  $136 = ___cxa_find_matching_catch(0|0)|0;
  $137 = tempRet0;
  ___clang_call_terminate($136);
  // unreachable;
 } else {
  $134 = $5;
  $135 = $6;
  ___resumeException($134|0);
  // unreachable;
 }
}
function __ZN27AP4_InitialObjectDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 << 6;
 $11 = ((($6)) + 22|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 $14 = $13 ? 32 : 0;
 $15 = $10 | $14;
 $16 = ((($6)) + 48|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 $19 = $18 ? 16 : 0;
 $20 = $15 | $19;
 $21 = $20 | 15;
 $22 = $21&65535;
 $bits = $22;
 $23 = $2;
 $24 = $bits;
 $25 = (__ZN14AP4_ByteStream9WriteUI16Et($23,$24)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $29 = ((($6)) + 22|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&1;
 $32 = $2;
 if ($31) {
  $33 = ((($6)) + 24|0);
  $34 = (__ZNK10AP4_String9GetLengthEv($33)|0);
  $35 = $34&255;
  (__ZN14AP4_ByteStream9WriteUI08Eh($32,$35)|0);
  $36 = $2;
  $37 = ((($6)) + 24|0);
  $38 = (__ZNK10AP4_String8GetCharsEv($37)|0);
  $39 = ((($6)) + 24|0);
  $40 = (__ZNK10AP4_String9GetLengthEv($39)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($36,$38,$40)|0);
 } else {
  $41 = ((($6)) + 49|0);
  $42 = HEAP8[$41>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($32,$42)|0);
  $43 = $2;
  $44 = ((($6)) + 50|0);
  $45 = HEAP8[$44>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($43,$45)|0);
  $46 = $2;
  $47 = ((($6)) + 51|0);
  $48 = HEAP8[$47>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($46,$48)|0);
  $49 = $2;
  $50 = ((($6)) + 52|0);
  $51 = HEAP8[$50>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($49,$51)|0);
  $52 = $2;
  $53 = ((($6)) + 53|0);
  $54 = HEAP8[$53>>0]|0;
  (__ZN14AP4_ByteStream9WriteUI08Eh($52,$54)|0);
 }
 $55 = ((($6)) + 32|0);
 $56 = $2;
 __ZN24AP4_DescriptorListWriterC2ER14AP4_ByteStream($3,$56);
 __THREW__ = 0;
 (invoke_iii(944,($55|0),($3|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if (!($58)) {
  __ZN24AP4_DescriptorListWriterD2Ev($3);
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $59 = ___cxa_find_matching_catch()|0;
 $60 = tempRet0;
 $4 = $59;
 $5 = $60;
 __THREW__ = 0;
 invoke_vi(174,($3|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $4;
  $65 = $5;
  ___resumeException($64|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN27AP4_InitialObjectDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN14AP4_Expandable13GetHeaderSizeEv($5)|0);
 $11 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,40447,$10,$11,0);
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($5)) + 20|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 FUNCTION_TABLE_viiiii[$15 & 2047]($12,40440,$18,0,0);
 $19 = ((($5)) + 22|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $1;
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($5)) + 24|0);
  $27 = (__ZNK10AP4_String8GetCharsEv($26)|0);
  FUNCTION_TABLE_viiii[$25 & 2047]($22,40443,$27,0);
 } else {
  $28 = HEAP32[$22>>2]|0;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($5)) + 48|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&1;
  $34 = $33&1;
  FUNCTION_TABLE_viiiii[$30 & 2047]($22,40471,$34,0,2);
  $35 = $1;
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($5)) + 49|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  FUNCTION_TABLE_viiiii[$38 & 2047]($35,40505,$41,0,1);
  $42 = $1;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($5)) + 50|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  FUNCTION_TABLE_viiiii[$45 & 2047]($42,40522,$48,0,1);
  $49 = $1;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($5)) + 51|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  FUNCTION_TABLE_viiiii[$52 & 2047]($49,40542,$55,0,1);
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($5)) + 52|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  FUNCTION_TABLE_viiiii[$59 & 2047]($56,40562,$62,0,1);
  $63 = $1;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($5)) + 53|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  FUNCTION_TABLE_viiiii[$66 & 2047]($63,40583,$69,0,1);
 }
 $70 = ((($5)) + 32|0);
 $71 = $1;
 __ZN27AP4_DescriptorListInspectorC2ER17AP4_AtomInspector($2,$71);
 __THREW__ = 0;
 (invoke_iii(944,($70|0),($2|0))|0);
 $72 = __THREW__; __THREW__ = 0;
 $73 = $72&1;
 if (!($73)) {
  __ZN27AP4_DescriptorListInspectorD2Ev($2);
  $74 = $1;
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vi[$77 & 2047]($74);
  STACKTOP = sp;return 0;
 }
 $78 = ___cxa_find_matching_catch()|0;
 $79 = tempRet0;
 $3 = $78;
 $4 = $79;
 __THREW__ = 0;
 invoke_vi(171,($2|0));
 $80 = __THREW__; __THREW__ = 0;
 $81 = $80&1;
 if ($81) {
  $84 = ___cxa_find_matching_catch(0|0)|0;
  $85 = tempRet0;
  ___clang_call_terminate($84);
  // unreachable;
 } else {
  $82 = $3;
  $83 = $4;
  ___resumeException($82|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN27AP4_InitialObjectDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(223,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN27AP4_InitialObjectDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN20AP4_ObjectDescriptorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_OhdrAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $2;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(112)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(959,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_OhdrAtomC2EhhyPKcS1_PKhj($this,$encryption_method,$padding_scheme,$0,$1,$content_id,$rights_issuer_url,$textual_headers,$textual_headers_size) {
 $this = $this|0;
 $encryption_method = $encryption_method|0;
 $padding_scheme = $padding_scheme|0;
 $0 = $0|0;
 $1 = $1|0;
 $content_id = $content_id|0;
 $rights_issuer_url = $rights_issuer_url|0;
 $textual_headers = $textual_headers|0;
 $textual_headers_size = $textual_headers_size|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $2 = $this;
 $3 = $encryption_method;
 $4 = $padding_scheme;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $6 = $content_id;
 $7 = $rights_issuer_url;
 $8 = $textual_headers;
 $9 = $textual_headers_size;
 $16 = $2;
 __ZN17AP4_ContainerAtomC2Ejhj($16,1869112434,0,0);
 $17 = ((($16)) + 56|0);
 __ZN14AP4_OmaDrmInfoC2Ev($17);
 $18 = 5280;
 HEAP32[$16>>2] = $18;
 $19 = ((($16)) + 36|0);
 $20 = 5368;
 HEAP32[$19>>2] = $20;
 $21 = ((($16)) + 56|0);
 $22 = 5420;
 HEAP32[$21>>2] = $22;
 $23 = ((($16)) + 60|0);
 $24 = $3;
 HEAP8[$23>>0] = $24;
 $25 = ((($16)) + 61|0);
 $26 = $4;
 HEAP8[$25>>0] = $26;
 $27 = ((($16)) + 64|0);
 $28 = $5;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $27;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = ((($16)) + 72|0);
 $39 = $6;
 __THREW__ = 0;
 invoke_vii(869,($38|0),($39|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $10 = $66;
  $11 = $67;
 } else {
  $42 = ((($16)) + 80|0);
  $43 = $7;
  __THREW__ = 0;
  invoke_vii(869,($42|0),($43|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $68 = ___cxa_find_matching_catch()|0;
   $69 = tempRet0;
   $10 = $68;
   $11 = $69;
  } else {
   $46 = ((($16)) + 88|0);
   $47 = $8;
   $48 = $9;
   __THREW__ = 0;
   invoke_viii(960,($46|0),($47|0),($48|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $70 = ___cxa_find_matching_catch()|0;
    $71 = tempRet0;
    $10 = $70;
    $11 = $71;
   } else {
    $51 = ((($16)) + 72|0);
    __THREW__ = 0;
    $52 = (invoke_ii(863,($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if (!($54)) {
     $55 = (16 + ($52))|0;
     $56 = ((($16)) + 80|0);
     __THREW__ = 0;
     $57 = (invoke_ii(863,($56|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if (!($59)) {
      $60 = (($55) + ($57))|0;
      $61 = $9;
      $62 = (($60) + ($61))|0;
      $63 = ((($16)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($62))|0;
      HEAP32[$63>>2] = $65;
      STACKTOP = sp;return;
     }
    }
    $72 = ___cxa_find_matching_catch()|0;
    $73 = tempRet0;
    $10 = $72;
    $11 = $73;
    __THREW__ = 0;
    invoke_vi(486,($46|0));
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     $87 = ___cxa_find_matching_catch(0|0)|0;
     $88 = tempRet0;
     ___clang_call_terminate($87);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(864,($42|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $87 = ___cxa_find_matching_catch(0|0)|0;
    $88 = tempRet0;
    ___clang_call_terminate($87);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($38|0));
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $87 = ___cxa_find_matching_catch(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 }
 $80 = ((($16)) + 56|0);
 __THREW__ = 0;
 invoke_vi(242,($80|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $87 = ___cxa_find_matching_catch(0|0)|0;
  $88 = tempRet0;
  ___clang_call_terminate($87);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(726,($16|0));
 $83 = __THREW__; __THREW__ = 0;
 $84 = $83&1;
 if ($84) {
  $87 = ___cxa_find_matching_catch(0|0)|0;
  $88 = tempRet0;
  ___clang_call_terminate($87);
  // unreachable;
 } else {
  $85 = $10;
  $86 = $11;
  ___resumeException($85|0);
  // unreachable;
 }
}
function __ZN12AP4_OhdrAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $bytes_used = 0, $content_id_length = 0, $rights_issuer_url_length = 0, $textual_headers_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $content_id_length = sp + 40|0;
 $rights_issuer_url_length = sp + 38|0;
 $textual_headers_length = sp + 36|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $5 = $atom_factory;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN17AP4_ContainerAtomC2Ejybhj($8,1869112434,$9,0,0,$10,$11);
 $12 = ((($8)) + 56|0);
 __ZN14AP4_OmaDrmInfoC2Ev($12);
 $13 = 5280;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 36|0);
 $15 = 5368;
 HEAP32[$14>>2] = $15;
 $16 = ((($8)) + 56|0);
 $17 = 5420;
 HEAP32[$16>>2] = $17;
 $18 = ((($8)) + 72|0);
 __THREW__ = 0;
 invoke_vi(860,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $124 = ___cxa_find_matching_catch()|0;
  $125 = tempRet0;
  $6 = $124;
  $7 = $125;
 } else {
  $21 = ((($8)) + 80|0);
  __THREW__ = 0;
  invoke_vi(860,($21|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $126 = ___cxa_find_matching_catch()|0;
   $127 = tempRet0;
   $6 = $126;
   $7 = $127;
  } else {
   $24 = ((($8)) + 88|0);
   __THREW__ = 0;
   invoke_vi(847,($24|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $128 = ___cxa_find_matching_catch()|0;
    $129 = tempRet0;
    $6 = $128;
    $7 = $129;
   } else {
    $27 = $4;
    $28 = ((($8)) + 60|0);
    __THREW__ = 0;
    (invoke_iii(940,($27|0),($28|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    do {
     if (!($30)) {
      $31 = $4;
      $32 = ((($8)) + 61|0);
      __THREW__ = 0;
      (invoke_iii(940,($31|0),($32|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       $35 = $4;
       $36 = ((($8)) + 64|0);
       __THREW__ = 0;
       (invoke_iii(857,($35|0),($36|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        $39 = $4;
        __THREW__ = 0;
        (invoke_iii(866,($39|0),($content_id_length|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         $42 = $4;
         __THREW__ = 0;
         (invoke_iii(866,($42|0),($rights_issuer_url_length|0))|0);
         $43 = __THREW__; __THREW__ = 0;
         $44 = $43&1;
         if (!($44)) {
          $45 = $4;
          __THREW__ = 0;
          (invoke_iii(866,($45|0),($textual_headers_length|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if (!($47)) {
           $48 = HEAP16[$content_id_length>>1]|0;
           $49 = $48&65535;
           __THREW__ = 0;
           $50 = (invoke_ii(867,($49|0))|0);
           $51 = __THREW__; __THREW__ = 0;
           $52 = $51&1;
           if (!($52)) {
            $buffer = $50;
            $53 = $4;
            $54 = $buffer;
            $55 = HEAP16[$content_id_length>>1]|0;
            $56 = $55&65535;
            __THREW__ = 0;
            (invoke_iiii(851,($53|0),($54|0),($56|0))|0);
            $57 = __THREW__; __THREW__ = 0;
            $58 = $57&1;
            if (!($58)) {
             $59 = ((($8)) + 72|0);
             $60 = $buffer;
             $61 = HEAP16[$content_id_length>>1]|0;
             $62 = $61&65535;
             __THREW__ = 0;
             invoke_viii(948,($59|0),($60|0),($62|0));
             $63 = __THREW__; __THREW__ = 0;
             $64 = $63&1;
             if (!($64)) {
              $65 = $buffer;
              $66 = ($65|0)==(0|0);
              if (!($66)) {
               __ZdaPv($65);
              }
              $67 = HEAP16[$rights_issuer_url_length>>1]|0;
              $68 = $67&65535;
              __THREW__ = 0;
              $69 = (invoke_ii(867,($68|0))|0);
              $70 = __THREW__; __THREW__ = 0;
              $71 = $70&1;
              if (!($71)) {
               $buffer = $69;
               $72 = $4;
               $73 = $buffer;
               $74 = HEAP16[$rights_issuer_url_length>>1]|0;
               $75 = $74&65535;
               __THREW__ = 0;
               (invoke_iiii(851,($72|0),($73|0),($75|0))|0);
               $76 = __THREW__; __THREW__ = 0;
               $77 = $76&1;
               if (!($77)) {
                $78 = ((($8)) + 80|0);
                $79 = $buffer;
                $80 = HEAP16[$rights_issuer_url_length>>1]|0;
                $81 = $80&65535;
                __THREW__ = 0;
                invoke_viii(948,($78|0),($79|0),($81|0));
                $82 = __THREW__; __THREW__ = 0;
                $83 = $82&1;
                if (!($83)) {
                 $84 = $buffer;
                 $85 = ($84|0)==(0|0);
                 if (!($85)) {
                  __ZdaPv($84);
                 }
                 $86 = HEAP16[$textual_headers_length>>1]|0;
                 $87 = $86&65535;
                 __THREW__ = 0;
                 $88 = (invoke_ii(867,($87|0))|0);
                 $89 = __THREW__; __THREW__ = 0;
                 $90 = $89&1;
                 if ($90) {
                  break;
                 }
                 $buffer = $88;
                 $91 = $4;
                 $92 = $buffer;
                 $93 = HEAP16[$textual_headers_length>>1]|0;
                 $94 = $93&65535;
                 __THREW__ = 0;
                 (invoke_iiii(851,($91|0),($92|0),($94|0))|0);
                 $95 = __THREW__; __THREW__ = 0;
                 $96 = $95&1;
                 if ($96) {
                  break;
                 }
                 $97 = ((($8)) + 88|0);
                 $98 = $buffer;
                 $99 = HEAP16[$textual_headers_length>>1]|0;
                 $100 = $99&65535;
                 __THREW__ = 0;
                 (invoke_iiii(886,($97|0),($98|0),($100|0))|0);
                 $101 = __THREW__; __THREW__ = 0;
                 $102 = $101&1;
                 if ($102) {
                  break;
                 }
                 $103 = $buffer;
                 $104 = ($103|0)==(0|0);
                 if (!($104)) {
                  __ZdaPv($103);
                 }
                 $105 = HEAP16[$content_id_length>>1]|0;
                 $106 = $105&65535;
                 $107 = (28 + ($106))|0;
                 $108 = HEAP16[$rights_issuer_url_length>>1]|0;
                 $109 = $108&65535;
                 $110 = (($107) + ($109))|0;
                 $111 = HEAP16[$textual_headers_length>>1]|0;
                 $112 = $111&65535;
                 $113 = (($110) + ($112))|0;
                 $bytes_used = $113;
                 $114 = $bytes_used;
                 $115 = $1;
                 $116 = ($114>>>0)<=($115>>>0);
                 if (!($116)) {
                  STACKTOP = sp;return;
                 }
                 $117 = $5;
                 $118 = $4;
                 $119 = $1;
                 $120 = $bytes_used;
                 $121 = (($119) - ($120))|0;
                 __THREW__ = 0;
                 invoke_viiiii(961,($8|0),($117|0),($118|0),($121|0),0);
                 $122 = __THREW__; __THREW__ = 0;
                 $123 = $122&1;
                 if ($123) {
                  break;
                 }
                 STACKTOP = sp;return;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $130 = ___cxa_find_matching_catch()|0;
    $131 = tempRet0;
    $6 = $130;
    $7 = $131;
    __THREW__ = 0;
    invoke_vi(486,($24|0));
    $132 = __THREW__; __THREW__ = 0;
    $133 = $132&1;
    if ($133) {
     $145 = ___cxa_find_matching_catch(0|0)|0;
     $146 = tempRet0;
     ___clang_call_terminate($145);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(864,($21|0));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    $145 = ___cxa_find_matching_catch(0|0)|0;
    $146 = tempRet0;
    ___clang_call_terminate($145);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($18|0));
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $145 = ___cxa_find_matching_catch(0|0)|0;
   $146 = tempRet0;
   ___clang_call_terminate($145);
   // unreachable;
  }
 }
 $138 = ((($8)) + 56|0);
 __THREW__ = 0;
 invoke_vi(242,($138|0));
 $139 = __THREW__; __THREW__ = 0;
 $140 = $139&1;
 if ($140) {
  $145 = ___cxa_find_matching_catch(0|0)|0;
  $146 = tempRet0;
  ___clang_call_terminate($145);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(726,($8|0));
 $141 = __THREW__; __THREW__ = 0;
 $142 = $141&1;
 if ($142) {
  $145 = ___cxa_find_matching_catch(0|0)|0;
  $146 = tempRet0;
  ___clang_call_terminate($145);
  // unreachable;
 } else {
  $143 = $6;
  $144 = $7;
  ___resumeException($143|0);
  // unreachable;
 }
}
function __ZN12AP4_OhdrAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $_result = 0;
 var $_result1 = 0, $_result2 = 0, $_result3 = 0, $_result4 = 0, $_result5 = 0, $_result6 = 0, $_result7 = 0, $_result8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 60|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (__ZN14AP4_ByteStream9WriteUI08Eh($7,$9)|0);
 $_result = $10;
 $11 = $_result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $_result;
  $0 = $13;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $14 = $2;
 $15 = ((($6)) + 61|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = (__ZN14AP4_ByteStream9WriteUI08Eh($14,$16)|0);
 $_result1 = $17;
 $18 = $_result1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $_result1;
  $0 = $20;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $21 = $2;
 $22 = ((($6)) + 64|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (__ZN14AP4_ByteStream9WriteUI64Ey($21,$25,$28)|0);
 $_result2 = $29;
 $30 = $_result2;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $_result2;
  $0 = $32;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $33 = $2;
 $34 = ((($6)) + 72|0);
 $35 = (__ZNK10AP4_String9GetLengthEv($34)|0);
 $36 = $35&65535;
 $37 = (__ZN14AP4_ByteStream9WriteUI16Et($33,$36)|0);
 $_result3 = $37;
 $38 = $_result3;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $_result3;
  $0 = $40;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $41 = $2;
 $42 = ((($6)) + 80|0);
 $43 = (__ZNK10AP4_String9GetLengthEv($42)|0);
 $44 = $43&65535;
 $45 = (__ZN14AP4_ByteStream9WriteUI16Et($41,$44)|0);
 $_result4 = $45;
 $46 = $_result4;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $_result4;
  $0 = $48;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $49 = $2;
 $50 = ((($6)) + 88|0);
 $51 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($50)|0);
 $52 = $51&65535;
 $53 = (__ZN14AP4_ByteStream9WriteUI16Et($49,$52)|0);
 $_result5 = $53;
 $54 = $_result5;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $_result5;
  $0 = $56;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $57 = $2;
 $58 = ((($6)) + 72|0);
 $59 = (__ZNK10AP4_String8GetCharsEv($58)|0);
 $60 = ((($6)) + 72|0);
 $61 = (__ZNK10AP4_String9GetLengthEv($60)|0);
 $62 = (__ZN14AP4_ByteStream5WriteEPKvj($57,$59,$61)|0);
 $_result6 = $62;
 $63 = $_result6;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $_result6;
  $0 = $65;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $66 = $2;
 $67 = ((($6)) + 80|0);
 $68 = (__ZNK10AP4_String8GetCharsEv($67)|0);
 $69 = ((($6)) + 80|0);
 $70 = (__ZNK10AP4_String9GetLengthEv($69)|0);
 $71 = (__ZN14AP4_ByteStream5WriteEPKvj($66,$68,$70)|0);
 $_result7 = $71;
 $72 = $_result7;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $_result7;
  $0 = $74;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $75 = $2;
 $76 = ((($6)) + 88|0);
 $77 = (__ZNK14AP4_DataBuffer7GetDataEv($76)|0);
 $78 = ((($6)) + 88|0);
 $79 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($78)|0);
 $80 = (__ZN14AP4_ByteStream5WriteEPKvj($75,$77,$79)|0);
 $_result8 = $80;
 $81 = $_result8;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = $_result8;
  $0 = $83;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $84 = ((($6)) + 36|0);
 $85 = ((($84)) + 4|0);
 $86 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$86);
 __THREW__ = 0;
 $87 = (invoke_iii(881,($85|0),($3|0))|0);
 $88 = __THREW__; __THREW__ = 0;
 $89 = $88&1;
 if (!($89)) {
  $0 = $87;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $90 = ___cxa_find_matching_catch()|0;
 $91 = tempRet0;
 $4 = $90;
 $5 = $91;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $97 = ___cxa_find_matching_catch(0|0)|0;
  $98 = tempRet0;
  ___clang_call_terminate($97);
  // unreachable;
 } else {
  $95 = $4;
  $96 = $5;
  ___resumeException($95|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_OhdrAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $curr = 0, $data_len = 0, $output_buffer = 0, $result = 0, $textual_headers_string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $output_buffer = sp + 24|0;
 $0 = $this;
 $1 = $inspector;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($4)) + 60|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 FUNCTION_TABLE_viiiii[$8 & 2047]($5,40621,$11,0,0);
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($4)) + 61|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 FUNCTION_TABLE_viiiii[$15 & 2047]($12,40639,$18,0,0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($4)) + 64|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,40654,$26,0,0);
 $30 = $1;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($4)) + 72|0);
 $35 = (__ZNK10AP4_String8GetCharsEv($34)|0);
 FUNCTION_TABLE_viiii[$33 & 2047]($30,44901,$35,0);
 $36 = $1;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($4)) + 80|0);
 $41 = (__ZNK10AP4_String8GetCharsEv($40)|0);
 FUNCTION_TABLE_viiii[$39 & 2047]($36,40671,$41,0);
 __ZN14AP4_DataBufferC2Ev($output_buffer);
 $42 = ((($4)) + 88|0);
 __THREW__ = 0;
 $43 = (invoke_ii(850,($42|0))|0);
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 do {
  if (!($45)) {
   $46 = (1 + ($43))|0;
   __THREW__ = 0;
   $47 = (invoke_iii(962,($output_buffer|0),($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if (!($49)) {
    $result = $47;
    $50 = $result;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = $1;
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($4)) + 88|0);
     __THREW__ = 0;
     $57 = (invoke_ii(849,($56|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      break;
     }
     $60 = ((($4)) + 88|0);
     __THREW__ = 0;
     $61 = (invoke_ii(850,($60|0))|0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      break;
     }
     __THREW__ = 0;
     invoke_viiiii($55|0,($52|0),(40689|0),($57|0),($61|0),1);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      break;
     }
     __ZN14AP4_DataBufferD2Ev($output_buffer);
     $112 = HEAP32[$4>>2]|0;
     $113 = ((($112)) + 52|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $1;
     $116 = (FUNCTION_TABLE_iii[$114 & 2047]($4,$115)|0);
     STACKTOP = sp;return ($116|0);
    }
    $70 = ((($4)) + 88|0);
    __THREW__ = 0;
    $71 = (invoke_ii(850,($70|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if (!($73)) {
     $data_len = $71;
     $74 = ((($4)) + 88|0);
     __THREW__ = 0;
     $75 = (invoke_ii(861,($74|0))|0);
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if (!($77)) {
      $78 = ((($4)) + 88|0);
      __THREW__ = 0;
      $79 = (invoke_ii(850,($78|0))|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      if (!($81)) {
       __THREW__ = 0;
       (invoke_iiii(886,($output_buffer|0),($75|0),($79|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if (!($83)) {
        __THREW__ = 0;
        $84 = (invoke_ii(849,($output_buffer|0))|0);
        $85 = __THREW__; __THREW__ = 0;
        $86 = $85&1;
        if (!($86)) {
         $textual_headers_string = $84;
         $curr = $84;
         $87 = ((($4)) + 88|0);
         __THREW__ = 0;
         $88 = (invoke_ii(850,($87|0))|0);
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if (!($90)) {
          $91 = $textual_headers_string;
          $92 = (($91) + ($88)|0);
          HEAP8[$92>>0] = 0;
          while(1) {
           $93 = $curr;
           $94 = $textual_headers_string;
           $95 = $data_len;
           $96 = (($94) + ($95)|0);
           $97 = ($93>>>0)<($96>>>0);
           if (!($97)) {
            break;
           }
           $98 = $curr;
           $99 = HEAP8[$98>>0]|0;
           $100 = $99&255;
           $101 = (0)==($100|0);
           if ($101) {
            $102 = $curr;
            HEAP8[$102>>0] = 10;
           }
           $103 = $curr;
           $104 = ((($103)) + 1|0);
           $curr = $104;
          }
          $105 = $1;
          $106 = HEAP32[$105>>2]|0;
          $107 = ((($106)) + 32|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = $textual_headers_string;
          __THREW__ = 0;
          invoke_viiii($108|0,($105|0),(40689|0),($109|0),0);
          $110 = __THREW__; __THREW__ = 0;
          $111 = $110&1;
          if (!($111)) {
           __ZN14AP4_DataBufferD2Ev($output_buffer);
           $112 = HEAP32[$4>>2]|0;
           $113 = ((($112)) + 52|0);
           $114 = HEAP32[$113>>2]|0;
           $115 = $1;
           $116 = (FUNCTION_TABLE_iii[$114 & 2047]($4,$115)|0);
           STACKTOP = sp;return ($116|0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $66 = ___cxa_find_matching_catch()|0;
 $67 = tempRet0;
 $2 = $66;
 $3 = $67;
 __THREW__ = 0;
 invoke_vi(486,($output_buffer|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $119 = ___cxa_find_matching_catch(0|0)|0;
  $120 = tempRet0;
  ___clang_call_terminate($119);
  // unreachable;
 } else {
  $117 = $2;
  $118 = $3;
  ___resumeException($117|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_OhdrAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $child_clone = 0, $child_item = 0, $clone = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(112)|0);
 $5 = ((($3)) + 60|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($3)) + 61|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ((($3)) + 64|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 72|0);
 __THREW__ = 0;
 $17 = (invoke_ii(870,($16|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = ((($3)) + 80|0);
  __THREW__ = 0;
  $21 = (invoke_ii(870,($20|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = ((($3)) + 88|0);
   __THREW__ = 0;
   $25 = (invoke_ii(861,($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = ((($3)) + 88|0);
    __THREW__ = 0;
    $29 = (invoke_ii(850,($28|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     __THREW__ = 0;
     invoke_viiiiiiiii(963,($4|0),($6|0),($8|0),($12|0),($15|0),($17|0),($21|0),($25|0),($29|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $clone = $4;
      $34 = ((($3)) + 36|0);
      $35 = ((($34)) + 4|0);
      $36 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($35)|0);
      $child_item = $36;
      while(1) {
       $37 = $child_item;
       $38 = ($37|0)!=(0|0);
       if (!($38)) {
        break;
       }
       $39 = $child_item;
       $40 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($39)|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($41)) + 48|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (FUNCTION_TABLE_ii[$43 & 2047]($40)|0);
       $child_clone = $44;
       $45 = $child_clone;
       $46 = ($45|0)!=(0|0);
       if ($46) {
        $47 = $clone;
        $48 = ((($47)) + 36|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ((($49)) + 8|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $child_clone;
        (FUNCTION_TABLE_iiii[$51 & 2047]($48,$52,-1)|0);
       }
       $57 = $child_item;
       $58 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($57)|0);
       $child_item = $58;
      }
      $59 = $clone;
      STACKTOP = sp;return ($59|0);
     }
    }
   }
  }
 }
 $53 = ___cxa_find_matching_catch()|0;
 $54 = tempRet0;
 $1 = $53;
 $2 = $54;
 __ZdlPv($4);
 $55 = $1;
 $56 = $2;
 ___resumeException($55|0);
 // unreachable;
 return (0)|0;
}
function __ZN14AP4_OmaDrmInfoC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5448;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN14AP4_OmaDrmInfoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZThn56_NK12AP4_OhdrAtom17GetTextualHeadersEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -56|0);
 $3 = (__ZNK12AP4_OhdrAtom17GetTextualHeadersEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_OhdrAtom17GetTextualHeadersEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 88|0);
 STACKTOP = sp;return ($2|0);
}
function __ZThn56_NK12AP4_OhdrAtom18GetRightsIssuerUrlEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -56|0);
 $3 = (__ZNK12AP4_OhdrAtom18GetRightsIssuerUrlEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_OhdrAtom18GetRightsIssuerUrlEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 80|0);
 STACKTOP = sp;return ($2|0);
}
function __ZThn56_NK12AP4_OhdrAtom12GetContentIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -56|0);
 $3 = (__ZNK12AP4_OhdrAtom12GetContentIdEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_OhdrAtom12GetContentIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 STACKTOP = sp;return ($2|0);
}
function __ZThn56_N12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -56|0);
 __ZN12AP4_OhdrAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_OhdrAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_OhdrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(227,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_OhdrAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5280;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 5368;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 56|0);
 $8 = 5420;
 HEAP32[$7>>2] = $8;
 $9 = ((($3)) + 88|0);
 __THREW__ = 0;
 invoke_vi(486,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if ($11) {
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   $1 = $21;
   $2 = $22;
   $23 = ((($3)) + 80|0);
   __THREW__ = 0;
   invoke_vi(864,($23|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    label = 9;
   }
  } else {
   $12 = ((($3)) + 80|0);
   __THREW__ = 0;
   invoke_vi(864,($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $26 = ___cxa_find_matching_catch()|0;
    $27 = tempRet0;
    $1 = $26;
    $2 = $27;
    label = 9;
    break;
   }
   $15 = ((($3)) + 72|0);
   __THREW__ = 0;
   invoke_vi(864,($15|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $28 = ___cxa_find_matching_catch()|0;
    $29 = tempRet0;
    $1 = $28;
    $2 = $29;
    label = 11;
    break;
   }
   $18 = ((($3)) + 56|0);
   __THREW__ = 0;
   invoke_vi(242,($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $1 = $33;
    $2 = $34;
    label = 12;
    break;
   } else {
    __ZN17AP4_ContainerAtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $30 = ((($3)) + 72|0);
  __THREW__ = 0;
  invoke_vi(864,($30|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $35 = ((($3)) + 56|0);
  __THREW__ = 0;
  invoke_vi(242,($35|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if (!($37)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  __THREW__ = 0;
  invoke_vi(726,($3|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if (!($39)) {
   $40 = $1;
   $41 = $2;
   ___resumeException($40|0);
   // unreachable;
  }
 }
 $42 = ___cxa_find_matching_catch(0|0)|0;
 $43 = tempRet0;
 ___clang_call_terminate($42);
 // unreachable;
}
function __ZThn56_N12AP4_OhdrAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -56|0);
 __ZN12AP4_OhdrAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_OhdrAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_OhdrAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN14AP4_OmaDrmInfoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(242,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN10AP4_SampleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 8|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 32|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($1)) + 40|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($1)) + 44|0);
 HEAP8[$16>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN10AP4_SampleD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = 0;
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 2047]($4);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10AP4_Sample13SetDataStreamER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 2047]($5);
 }
 HEAP32[$2>>2] = 0;
 $9 = $1;
 HEAP32[$2>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 2047]($12);
 STACKTOP = sp;return;
}
function __ZN12AP4_DrefAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $2;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(56)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(964,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_DrefAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 20|0;
 $bytes_available = sp;
 $atom = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $5 = $atom_factory;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN17AP4_ContainerAtomC2Ejybhj($8,1685218662,$9,0,0,$10,$11);
 $12 = 5476;
 HEAP32[$8>>2] = $12;
 $13 = ((($8)) + 36|0);
 $14 = 5552;
 HEAP32[$13>>2] = $14;
 $15 = $4;
 __THREW__ = 0;
 (invoke_iii(854,($15|0),($entry_count|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 L1: do {
  if (!($17)) {
   $18 = $1;
   $19 = (($18) - 12)|0;
   $20 = (($19) - 4)|0;
   $21 = $bytes_available;
   $22 = $21;
   HEAP32[$22>>2] = $20;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   L3: while(1) {
    $25 = HEAP32[$entry_count>>2]|0;
    $26 = (($25) + -1)|0;
    HEAP32[$entry_count>>2] = $26;
    $27 = ($25|0)!=(0);
    if (!($27)) {
     break;
    }
    while(1) {
     $28 = $5;
     $29 = $4;
     __THREW__ = 0;
     $30 = (invoke_iiiii(879,($28|0),($29|0),($bytes_available|0),($atom|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break L1;
     }
     $33 = ($30|0)==(0);
     if (!($33)) {
      continue L3;
     }
     $34 = ((($8)) + 36|0);
     $35 = ((($34)) + 4|0);
     $36 = HEAP32[$atom>>2]|0;
     __THREW__ = 0;
     (invoke_iii(880,($35|0),($36|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      break L1;
     }
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch()|0;
 $40 = tempRet0;
 $6 = $39;
 $7 = $40;
 __THREW__ = 0;
 invoke_vi(726,($8|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  $43 = $6;
  $44 = $7;
  ___resumeException($43|0);
  // unreachable;
 }
}
function __ZN12AP4_DrefAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 36|0);
 $9 = ((($8)) + 4|0);
 $10 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($9)|0);
 $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($7,$10)|0);
 $result = $11;
 $12 = $result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $result;
  $0 = $14;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $15 = ((($6)) + 36|0);
 $16 = ((($15)) + 4|0);
 $17 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$17);
 __THREW__ = 0;
 $18 = (invoke_iii(881,($16|0),($3|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $0 = $18;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $4 = $21;
 $5 = $22;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $4;
  $27 = $5;
  ___resumeException($26|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZThn36_N12AP4_DrefAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_DrefAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_DrefAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(244,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_DrefAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ContainerAtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_DrefAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_DrefAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayIN12AP4_TfraAtom5EntryEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK21AP4_SampleDescription9GetFormatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK25AP4_MpegSampleDescription14GetDecoderInfoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10AP4_Sample19GetDescriptionIndexEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9AP4_ArrayIN12AP4_HvccAtom8SequenceEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9AP4_ArrayIN12AP4_HvccAtom8SequenceEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10AP4_Sample6IsSyncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __Z18AP4_BytesToInt32BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = (__Z19AP4_BytesToUInt32BEPKh($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5604;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<4)|0);
  __ZN12AP4_TrunAtom5EntryC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZNK10AP4_Sample11GetCtsDeltaEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5604;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<4)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN10AP4_Sample6SetCtsEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($8)) + 32|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($14>>>0)>($21>>>0);
 $23 = ($11>>>0)>($18>>>0);
 $24 = ($14|0)==($21|0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 if (!($26)) {
  $43 = 0;
  $42 = ((($8)) + 40|0);
  HEAP32[$42>>2] = $43;
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($8)) + 32|0);
 $34 = $33;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_i64Subtract(($29|0),($32|0),($36|0),($39|0))|0);
 $41 = tempRet0;
 $43 = $40;
 $42 = ((($8)) + 40|0);
 HEAP32[$42>>2] = $43;
 STACKTOP = sp;return;
}
function __ZN12AP4_TrunAtom5EntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<4;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<4)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<4)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(250,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IodsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(965,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_IodsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $descriptor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1768907891,$8,$9,$10);
 $11 = 5620;
 HEAP32[$7>>2] = $11;
 HEAP32[$descriptor>>2] = 0;
 $12 = $4;
 __THREW__ = 0;
 $13 = (invoke_iii(936,($12|0),($descriptor|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = ($13|0)==(0);
  if (!($16)) {
   $36 = ((($7)) + 36|0);
   HEAP32[$36>>2] = 0;
   STACKTOP = sp;return;
  }
  $17 = HEAP32[$descriptor>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $25 = 0;
  } else {
   $19 = (___dynamic_cast($17,104,712,0)|0);
   $25 = $19;
  }
  $24 = ((($7)) + 36|0);
  HEAP32[$24>>2] = $25;
  $26 = ((($7)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$descriptor>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   STACKTOP = sp;return;
  }
  $31 = HEAP32[$29>>2]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vi($33|0,($29|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   STACKTOP = sp;return;
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  $37 = $5;
  $38 = $6;
  ___resumeException($37|0);
  // unreachable;
 }
}
function __ZN12AP4_IodsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5620;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_vi($10|0,($6|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_IodsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(252,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IodsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = ((($3)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (FUNCTION_TABLE_iii[$11 & 2047]($8,$12)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __ZN12AP4_IodsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($2)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 (FUNCTION_TABLE_iii[$10 & 2047]($7,$11)|0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_OdafAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(966,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_OdafAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 24|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1868849510,$8,$9,$10);
 $11 = 5680;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 37|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($7)) + 38|0);
 HEAP8[$13>>0] = 0;
 $14 = $4;
 __THREW__ = 0;
 (invoke_iii(940,($14|0),($s|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = HEAP8[$s>>0]|0;
  $18 = $17&255;
  $19 = $18 & 128;
  $20 = ($19|0)!=(0);
  $21 = ((($7)) + 36|0);
  $22 = $20&1;
  HEAP8[$21>>0] = $22;
  $23 = $4;
  $24 = ((($7)) + 37|0);
  __THREW__ = 0;
  (invoke_iii(940,($23|0),($24|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = $4;
   $28 = ((($7)) + 38|0);
   __THREW__ = 0;
   (invoke_iii(940,($27|0),($28|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    STACKTOP = sp;return;
   }
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $5 = $31;
 $6 = $32;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $35 = $5;
  $36 = $6;
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZN12AP4_OdafAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 $8 = $7 ? 128 : 0;
 $9 = $8&255;
 $10 = (__ZN14AP4_ByteStream9WriteUI08Eh($4,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $result;
  $0 = $13;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $14 = $2;
 $15 = ((($3)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = (__ZN14AP4_ByteStream9WriteUI08Eh($14,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $result;
  $0 = $20;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $21 = $2;
 $22 = ((($3)) + 38|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (__ZN14AP4_ByteStream9WriteUI08Eh($21,$23)|0);
 $result = $24;
 $25 = $result;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $result;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN12AP4_OdafAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9&1;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46302,$10,0,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,46323,$17,0,0);
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 38|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 FUNCTION_TABLE_viiiii[$21 & 2047]($18,46344,$24,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_OdafAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(256,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_OdafAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK12AP4_TkhdAtom10GetTrackIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN14AP4_AtomParentC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 12300;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 __ZN8AP4_ListI8AP4_AtomEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN12AP4_MoovAtom12GetTrakAtomsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8AP4_ListI12AP4_TrakAtomE9FirstItemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI12AP4_TrakAtomE4Item7GetDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8AP4_ListI12AP4_TrakAtomE4Item7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14AP4_AtomParent11GetChildrenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN17AP4_AtomSizeAdderC2ERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorC2Ev($2);
 $3 = 5756;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN17AP4_AtomSizeAdderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
 $5 = tempRet0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_i64Add(($10|0),($13|0),($4|0),($5|0))|0);
 $15 = tempRet0;
 $16 = $7;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 STACKTOP = sp;return 0;
}
function __ZN17AP4_AtomSizeAdderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(262,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(260,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(967,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI8AP4_AtomED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5740;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListI8AP4_AtomE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5740;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN12AP4_FrmaAtomC2Ej($this,$original_format) {
 $this = $this|0;
 $original_format = $original_format|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $original_format;
 $2 = $0;
 __ZN8AP4_AtomC2Ejj($2,1718775137,12);
 $3 = 5776;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 36|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN12AP4_FrmaAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1718775137,$6);
 $7 = 5776;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($5)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($9|0),($10|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $3;
  $18 = $4;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_FrmaAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_FrmaAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $format = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $format = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($format,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,40873,$format,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_FrmaAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(265,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_FrmaAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN16AP4_TrefTypeAtomC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data_size = 0, $track_id = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $track_id = sp;
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __ZN8AP4_AtomC2Ejj($6,$7,$8);
 $9 = 5836;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 36|0);
 __THREW__ = 0;
 invoke_vi(891,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $4 = $25;
  $5 = $26;
 } else {
  $13 = $2;
  $14 = (($13) - 8)|0;
  $data_size = $14;
  while(1) {
   $15 = $data_size;
   $16 = ($15>>>0)>=(4);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = $3;
   __THREW__ = 0;
   (invoke_iii(854,($17|0),($track_id|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    break;
   }
   $20 = ((($6)) + 36|0);
   __THREW__ = 0;
   (invoke_iii(968,($20|0),($track_id|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   $23 = $data_size;
   $24 = (($23) - 4)|0;
   $data_size = $24;
  }
  if ((label|0) == 9) {
   STACKTOP = sp;return;
  }
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $4 = $27;
  $5 = $28;
  __THREW__ = 0;
  invoke_vi(1,($10|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $35 = ___cxa_find_matching_catch(0|0)|0;
   $36 = tempRet0;
   ___clang_call_terminate($35);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($6|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 } else {
  $33 = $4;
  $34 = $5;
  ___resumeException($33|0);
  // unreachable;
 }
}
function __ZN16AP4_TrefTypeAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $result = 0, $track_id_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $result = 0;
 $4 = ((($3)) + 36|0);
 $5 = (__ZNK9AP4_ArrayIjE9ItemCountEv($4)|0);
 $track_id_count = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $track_id_count;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = ((($3)) + 36|0);
  $11 = $i;
  $12 = (__ZN9AP4_ArrayIjEixEm($10,$11)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($9,$13)|0);
  $result = $14;
  $15 = $result;
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 4;
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  $17 = $result;
  $0 = $17;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN16AP4_TrefTypeAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayIjE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,40908,$8,0,0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($2)) + 36|0);
  $11 = (__ZNK9AP4_ArrayIjE9ItemCountEv($10)|0);
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayIjEixEm($17,$18)|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,40923,$20,0,0);
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return 0;
}
function __ZN16AP4_TrefTypeAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(269,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN16AP4_TrefTypeAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5836;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_MoovAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($7,1836019574,$8,0,0,$9,$10);
 $11 = 5896;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 $13 = 5972;
 HEAP32[$12>>2] = $13;
 $14 = ((($7)) + 56|0);
 __THREW__ = 0;
 invoke_vi(969,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $4 = $27;
  $5 = $28;
 } else {
  $17 = ((($7)) + 72|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($7)) + 36|0);
  $19 = ((($18)) + 4|0);
  $20 = ((($7)) + 56|0);
  __THREW__ = 0;
  invoke_vii(970,($6|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  do {
   if ($22) {
    label = 7;
   } else {
    __THREW__ = 0;
    (invoke_iii(881,($19|0),($6|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $31 = ___cxa_find_matching_catch()|0;
     $32 = tempRet0;
     $4 = $31;
     $5 = $32;
     __THREW__ = 0;
     invoke_vi(284,($6|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      break;
     }
     $41 = ___cxa_find_matching_catch(0|0)|0;
     $42 = tempRet0;
     ___clang_call_terminate($41);
     // unreachable;
    } else {
     __THREW__ = 0;
     invoke_vi(284,($6|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 7;
      break;
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 7) {
   $29 = ___cxa_find_matching_catch()|0;
   $30 = tempRet0;
   $4 = $29;
   $5 = $30;
  }
  __THREW__ = 0;
  invoke_vi(282,($14|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(726,($7|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $4;
  $40 = $5;
  ___resumeException($39|0);
  // unreachable;
 }
}
function __ZN12AP4_MoovAtom12OnChildAddedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8AP4_Atom7GetTypeEv($3)|0);
 $5 = ($4|0)==(1953653099);
 if ($5) {
  $6 = $1;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $9 = 0;
  } else {
   $8 = (___dynamic_cast($6,2392,840,0)|0);
   $9 = $8;
  }
  $trak = $9;
  $10 = $trak;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = ((($2)) + 56|0);
   $13 = $trak;
   (__ZN8AP4_ListI12AP4_TrakAtomE3AddEPS0_($12,$13)|0);
  }
 }
 $14 = $1;
 __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($2,$14);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_MoovAtom12OnChildAddedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = ((($2)) + -36|0);
 $4 = $1;
 __ZN12AP4_MoovAtom12OnChildAddedEP8AP4_Atom($3,$4);
 STACKTOP = sp;return;
}
function __ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8AP4_Atom7GetTypeEv($3)|0);
 $5 = ($4|0)==(1953653099);
 if ($5) {
  $6 = $1;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $9 = 0;
  } else {
   $8 = (___dynamic_cast($6,2392,840,0)|0);
   $9 = $8;
  }
  $trak = $9;
  $10 = $trak;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = ((($2)) + 56|0);
   $13 = $trak;
   (__ZN8AP4_ListI12AP4_TrakAtomE6RemoveEPS0_($12,$13)|0);
  }
 }
 $14 = $1;
 __ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($2,$14);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = ((($2)) + -36|0);
 $4 = $1;
 __ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom($3,$4);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI12AP4_TrakAtomEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6024;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN21AP4_TrakAtomCollectorC2EP8AP4_ListI12AP4_TrakAtomE($this,$track_atoms) {
 $this = $this|0;
 $track_atoms = $track_atoms|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $track_atoms;
 $2 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorC2Ev($2);
 $3 = 6040;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN21AP4_TrakAtomCollectorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI12AP4_TrakAtomED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6024;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListI12AP4_TrakAtomE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI12AP4_TrakAtomE3AddEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(971,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListI12AP4_TrakAtomE3AddEPNS1_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN8AP4_ListI12AP4_TrakAtomE6RemoveEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $data;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $item;
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ($9|0)==($10|0);
  $12 = $item;
  if ($11) {
   label = 4;
   break;
  }
  $14 = ((($12)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $item = $15;
 }
 if ((label|0) == 4) {
  $13 = (__ZN8AP4_ListI12AP4_TrakAtomE6RemoveEPNS1_4ItemE($3,$12)|0);
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = -11;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN8AP4_ListI12AP4_TrakAtomE6RemoveEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 do {
  if ($8) {
   $12 = ($11|0)!=(0|0);
   $13 = $1;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   if ($12) {
    $16 = $1;
    $17 = ((($16)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    HEAP32[$19>>2] = $15;
    $20 = $1;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $1;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = $22;
    break;
   } else {
    $27 = ((($4)) + 12|0);
    HEAP32[$27>>2] = $15;
    $28 = ((($4)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 4|0);
    HEAP32[$30>>2] = 0;
    break;
   }
  } else {
   $31 = ((($4)) + 8|0);
   HEAP32[$31>>2] = $11;
   $32 = ((($4)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = ((($4)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 8|0);
    HEAP32[$37>>2] = 0;
    break;
   } else {
    $38 = ((($4)) + 12|0);
    HEAP32[$38>>2] = 0;
    break;
   }
  }
 } while(0);
 $39 = $1;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $43 = ((($4)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[$43>>2] = $45;
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 invoke_vi(972,($39|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $2 = $46;
  $3 = $47;
  __ZdlPv($39);
  $48 = $2;
  $49 = $3;
  ___resumeException($48|0);
  // unreachable;
 }
 __ZdlPv($39);
 $43 = ((($4)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + -1)|0;
 HEAP32[$43>>2] = $45;
 STACKTOP = sp;return 0;
}
function __ZN8AP4_ListI12AP4_TrakAtomE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI12AP4_TrakAtomE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(972,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI12AP4_TrakAtomED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(282,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI12AP4_TrakAtomE4ItemC2EPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI12AP4_TrakAtomE3AddEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZThn36_N12AP4_MoovAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_MoovAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_MoovAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(273,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MoovAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 5896;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 5972;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 56|0);
 __THREW__ = 0;
 invoke_vi(282,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN17AP4_ContainerAtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(726,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_MoovAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_MoovAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK21AP4_TrakAtomCollector6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8AP4_Atom7GetTypeEv($3)|0);
 $5 = ($4|0)==(1953653099);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = $1;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $9 = 0;
 } else {
  $8 = (___dynamic_cast($6,2392,840,0)|0);
  $9 = $8;
 }
 $trak = $9;
 $10 = $trak;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $trak;
 (__ZN8AP4_ListI12AP4_TrakAtomE3AddEPS0_($13,$14)|0);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_TrakAtomCollectorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(284,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_HvccAtom14GetProfileNameEhh($profile_space,$profile) {
 $profile_space = $profile_space|0;
 $profile = $profile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $profile_space;
 $2 = $profile;
 $3 = $1;
 $4 = $3&255;
 $5 = ($4|0)!=(0);
 L1: do {
  if ($5) {
   $0 = 0;
  } else {
   $6 = $2;
   $7 = $6&255;
   switch ($7|0) {
   case 1:  {
    $0 = 41013;
    break L1;
    break;
   }
   case 2:  {
    $0 = 41018;
    break L1;
    break;
   }
   case 3:  {
    $0 = 41026;
    break L1;
    break;
   }
   case 4:  {
    $0 = 41045;
    break L1;
    break;
   }
   default: {
    $0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __ZN12AP4_HvccAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $payload_data = 0;
 var $payload_size = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $payload_data = sp + 16|0;
 $1 = $size;
 $2 = $stream;
 $6 = $1;
 $7 = (($6) - 8)|0;
 $payload_size = $7;
 $8 = $payload_size;
 __ZN14AP4_DataBufferC2Ej($payload_data,$8);
 $9 = $2;
 __THREW__ = 0;
 $10 = (invoke_ii(849,($payload_data|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  label = 5;
 } else {
  $13 = $payload_size;
  __THREW__ = 0;
  $14 = (invoke_iiii(851,($9|0),($10|0),($13|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   label = 5;
  } else {
   $result = $14;
   $17 = $result;
   $18 = ($17|0)!=(0);
   if ($18) {
    $0 = 0;
    $5 = 1;
    __ZN14AP4_DataBufferD2Ev($payload_data);
    $32 = $0;
    STACKTOP = sp;return ($32|0);
   }
   __THREW__ = 0;
   $21 = (invoke_ii(883,120)|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 5;
   } else {
    $24 = $1;
    __THREW__ = 0;
    $25 = (invoke_ii(861,($payload_data|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     __THREW__ = 0;
     invoke_viii(973,($21|0),($24|0),($25|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if (!($29)) {
      $0 = $21;
      $5 = 1;
      __ZN14AP4_DataBufferD2Ev($payload_data);
      $32 = $0;
      STACKTOP = sp;return ($32|0);
     }
    }
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $3 = $30;
    $4 = $31;
    __ZdlPv($21);
   }
  }
 }
 if ((label|0) == 5) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
 }
 __THREW__ = 0;
 invoke_vi(486,($payload_data|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $35 = $3;
  $36 = $4;
  ___resumeException($35|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_HvccAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejj($3,1752589123,8);
 $4 = 6060;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($3)) + 37|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($3)) + 38|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($3)) + 39|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 48|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($3)) + 56|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($3)) + 57|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($3)) + 60|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($3)) + 64|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($3)) + 65|0);
 HEAP8[$19>>0] = 0;
 $20 = ((($3)) + 66|0);
 HEAP8[$20>>0] = 0;
 $21 = ((($3)) + 67|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($3)) + 68|0);
 HEAP8[$22>>0] = 0;
 $23 = ((($3)) + 69|0);
 HEAP8[$23>>0] = 0;
 $24 = ((($3)) + 70|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($3)) + 71|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($3)) + 72|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($3)) + 74|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($3)) + 75|0);
 HEAP8[$28>>0] = 0;
 $29 = ((($3)) + 76|0);
 HEAP8[$29>>0] = 0;
 $30 = ((($3)) + 77|0);
 HEAP8[$30>>0] = 0;
 $31 = ((($3)) + 80|0);
 __THREW__ = 0;
 invoke_vi(974,($31|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $1 = $46;
  $2 = $47;
 } else {
  $34 = ((($3)) + 96|0);
  __THREW__ = 0;
  invoke_vi(847,($34|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $1 = $48;
   $2 = $49;
  } else {
   __THREW__ = 0;
   invoke_vi(975,($3|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    $39 = ((($3)) + 96|0);
    __THREW__ = 0;
    $40 = (invoke_ii(850,($39|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if (!($42)) {
     $43 = ((($3)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + ($40))|0;
     HEAP32[$43>>2] = $45;
     STACKTOP = sp;return;
    }
   }
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   $1 = $50;
   $2 = $51;
   __THREW__ = 0;
   invoke_vi(486,($34|0));
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $60 = ___cxa_find_matching_catch(0|0)|0;
    $61 = tempRet0;
    ___clang_call_terminate($60);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(291,($31|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $60 = ___cxa_find_matching_catch(0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $60 = ___cxa_find_matching_catch(0|0)|0;
  $61 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable;
 } else {
  $58 = $1;
  $59 = $2;
  ___resumeException($58|0);
  // unreachable;
 }
}
function __ZN12AP4_HvccAtom14UpdateRawBytesEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN12AP4_HvccAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN8AP4_AtomC2Ejj($4,1752589123,$7);
 $8 = 6060;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = $1;
 $11 = ((($10)) + 36|0);
 $12 = HEAP8[$11>>0]|0;
 HEAP8[$9>>0] = $12;
 $13 = ((($4)) + 37|0);
 $14 = $1;
 $15 = ((($14)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 HEAP8[$13>>0] = $16;
 $17 = ((($4)) + 38|0);
 $18 = $1;
 $19 = ((($18)) + 38|0);
 $20 = HEAP8[$19>>0]|0;
 HEAP8[$17>>0] = $20;
 $21 = ((($4)) + 39|0);
 $22 = $1;
 $23 = ((($22)) + 39|0);
 $24 = HEAP8[$23>>0]|0;
 HEAP8[$21>>0] = $24;
 $25 = ((($4)) + 40|0);
 $26 = $1;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$25>>2] = $28;
 $29 = ((($4)) + 48|0);
 $30 = $1;
 $31 = ((($30)) + 48|0);
 $32 = $31;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $29;
 $39 = $38;
 HEAP32[$39>>2] = $34;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = ((($4)) + 56|0);
 $43 = $1;
 $44 = ((($43)) + 56|0);
 $45 = HEAP8[$44>>0]|0;
 HEAP8[$42>>0] = $45;
 $46 = ((($4)) + 57|0);
 $47 = $1;
 $48 = ((($47)) + 57|0);
 $49 = HEAP8[$48>>0]|0;
 HEAP8[$46>>0] = $49;
 $50 = ((($4)) + 60|0);
 $51 = $1;
 $52 = ((($51)) + 60|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$50>>2] = $53;
 $54 = ((($4)) + 64|0);
 $55 = $1;
 $56 = ((($55)) + 64|0);
 $57 = HEAP8[$56>>0]|0;
 HEAP8[$54>>0] = $57;
 $58 = ((($4)) + 65|0);
 $59 = $1;
 $60 = ((($59)) + 65|0);
 $61 = HEAP8[$60>>0]|0;
 HEAP8[$58>>0] = $61;
 $62 = ((($4)) + 66|0);
 $63 = $1;
 $64 = ((($63)) + 66|0);
 $65 = HEAP8[$64>>0]|0;
 HEAP8[$62>>0] = $65;
 $66 = ((($4)) + 67|0);
 $67 = $1;
 $68 = ((($67)) + 67|0);
 $69 = HEAP8[$68>>0]|0;
 HEAP8[$66>>0] = $69;
 $70 = ((($4)) + 68|0);
 $71 = $1;
 $72 = ((($71)) + 68|0);
 $73 = HEAP8[$72>>0]|0;
 HEAP8[$70>>0] = $73;
 $74 = ((($4)) + 69|0);
 $75 = $1;
 $76 = ((($75)) + 69|0);
 $77 = HEAP8[$76>>0]|0;
 HEAP8[$74>>0] = $77;
 $78 = ((($4)) + 70|0);
 $79 = $1;
 $80 = ((($79)) + 70|0);
 $81 = HEAP8[$80>>0]|0;
 HEAP8[$78>>0] = $81;
 $82 = ((($4)) + 71|0);
 $83 = $1;
 $84 = ((($83)) + 71|0);
 $85 = HEAP8[$84>>0]|0;
 HEAP8[$82>>0] = $85;
 $86 = ((($4)) + 72|0);
 $87 = $1;
 $88 = ((($87)) + 72|0);
 $89 = HEAP16[$88>>1]|0;
 HEAP16[$86>>1] = $89;
 $90 = ((($4)) + 74|0);
 $91 = $1;
 $92 = ((($91)) + 74|0);
 $93 = HEAP8[$92>>0]|0;
 HEAP8[$90>>0] = $93;
 $94 = ((($4)) + 75|0);
 $95 = $1;
 $96 = ((($95)) + 75|0);
 $97 = HEAP8[$96>>0]|0;
 HEAP8[$94>>0] = $97;
 $98 = ((($4)) + 76|0);
 $99 = $1;
 $100 = ((($99)) + 76|0);
 $101 = HEAP8[$100>>0]|0;
 HEAP8[$98>>0] = $101;
 $102 = ((($4)) + 77|0);
 $103 = $1;
 $104 = ((($103)) + 77|0);
 $105 = HEAP8[$104>>0]|0;
 HEAP8[$102>>0] = $105;
 $106 = ((($4)) + 80|0);
 __THREW__ = 0;
 invoke_vi(974,($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $132 = ___cxa_find_matching_catch()|0;
  $133 = tempRet0;
  $2 = $132;
  $3 = $133;
 } else {
  $109 = ((($4)) + 96|0);
  $110 = $1;
  $111 = ((($110)) + 96|0);
  __THREW__ = 0;
  invoke_vii(897,($109|0),($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $134 = ___cxa_find_matching_catch()|0;
   $135 = tempRet0;
   $2 = $134;
   $3 = $135;
  } else {
   $i = 0;
   $i = 0;
   while(1) {
    $114 = $i;
    $115 = $1;
    $116 = ((($115)) + 80|0);
    __THREW__ = 0;
    $117 = (invoke_ii(976,($116|0))|0);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     break;
    }
    $120 = ($114>>>0)<($117>>>0);
    if (!($120)) {
     label = 12;
     break;
    }
    $121 = ((($4)) + 80|0);
    $122 = $1;
    $123 = ((($122)) + 80|0);
    $124 = $i;
    __THREW__ = 0;
    $125 = (invoke_iii(977,($123|0),($124|0))|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     break;
    }
    __THREW__ = 0;
    (invoke_iii(978,($121|0),($125|0))|0);
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     break;
    }
    $130 = $i;
    $131 = (($130) + 1)|0;
    $i = $131;
   }
   if ((label|0) == 12) {
    STACKTOP = sp;return;
   }
   $136 = ___cxa_find_matching_catch()|0;
   $137 = tempRet0;
   $2 = $136;
   $3 = $137;
   __THREW__ = 0;
   invoke_vi(486,($109|0));
   $138 = __THREW__; __THREW__ = 0;
   $139 = $138&1;
   if ($139) {
    $146 = ___cxa_find_matching_catch(0|0)|0;
    $147 = tempRet0;
    ___clang_call_terminate($146);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(291,($106|0));
  $140 = __THREW__; __THREW__ = 0;
  $141 = $140&1;
  if ($141) {
   $146 = ___cxa_find_matching_catch(0|0)|0;
   $147 = tempRet0;
   ___clang_call_terminate($146);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($4|0));
 $142 = __THREW__; __THREW__ = 0;
 $143 = $142&1;
 if ($143) {
  $146 = ___cxa_find_matching_catch(0|0)|0;
  $147 = tempRet0;
  ___clang_call_terminate($146);
  // unreachable;
 } else {
  $144 = $2;
  $145 = $3;
  ___resumeException($144|0);
  // unreachable;
 }
}
function __ZN12AP4_HvccAtomC2EjPKh($this,$size,$payload) {
 $this = $this|0;
 $size = $size|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cursor = 0, $i = 0;
 var $j = 0, $nalu_count = 0, $nalu_length = 0, $num_seq = 0, $payload_size = 0, $seq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $payload;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1752589123,$6);
 $7 = 6060;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 80|0);
 __THREW__ = 0;
 invoke_vi(974,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $213 = ___cxa_find_matching_catch()|0;
  $214 = tempRet0;
  $3 = $213;
  $4 = $214;
 } else {
  $11 = ((($5)) + 96|0);
  __THREW__ = 0;
  invoke_vi(847,($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $215 = ___cxa_find_matching_catch()|0;
   $216 = tempRet0;
   $3 = $215;
   $4 = $216;
  } else {
   $14 = $1;
   $15 = (($14) - 8)|0;
   $payload_size = $15;
   $16 = ((($5)) + 96|0);
   $17 = $2;
   $18 = $payload_size;
   __THREW__ = 0;
   (invoke_iiii(886,($16|0),($17|0),($18|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   L7: do {
    if (!($20)) {
     $21 = $2;
     $22 = HEAP8[$21>>0]|0;
     $23 = ((($5)) + 36|0);
     HEAP8[$23>>0] = $22;
     $24 = $2;
     $25 = ((($24)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $27 >> 6;
     $29 = $28 & 3;
     $30 = $29&255;
     $31 = ((($5)) + 37|0);
     HEAP8[$31>>0] = $30;
     $32 = $2;
     $33 = ((($32)) + 1|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 >> 5;
     $37 = $36 & 1;
     $38 = $37&255;
     $39 = ((($5)) + 38|0);
     HEAP8[$39>>0] = $38;
     $40 = $2;
     $41 = ((($40)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = $43 & 31;
     $45 = $44&255;
     $46 = ((($5)) + 39|0);
     HEAP8[$46>>0] = $45;
     $47 = $2;
     $48 = ((($47)) + 2|0);
     __THREW__ = 0;
     $49 = (invoke_ii(893,($48|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      $52 = ((($5)) + 40|0);
      HEAP32[$52>>2] = $49;
      $53 = $2;
      $54 = ((($53)) + 6|0);
      __THREW__ = 0;
      $55 = (invoke_ii(893,($54|0))|0);
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if (!($57)) {
       $58 = (_bitshift64Shl(($55|0),0,16)|0);
       $59 = tempRet0;
       $60 = $2;
       $61 = ((($60)) + 10|0);
       __THREW__ = 0;
       $62 = (invoke_ii(979,($61|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if (!($64)) {
        $65 = $62&65535;
        $66 = $58 | $65;
        $67 = ((($5)) + 48|0);
        $68 = $67;
        $69 = $68;
        HEAP32[$69>>2] = $66;
        $70 = (($68) + 4)|0;
        $71 = $70;
        HEAP32[$71>>2] = $59;
        $72 = $2;
        $73 = ((($72)) + 12|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = ((($5)) + 56|0);
        HEAP8[$75>>0] = $74;
        $76 = $2;
        $77 = ((($76)) + 13|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $78&255;
        $80 = $79 >> 4;
        $81 = $80 & 15;
        $82 = $81&255;
        $83 = ((($5)) + 57|0);
        HEAP8[$83>>0] = $82;
        $84 = $2;
        $85 = ((($84)) + 13|0);
        __THREW__ = 0;
        $86 = (invoke_ii(979,($85|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if (!($88)) {
         $89 = $86&65535;
         $90 = $89 & 4095;
         $91 = ((($5)) + 60|0);
         HEAP32[$91>>2] = $90;
         $92 = $2;
         $93 = ((($92)) + 15|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94&255;
         $96 = $95 >> 2;
         $97 = $96 & 63;
         $98 = $97&255;
         $99 = ((($5)) + 64|0);
         HEAP8[$99>>0] = $98;
         $100 = $2;
         $101 = ((($100)) + 15|0);
         $102 = HEAP8[$101>>0]|0;
         $103 = $102&255;
         $104 = $103 & 3;
         $105 = $104&255;
         $106 = ((($5)) + 65|0);
         HEAP8[$106>>0] = $105;
         $107 = $2;
         $108 = ((($107)) + 16|0);
         $109 = HEAP8[$108>>0]|0;
         $110 = $109&255;
         $111 = $110 >> 2;
         $112 = $111 & 63;
         $113 = $112&255;
         $114 = ((($5)) + 66|0);
         HEAP8[$114>>0] = $113;
         $115 = $2;
         $116 = ((($115)) + 16|0);
         $117 = HEAP8[$116>>0]|0;
         $118 = $117&255;
         $119 = $118 & 3;
         $120 = $119&255;
         $121 = ((($5)) + 67|0);
         HEAP8[$121>>0] = $120;
         $122 = $2;
         $123 = ((($122)) + 17|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = $124&255;
         $126 = $125 >> 3;
         $127 = $126 & 31;
         $128 = $127&255;
         $129 = ((($5)) + 68|0);
         HEAP8[$129>>0] = $128;
         $130 = $2;
         $131 = ((($130)) + 17|0);
         $132 = HEAP8[$131>>0]|0;
         $133 = $132&255;
         $134 = $133 & 7;
         $135 = (8 + ($134))|0;
         $136 = $135&255;
         $137 = ((($5)) + 69|0);
         HEAP8[$137>>0] = $136;
         $138 = $2;
         $139 = ((($138)) + 18|0);
         $140 = HEAP8[$139>>0]|0;
         $141 = $140&255;
         $142 = $141 >> 3;
         $143 = $142 & 31;
         $144 = $143&255;
         $145 = ((($5)) + 70|0);
         HEAP8[$145>>0] = $144;
         $146 = $2;
         $147 = ((($146)) + 18|0);
         $148 = HEAP8[$147>>0]|0;
         $149 = $148&255;
         $150 = $149 & 7;
         $151 = (8 + ($150))|0;
         $152 = $151&255;
         $153 = ((($5)) + 71|0);
         HEAP8[$153>>0] = $152;
         $154 = $2;
         $155 = ((($154)) + 19|0);
         __THREW__ = 0;
         $156 = (invoke_ii(979,($155|0))|0);
         $157 = __THREW__; __THREW__ = 0;
         $158 = $157&1;
         if (!($158)) {
          $159 = ((($5)) + 72|0);
          HEAP16[$159>>1] = $156;
          $160 = $2;
          $161 = ((($160)) + 21|0);
          $162 = HEAP8[$161>>0]|0;
          $163 = $162&255;
          $164 = $163 >> 6;
          $165 = $164 & 3;
          $166 = $165&255;
          $167 = ((($5)) + 74|0);
          HEAP8[$167>>0] = $166;
          $168 = $2;
          $169 = ((($168)) + 21|0);
          $170 = HEAP8[$169>>0]|0;
          $171 = $170&255;
          $172 = $171 >> 3;
          $173 = $172 & 7;
          $174 = $173&255;
          $175 = ((($5)) + 75|0);
          HEAP8[$175>>0] = $174;
          $176 = $2;
          $177 = ((($176)) + 21|0);
          $178 = HEAP8[$177>>0]|0;
          $179 = $178&255;
          $180 = $179 >> 2;
          $181 = $180 & 1;
          $182 = $181&255;
          $183 = ((($5)) + 76|0);
          HEAP8[$183>>0] = $182;
          $184 = $2;
          $185 = ((($184)) + 21|0);
          $186 = HEAP8[$185>>0]|0;
          $187 = $186&255;
          $188 = $187 & 3;
          $189 = (1 + ($188))|0;
          $190 = $189&255;
          $191 = ((($5)) + 77|0);
          HEAP8[$191>>0] = $190;
          $192 = $2;
          $193 = ((($192)) + 22|0);
          $194 = HEAP8[$193>>0]|0;
          $num_seq = $194;
          $195 = ((($5)) + 80|0);
          $196 = $num_seq;
          $197 = $196&255;
          __THREW__ = 0;
          (invoke_iii(980,($195|0),($197|0))|0);
          $198 = __THREW__; __THREW__ = 0;
          $199 = $198&1;
          if (!($199)) {
           $cursor = 23;
           $i = 0;
           while(1) {
            $200 = $i;
            $201 = $num_seq;
            $202 = $201&255;
            $203 = ($200>>>0)<($202>>>0);
            if (!($203)) {
             label = 29;
             break;
            }
            $204 = ((($5)) + 80|0);
            $205 = $i;
            __THREW__ = 0;
            $206 = (invoke_iii(981,($204|0),($205|0))|0);
            $207 = __THREW__; __THREW__ = 0;
            $208 = $207&1;
            if ($208) {
             break L7;
            }
            $seq = $206;
            $209 = $cursor;
            $210 = (($209) + 1)|0;
            $211 = $payload_size;
            $212 = ($210>>>0)>($211>>>0);
            if ($212) {
             label = 29;
             break;
            }
            $221 = $cursor;
            $222 = $2;
            $223 = (($222) + ($221)|0);
            $224 = HEAP8[$223>>0]|0;
            $225 = $224&255;
            $226 = $225 >> 7;
            $227 = $226 & 1;
            $228 = $227&255;
            $229 = $seq;
            HEAP8[$229>>0] = $228;
            $230 = $cursor;
            $231 = $2;
            $232 = (($231) + ($230)|0);
            $233 = HEAP8[$232>>0]|0;
            $234 = $233&255;
            $235 = $234 >> 6;
            $236 = $235 & 1;
            $237 = $236&255;
            $238 = $seq;
            $239 = ((($238)) + 1|0);
            HEAP8[$239>>0] = $237;
            $240 = $cursor;
            $241 = $2;
            $242 = (($241) + ($240)|0);
            $243 = HEAP8[$242>>0]|0;
            $244 = $243&255;
            $245 = $244 & 63;
            $246 = $245&255;
            $247 = $seq;
            $248 = ((($247)) + 2|0);
            HEAP8[$248>>0] = $246;
            $249 = $cursor;
            $250 = (($249) + 1)|0;
            $cursor = $250;
            $251 = $cursor;
            $252 = (($251) + 2)|0;
            $253 = $payload_size;
            $254 = ($252>>>0)>($253>>>0);
            if ($254) {
             label = 29;
             break;
            }
            $255 = $cursor;
            $256 = $2;
            $257 = (($256) + ($255)|0);
            __THREW__ = 0;
            $258 = (invoke_ii(979,($257|0))|0);
            $259 = __THREW__; __THREW__ = 0;
            $260 = $259&1;
            if ($260) {
             break L7;
            }
            $nalu_count = $258;
            $261 = $seq;
            $262 = ((($261)) + 4|0);
            $263 = $nalu_count;
            $264 = $263&65535;
            __THREW__ = 0;
            (invoke_iii(982,($262|0),($264|0))|0);
            $265 = __THREW__; __THREW__ = 0;
            $266 = $265&1;
            if ($266) {
             break L7;
            }
            $267 = $cursor;
            $268 = (($267) + 2)|0;
            $cursor = $268;
            $j = 0;
            while(1) {
             $269 = $j;
             $270 = $nalu_count;
             $271 = $270&65535;
             $272 = ($269>>>0)<($271>>>0);
             if (!($272)) {
              break;
             }
             $273 = $cursor;
             $274 = (($273) + 2)|0;
             $275 = $payload_size;
             $276 = ($274>>>0)>($275>>>0);
             if ($276) {
              break;
             }
             $277 = $cursor;
             $278 = $2;
             $279 = (($278) + ($277)|0);
             __THREW__ = 0;
             $280 = (invoke_ii(979,($279|0))|0);
             $281 = __THREW__; __THREW__ = 0;
             $282 = $281&1;
             if ($282) {
              break L7;
             }
             $283 = $280&65535;
             $nalu_length = $283;
             $284 = $cursor;
             $285 = (($284) + 2)|0;
             $cursor = $285;
             $286 = $cursor;
             $287 = $nalu_length;
             $288 = (($286) + ($287))|0;
             $289 = $payload_size;
             $290 = ($288>>>0)>($289>>>0);
             if ($290) {
              break;
             }
             $291 = $seq;
             $292 = ((($291)) + 4|0);
             $293 = $j;
             __THREW__ = 0;
             $294 = (invoke_iii(958,($292|0),($293|0))|0);
             $295 = __THREW__; __THREW__ = 0;
             $296 = $295&1;
             if ($296) {
              break L7;
             }
             $297 = $cursor;
             $298 = $2;
             $299 = (($298) + ($297)|0);
             $300 = $nalu_length;
             __THREW__ = 0;
             (invoke_iiii(886,($294|0),($299|0),($300|0))|0);
             $301 = __THREW__; __THREW__ = 0;
             $302 = $301&1;
             if ($302) {
              break L7;
             }
             $303 = $nalu_length;
             $304 = $cursor;
             $305 = (($304) + ($303))|0;
             $cursor = $305;
             $306 = $j;
             $307 = (($306) + 1)|0;
             $j = $307;
            }
            $308 = $i;
            $309 = (($308) + 1)|0;
            $i = $309;
           }
           if ((label|0) == 29) {
            STACKTOP = sp;return;
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $217 = ___cxa_find_matching_catch()|0;
   $218 = tempRet0;
   $3 = $217;
   $4 = $218;
   __THREW__ = 0;
   invoke_vi(486,($11|0));
   $219 = __THREW__; __THREW__ = 0;
   $220 = $219&1;
   if ($220) {
    $316 = ___cxa_find_matching_catch(0|0)|0;
    $317 = tempRet0;
    ___clang_call_terminate($316);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(291,($8|0));
  $310 = __THREW__; __THREW__ = 0;
  $311 = $310&1;
  if ($311) {
   $316 = ___cxa_find_matching_catch(0|0)|0;
   $317 = tempRet0;
   ___clang_call_terminate($316);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $312 = __THREW__; __THREW__ = 0;
 $313 = $312&1;
 if ($313) {
  $316 = ___cxa_find_matching_catch(0|0)|0;
  $317 = tempRet0;
  ___clang_call_terminate($316);
  // unreachable;
 } else {
  $314 = $3;
  $315 = $4;
  ___resumeException($314|0);
  // unreachable;
 }
}
function __ZN12AP4_HvccAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 96|0);
 $5 = (__ZNK14AP4_DataBuffer7GetDataEv($4)|0);
 $6 = ((($2)) + 96|0);
 $7 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($6)|0);
 $8 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN12AP4_HvccAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $profile_name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,41050,$9,0,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 37|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 FUNCTION_TABLE_viiiii[$13 & 2047]($10,41072,$16,0,0);
 $17 = ((($2)) + 37|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ((($2)) + 39|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = (__ZN12AP4_HvccAtom14GetProfileNameEhh($18,$20)|0);
 $profile_name = $21;
 $22 = $profile_name;
 $23 = ($22|0)!=(0|0);
 $24 = $1;
 if ($23) {
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $profile_name;
  FUNCTION_TABLE_viiii[$27 & 2047]($24,41086,$28,0);
 } else {
  $29 = HEAP32[$24>>2]|0;
  $30 = ((($29)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($2)) + 39|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  FUNCTION_TABLE_viiiii[$31 & 2047]($24,41086,$34,0,0);
 }
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 38|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 FUNCTION_TABLE_viiiii[$38 & 2047]($35,41094,$41,0,0);
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($2)) + 40|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_viiiii[$45 & 2047]($42,41099,$47,0,1);
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($2)) + 48|0);
 $53 = $52;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 FUNCTION_TABLE_viiiii[$51 & 2047]($48,41121,$55,$58,1);
 $59 = $1;
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($2)) + 56|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 FUNCTION_TABLE_viiiii[$62 & 2047]($59,41132,$65,0,0);
 $66 = $1;
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($2)) + 60|0);
 $71 = HEAP32[$70>>2]|0;
 FUNCTION_TABLE_viiiii[$69 & 2047]($66,41138,$71,0,0);
 $72 = $1;
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 24|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($2)) + 65|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 FUNCTION_TABLE_viiiii[$75 & 2047]($72,41163,$78,0,0);
 $79 = $1;
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 24|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($2)) + 67|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 FUNCTION_TABLE_viiiii[$82 & 2047]($79,41180,$85,0,0);
 $86 = $1;
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 24|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($2)) + 71|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 FUNCTION_TABLE_viiiii[$89 & 2047]($86,41194,$92,0,0);
 $93 = $1;
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 24|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($2)) + 69|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 FUNCTION_TABLE_viiiii[$96 & 2047]($93,41207,$99,0,0);
 $100 = $1;
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($2)) + 72|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105&65535;
 FUNCTION_TABLE_viiiii[$103 & 2047]($100,41218,$106,0,0);
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($108)) + 24|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($2)) + 74|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112&255;
 FUNCTION_TABLE_viiiii[$110 & 2047]($107,41237,$113,0,0);
 $114 = $1;
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($115)) + 24|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($2)) + 75|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 FUNCTION_TABLE_viiiii[$117 & 2047]($114,41257,$120,0,0);
 $121 = $1;
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 24|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($2)) + 76|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 FUNCTION_TABLE_viiiii[$124 & 2047]($121,41283,$127,0,0);
 $128 = $1;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 24|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($2)) + 77|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 FUNCTION_TABLE_viiiii[$131 & 2047]($128,41302,$134,0,0);
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6120;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6120;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE6AppendERKS1_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*20)|0)|0);
 $36 = $2;
 __ZN12AP4_HvccAtom8SequenceC2ERKS0_($35,$36);
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = ((($3)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + (($17*20)|0)|0);
   __ZN12AP4_HvccAtom8SequenceD2Ev($20);
   $21 = $i;
   $22 = (($21) + 1)|0;
   $i = $22;
  }
  $23 = $2;
  $24 = ((($3)) + 8|0);
  HEAP32[$24>>2] = $23;
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $25 = (__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj($3,$12)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $29 = ((($3)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $i1 = $30;
 while(1) {
  $31 = $i1;
  $32 = $2;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $i1;
  $35 = ((($3)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + (($34*20)|0)|0);
  ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;HEAP32[$37+16>>2]=0|0;
  __ZN12AP4_HvccAtom8SequenceC2Ev($37);
  $38 = $i1;
  $39 = (($38) + 1)|0;
  $i1 = $39;
 }
 $40 = $2;
 $41 = ((($3)) + 8|0);
 HEAP32[$41>>2] = $40;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayI14AP4_DataBufferE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = ((($3)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + (($17*20)|0)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_vi[$22 & 2047]($20);
   $23 = $i;
   $24 = (($23) + 1)|0;
   $i = $24;
  }
  $25 = $2;
  $26 = ((($3)) + 8|0);
  HEAP32[$26>>2] = $25;
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $27 = (__ZN9AP4_ArrayI14AP4_DataBufferE14EnsureCapacityEj($3,$12)|0);
 $result = $27;
 $28 = $result;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $result;
  $0 = $30;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $31 = ((($3)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $i1 = $32;
 while(1) {
  $33 = $i1;
  $34 = $2;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $i1;
  $37 = ((($3)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + (($36*20)|0)|0);
  __ZN14AP4_DataBufferC2Ev($39);
  $40 = $i1;
  $41 = (($40) + 1)|0;
  $i1 = $41;
 }
 $42 = $2;
 $43 = ((($3)) + 8|0);
 HEAP32[$43>>2] = $42;
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZN12AP4_HvccAtom8SequenceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN9AP4_ArrayI14AP4_DataBufferEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI14AP4_DataBufferEC2ERKS1_($this,$copy) {
 $this = $this|0;
 $copy = $copy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $copy;
 $2 = $0;
 $3 = 5192;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = (__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv($7)|0);
 (__ZN9AP4_ArrayI14AP4_DataBufferE14EnsureCapacityEj($2,$8)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = ((($2)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($14*20)|0)|0);
  $18 = $i;
  $19 = $1;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + (($18*20)|0)|0);
  __ZN14AP4_DataBufferC2ERKS_($17,$22);
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 8|0);
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN12AP4_HvccAtom8SequenceC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP16[$3>>1]=HEAP16[$4>>1]|0;HEAP8[$3+2>>0]=HEAP8[$4+2>>0]|0;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 __ZN9AP4_ArrayI14AP4_DataBufferEC2ERKS1_($5,$7);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $2;
 $9 = ($8*20)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*20)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*20)|0)|0);
    __ZN12AP4_HvccAtom8SequenceC2ERKS0_($25,$29);
    $30 = $i;
    $31 = ((($3)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + (($30*20)|0)|0);
    __ZN12AP4_HvccAtom8SequenceD2Ev($33);
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
   $36 = ((($3)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   __ZdlPv($37);
  }
 }
 $38 = $new_items;
 $39 = ((($3)) + 12|0);
 HEAP32[$39>>2] = $38;
 $40 = $2;
 $41 = ((($3)) + 4|0);
 HEAP32[$41>>2] = $40;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZN12AP4_HvccAtom8SequenceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN9AP4_ArrayI14AP4_DataBufferED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*20)|0)|0);
  __ZN12AP4_HvccAtom8SequenceD2Ev($9);
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = ((($1)) + 8|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(291,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_HvccAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(287,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_HvccAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6060;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 96|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 80|0);
   __THREW__ = 0;
   invoke_vi(291,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 80|0);
   __THREW__ = 0;
   invoke_vi(291,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN15AP4_SampleTable16GenerateStblAtomERP17AP4_ContainerAtom($this,$stbl) {
 $this = $this|0;
 $stbl = $stbl|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $all_samples_are_sync = 0, $chunk_count = 0, $chunk_index = 0, $chunk_offsets = 0, $chunk_offsets_32 = 0, $co64 = 0, $ctts = 0, $current_chunk_index = 0, $current_chunk_offset = 0, $current_chunk_size = 0;
 var $current_cts_delta = 0, $current_cts_delta_run = 0, $current_duration = 0, $current_duration_run = 0, $current_sample_description_index = 0, $current_samples_in_chunk = 0, $i = 0, $i1 = 0, $new_cts_delta = 0, $new_duration = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $position_in_chunk = 0, $result = 0, $sample = 0, $sample_count = 0, $stco = 0, $stsc = 0, $stsd = 0;
 var $stss = 0, $stsz = 0, $stts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $current_chunk_offset = sp + 48|0;
 $chunk_offsets = sp + 104|0;
 $sample = sp;
 $chunk_index = sp + 84|0;
 $position_in_chunk = sp + 80|0;
 $0 = $this;
 $1 = $stbl;
 $4 = $0;
 $5 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(983,($5|0),1937007212);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $61 = ___cxa_find_matching_catch()|0;
  $62 = tempRet0;
  $2 = $61;
  $3 = $62;
  __ZdlPv($5);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $8 = $1;
 HEAP32[$8>>2] = $5;
 $9 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vii(984,($9|0),($4|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $63 = ___cxa_find_matching_catch()|0;
  $64 = tempRet0;
  $2 = $63;
  $3 = $64;
  __ZdlPv($9);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $stsd = $9;
 $12 = (__Znwj(64)|0);
 __THREW__ = 0;
 invoke_vi(985,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $2 = $65;
  $3 = $66;
  __ZdlPv($12);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $stsz = $12;
 $15 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vi(986,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $67 = ___cxa_find_matching_catch()|0;
  $68 = tempRet0;
  $2 = $67;
  $3 = $68;
  __ZdlPv($15);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $stsc = $15;
 $18 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vi(987,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $69 = ___cxa_find_matching_catch()|0;
  $70 = tempRet0;
  $2 = $69;
  $3 = $70;
  __ZdlPv($18);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $stts = $18;
 $21 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vi(988,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $2 = $71;
  $3 = $72;
  __ZdlPv($21);
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 $stss = $21;
 $ctts = 0;
 $current_chunk_index = 0;
 $current_chunk_size = 0;
 $24 = $current_chunk_offset;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $current_samples_in_chunk = 0;
 $current_sample_description_index = 0;
 $current_duration = 0;
 $current_duration_run = 0;
 $current_cts_delta = 0;
 $current_cts_delta_run = 0;
 __ZN9AP4_ArrayIyEC2Ev($chunk_offsets);
 $all_samples_are_sync = 0;
 $28 = HEAP32[$4>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 __THREW__ = 0;
 $31 = (invoke_ii($30|0,($4|0))|0);
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 L25: do {
  if ($33) {
   label = 22;
  } else {
   $sample_count = $31;
   $i = 0;
   L27: while(1) {
    $34 = $i;
    $35 = $sample_count;
    $36 = ($34>>>0)<($35>>>0);
    if (!($36)) {
     label = 53;
     break;
    }
    __THREW__ = 0;
    invoke_vi(989,($sample|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     label = 22;
     break L25;
    }
    $39 = HEAP32[$4>>2]|0;
    $40 = ((($39)) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $i;
    __THREW__ = 0;
    (invoke_iiii($41|0,($4|0),($42|0),($sample|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if ($44) {
     label = 23;
     break;
    }
    __THREW__ = 0;
    $45 = (invoke_ii(990,($sample|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     label = 23;
     break;
    }
    $new_duration = $45;
    $48 = $new_duration;
    $49 = $current_duration;
    $50 = ($48|0)!=($49|0);
    $51 = $current_duration_run;
    $52 = ($51|0)!=(0);
    $or$cond = $50 & $52;
    if ($or$cond) {
     $53 = $stts;
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($54)) + 56|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $current_duration_run;
     $58 = $current_duration;
     __THREW__ = 0;
     (invoke_iiii($56|0,($53|0),($57|0),($58|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 23;
      break;
     }
     $current_duration_run = 0;
    }
    $77 = $current_duration_run;
    $78 = (($77) + 1)|0;
    $current_duration_run = $78;
    $79 = $new_duration;
    $current_duration = $79;
    __THREW__ = 0;
    $80 = (invoke_ii(991,($sample|0))|0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     label = 23;
     break;
    }
    $new_cts_delta = $80;
    $83 = $new_cts_delta;
    $84 = $current_cts_delta;
    $85 = ($83|0)!=($84|0);
    $86 = $current_cts_delta_run;
    $87 = ($86|0)!=(0);
    $or$cond3 = $85 & $87;
    if ($or$cond3) {
     $88 = $ctts;
     $89 = ($88|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      $90 = (invoke_ii(883,64)|0);
      $91 = __THREW__; __THREW__ = 0;
      $92 = $91&1;
      if ($92) {
       label = 23;
       break;
      }
      __THREW__ = 0;
      invoke_vi(992,($90|0));
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 30;
       break;
      }
      $ctts = $90;
     }
     $97 = $ctts;
     $98 = $current_cts_delta_run;
     $99 = $current_cts_delta;
     __THREW__ = 0;
     (invoke_iiii(993,($97|0),($98|0),($99|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 23;
      break;
     }
     $current_cts_delta_run = 0;
    }
    $102 = $current_cts_delta_run;
    $103 = (($102) + 1)|0;
    $current_cts_delta_run = $103;
    $104 = $new_cts_delta;
    $current_cts_delta = $104;
    $105 = $stsz;
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($106)) + 64|0);
    $108 = HEAP32[$107>>2]|0;
    __THREW__ = 0;
    $109 = (invoke_ii(994,($sample|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    $111 = $110&1;
    if ($111) {
     label = 23;
     break;
    }
    __THREW__ = 0;
    (invoke_iii($108|0,($105|0),($109|0))|0);
    $112 = __THREW__; __THREW__ = 0;
    $113 = $112&1;
    if ($113) {
     label = 23;
     break;
    }
    __THREW__ = 0;
    $114 = (invoke_ii(995,($sample|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     label = 23;
     break;
    }
    do {
     if ($114) {
      $117 = $stss;
      $118 = $i;
      $119 = (($118) + 1)|0;
      __THREW__ = 0;
      (invoke_iii(996,($117|0),($119|0))|0);
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       label = 23;
       break L27;
      }
      $122 = $i;
      $123 = ($122|0)==(0);
      if (!($123)) {
       break;
      }
      $all_samples_are_sync = 1;
     } else {
      $all_samples_are_sync = 0;
     }
    } while(0);
    HEAP32[$chunk_index>>2] = 0;
    HEAP32[$position_in_chunk>>2] = 0;
    $124 = HEAP32[$4>>2]|0;
    $125 = ((($124)) + 20|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $i;
    __THREW__ = 0;
    $128 = (invoke_iiiii($126|0,($4|0),($127|0),($chunk_index|0),($position_in_chunk|0))|0);
    $129 = __THREW__; __THREW__ = 0;
    $130 = $129&1;
    if ($130) {
     label = 23;
     break;
    }
    $result = $128;
    $131 = $result;
    $132 = ($131|0)==(0);
    if ($132) {
     $133 = HEAP32[$chunk_index>>2]|0;
     $134 = $current_chunk_index;
     $135 = ($133|0)!=($134|0);
     $136 = $current_samples_in_chunk;
     $137 = ($136|0)!=(0);
     $or$cond5 = $135 & $137;
     if ($or$cond5) {
      __THREW__ = 0;
      (invoke_iii(997,($chunk_offsets|0),($current_chunk_offset|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       label = 23;
       break;
      }
      $140 = $current_chunk_size;
      $141 = $current_chunk_offset;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = (($141) + 4)|0;
      $145 = $144;
      $146 = HEAP32[$145>>2]|0;
      $147 = (_i64Add(($143|0),($146|0),($140|0),0)|0);
      $148 = tempRet0;
      $149 = $current_chunk_offset;
      $150 = $149;
      HEAP32[$150>>2] = $147;
      $151 = (($149) + 4)|0;
      $152 = $151;
      HEAP32[$152>>2] = $148;
      $153 = $stsc;
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 56|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $current_samples_in_chunk;
      $158 = $current_sample_description_index;
      $159 = (($158) + 1)|0;
      __THREW__ = 0;
      (invoke_iiiii($156|0,($153|0),1,($157|0),($159|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 23;
       break;
      }
      $current_samples_in_chunk = 0;
      $current_chunk_size = 0;
     }
     $162 = HEAP32[$chunk_index>>2]|0;
     $current_chunk_index = $162;
    }
    __THREW__ = 0;
    $163 = (invoke_ii(998,($sample|0))|0);
    $164 = __THREW__; __THREW__ = 0;
    $165 = $164&1;
    if ($165) {
     label = 23;
     break;
    }
    $current_sample_description_index = $163;
    __THREW__ = 0;
    $166 = (invoke_ii(994,($sample|0))|0);
    $167 = __THREW__; __THREW__ = 0;
    $168 = $167&1;
    if ($168) {
     label = 23;
     break;
    }
    $169 = $current_chunk_size;
    $170 = (($169) + ($166))|0;
    $current_chunk_size = $170;
    $171 = $current_samples_in_chunk;
    $172 = (($171) + 1)|0;
    $current_samples_in_chunk = $172;
    __THREW__ = 0;
    invoke_vi(999,($sample|0));
    $173 = __THREW__; __THREW__ = 0;
    $174 = $173&1;
    if ($174) {
     label = 22;
     break L25;
    }
    $175 = $i;
    $176 = (($175) + 1)|0;
    $i = $176;
   }
   if ((label|0) == 23) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $2 = $75;
    $3 = $76;
   }
   else if ((label|0) == 30) {
    $95 = ___cxa_find_matching_catch()|0;
    $96 = tempRet0;
    $2 = $95;
    $3 = $96;
    __ZdlPv($90);
   }
   else if ((label|0) == 53) {
    $179 = $sample_count;
    $180 = ($179|0)!=(0);
    if ($180) {
     $181 = $stts;
     $182 = HEAP32[$181>>2]|0;
     $183 = ((($182)) + 56|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $current_duration_run;
     $186 = $current_duration;
     __THREW__ = 0;
     (invoke_iiii($184|0,($181|0),($185|0),($186|0))|0);
     $187 = __THREW__; __THREW__ = 0;
     $188 = $187&1;
     if ($188) {
      label = 22;
      break;
     }
    }
    $189 = $ctts;
    $190 = ($189|0)!=(0|0);
    do {
     if ($190) {
      $191 = $current_cts_delta_run;
      $192 = ($191|0)!=(0);
      if ($192) {
       $194 = $ctts;
       $195 = $current_cts_delta_run;
       $196 = $current_cts_delta;
       __THREW__ = 0;
       (invoke_iiii(993,($194|0),($195|0),($196|0))|0);
       $197 = __THREW__; __THREW__ = 0;
       $198 = $197&1;
       if ($198) {
        label = 22;
        break L25;
       } else {
        break;
       }
      } else {
       __THREW__ = 0;
       invoke_viiii(1000,(41375|0),(41402|0),166,(41437|0));
       $193 = __THREW__; __THREW__ = 0;
       label = 22;
       break L25;
      }
     }
    } while(0);
    $199 = $current_samples_in_chunk;
    $200 = ($199|0)!=(0);
    if ($200) {
     __THREW__ = 0;
     (invoke_iii(997,($chunk_offsets|0),($current_chunk_offset|0))|0);
     $201 = __THREW__; __THREW__ = 0;
     $202 = $201&1;
     if ($202) {
      label = 22;
      break;
     }
     $203 = $stsc;
     $204 = HEAP32[$203>>2]|0;
     $205 = ((($204)) + 56|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $current_samples_in_chunk;
     $208 = $current_sample_description_index;
     $209 = (($208) + 1)|0;
     __THREW__ = 0;
     (invoke_iiiii($206|0,($203|0),1,($207|0),($209|0))|0);
     $210 = __THREW__; __THREW__ = 0;
     $211 = $210&1;
     if ($211) {
      label = 22;
      break;
     }
    }
    $212 = $1;
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($213)) + 36|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ((($215)) + 8|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $stsd;
    __THREW__ = 0;
    (invoke_iiii($217|0,($214|0),($218|0),-1)|0);
    $219 = __THREW__; __THREW__ = 0;
    $220 = $219&1;
    if ($220) {
     label = 22;
     break;
    }
    $221 = $1;
    $222 = HEAP32[$221>>2]|0;
    $223 = ((($222)) + 36|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = ((($224)) + 8|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = $stsz;
    __THREW__ = 0;
    (invoke_iiii($226|0,($223|0),($227|0),-1)|0);
    $228 = __THREW__; __THREW__ = 0;
    $229 = $228&1;
    if ($229) {
     label = 22;
     break;
    }
    $230 = $1;
    $231 = HEAP32[$230>>2]|0;
    $232 = ((($231)) + 36|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = ((($233)) + 8|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $stsc;
    __THREW__ = 0;
    (invoke_iiii($235|0,($232|0),($236|0),-1)|0);
    $237 = __THREW__; __THREW__ = 0;
    $238 = $237&1;
    if ($238) {
     label = 22;
     break;
    }
    $239 = $1;
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($240)) + 36|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = ((($242)) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $stts;
    __THREW__ = 0;
    (invoke_iiii($244|0,($241|0),($245|0),-1)|0);
    $246 = __THREW__; __THREW__ = 0;
    $247 = $246&1;
    if ($247) {
     label = 22;
     break;
    }
    $248 = $ctts;
    $249 = ($248|0)!=(0|0);
    if ($249) {
     $250 = $1;
     $251 = HEAP32[$250>>2]|0;
     $252 = ((($251)) + 36|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ((($253)) + 8|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $ctts;
     __THREW__ = 0;
     (invoke_iiii($255|0,($252|0),($256|0),-1)|0);
     $257 = __THREW__; __THREW__ = 0;
     $258 = $257&1;
     if ($258) {
      label = 22;
      break;
     }
    }
    $259 = $all_samples_are_sync;
    $260 = $259&1;
    do {
     if ($260) {
      label = 73;
     } else {
      $261 = $stss;
      __THREW__ = 0;
      $262 = (invoke_ii(1001,($261|0))|0);
      $263 = __THREW__; __THREW__ = 0;
      $264 = $263&1;
      if ($264) {
       label = 22;
       break L25;
      }
      __THREW__ = 0;
      $265 = (invoke_ii(1002,($262|0))|0);
      $266 = __THREW__; __THREW__ = 0;
      $267 = $266&1;
      if ($267) {
       label = 22;
       break L25;
      }
      $268 = ($265|0)!=(0);
      if (!($268)) {
       label = 73;
       break;
      }
      $269 = $1;
      $270 = HEAP32[$269>>2]|0;
      $271 = ((($270)) + 36|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = ((($272)) + 8|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $stss;
      __THREW__ = 0;
      (invoke_iiii($274|0,($271|0),($275|0),-1)|0);
      $276 = __THREW__; __THREW__ = 0;
      $277 = $276&1;
      if ($277) {
       label = 22;
       break L25;
      }
     }
    } while(0);
    if ((label|0) == 73) {
     $278 = $stss;
     $279 = ($278|0)==(0|0);
     if (!($279)) {
      $280 = HEAP32[$278>>2]|0;
      $281 = ((($280)) + 4|0);
      $282 = HEAP32[$281>>2]|0;
      __THREW__ = 0;
      invoke_vi($282|0,($278|0));
      $283 = __THREW__; __THREW__ = 0;
      $284 = $283&1;
      if ($284) {
       label = 22;
       break;
      }
     }
    }
    __THREW__ = 0;
    $285 = (invoke_ii(1003,($chunk_offsets|0))|0);
    $286 = __THREW__; __THREW__ = 0;
    $287 = $286&1;
    if ($287) {
     label = 22;
     break;
    }
    $chunk_count = $285;
    $288 = $current_chunk_offset;
    $289 = $288;
    $290 = HEAP32[$289>>2]|0;
    $291 = (($288) + 4)|0;
    $292 = $291;
    $293 = HEAP32[$292>>2]|0;
    $294 = ($293>>>0)<(0);
    $295 = ($290>>>0)<=(4294967295);
    $296 = ($293|0)==(0);
    $297 = $296 & $295;
    $298 = $294 | $297;
    if (!($298)) {
     __THREW__ = 0;
     $342 = (invoke_ii(883,48)|0);
     $343 = __THREW__; __THREW__ = 0;
     $344 = $343&1;
     if ($344) {
      label = 22;
      break;
     }
     __THREW__ = 0;
     $345 = (invoke_iii(856,($chunk_offsets|0),0)|0);
     $346 = __THREW__; __THREW__ = 0;
     $347 = $346&1;
     do {
      if (!($347)) {
       $348 = $chunk_count;
       __THREW__ = 0;
       invoke_viii(1005,($342|0),($345|0),($348|0));
       $349 = __THREW__; __THREW__ = 0;
       $350 = $349&1;
       if ($350) {
        break;
       }
       $co64 = $342;
       $351 = $1;
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($352)) + 36|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($354)) + 8|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = $co64;
       __THREW__ = 0;
       (invoke_iiii($356|0,($353|0),($357|0),-1)|0);
       $358 = __THREW__; __THREW__ = 0;
       $359 = $358&1;
       if ($359) {
        label = 22;
        break L25;
       }
       __ZN9AP4_ArrayIyED2Ev($chunk_offsets);
       STACKTOP = sp;return 0;
      }
     } while(0);
     $360 = ___cxa_find_matching_catch()|0;
     $361 = tempRet0;
     $2 = $360;
     $3 = $361;
     __ZdlPv($342);
     break;
    }
    $299 = $chunk_count;
    $$arith = $299<<2;
    $$overflow = ($299>>>0)>(1073741823);
    $300 = $$overflow ? -1 : $$arith;
    __THREW__ = 0;
    $301 = (invoke_ii(867,($300|0))|0);
    $302 = __THREW__; __THREW__ = 0;
    $303 = $302&1;
    if ($303) {
     label = 22;
     break;
    }
    $chunk_offsets_32 = $301;
    $i1 = 0;
    while(1) {
     $304 = $i1;
     $305 = $chunk_count;
     $306 = ($304>>>0)<($305>>>0);
     if (!($306)) {
      break;
     }
     $307 = $i1;
     __THREW__ = 0;
     $308 = (invoke_iii(856,($chunk_offsets|0),($307|0))|0);
     $309 = __THREW__; __THREW__ = 0;
     $310 = $309&1;
     if ($310) {
      label = 22;
      break L25;
     }
     $311 = $308;
     $312 = $311;
     $313 = HEAP32[$312>>2]|0;
     $314 = (($311) + 4)|0;
     $315 = $314;
     $316 = HEAP32[$315>>2]|0;
     $317 = $i1;
     $318 = $chunk_offsets_32;
     $319 = (($318) + ($317<<2)|0);
     HEAP32[$319>>2] = $313;
     $320 = $i1;
     $321 = (($320) + 1)|0;
     $i1 = $321;
    }
    __THREW__ = 0;
    $322 = (invoke_ii(883,48)|0);
    $323 = __THREW__; __THREW__ = 0;
    $324 = $323&1;
    if ($324) {
     label = 22;
     break;
    }
    $325 = $chunk_offsets_32;
    $326 = $chunk_count;
    __THREW__ = 0;
    invoke_viii(1004,($322|0),($325|0),($326|0));
    $327 = __THREW__; __THREW__ = 0;
    $328 = $327&1;
    if ($328) {
     $340 = ___cxa_find_matching_catch()|0;
     $341 = tempRet0;
     $2 = $340;
     $3 = $341;
     __ZdlPv($322);
     break;
    }
    $stco = $322;
    $329 = $1;
    $330 = HEAP32[$329>>2]|0;
    $331 = ((($330)) + 36|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = ((($332)) + 8|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = $stco;
    __THREW__ = 0;
    (invoke_iiii($334|0,($331|0),($335|0),-1)|0);
    $336 = __THREW__; __THREW__ = 0;
    $337 = $336&1;
    if ($337) {
     label = 22;
     break;
    }
    $338 = $chunk_offsets_32;
    $339 = ($338|0)==(0|0);
    if ($339) {
     __ZN9AP4_ArrayIyED2Ev($chunk_offsets);
     STACKTOP = sp;return 0;
    }
    __ZdaPv($338);
    __ZN9AP4_ArrayIyED2Ev($chunk_offsets);
    STACKTOP = sp;return 0;
   }
   __THREW__ = 0;
   invoke_vi(999,($sample|0));
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    $366 = ___cxa_find_matching_catch(0|0)|0;
    $367 = tempRet0;
    ___clang_call_terminate($366);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $73 = ___cxa_find_matching_catch()|0;
  $74 = tempRet0;
  $2 = $73;
  $3 = $74;
 }
 __THREW__ = 0;
 invoke_vi(26,($chunk_offsets|0));
 $362 = __THREW__; __THREW__ = 0;
 $363 = $362&1;
 if ($363) {
  $366 = ___cxa_find_matching_catch(0|0)|0;
  $367 = tempRet0;
  ___clang_call_terminate($366);
  // unreachable;
 } else {
  $364 = $2;
  $365 = $3;
  ___resumeException($364|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_StssAtom10GetEntriesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN15AP4_SampleTableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(293,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_8bdlAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = $stream;
 $5 = $1;
 $6 = ($5>>>0)<(16);
 if ($6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $7 = (__Znwj(64)|0);
 $8 = $1;
 $9 = $2;
 __THREW__ = 0;
 invoke_viii(1006,($7|0),($8|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZdlPv($7);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 }
 $0 = $7;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZN12AP4_8bdlAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,945972332,$6);
 $7 = 6184;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 HEAP32[$8>>2] = 2020437024;
 $9 = ((($5)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($5)) + 44|0);
 $11 = $1;
 $12 = (($11) - 8)|0;
 $13 = (($12) - 8)|0;
 __THREW__ = 0;
 invoke_vii(949,($10|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $3 = $42;
  $4 = $43;
 } else {
  $16 = $2;
  $17 = ((($5)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($17|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = $2;
   $21 = ((($5)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(854,($20|0),($21|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = ((($5)) + 44|0);
    $25 = ((($5)) + 44|0);
    __THREW__ = 0;
    $26 = (invoke_ii(1007,($25|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     (invoke_iii(848,($24|0),($26|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      $31 = $2;
      $32 = ((($5)) + 44|0);
      __THREW__ = 0;
      $33 = (invoke_ii(849,($32|0))|0);
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if (!($35)) {
       $36 = ((($5)) + 44|0);
       __THREW__ = 0;
       $37 = (invoke_ii(850,($36|0))|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if (!($39)) {
        __THREW__ = 0;
        (invoke_iiii(851,($31|0),($33|0),($37|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $3 = $44;
  $4 = $45;
  __THREW__ = 0;
  invoke_vi(486,($10|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   $52 = ___cxa_find_matching_catch(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $50 = $3;
  $51 = $4;
  ___resumeException($50|0);
  // unreachable;
 }
}
function __ZN12AP4_8bdlAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $11 = $2;
 $12 = ((($3)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $18 = $2;
  $19 = ((($3)) + 44|0);
  $20 = (__ZNK14AP4_DataBuffer7GetDataEv($19)|0);
  $21 = ((($3)) + 44|0);
  $22 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($21)|0);
  $23 = (__ZN14AP4_ByteStream5WriteEPKvj($18,$20,$22)|0);
  $result = $23;
  $24 = $result;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZN12AP4_8bdlAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enc = 0, $xml = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $enc = sp + 24|0;
 $xml = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 __Z19AP4_FormatFourCharsPcj($enc,$6);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiii[$10 & 2047]($7,41469,$enc,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($4)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,41478,$16,0,0);
 $17 = ((($4)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(2020437024);
 if (!($19)) {
  $37 = $1;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($4)) + 44|0);
  $42 = (__ZNK14AP4_DataBuffer7GetDataEv($41)|0);
  $43 = ((($4)) + 44|0);
  $44 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($43)|0);
  FUNCTION_TABLE_viiiii[$40 & 2047]($37,41495,$42,$44,0);
  STACKTOP = sp;return 0;
 }
 $20 = ((($4)) + 44|0);
 $21 = (__ZNK14AP4_DataBuffer7GetDataEv($20)|0);
 $22 = ((($4)) + 44|0);
 $23 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($22)|0);
 __ZN10AP4_StringC2EPKcj($xml,$21,$23);
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 $28 = (invoke_ii(870,($xml|0))|0);
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_viiii($27|0,($24|0),(41495|0),($28|0),0);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   __ZN10AP4_StringD2Ev($xml);
   STACKTOP = sp;return 0;
  }
 }
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $2 = $33;
 $3 = $34;
 __THREW__ = 0;
 invoke_vi(864,($xml|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  $45 = $2;
  $46 = $3;
  ___resumeException($45|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_8bdlAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(296,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_8bdlAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6184;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN11AP4_SdpAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $str_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1935962144,$6);
 $7 = 6244;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 __THREW__ = 0;
 invoke_vi(860,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $3 = $34;
  $4 = $35;
 } else {
  $11 = $1;
  $12 = (($11) - 8)|0;
  $str_size = $12;
  $13 = $str_size;
  $14 = ($13>>>0)>(0);
  if (!($14)) {
   STACKTOP = sp;return;
  }
  $15 = $str_size;
  $16 = (($15) + 1)|0;
  __THREW__ = 0;
  $17 = (invoke_ii(867,($16|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $str = $17;
   $20 = $2;
   $21 = $str;
   $22 = $str_size;
   __THREW__ = 0;
   (invoke_iiii(851,($20|0),($21|0),($22|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = $str_size;
    $26 = $str;
    $27 = (($26) + ($25)|0);
    HEAP8[$27>>0] = 0;
    $28 = ((($5)) + 36|0);
    $29 = $str;
    __THREW__ = 0;
    (invoke_iii(862,($28|0),($29|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     $32 = $str;
     $33 = ($32|0)==(0|0);
     if ($33) {
      STACKTOP = sp;return;
     }
     __ZdaPv($32);
     STACKTOP = sp;return;
    }
   }
  }
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $3 = $36;
  $4 = $37;
  __THREW__ = 0;
  invoke_vi(864,($8|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $44 = ___cxa_find_matching_catch(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $44 = ___cxa_find_matching_catch(0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 } else {
  $42 = $3;
  $43 = $4;
  ___resumeException($42|0);
  // unreachable;
 }
}
function __ZN11AP4_SdpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = (__ZNK10AP4_String8GetCharsEv($5)|0);
 $7 = ((($3)) + 36|0);
 $8 = (__ZNK10AP4_String9GetLengthEv($7)|0);
 $9 = (__ZN14AP4_ByteStream5WriteEPKvj($4,$6,$8)|0);
 $result = $9;
 $10 = $result;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $result;
  $0 = $12;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($3)) + 36|0);
 $16 = (__ZNK10AP4_String9GetLengthEv($15)|0);
 $17 = (8 + ($16))|0;
 $18 = (($14) - ($17))|0;
 $padding = $18;
 while(1) {
  $19 = $padding;
  $20 = (($19) + -1)|0;
  $padding = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $2;
  (__ZN14AP4_ByteStream9WriteUI08Eh($22,0)|0);
 }
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN11AP4_SdpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,44024,$8,0);
 STACKTOP = sp;return 0;
}
function __ZN11AP4_SdpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(300,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN11AP4_SdpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6244;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN23AP4_CencTrackEncryptionC2ER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = 6304;
 HEAP32[$2>>2] = $3;
 $4 = $1;
 $5 = ((($2)) + 4|0);
 (__ZN14AP4_ByteStream8ReadUI24ERj($4,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 8|0);
 (__ZN14AP4_ByteStream8ReadUI08ERh($6,$7)|0);
 $8 = ((($2)) + 9|0);
 dest=$8; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $9 = $1;
 $10 = ((($2)) + 9|0);
 (__ZN14AP4_ByteStream4ReadEPvj($9,$10,16)|0);
 STACKTOP = sp;return;
}
function __ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,41521,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 8|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,41541,$15,0,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 9|0);
 FUNCTION_TABLE_viiiii[$19 & 2047]($16,41557,$20,16,0);
 STACKTOP = sp;return 0;
}
function __ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI24Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $11 = $2;
 $12 = ((($3)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI08Eh($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $18 = $2;
 $19 = ((($3)) + 9|0);
 $20 = (__ZN14AP4_ByteStream5WriteEPKvj($18,$19,16)|0);
 $result = $20;
 $21 = $result;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $result;
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN24AP4_CencSampleEncryptionC2ER8AP4_AtomjR14AP4_ByteStream($this,$outer,$size,$stream) {
 $this = $this|0;
 $outer = $outer|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $payload_size = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $outer;
 $2 = $size;
 $3 = $stream;
 $6 = $0;
 $7 = 4260;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $1;
 HEAP32[$8>>2] = $9;
 $10 = ((($6)) + 36|0);
 __ZN14AP4_DataBufferC2Ev($10);
 $11 = ((($6)) + 56|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 __THREW__ = 0;
 $13 = (invoke_ii(1008,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if (!($15)) {
   $16 = $13 & 1;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $3;
    $19 = ((($6)) + 8|0);
    __THREW__ = 0;
    (invoke_iii(941,($18|0),($19|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
    $22 = $3;
    $23 = ((($6)) + 12|0);
    __THREW__ = 0;
    (invoke_iii(940,($22|0),($23|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     break;
    }
    $26 = $3;
    $27 = ((($6)) + 13|0);
    __THREW__ = 0;
    (invoke_iiii(851,($26|0),($27|0),16)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     break;
    }
   } else {
    $34 = ((($6)) + 8|0);
    HEAP32[$34>>2] = 0;
    $35 = ((($6)) + 12|0);
    HEAP8[$35>>0] = 0;
    $36 = ((($6)) + 13|0);
    dest=$36; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
   $37 = $3;
   $38 = ((($6)) + 32|0);
   __THREW__ = 0;
   (invoke_iii(854,($37|0),($38|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    $41 = $2;
    $42 = ((($6)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    __THREW__ = 0;
    $47 = (invoke_ii($46|0,($43|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if (!($49)) {
     $50 = (($41) - ($47))|0;
     $51 = (($50) - 4)|0;
     $payload_size = $51;
     $52 = ((($6)) + 36|0);
     $53 = $payload_size;
     __THREW__ = 0;
     (invoke_iii(848,($52|0),($53|0))|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if (!($55)) {
      $56 = $3;
      $57 = ((($6)) + 36|0);
      __THREW__ = 0;
      $58 = (invoke_ii(849,($57|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if (!($60)) {
       $61 = $payload_size;
       __THREW__ = 0;
       (invoke_iiii(851,($56|0),($58|0),($61|0))|0);
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if (!($63)) {
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 } while(0);
 $30 = ___cxa_find_matching_catch()|0;
 $31 = tempRet0;
 $4 = $30;
 $5 = $31;
 __THREW__ = 0;
 invoke_vi(486,($10|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $4;
  $65 = $5;
  ___resumeException($64|0);
  // unreachable;
 }
}
function __ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bocd = 0, $boed = 0, $data_ok = 0, $header = 0, $i = 0;
 var $i2 = 0, $info = 0, $info1 = 0, $info_size = 0, $iv_size = 0, $j = 0, $k = 0, $num_entries = 0, $num_entries3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 88|0;
 $1 = $this;
 $2 = $inspector;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK8AP4_Atom8GetFlagsEv($5)|0);
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_viiiii[$12 & 2047]($9,41569,$14,0,0);
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($3)) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  FUNCTION_TABLE_viiiii[$18 & 2047]($15,41581,$21,0,0);
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($3)) + 13|0);
  FUNCTION_TABLE_viiiii[$25 & 2047]($22,44897,$26,16,0);
 }
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_viiiii[$30 & 2047]($27,41589,$32,0,0);
 $33 = $2;
 $34 = (__ZN17AP4_AtomInspector12GetVerbosityEv($33)|0);
 $35 = ($34>>>0)<(2);
 if ($35) {
  $0 = 0;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 $36 = ((($3)) + 12|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $iv_size = $38;
 $39 = $iv_size;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   $41 = ((($3)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZNK8AP4_Atom8GetFlagsEv($42)|0);
   $44 = $43 & 2;
   $45 = ($44|0)!=(0);
   if (!($45)) {
    $98 = ((($3)) + 32|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)!=(0);
    if ($100) {
     $101 = ((($3)) + 36|0);
     $102 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($101)|0);
     $103 = ((($3)) + 32|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($102>>>0) / ($104>>>0))&-1;
     $106 = $105;
    } else {
     $106 = 0;
    }
    $iv_size = $106;
    $107 = $iv_size;
    $108 = ((($3)) + 32|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = Math_imul($107, $109)|0;
    $111 = ((($3)) + 36|0);
    $112 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($111)|0);
    $113 = ($110|0)!=($112|0);
    if (!($113)) {
     break;
    }
    $0 = 0;
    $174 = $0;
    STACKTOP = sp;return ($174|0);
   }
   $data_ok = 0;
   $k = 1;
   while(1) {
    $46 = $k;
    $47 = ($46>>>0)<=(2);
    if (!($47)) {
     break;
    }
    $48 = $data_ok;
    $49 = $48&1;
    $50 = $49 ^ 1;
    if (!($50)) {
     break;
    }
    $data_ok = 1;
    $51 = $k;
    $52 = $51<<3;
    $iv_size = $52;
    $53 = ((($3)) + 36|0);
    $54 = (__ZNK14AP4_DataBuffer7GetDataEv($53)|0);
    $info = $54;
    $55 = ((($3)) + 36|0);
    $56 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($55)|0);
    $info_size = $56;
    $i = 0;
    while(1) {
     $57 = $i;
     $58 = ((($3)) + 32|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57>>>0)<($59>>>0);
     if (!($60)) {
      break;
     }
     $61 = $info_size;
     $62 = $iv_size;
     $63 = (($62) + 2)|0;
     $64 = ($61>>>0)<($63>>>0);
     if ($64) {
      label = 13;
      break;
     }
     $65 = $iv_size;
     $66 = $info;
     $67 = (($66) + ($65)|0);
     $info = $67;
     $68 = $iv_size;
     $69 = $info_size;
     $70 = (($69) - ($68))|0;
     $info_size = $70;
     $71 = $info;
     $72 = (__Z18AP4_BytesToInt16BEPKh($71)|0);
     $73 = $72 << 16 >> 16;
     $num_entries = $73;
     $74 = $info;
     $75 = ((($74)) + 2|0);
     $info = $75;
     $76 = $info_size;
     $77 = (($76) - 2)|0;
     $info_size = $77;
     $78 = $info_size;
     $79 = $num_entries;
     $80 = ($79*6)|0;
     $81 = ($78>>>0)<($80>>>0);
     if ($81) {
      label = 15;
      break;
     }
     $82 = $num_entries;
     $83 = ($82*6)|0;
     $84 = $info;
     $85 = (($84) + ($83)|0);
     $info = $85;
     $86 = $num_entries;
     $87 = ($86*6)|0;
     $88 = $info_size;
     $89 = (($88) - ($87))|0;
     $info_size = $89;
     $90 = $i;
     $91 = (($90) + 1)|0;
     $i = $91;
    }
    if ((label|0) == 13) {
     label = 0;
     $data_ok = 0;
    }
    else if ((label|0) == 15) {
     label = 0;
     $data_ok = 0;
    }
    $92 = $k;
    $93 = (($92) + 1)|0;
    $k = $93;
   }
   $94 = $data_ok;
   $95 = $94&1;
   $96 = $95&1;
   $97 = ($96|0)==(0);
   if ($97) {
    $0 = 0;
    $174 = $0;
    STACKTOP = sp;return ($174|0);
   }
  }
 } while(0);
 $114 = $2;
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($115)) + 24|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $iv_size;
 FUNCTION_TABLE_viiiii[$117 & 2047]($114,41607,$118,0,0);
 $119 = ((($3)) + 36|0);
 $120 = (__ZNK14AP4_DataBuffer7GetDataEv($119)|0);
 $info1 = $120;
 $i2 = 0;
 while(1) {
  $121 = $i2;
  $122 = ((($3)) + 32|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($121>>>0)<($123>>>0);
  if (!($124)) {
   break;
  }
  $125 = $i2;
  HEAP32[$vararg_buffer>>2] = $125;
  (_snprintf($header,64,46183,$vararg_buffer)|0);
  $126 = $2;
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($127)) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $info1;
  $131 = $iv_size;
  FUNCTION_TABLE_viiiii[$129 & 2047]($126,$header,$130,$131,0);
  $132 = $iv_size;
  $133 = $info1;
  $134 = (($133) + ($132)|0);
  $info1 = $134;
  $135 = ((($3)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (__ZNK8AP4_Atom8GetFlagsEv($136)|0);
  $138 = $137 & 2;
  $139 = ($138|0)!=(0);
  L38: do {
   if ($139) {
    $140 = $info1;
    $141 = (__Z18AP4_BytesToInt16BEPKh($140)|0);
    $142 = $141 << 16 >> 16;
    $num_entries3 = $142;
    $143 = $info1;
    $144 = ((($143)) + 2|0);
    $info1 = $144;
    $j = 0;
    while(1) {
     $145 = $j;
     $146 = $num_entries3;
     $147 = ($145>>>0)<($146>>>0);
     if (!($147)) {
      break L38;
     }
     $148 = $info1;
     $149 = (__Z19AP4_BytesToUInt16BEPKh($148)|0);
     $150 = $149&65535;
     $bocd = $150;
     $151 = $i2;
     $152 = $j;
     HEAP32[$vararg_buffer1>>2] = $151;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $152;
     (_snprintf($header,64,41626,$vararg_buffer1)|0);
     $153 = $2;
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($154)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $bocd;
     FUNCTION_TABLE_viiiii[$156 & 2047]($153,$header,$157,0,0);
     $158 = $info1;
     $159 = ((($158)) + 2|0);
     $160 = (__Z19AP4_BytesToUInt32BEPKh($159)|0);
     $boed = $160;
     $161 = $i2;
     $162 = $j;
     HEAP32[$vararg_buffer5>>2] = $161;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $162;
     (_snprintf($header,64,41664,$vararg_buffer5)|0);
     $163 = $2;
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($164)) + 24|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = $boed;
     FUNCTION_TABLE_viiiii[$166 & 2047]($163,$header,$167,0,0);
     $168 = $info1;
     $169 = ((($168)) + 6|0);
     $info1 = $169;
     $170 = $j;
     $171 = (($170) + 1)|0;
     $j = $171;
    }
   }
  } while(0);
  $172 = $i2;
  $173 = (($172) + 1)|0;
  $i2 = $173;
 }
 $0 = 0;
 $174 = $0;
 STACKTOP = sp;return ($174|0);
}
function __ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK8AP4_Atom8GetFlagsEv($5)|0);
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (__ZN14AP4_ByteStream9WriteUI24Ej($9,$11)|0);
  $result = $12;
  $13 = $result;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $result;
   $0 = $15;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
  $16 = $2;
  $17 = ((($3)) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (__ZN14AP4_ByteStream9WriteUI08Eh($16,$18)|0);
  $result = $19;
  $20 = $result;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $result;
   $0 = $22;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
  $23 = $2;
  $24 = ((($3)) + 13|0);
  $25 = (__ZN14AP4_ByteStream5WriteEPKvj($23,$24,16)|0);
  $result = $25;
  $26 = $result;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $result;
   $0 = $28;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $29 = $2;
 $30 = ((($3)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (__ZN14AP4_ByteStream9WriteUI32Ej($29,$31)|0);
 $result = $32;
 $33 = $result;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $result;
  $0 = $35;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $36 = ((($3)) + 36|0);
 $37 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $2;
  $40 = ((($3)) + 36|0);
  $41 = (__ZNK14AP4_DataBuffer7GetDataEv($40)|0);
  $42 = ((($3)) + 36|0);
  $43 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($42)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($39,$41,$43)|0);
  $44 = $result;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $result;
   $0 = $46;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZN8AP4_Atom7SetTypeEj($this,$type) {
 $this = $this|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN12AP4_UuidAtom7GetUuidEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK9AP4_ArrayIN12AP4_MkidAtom5EntryEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_HdlrAtom14GetHandlerTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN24AP4_ProtectionSchemeInfo11GetSchiAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN23AP4_CencTrackEncryptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(304,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN23AP4_CencTrackEncryptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN12AP4_Stz2Atom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1009,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_Stz2AtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $i = 0, $i1 = 0, $i2 = 0, $reserved = 0, $result = 0, $sample_count = 0, $table_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $reserved = sp + 52|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1937013298,$8,$9,$10);
 $11 = 6320;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(891,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $5 = $44;
  $6 = $45;
 } else {
  $15 = $4;
  __THREW__ = 0;
  (invoke_iii(940,($15|0),($reserved|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  L4: do {
   if (!($17)) {
    $18 = $4;
    __THREW__ = 0;
    (invoke_iii(940,($18|0),($reserved|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $21 = $4;
     __THREW__ = 0;
     (invoke_iii(940,($21|0),($reserved|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $24 = $4;
      $25 = ((($7)) + 36|0);
      __THREW__ = 0;
      (invoke_iii(940,($24|0),($25|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = $4;
       $29 = ((($7)) + 40|0);
       __THREW__ = 0;
       (invoke_iii(854,($28|0),($29|0))|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if (!($31)) {
        $32 = ((($7)) + 36|0);
        $33 = HEAP8[$32>>0]|0;
        $34 = $33&255;
        $35 = ($34|0)!=(4);
        if ($35) {
         $36 = ((($7)) + 36|0);
         $37 = HEAP8[$36>>0]|0;
         $38 = $37&255;
         $39 = ($38|0)!=(8);
         if ($39) {
          $40 = ((($7)) + 36|0);
          $41 = HEAP8[$40>>0]|0;
          $42 = $41&255;
          $43 = ($42|0)!=(16);
          if ($43) {
           STACKTOP = sp;return;
          }
         }
        }
        $50 = ((($7)) + 40|0);
        $51 = HEAP32[$50>>2]|0;
        $sample_count = $51;
        $52 = ((($7)) + 44|0);
        $53 = $sample_count;
        __THREW__ = 0;
        (invoke_iii(892,($52|0),($53|0))|0);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if (!($55)) {
         $56 = $sample_count;
         $57 = ((($7)) + 36|0);
         $58 = HEAP8[$57>>0]|0;
         $59 = $58&255;
         $60 = Math_imul($56, $59)|0;
         $61 = (($60) + 7)|0;
         $62 = (($61>>>0) / 8)&-1;
         $table_size = $62;
         $63 = $table_size;
         $64 = (($63) + 8)|0;
         $65 = $1;
         $66 = ($64>>>0)>($65>>>0);
         if ($66) {
          STACKTOP = sp;return;
         }
         $67 = $table_size;
         __THREW__ = 0;
         $68 = (invoke_ii(867,($67|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if (!($70)) {
          $buffer = $68;
          $71 = $4;
          $72 = $buffer;
          $73 = $table_size;
          __THREW__ = 0;
          $74 = (invoke_iiii(851,($71|0),($72|0),($73|0))|0);
          $75 = __THREW__; __THREW__ = 0;
          $76 = $75&1;
          if (!($76)) {
           $result = $74;
           $77 = $result;
           $78 = ($77|0)!=(0);
           if ($78) {
            $79 = $buffer;
            $80 = ($79|0)==(0|0);
            if ($80) {
             STACKTOP = sp;return;
            }
            __ZdaPv($79);
            STACKTOP = sp;return;
           }
           $81 = ((($7)) + 36|0);
           $82 = HEAP8[$81>>0]|0;
           $83 = $82&255;
           L28: do {
            switch ($83|0) {
            case 4:  {
             $i = 0;
             while(1) {
              $84 = $i;
              $85 = $sample_count;
              $86 = ($84>>>0)<($85>>>0);
              if (!($86)) {
               break L28;
              }
              $87 = $i;
              $88 = (($87>>>0) % 2)&-1;
              $89 = ($88|0)==(0);
              $90 = $i;
              $91 = (($90>>>0) / 2)&-1;
              $92 = $buffer;
              $93 = (($92) + ($91)|0);
              $94 = HEAP8[$93>>0]|0;
              $95 = $94&255;
              if ($89) {
               $96 = $95 >> 4;
               $97 = $96 & 15;
               $98 = ((($7)) + 44|0);
               $99 = $i;
               __THREW__ = 0;
               $100 = (invoke_iii(894,($98|0),($99|0))|0);
               $101 = __THREW__; __THREW__ = 0;
               $102 = $101&1;
               if ($102) {
                break L4;
               }
               HEAP32[$100>>2] = $97;
              } else {
               $103 = $95 & 15;
               $104 = ((($7)) + 44|0);
               $105 = $i;
               __THREW__ = 0;
               $106 = (invoke_iii(894,($104|0),($105|0))|0);
               $107 = __THREW__; __THREW__ = 0;
               $108 = $107&1;
               if ($108) {
                break L4;
               }
               HEAP32[$106>>2] = $103;
              }
              $109 = $i;
              $110 = (($109) + 1)|0;
              $i = $110;
             }
             break;
            }
            case 8:  {
             $i1 = 0;
             while(1) {
              $111 = $i1;
              $112 = $sample_count;
              $113 = ($111>>>0)<($112>>>0);
              if (!($113)) {
               break L28;
              }
              $114 = $i1;
              $115 = $buffer;
              $116 = (($115) + ($114)|0);
              $117 = HEAP8[$116>>0]|0;
              $118 = $117&255;
              $119 = ((($7)) + 44|0);
              $120 = $i1;
              __THREW__ = 0;
              $121 = (invoke_iii(894,($119|0),($120|0))|0);
              $122 = __THREW__; __THREW__ = 0;
              $123 = $122&1;
              if ($123) {
               break L4;
              }
              HEAP32[$121>>2] = $118;
              $124 = $i1;
              $125 = (($124) + 1)|0;
              $i1 = $125;
             }
             break;
            }
            case 16:  {
             $i2 = 0;
             while(1) {
              $126 = $i2;
              $127 = $sample_count;
              $128 = ($126>>>0)<($127>>>0);
              if (!($128)) {
               break L28;
              }
              $129 = $i2;
              $130 = $129<<1;
              $131 = $buffer;
              $132 = (($131) + ($130)|0);
              __THREW__ = 0;
              $133 = (invoke_ii(979,($132|0))|0);
              $134 = __THREW__; __THREW__ = 0;
              $135 = $134&1;
              if ($135) {
               break L4;
              }
              $136 = $133&65535;
              $137 = ((($7)) + 44|0);
              $138 = $i2;
              __THREW__ = 0;
              $139 = (invoke_iii(894,($137|0),($138|0))|0);
              $140 = __THREW__; __THREW__ = 0;
              $141 = $140&1;
              if ($141) {
               break L4;
              }
              HEAP32[$139>>2] = $136;
              $142 = $i2;
              $143 = (($142) + 1)|0;
              $i2 = $143;
             }
             break;
            }
            default: {
            }
            }
           } while(0);
           $144 = $buffer;
           $145 = ($144|0)==(0|0);
           if ($145) {
            STACKTOP = sp;return;
           }
           __ZdaPv($144);
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $5 = $46;
  $6 = $47;
  __THREW__ = 0;
  invoke_vi(1,($12|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $146 = __THREW__; __THREW__ = 0;
 $147 = $146&1;
 if ($147) {
  $150 = ___cxa_find_matching_catch(0|0)|0;
  $151 = tempRet0;
  ___clang_call_terminate($150);
  // unreachable;
 } else {
  $148 = $5;
  $149 = $6;
  ___resumeException($148|0);
  // unreachable;
 }
}
function __ZN12AP4_Stz2Atom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $i1 = 0, $i2 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN14AP4_ByteStream9WriteUI08Eh($4,0)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $9 = $2;
 $10 = (__ZN14AP4_ByteStream9WriteUI08Eh($9,0)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $result;
  $0 = $13;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $14 = $2;
 $15 = (__ZN14AP4_ByteStream9WriteUI08Eh($14,0)|0);
 $result = $15;
 $16 = $result;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $result;
  $0 = $18;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $19 = $2;
 $20 = ((($3)) + 36|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (__ZN14AP4_ByteStream9WriteUI08Eh($19,$21)|0);
 $result = $22;
 $23 = $result;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $result;
  $0 = $25;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $26 = $2;
 $27 = ((($3)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (__ZN14AP4_ByteStream9WriteUI32Ej($26,$28)|0);
 $result = $29;
 $30 = $result;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $result;
  $0 = $32;
  $101 = $0;
  STACKTOP = sp;return ($101|0);
 }
 $33 = ((($3)) + 36|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 L21: do {
  switch ($35|0) {
  case 4:  {
   $i = 0;
   while(1) {
    $36 = $i;
    $37 = ((($3)) + 40|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36>>>0)<($38>>>0);
    if (!($39)) {
     break L21;
    }
    $40 = $i;
    $41 = (($40) + 1)|0;
    $42 = ((($3)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41>>>0)<($43>>>0);
    $45 = $2;
    $46 = ((($3)) + 44|0);
    $47 = $i;
    $48 = (__ZN9AP4_ArrayIjEixEm($46,$47)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 15;
    $51 = $50 << 4;
    if ($44) {
     $52 = ((($3)) + 44|0);
     $53 = $i;
     $54 = (($53) + 1)|0;
     $55 = (__ZN9AP4_ArrayIjEixEm($52,$54)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 15;
     $58 = $51 | $57;
     $59 = $58&255;
     $60 = (__ZN14AP4_ByteStream9WriteUI08Eh($45,$59)|0);
     $result = $60;
    } else {
     $61 = $51&255;
     $62 = (__ZN14AP4_ByteStream9WriteUI08Eh($45,$61)|0);
     $result = $62;
    }
    $63 = $result;
    $64 = ($63|0)!=(0);
    if ($64) {
     break;
    }
    $66 = $i;
    $67 = (($66) + 2)|0;
    $i = $67;
   }
   $65 = $result;
   $0 = $65;
   $101 = $0;
   STACKTOP = sp;return ($101|0);
   break;
  }
  case 8:  {
   $i1 = 0;
   while(1) {
    $68 = $i1;
    $69 = ((($3)) + 40|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($68>>>0)<($70>>>0);
    if (!($71)) {
     break L21;
    }
    $72 = $2;
    $73 = ((($3)) + 44|0);
    $74 = $i1;
    $75 = (__ZN9AP4_ArrayIjEixEm($73,$74)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76&255;
    $78 = (__ZN14AP4_ByteStream9WriteUI08Eh($72,$77)|0);
    $result = $78;
    $79 = $result;
    $80 = ($79|0)!=(0);
    if ($80) {
     break;
    }
    $82 = $i1;
    $83 = (($82) + 1)|0;
    $i1 = $83;
   }
   $81 = $result;
   $0 = $81;
   $101 = $0;
   STACKTOP = sp;return ($101|0);
   break;
  }
  case 16:  {
   $i2 = 0;
   while(1) {
    $84 = $i2;
    $85 = ((($3)) + 40|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84>>>0)<($86>>>0);
    if (!($87)) {
     break L21;
    }
    $88 = $2;
    $89 = ((($3)) + 44|0);
    $90 = $i2;
    $91 = (__ZN9AP4_ArrayIjEixEm($89,$90)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $92&65535;
    $94 = (__ZN14AP4_ByteStream9WriteUI16Et($88,$93)|0);
    $result = $94;
    $95 = $result;
    $96 = ($95|0)!=(0);
    if ($96) {
     break;
    }
    $98 = $i2;
    $99 = (($98) + 1)|0;
    $i2 = $99;
   }
   $97 = $result;
   $0 = $97;
   $101 = $0;
   STACKTOP = sp;return ($101|0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $100 = $result;
 $0 = $100;
 $101 = $0;
 STACKTOP = sp;return ($101|0);
}
function __ZN12AP4_Stz2Atom14GetSampleCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_Stz2Atom13GetSampleSizeEjRj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $sample_size;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $11 = $3;
  HEAP32[$11>>2] = 0;
  $0 = -12;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $12 = ((($4)) + 44|0);
  $13 = $2;
  $14 = (($13) - 1)|0;
  $15 = (__ZN9AP4_ArrayIjEixEm($12,$14)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  HEAP32[$17>>2] = $16;
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN12AP4_Stz2Atom13SetSampleSizeEjj($this,$sample,$sample_size) {
 $this = $this|0;
 $sample = $sample|0;
 $sample_size = $sample_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $sample_size;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -12;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $11 = $3;
  $12 = ((($4)) + 44|0);
  $13 = $2;
  $14 = (($13) - 1)|0;
  $15 = (__ZN9AP4_ArrayIjEixEm($12,$14)|0);
  HEAP32[$15>>2] = $11;
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN12AP4_Stz2Atom8AddEntryEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 HEAP32[$1>>2] = $size;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 (__ZN9AP4_ArrayIjE6AppendERKj($3,$1)|0);
 $4 = ((($2)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(4);
 if (!($10)) {
  $18 = ((($2)) + 36|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($20|0) / 8)&-1;
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($21))|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return 0;
 }
 $11 = ((($2)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12>>>0) % 2)&-1;
 $14 = ($13|0)==(1);
 if (!($14)) {
  STACKTOP = sp;return 0;
 }
 $15 = ((($2)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_Stz2Atom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,41747,$9,0,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 44|0);
 $15 = (__ZNK9AP4_ArrayIjE9ItemCountEv($14)|0);
 FUNCTION_TABLE_viiiii[$13 & 2047]($10,41758,$15,0,0);
 $16 = $1;
 $17 = (__ZN17AP4_AtomInspector12GetVerbosityEv($16)|0);
 $18 = ($17>>>0)>=(2);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ((($2)) + 44|0);
  $21 = (__ZNK9AP4_ArrayIjE9ItemCountEv($20)|0);
  $22 = ($19>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $i;
  HEAP32[$vararg_buffer>>2] = $23;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($2)) + 44|0);
  $29 = $i;
  $30 = (__ZN9AP4_ArrayIjEixEm($28,$29)|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_viiiii[$27 & 2047]($24,$header,$31,0,0);
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_Stz2AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(306,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_Stz2AtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6320;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_StssAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1010,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_StssAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejjhj($3,1937011571,16,0,0);
 $4 = 6396;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(891,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_StssAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $buffer = 0, $entry_count = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 12|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1937011571,$8,$9,$10);
 $11 = 6396;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(891,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $5 = $23;
  $6 = $24;
 } else {
  $15 = ((($7)) + 52|0);
  HEAP32[$15>>2] = 0;
  $16 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($entry_count|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if (!($18)) {
    $19 = HEAP32[$entry_count>>2]|0;
    $20 = $19<<2;
    $21 = $1;
    $22 = ($20>>>0)>($21>>>0);
    if ($22) {
     STACKTOP = sp;return;
    }
    $29 = HEAP32[$entry_count>>2]|0;
    $30 = $29<<2;
    __THREW__ = 0;
    $31 = (invoke_ii(867,($30|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $buffer = $31;
     $34 = $4;
     $35 = $buffer;
     $36 = HEAP32[$entry_count>>2]|0;
     $37 = $36<<2;
     __THREW__ = 0;
     $38 = (invoke_iiii(851,($34|0),($35|0),($37|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      $result = $38;
      $41 = $result;
      $42 = ($41|0)!=(0);
      if ($42) {
       $43 = $buffer;
       $44 = ($43|0)==(0|0);
       if ($44) {
        STACKTOP = sp;return;
       }
       __ZdaPv($43);
       STACKTOP = sp;return;
      }
      $45 = ((($7)) + 36|0);
      $46 = HEAP32[$entry_count>>2]|0;
      __THREW__ = 0;
      (invoke_iii(892,($45|0),($46|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if (!($48)) {
       $i = 0;
       while(1) {
        $49 = $i;
        $50 = HEAP32[$entry_count>>2]|0;
        $51 = ($49>>>0)<($50>>>0);
        if (!($51)) {
         break;
        }
        $52 = $i;
        $53 = $52<<2;
        $54 = $buffer;
        $55 = (($54) + ($53)|0);
        __THREW__ = 0;
        $56 = (invoke_ii(893,($55|0))|0);
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if ($58) {
         break L4;
        }
        $59 = ((($7)) + 36|0);
        $60 = $i;
        __THREW__ = 0;
        $61 = (invoke_iii(894,($59|0),($60|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        }
        HEAP32[$61>>2] = $56;
        $64 = $i;
        $65 = (($64) + 1)|0;
        $i = $65;
       }
       $66 = $buffer;
       $67 = ($66|0)==(0|0);
       if ($67) {
        STACKTOP = sp;return;
       }
       __ZdaPv($66);
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $5 = $25;
  $6 = $26;
  __THREW__ = 0;
  invoke_vi(1,($12|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $72 = ___cxa_find_matching_catch(0|0)|0;
   $73 = tempRet0;
   ___clang_call_terminate($72);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  $70 = $5;
  $71 = $6;
  ___resumeException($70|0);
  // unreachable;
 }
}
function __ZN12AP4_StssAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = (__ZNK9AP4_ArrayIjE9ItemCountEv($4)|0);
 $entry_count = $5;
 $6 = $2;
 $7 = $entry_count;
 $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($6,$7)|0);
 $result = $8;
 $9 = $result;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $result;
  $0 = $11;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $entry_count;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $2;
  $16 = ((($3)) + 36|0);
  $17 = $i;
  $18 = (__ZN9AP4_ArrayIjEixEm($16,$17)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$19)|0);
  $result = $20;
  $21 = $result;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 6;
   break;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 6) {
  $23 = $result;
  $0 = $23;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  $26 = $result;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN12AP4_StssAtom8AddEntryEj($this,$sample) {
 $this = $this|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 HEAP32[$1>>2] = $sample;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 (__ZN9AP4_ArrayIjE6AppendERKj($3,$1)|0);
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4)|0;
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StssAtom12IsSampleSyncEj($this,$sample) {
 $this = $this|0;
 $sample = $sample|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $entry_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $sample;
 $3 = $1;
 $entry_index = 0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($3)) + 36|0);
  $7 = (__ZNK9AP4_ArrayIjE9ItemCountEv($6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = ((($3)) + 36|0);
   $10 = ((($3)) + 52|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (__ZN9AP4_ArrayIjEixEm($9,$11)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $2;
   $15 = ($13>>>0)<=($14>>>0);
   if ($15) {
    $16 = ((($3)) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $entry_index = $17;
   }
   while(1) {
    $18 = $entry_index;
    $19 = ((($3)) + 36|0);
    $20 = (__ZNK9AP4_ArrayIjE9ItemCountEv($19)|0);
    $21 = ($18>>>0)<($20>>>0);
    if (!($21)) {
     label = 11;
     break;
    }
    $22 = ((($3)) + 36|0);
    $23 = $entry_index;
    $24 = (__ZN9AP4_ArrayIjEixEm($22,$23)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $2;
    $27 = ($25>>>0)<=($26>>>0);
    if (!($27)) {
     label = 11;
     break;
    }
    $28 = ((($3)) + 36|0);
    $29 = $entry_index;
    $30 = (__ZN9AP4_ArrayIjEixEm($28,$29)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $2;
    $33 = ($31|0)==($32|0);
    $34 = $entry_index;
    if ($33) {
     label = 9;
     break;
    }
    $36 = (($34) + 1)|0;
    $entry_index = $36;
   }
   if ((label|0) == 9) {
    $35 = ((($3)) + 52|0);
    HEAP32[$35>>2] = $34;
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $37 = $$pre_trunc&1;
    STACKTOP = sp;return ($37|0);
   }
   else if ((label|0) == 11) {
    $$expand_i1_val4 = 0;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $37 = $$pre_trunc&1;
    STACKTOP = sp;return ($37|0);
   }
  }
 }
 $$expand_i1_val = 0;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $37 = $$pre_trunc&1;
 STACKTOP = sp;return ($37|0);
}
function __ZN12AP4_StssAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayIjE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StssAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(314,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_StssAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6396;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __Z9AP4_DebugPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $buffer = sp + 24|0;
 $0 = $format;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vsnprintf($buffer,1024,$1,$args)|0);
 __ZL9AP4_PrintPKc($buffer);
 STACKTOP = sp;return;
}
function __ZL9AP4_PrintPKc($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $message;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_printf(41786,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntryC2Ej($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $0;
 $3 = $1;
 __ZN17AP4_ContainerAtomC2Ej($2,$3);
 $4 = 6460;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 36|0);
 $6 = 6552;
 HEAP32[$5>>2] = $6;
 $7 = ((($2)) + 62|0);
 HEAP16[$7>>1] = 1;
 $8 = ((($2)) + 56|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($2)) + 56|0);
 $10 = ((($9)) + 1|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($2)) + 56|0);
 $12 = ((($11)) + 2|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($2)) + 56|0);
 $14 = ((($13)) + 3|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($2)) + 56|0);
 $16 = ((($15)) + 4|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($2)) + 56|0);
 $18 = ((($17)) + 5|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($2)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 8)|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntryC2Ejj($this,$format,$size) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN17AP4_ContainerAtomC2Ejyb($3,$4,$5,0,0);
 $6 = 6460;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 36|0);
 $8 = 6552;
 HEAP32[$7>>2] = $8;
 $9 = ((($3)) + 62|0);
 HEAP16[$9>>1] = 1;
 $10 = ((($3)) + 56|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($3)) + 56|0);
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($3)) + 56|0);
 $14 = ((($13)) + 2|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($3)) + 56|0);
 $16 = ((($15)) + 3|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($3)) + 56|0);
 $18 = ((($17)) + 4|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($3)) + 56|0);
 $20 = ((($19)) + 5|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN17AP4_ContainerAtomC2Ejyb($7,$8,$9,0,0);
 $10 = 6460;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 36|0);
 $12 = 6552;
 HEAP32[$11>>2] = $12;
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($13)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = $4;
 __THREW__ = 0;
 invoke_viii($15|0,($7|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(726,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZN15AP4_SampleEntry5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN8AP4_Atom5CloneEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN15AP4_SampleEntry4ReadER14AP4_ByteStreamR15AP4_AtomFactory($this,$stream,$atom_factory) {
 $this = $this|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fields_size = 0, $payload_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $atom_factory;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 (FUNCTION_TABLE_iii[$6 & 2047]($3,$7)|0);
 $8 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
 $9 = tempRet0;
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 2047]($3)|0);
 $14 = (_i64Subtract(($8|0),($9|0),($13|0),0)|0);
 $15 = tempRet0;
 $payload_size = $14;
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($16)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 2047]($3)|0);
 $fields_size = $19;
 $20 = $payload_size;
 $21 = $fields_size;
 $22 = ($20>>>0)>($21>>>0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $2;
 $24 = $1;
 $25 = $payload_size;
 $26 = $fields_size;
 $27 = (($25) - ($26))|0;
 __ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy($3,$23,$24,$27,0);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 8;
}
function __ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 56|0);
 (__ZN14AP4_ByteStream4ReadEPvj($3,$4,6)|0);
 $5 = $1;
 $6 = ((($2)) + 62|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($5,$6)|0);
 STACKTOP = sp;return 0;
}
function __ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 56|0);
 $6 = (__ZN14AP4_ByteStream5WriteEPKvj($4,$5,6)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $result;
  $0 = $9;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $2;
  $11 = ((($3)) + 62|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = (__ZN14AP4_ByteStream9WriteUI16Et($10,$12)|0);
  $result = $13;
  $14 = $result;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN15AP4_SampleEntry5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = (FUNCTION_TABLE_iii[$9 & 2047]($6,$10)|0);
 $result = $11;
 $12 = $result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $result;
  $0 = $14;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $15 = HEAP32[$6>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = (FUNCTION_TABLE_iii[$17 & 2047]($6,$18)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $23 = ((($6)) + 36|0);
 $24 = ((($23)) + 4|0);
 $25 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$25);
 __THREW__ = 0;
 $26 = (invoke_iii(881,($24|0),($3|0))|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if (!($28)) {
  $0 = $26;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $4 = $29;
 $5 = $30;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  $34 = $4;
  $35 = $5;
  ___resumeException($34|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 62|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,42077,$9,0,0);
 STACKTOP = sp;return 0;
}
function __ZN15AP4_SampleEntry7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 (FUNCTION_TABLE_iii[$8 & 2047]($5,$9)|0);
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 (FUNCTION_TABLE_iii[$12 & 2047]($5,$13)|0);
 $14 = ((($5)) + 36|0);
 $15 = ((($14)) + 4|0);
 $16 = $1;
 __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($2,$16);
 __THREW__ = 0;
 (invoke_iii(881,($15|0),($2|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  __ZN21AP4_AtomListInspectorD2Ev($2);
  $19 = $1;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 2047]($19);
  STACKTOP = sp;return 0;
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $3 = $23;
 $4 = $24;
 __THREW__ = 0;
 invoke_vi(89,($2|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $29 = ___cxa_find_matching_catch(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $3;
  $28 = $4;
  ___resumeException($27|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN15AP4_SampleEntry14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
 $11 = HEAP32[$6>>2]|0;
 $12 = ((($11)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 2047]($6)|0);
 $15 = (($10) + ($14))|0;
 $16 = $size;
 $17 = $16;
 HEAP32[$17>>2] = $15;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((($6)) + 36|0);
 $21 = ((($20)) + 4|0);
 __ZN17AP4_AtomSizeAdderC2ERy($3,$size);
 __THREW__ = 0;
 (invoke_iii(881,($21|0),($3|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $4 = $39;
  $5 = $40;
  __THREW__ = 0;
  invoke_vi(262,($3|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $45 = ___cxa_find_matching_catch(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  } else {
   $43 = $4;
   $44 = $5;
   ___resumeException($43|0);
   // unreachable;
  }
 }
 __ZN17AP4_AtomSizeAdderD2Ev($3);
 $24 = $size;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($6)) + 8|0);
 HEAP32[$30>>2] = $26;
 $31 = ((($6)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = ((($6)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vii[$38 & 2047]($35,$6);
 STACKTOP = sp;return;
}
function __ZThn36_N15AP4_SampleEntry14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + -36|0);
 $5 = $2;
 __ZN15AP4_SampleEntry14OnChildChangedEP8AP4_Atom($4,$5);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(32)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_viiii(1011,($4|0),0,($6|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $1 = $10;
  $2 = $11;
  __ZdlPv($4);
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntryC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __ZN15AP4_SampleEntryC2Ejj($6,$7,$8);
 $9 = 6604;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 36|0);
 $11 = 6696;
 HEAP32[$10>>2] = $11;
 $12 = ((($6)) + 64|0);
 __THREW__ = 0;
 invoke_vi(847,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $36 = ___cxa_find_matching_catch()|0;
  $37 = tempRet0;
  $4 = $36;
  $5 = $37;
 } else {
  $15 = $2;
  __THREW__ = 0;
  $16 = (invoke_ii(329,($6|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = (8 + ($16))|0;
   $20 = ($15>>>0)>($19>>>0);
   if (!($20)) {
    STACKTOP = sp;return;
   }
   $21 = ((($6)) + 64|0);
   $22 = $2;
   __THREW__ = 0;
   $23 = (invoke_ii(329,($6|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = (8 + ($23))|0;
    $27 = (($22) - ($26))|0;
    __THREW__ = 0;
    (invoke_iii(848,($21|0),($27|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = HEAP32[$6>>2]|0;
     $31 = ((($30)) + 80|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $3;
     __THREW__ = 0;
     (invoke_iii($32|0,($6|0),($33|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $4 = $38;
  $5 = $39;
  __THREW__ = 0;
  invoke_vi(486,($12|0));
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   $46 = ___cxa_find_matching_catch(0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($6|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $46 = ___cxa_find_matching_catch(0|0)|0;
  $47 = tempRet0;
  ___clang_call_terminate($46);
  // unreachable;
 } else {
  $44 = $4;
  $45 = $5;
  ___resumeException($44|0);
  // unreachable;
 }
}
function __ZN22AP4_UnknownSampleEntryC2EjR14AP4_DataBuffer($this,$type,$payload) {
 $this = $this|0;
 $type = $type|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $payload;
 $5 = $0;
 $6 = $1;
 __ZN15AP4_SampleEntryC2Ej($5,$6);
 $7 = 6604;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 $9 = 6696;
 HEAP32[$8>>2] = $9;
 $10 = ((($5)) + 64|0);
 $11 = $2;
 __THREW__ = 0;
 invoke_vii(897,($10|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $3 = $21;
  $4 = $22;
 } else {
  $14 = $2;
  __THREW__ = 0;
  $15 = (invoke_ii(850,($14|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = ((($5)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($15))|0;
   HEAP32[$18>>2] = $20;
   STACKTOP = sp;return;
  }
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $3 = $23;
  $4 = $24;
  __THREW__ = 0;
  invoke_vi(486,($10|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($5|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 } else {
  $29 = $3;
  $30 = $4;
  ___resumeException($29|0);
  // unreachable;
 }
}
function __ZN22AP4_UnknownSampleEntry5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(88)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 64|0);
 __THREW__ = 0;
 invoke_viii(1012,($4|0),($6|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $1 = $10;
  $2 = $11;
  __ZdlPv($4);
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(36)|0);
 __THREW__ = 0;
 invoke_vii(1013,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  __ZdlPv($4);
  $9 = $1;
  $10 = $2;
  ___resumeException($9|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN15AP4_SampleEntry13GetFieldsSizeEv($1)|0);
 $3 = ((($1)) + 64|0);
 $4 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($3)|0);
 $5 = (($2) + ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN22AP4_UnknownSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $9 = $2;
  $10 = ((($3)) + 64|0);
  $11 = (__ZN14AP4_DataBuffer7UseDataEv($10)|0);
  $12 = ((($3)) + 64|0);
  $13 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($12)|0);
  $14 = (__ZN14AP4_ByteStream4ReadEPvj($9,$11,$13)|0);
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN22AP4_UnknownSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $9 = $2;
  $10 = ((($3)) + 64|0);
  $11 = (__ZNK14AP4_DataBuffer7GetDataEv($10)|0);
  $12 = ((($3)) + 64|0);
  $13 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($12)|0);
  $14 = (__ZN14AP4_ByteStream5WriteEPKvj($9,$11,$13)|0);
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN25AP4_MpegSystemSampleEntryC2EjP16AP4_EsDescriptor($this,$type,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $descriptor;
 $5 = $0;
 $6 = $1;
 __ZN15AP4_SampleEntryC2Ej($5,$6);
 $7 = 6748;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 $9 = 6840;
 HEAP32[$8>>2] = $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($5)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 __THREW__ = 0;
 $16 = (invoke_ii(883,40)|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 do {
  if ($18) {
   label = 5;
  } else {
   $19 = $2;
   __THREW__ = 0;
   invoke_vii(1014,($16|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $26 = ___cxa_find_matching_catch()|0;
    $27 = tempRet0;
    $3 = $26;
    $4 = $27;
    __ZdlPv($16);
    break;
   }
   __THREW__ = 0;
   (invoke_iiii($15|0,($12|0),($16|0),-1)|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $3 = $24;
  $4 = $25;
 }
 __THREW__ = 0;
 invoke_vi(319,($5|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $32 = ___cxa_find_matching_catch(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $30 = $3;
  $31 = $4;
  ___resumeException($30|0);
  // unreachable;
 }
}
function __ZN25AP4_MpegSystemSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$size,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN15AP4_SampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 6748;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 6840;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN25AP4_MpegSystemSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(72)|0);
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_iiii($8|0,($5|0),1702061171,0)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ($9|0)==(0|0);
  if ($12) {
   $18 = 0;
  } else {
   $13 = (___dynamic_cast($9,2392,496,0)|0);
   $18 = $13;
  }
  __THREW__ = 0;
  invoke_vii(1015,($4|0),($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 __ZdlPv($4);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_Mp4sSampleEntryC2EP16AP4_EsDescriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = $1;
 __ZN25AP4_MpegSystemSampleEntryC2EjP16AP4_EsDescriptor($2,1836070003,$3);
 $4 = 6892;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 36|0);
 $6 = 6984;
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4sSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN25AP4_MpegSystemSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1836070003,$5,$6,$7);
 $8 = 6892;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 6984;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4sSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(72)|0);
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_iiii($8|0,($5|0),1702061171,0)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ($9|0)==(0|0);
  if ($12) {
   $18 = 0;
  } else {
   $13 = (___dynamic_cast($9,2392,496,0)|0);
   $18 = $13;
  }
  __THREW__ = 0;
  invoke_vii(1015,($4|0),($18|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 __ZdlPv($4);
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntryC2Ejjtt($this,$format,$sample_rate,$sample_size,$channel_count) {
 $this = $this|0;
 $format = $format|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $sample_rate;
 $3 = $sample_size;
 $4 = $channel_count;
 $7 = $0;
 $8 = $1;
 __ZN15AP4_SampleEntryC2Ej($7,$8);
 $9 = 7036;
 HEAP32[$7>>2] = $9;
 $10 = ((($7)) + 36|0);
 $11 = 7128;
 HEAP32[$10>>2] = $11;
 $12 = ((($7)) + 64|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($7)) + 66|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($7)) + 68|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($7)) + 72|0);
 $16 = $4;
 HEAP16[$15>>1] = $16;
 $17 = ((($7)) + 74|0);
 $18 = $3;
 HEAP16[$17>>1] = $18;
 $19 = ((($7)) + 76|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($7)) + 78|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($7)) + 80|0);
 $22 = $2;
 HEAP32[$21>>2] = $22;
 $23 = ((($7)) + 84|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($7)) + 88|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($7)) + 92|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($7)) + 96|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($7)) + 100|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($7)) + 104|0);
 HEAPF64[$28>>3] = 0.0;
 $29 = ((($7)) + 112|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($7)) + 116|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($7)) + 120|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($7)) + 124|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($7)) + 128|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($7)) + 132|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($7)) + 136|0);
 __THREW__ = 0;
 invoke_vi(847,($35|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if (!($37)) {
  $38 = ((($7)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 20)|0;
  HEAP32[$38>>2] = $40;
  STACKTOP = sp;return;
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $5 = $41;
 $6 = $42;
 __THREW__ = 0;
 invoke_vi(319,($7|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  $45 = $5;
  $46 = $6;
  ___resumeException($45|0);
  // unreachable;
 }
}
function __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN15AP4_SampleEntryC2Ejj($7,$8,$9);
 $10 = 7036;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 36|0);
 $12 = 7128;
 HEAP32[$11>>2] = $12;
 $13 = ((($7)) + 136|0);
 __THREW__ = 0;
 invoke_vi(847,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $5 = $23;
  $6 = $24;
 } else {
  $16 = HEAP32[$7>>2]|0;
  $17 = ((($16)) + 72|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = $4;
  __THREW__ = 0;
  invoke_viii($18|0,($7|0),($19|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $5 = $25;
  $6 = $26;
  __THREW__ = 0;
  invoke_vi(486,($13|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($7|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN20AP4_AudioSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN15AP4_SampleEntry13GetFieldsSizeEv($1)|0);
 $3 = (($2) + 20)|0;
 $size = $3;
 $4 = ((($1)) + 64|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $size;
  $9 = (($8) + 16)|0;
  $size = $9;
  $19 = $size;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ((($1)) + 64|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12|0)==(2);
 if (!($13)) {
  $19 = $size;
  STACKTOP = sp;return ($19|0);
 }
 $14 = ((($1)) + 136|0);
 $15 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($14)|0);
 $16 = (36 + ($15))|0;
 $17 = $size;
 $18 = (($17) + ($16))|0;
 $size = $18;
 $19 = $size;
 STACKTOP = sp;return ($19|0);
}
function __ZN20AP4_AudioSampleEntry13GetSampleRateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = ((($2)) + 104|0);
  $8 = +HEAPF64[$7>>3];
  $9 = (~~(($8))>>>0);
  $0 = $9;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $10 = ((($2)) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 16;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry15GetChannelCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = ((($2)) + 112|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8&65535;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = ((($2)) + 72|0);
  $11 = HEAP16[$10>>1]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN20AP4_AudioSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $ext_size = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 $9 = $2;
 $10 = ((($3)) + 64|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($9,$10)|0);
 $11 = $2;
 $12 = ((($3)) + 66|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($11,$12)|0);
 $13 = $2;
 $14 = ((($3)) + 68|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($13,$14)|0);
 $15 = $2;
 $16 = ((($3)) + 72|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($15,$16)|0);
 $17 = $2;
 $18 = ((($3)) + 74|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($17,$18)|0);
 $19 = $2;
 $20 = ((($3)) + 76|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($19,$20)|0);
 $21 = $2;
 $22 = ((($3)) + 78|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($21,$22)|0);
 $23 = $2;
 $24 = ((($3)) + 80|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($23,$24)|0);
 $25 = ((($3)) + 64|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = ($27|0)==(1);
 do {
  if ($28) {
   $29 = $2;
   $30 = ((($3)) + 84|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($29,$30)|0);
   $31 = $2;
   $32 = ((($3)) + 88|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($31,$32)|0);
   $33 = $2;
   $34 = ((($3)) + 92|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($33,$34)|0);
   $35 = $2;
   $36 = ((($3)) + 96|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($35,$36)|0);
  } else {
   $37 = ((($3)) + 64|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = ($39|0)==(2);
   if (!($40)) {
    $73 = ((($3)) + 84|0);
    HEAP32[$73>>2] = 0;
    $74 = ((($3)) + 88|0);
    HEAP32[$74>>2] = 0;
    $75 = ((($3)) + 92|0);
    HEAP32[$75>>2] = 0;
    $76 = ((($3)) + 96|0);
    HEAP32[$76>>2] = 0;
    $77 = ((($3)) + 100|0);
    HEAP32[$77>>2] = 0;
    $78 = ((($3)) + 104|0);
    HEAPF64[$78>>3] = 0.0;
    $79 = ((($3)) + 112|0);
    HEAP32[$79>>2] = 0;
    $80 = ((($3)) + 116|0);
    HEAP32[$80>>2] = 0;
    $81 = ((($3)) + 120|0);
    HEAP32[$81>>2] = 0;
    $82 = ((($3)) + 124|0);
    HEAP32[$82>>2] = 0;
    $83 = ((($3)) + 128|0);
    HEAP32[$83>>2] = 0;
    $84 = ((($3)) + 132|0);
    HEAP32[$84>>2] = 0;
    break;
   }
   $41 = $2;
   $42 = ((($3)) + 100|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($41,$42)|0);
   $43 = $2;
   $44 = ((($3)) + 104|0);
   (__ZN14AP4_ByteStream10ReadDoubleERd($43,$44)|0);
   $45 = $2;
   $46 = ((($3)) + 112|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($45,$46)|0);
   $47 = $2;
   $48 = ((($3)) + 116|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($47,$48)|0);
   $49 = $2;
   $50 = ((($3)) + 120|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($49,$50)|0);
   $51 = $2;
   $52 = ((($3)) + 124|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($51,$52)|0);
   $53 = $2;
   $54 = ((($3)) + 128|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($53,$54)|0);
   $55 = $2;
   $56 = ((($3)) + 132|0);
   (__ZN14AP4_ByteStream8ReadUI32ERj($55,$56)|0);
   $57 = ((($3)) + 100|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58>>>0)>(72);
   if ($59) {
    $60 = ((($3)) + 100|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) - 72)|0;
    $ext_size = $62;
    $63 = ((($3)) + 136|0);
    $64 = $ext_size;
    (__ZN14AP4_DataBuffer11SetDataSizeEj($63,$64)|0);
    $65 = $2;
    $66 = ((($3)) + 136|0);
    $67 = (__ZN14AP4_DataBuffer7UseDataEv($66)|0);
    $68 = $ext_size;
    (__ZN14AP4_ByteStream4ReadEPvj($65,$67,$68)|0);
   }
   $69 = ((($3)) + 96|0);
   HEAP32[$69>>2] = 0;
   $70 = ((($3)) + 92|0);
   HEAP32[$70>>2] = 0;
   $71 = ((($3)) + 88|0);
   HEAP32[$71>>2] = 0;
   $72 = ((($3)) + 84|0);
   HEAP32[$72>>2] = 0;
  }
 } while(0);
 $0 = 0;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function __ZN20AP4_AudioSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $9 = $2;
 $10 = ((($3)) + 64|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($9,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $16 = $2;
 $17 = ((($3)) + 66|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (__ZN14AP4_ByteStream9WriteUI16Et($16,$18)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $23 = $2;
 $24 = ((($3)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__ZN14AP4_ByteStream9WriteUI32Ej($23,$25)|0);
 $result = $26;
 $27 = $result;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $result;
  $0 = $29;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $30 = $2;
 $31 = ((($3)) + 72|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (__ZN14AP4_ByteStream9WriteUI16Et($30,$32)|0);
 $result = $33;
 $34 = $result;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $result;
  $0 = $36;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $37 = $2;
 $38 = ((($3)) + 74|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = (__ZN14AP4_ByteStream9WriteUI16Et($37,$39)|0);
 $result = $40;
 $41 = $result;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $result;
  $0 = $43;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $44 = $2;
 $45 = ((($3)) + 76|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = (__ZN14AP4_ByteStream9WriteUI16Et($44,$46)|0);
 $result = $47;
 $48 = $result;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $result;
  $0 = $50;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $51 = $2;
 $52 = ((($3)) + 78|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = (__ZN14AP4_ByteStream9WriteUI16Et($51,$53)|0);
 $result = $54;
 $55 = $result;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $result;
  $0 = $57;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $58 = $2;
 $59 = ((($3)) + 80|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (__ZN14AP4_ByteStream9WriteUI32Ej($58,$60)|0);
 $result = $61;
 $62 = $result;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $result;
  $0 = $64;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $65 = ((($3)) + 64|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = ($67|0)==(1);
 if ($68) {
  $69 = $2;
  $70 = ((($3)) + 84|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN14AP4_ByteStream9WriteUI32Ej($69,$71)|0);
  $result = $72;
  $73 = $result;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $result;
   $0 = $75;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $76 = $2;
  $77 = ((($3)) + 88|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (__ZN14AP4_ByteStream9WriteUI32Ej($76,$78)|0);
  $result = $79;
  $80 = $result;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $result;
   $0 = $82;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $83 = $2;
  $84 = ((($3)) + 92|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (__ZN14AP4_ByteStream9WriteUI32Ej($83,$85)|0);
  $result = $86;
  $87 = $result;
  $88 = ($87|0)!=(0);
  if ($88) {
   $89 = $result;
   $0 = $89;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $90 = $2;
  $91 = ((($3)) + 96|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (__ZN14AP4_ByteStream9WriteUI32Ej($90,$92)|0);
  $result = $93;
  $94 = $result;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = $result;
   $0 = $96;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 } else {
  $97 = ((($3)) + 64|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98&65535;
  $100 = ($99|0)==(2);
  if ($100) {
   $101 = $2;
   $102 = ((($3)) + 100|0);
   $103 = HEAP32[$102>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($101,$103)|0);
   $104 = $2;
   $105 = ((($3)) + 104|0);
   $106 = +HEAPF64[$105>>3];
   (__ZN14AP4_ByteStream11WriteDoubleEd($104,$106)|0);
   $107 = $2;
   $108 = ((($3)) + 112|0);
   $109 = HEAP32[$108>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($107,$109)|0);
   $110 = $2;
   $111 = ((($3)) + 116|0);
   $112 = HEAP32[$111>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($110,$112)|0);
   $113 = $2;
   $114 = ((($3)) + 120|0);
   $115 = HEAP32[$114>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($113,$115)|0);
   $116 = $2;
   $117 = ((($3)) + 124|0);
   $118 = HEAP32[$117>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($116,$118)|0);
   $119 = $2;
   $120 = ((($3)) + 128|0);
   $121 = HEAP32[$120>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($119,$121)|0);
   $122 = $2;
   $123 = ((($3)) + 132|0);
   $124 = HEAP32[$123>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($122,$124)|0);
   $125 = ((($3)) + 136|0);
   $126 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($125)|0);
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $2;
    $129 = ((($3)) + 136|0);
    $130 = (__ZNK14AP4_DataBuffer7GetDataEv($129)|0);
    $131 = ((($3)) + 136|0);
    $132 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($131)|0);
    (__ZN14AP4_ByteStream5WriteEPKvj($128,$130,$132)|0);
   }
  }
 }
 $133 = $result;
 $0 = $133;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function __ZN20AP4_AudioSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 (__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($2,$3)|0);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN20AP4_AudioSampleEntry15GetChannelCountEv($2)|0);
 $9 = $8&65535;
 FUNCTION_TABLE_viiiii[$7 & 2047]($4,42098,$9,0,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN20AP4_AudioSampleEntry13GetSampleSizeEv($2)|0);
 $15 = $14&65535;
 FUNCTION_TABLE_viiiii[$13 & 2047]($10,42112,$15,0,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZN20AP4_AudioSampleEntry13GetSampleRateEv($2)|0);
 FUNCTION_TABLE_viiiii[$19 & 2047]($16,42124,$20,0,0);
 $21 = ((($2)) + 64|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)!=(0);
 if (!($23)) {
  STACKTOP = sp;return 0;
 }
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 64|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 FUNCTION_TABLE_viiiii[$27 & 2047]($24,42136,$30,0,0);
 STACKTOP = sp;return 0;
}
function __ZN20AP4_AudioSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(44)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 $7 = (invoke_ii(1016,($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  $10 = (invoke_ii(1017,($3|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __THREW__ = 0;
   $13 = (invoke_ii(1018,($3|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = ((($3)) + 36|0);
    __THREW__ = 0;
    invoke_viiiiii(1019,($4|0),($6|0),($7|0),($10|0),($13|0),($16|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     STACKTOP = sp;return ($4|0);
    }
   }
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $1 = $19;
 $2 = $20;
 __ZdlPv($4);
 $21 = $1;
 $22 = $2;
 ___resumeException($21|0);
 // unreachable;
 return (0)|0;
}
function __ZN24AP4_MpegAudioSampleEntryC2EjjttP16AP4_EsDescriptor($this,$type,$sample_rate,$sample_size,$channel_count,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $sample_rate;
 $3 = $sample_size;
 $4 = $channel_count;
 $5 = $descriptor;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 __ZN20AP4_AudioSampleEntryC2Ejjtt($8,$9,$10,$11,$12);
 $13 = 7180;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 36|0);
 $15 = 7272;
 HEAP32[$14>>2] = $15;
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = ((($8)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 __THREW__ = 0;
 $22 = (invoke_ii(883,40)|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 5;
  } else {
   $25 = $5;
   __THREW__ = 0;
   invoke_vii(1014,($22|0),($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $6 = $32;
    $7 = $33;
    __ZdlPv($22);
    break;
   }
   __THREW__ = 0;
   (invoke_iiii($21|0,($18|0),($22|0),-1)|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $6 = $30;
  $7 = $31;
 }
 __THREW__ = 0;
 invoke_vi(353,($8|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $6;
  $37 = $7;
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN24AP4_MpegAudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$size,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 7180;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 7272;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN24AP4_MpegAudioSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $esds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 2047]($4,1702061171,0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $11 = 0;
 } else {
  $10 = (___dynamic_cast($8,2392,496,0)|0);
  $11 = $10;
 }
 $esds = $11;
 $12 = $esds;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($3)) + 64|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = ((($3)) + 36|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iiiii[$21 & 2047]($18,42658,0,0)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $25 = 0;
   } else {
    $24 = (___dynamic_cast($22,2392,496,0)|0);
    $25 = $24;
   }
   $esds = $25;
  }
 }
 $26 = (__Znwj(84)|0);
 __THREW__ = 0;
 $27 = (invoke_ii(1016,($3|0))|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  __THREW__ = 0;
  $30 = (invoke_ii(1017,($3|0))|0);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   __THREW__ = 0;
   $33 = (invoke_ii(1018,($3|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $36 = $esds;
    __THREW__ = 0;
    invoke_viiiii(1020,($26|0),($27|0),($30|0),($33|0),($36|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     STACKTOP = sp;return ($26|0);
    }
   }
  }
 }
 $39 = ___cxa_find_matching_catch()|0;
 $40 = tempRet0;
 $1 = $39;
 $2 = $40;
 __ZdlPv($26);
 $41 = $1;
 $42 = $2;
 ___resumeException($41|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_Mp4aSampleEntryC2EjttP16AP4_EsDescriptor($this,$sample_rate,$sample_size,$channel_count,$descriptor) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample_rate;
 $2 = $sample_size;
 $3 = $channel_count;
 $4 = $descriptor;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN24AP4_MpegAudioSampleEntryC2EjjttP16AP4_EsDescriptor($5,1836069985,$6,$7,$8,$9);
 $10 = 8188;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 8280;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4aSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN24AP4_MpegAudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1836069985,$5,$6,$7);
 $8 = 8188;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 8280;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN21AP4_VisualSampleEntryC2EjtttPKc($this,$format,$width,$height,$depth,$compressor_name) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $8 = $0;
 $9 = $1;
 __ZN15AP4_SampleEntryC2Ej($8,$9);
 $10 = 7324;
 HEAP32[$8>>2] = $10;
 $11 = ((($8)) + 36|0);
 $12 = 7416;
 HEAP32[$11>>2] = $12;
 $13 = ((($8)) + 64|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($8)) + 66|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($8)) + 80|0);
 $16 = $2;
 HEAP16[$15>>1] = $16;
 $17 = ((($8)) + 82|0);
 $18 = $3;
 HEAP16[$17>>1] = $18;
 $19 = ((($8)) + 84|0);
 HEAP32[$19>>2] = 4718592;
 $20 = ((($8)) + 88|0);
 HEAP32[$20>>2] = 4718592;
 $21 = ((($8)) + 92|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($8)) + 96|0);
 HEAP16[$22>>1] = 1;
 $23 = ((($8)) + 100|0);
 $24 = $5;
 __THREW__ = 0;
 invoke_vii(869,($23|0),($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  $27 = ((($8)) + 108|0);
  $28 = $4;
  HEAP16[$27>>1] = $28;
  $29 = ((($8)) + 110|0);
  HEAP16[$29>>1] = -1;
  $30 = ((($8)) + 68|0);
  ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;
  $31 = ((($8)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 70)|0;
  HEAP32[$31>>2] = $33;
  STACKTOP = sp;return;
 }
 $34 = ___cxa_find_matching_catch()|0;
 $35 = tempRet0;
 $6 = $34;
 $7 = $35;
 __THREW__ = 0;
 invoke_vi(319,($8|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $6;
  $39 = $7;
  ___resumeException($38|0);
  // unreachable;
 }
}
function __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN15AP4_SampleEntryC2Ejj($7,$8,$9);
 $10 = 7324;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 36|0);
 $12 = 7416;
 HEAP32[$11>>2] = $12;
 $13 = ((($7)) + 100|0);
 __THREW__ = 0;
 invoke_vi(860,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $5 = $23;
  $6 = $24;
 } else {
  $16 = HEAP32[$7>>2]|0;
  $17 = ((($16)) + 72|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = $4;
  __THREW__ = 0;
  invoke_viii($18|0,($7|0),($19|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $5 = $25;
  $6 = $26;
  __THREW__ = 0;
  invoke_vi(864,($13|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($7|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 } else {
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
}
function __ZN21AP4_VisualSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN15AP4_SampleEntry13GetFieldsSizeEv($1)|0);
 $3 = (($2) + 70)|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN21AP4_VisualSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $compressor_name = 0, $name_length = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compressor_name = sp + 20|0;
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $9 = $2;
 $10 = ((($3)) + 64|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($9,$10)|0);
 $11 = $2;
 $12 = ((($3)) + 66|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($11,$12)|0);
 $13 = $2;
 $14 = ((($3)) + 68|0);
 (__ZN14AP4_ByteStream4ReadEPvj($13,$14,12)|0);
 $15 = $2;
 $16 = ((($3)) + 80|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($15,$16)|0);
 $17 = $2;
 $18 = ((($3)) + 82|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($17,$18)|0);
 $19 = $2;
 $20 = ((($3)) + 84|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($19,$20)|0);
 $21 = $2;
 $22 = ((($3)) + 88|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($21,$22)|0);
 $23 = $2;
 $24 = ((($3)) + 92|0);
 (__ZN14AP4_ByteStream8ReadUI32ERj($23,$24)|0);
 $25 = $2;
 $26 = ((($3)) + 96|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($25,$26)|0);
 $27 = $2;
 (__ZN14AP4_ByteStream4ReadEPvj($27,$compressor_name,32)|0);
 $28 = HEAP8[$compressor_name>>0]|0;
 $29 = $28 << 24 >> 24;
 $name_length = $29;
 $30 = $name_length;
 $31 = ($30|0)<(32);
 if ($31) {
  $32 = $name_length;
  $33 = (($32) + 1)|0;
  $34 = (($compressor_name) + ($33)|0);
  HEAP8[$34>>0] = 0;
  $35 = ((($3)) + 100|0);
  $36 = ((($compressor_name)) + 1|0);
  (__ZN10AP4_StringaSEPKc($35,$36)|0);
 }
 $37 = $2;
 $38 = ((($3)) + 108|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($37,$38)|0);
 $39 = $2;
 $40 = ((($3)) + 110|0);
 (__ZN14AP4_ByteStream8ReadUI16ERt($39,$40)|0);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __ZN21AP4_VisualSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $compressor_name = 0, $i = 0, $i1 = 0, $name_length = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compressor_name = sp + 32|0;
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $9 = $2;
 $10 = ((($3)) + 64|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($9,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $16 = $2;
 $17 = ((($3)) + 66|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (__ZN14AP4_ByteStream9WriteUI16Et($16,$18)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $23 = $2;
 $24 = ((($3)) + 68|0);
 $25 = (__ZN14AP4_ByteStream5WriteEPKvj($23,$24,12)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $29 = $2;
 $30 = ((($3)) + 80|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = (__ZN14AP4_ByteStream9WriteUI16Et($29,$31)|0);
 $result = $32;
 $33 = $result;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $result;
  $0 = $35;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $36 = $2;
 $37 = ((($3)) + 82|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = (__ZN14AP4_ByteStream9WriteUI16Et($36,$38)|0);
 $result = $39;
 $40 = $result;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $result;
  $0 = $42;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $43 = $2;
 $44 = ((($3)) + 84|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (__ZN14AP4_ByteStream9WriteUI32Ej($43,$45)|0);
 $result = $46;
 $47 = $result;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $result;
  $0 = $49;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $50 = $2;
 $51 = ((($3)) + 88|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (__ZN14AP4_ByteStream9WriteUI32Ej($50,$52)|0);
 $result = $53;
 $54 = $result;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $result;
  $0 = $56;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $57 = $2;
 $58 = ((($3)) + 92|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (__ZN14AP4_ByteStream9WriteUI32Ej($57,$59)|0);
 $result = $60;
 $61 = $result;
 $62 = ($61|0)!=(0);
 if ($62) {
  $63 = $result;
  $0 = $63;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $64 = $2;
 $65 = ((($3)) + 96|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = (__ZN14AP4_ByteStream9WriteUI16Et($64,$66)|0);
 $result = $67;
 $68 = $result;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $result;
  $0 = $70;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $71 = ((($3)) + 100|0);
 $72 = (__ZNK10AP4_String9GetLengthEv($71)|0);
 $name_length = $72;
 $73 = $name_length;
 $74 = ($73>>>0)>(31);
 $$ = $74 ? 31 : $72;
 $name_length = $$;
 $75 = $name_length;
 $76 = $75&255;
 HEAP8[$compressor_name>>0] = $76;
 $i = 0;
 while(1) {
  $77 = $i;
  $78 = $name_length;
  $79 = ($77>>>0)<($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = ((($3)) + 100|0);
  $81 = $i;
  $82 = (__ZNK10AP4_StringixEj($80,$81)|0);
  $83 = $i;
  $84 = (($83) + 1)|0;
  $85 = (($compressor_name) + ($84)|0);
  HEAP8[$85>>0] = $82;
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $name_length;
 $89 = (($88) + 1)|0;
 $i1 = $89;
 while(1) {
  $90 = $i1;
  $91 = ($90>>>0)<(32);
  if (!($91)) {
   break;
  }
  $92 = $i1;
  $93 = (($compressor_name) + ($92)|0);
  HEAP8[$93>>0] = 0;
  $94 = $i1;
  $95 = (($94) + 1)|0;
  $i1 = $95;
 }
 $96 = $2;
 $97 = (__ZN14AP4_ByteStream5WriteEPKvj($96,$compressor_name,32)|0);
 $result = $97;
 $98 = $result;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $result;
  $0 = $100;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $101 = $2;
 $102 = ((($3)) + 108|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = (__ZN14AP4_ByteStream9WriteUI16Et($101,$103)|0);
 $result = $104;
 $105 = $result;
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = $result;
  $0 = $107;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 } else {
  $108 = $2;
  $109 = ((($3)) + 110|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = (__ZN14AP4_ByteStream9WriteUI16Et($108,$110)|0);
  $result = $111;
  $112 = $result;
  $0 = $112;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 return (0)|0;
}
function __ZN21AP4_VisualSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 (__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($2,$3)|0);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 80|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 FUNCTION_TABLE_viiiii[$7 & 2047]($4,42147,$10,0,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 82|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,42153,$17,0,0);
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 100|0);
 $23 = (__ZNK10AP4_String8GetCharsEv($22)|0);
 FUNCTION_TABLE_viiii[$21 & 2047]($18,42160,$23,0);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_VisualSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(52)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 80|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($3)) + 82|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($3)) + 108|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 100|0);
 __THREW__ = 0;
 $14 = (invoke_ii(870,($13|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($3)) + 36|0);
  __THREW__ = 0;
  invoke_viiiiiii(1021,($4|0),($6|0),($8|0),($10|0),($12|0),($14|0),($17|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $1 = $20;
 $2 = $21;
 __ZdlPv($4);
 $22 = $1;
 $23 = $2;
 ___resumeException($22|0);
 // unreachable;
 return (0)|0;
}
function __ZN24AP4_MpegVideoSampleEntryC2EjtttPKcP16AP4_EsDescriptor($this,$type,$width,$height,$depth,$compressor_name,$descriptor) {
 $this = $this|0;
 $type = $type|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $descriptor;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __ZN21AP4_VisualSampleEntryC2EjtttPKc($9,$10,$11,$12,$13,$14);
 $15 = 7468;
 HEAP32[$9>>2] = $15;
 $16 = ((($9)) + 36|0);
 $17 = 7560;
 HEAP32[$16>>2] = $17;
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = ((($9)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 __THREW__ = 0;
 $24 = (invoke_ii(883,40)|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   label = 5;
  } else {
   $27 = $6;
   __THREW__ = 0;
   invoke_vii(1014,($24|0),($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $7 = $34;
    $8 = $35;
    __ZdlPv($24);
    break;
   }
   __THREW__ = 0;
   (invoke_iiii($23|0,($20|0),($24|0),-1)|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $7 = $32;
  $8 = $33;
 }
 __THREW__ = 0;
 invoke_vi(367,($9|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $7;
  $39 = $8;
  ___resumeException($38|0);
  // unreachable;
 }
}
function __ZN24AP4_MpegVideoSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$size,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 7468;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 7560;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN24AP4_MpegVideoSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(92)|0);
 $5 = ((($3)) + 80|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($3)) + 82|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($3)) + 108|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($3)) + 100|0);
 __THREW__ = 0;
 $12 = (invoke_ii(870,($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = ((($3)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_iiii($18|0,($15|0),1702061171,0)|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = ($19|0)==(0|0);
   if ($22) {
    $28 = 0;
   } else {
    $23 = (___dynamic_cast($19,2392,496,0)|0);
    $28 = $23;
   }
   __THREW__ = 0;
   invoke_viiiiii(1022,($4|0),($6|0),($8|0),($10|0),($12|0),($28|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    STACKTOP = sp;return ($4|0);
   }
  }
 }
 $24 = ___cxa_find_matching_catch()|0;
 $25 = tempRet0;
 $1 = $24;
 $2 = $25;
 __ZdlPv($4);
 $26 = $1;
 $27 = $2;
 ___resumeException($26|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_Mp4vSampleEntryC2EtttPKcP16AP4_EsDescriptor($this,$width,$height,$depth,$compressor_name,$descriptor) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $3 = $depth;
 $4 = $compressor_name;
 $5 = $descriptor;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 __ZN24AP4_MpegVideoSampleEntryC2EjtttPKcP16AP4_EsDescriptor($6,1836070006,$7,$8,$9,$10,$11);
 $12 = 8332;
 HEAP32[$6>>2] = $12;
 $13 = ((($6)) + 36|0);
 $14 = 8424;
 HEAP32[$13>>2] = $14;
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4vSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN24AP4_MpegVideoSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1836070006,$5,$6,$7);
 $8 = 8332;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 8424;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN18AP4_AvcSampleEntryC2EjtttPKcRK12AP4_AvccAtom($this,$format,$width,$height,$depth,$compressor_name,$avcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $avcc = $avcc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $avcc;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __ZN21AP4_VisualSampleEntryC2EjtttPKc($9,$10,$11,$12,$13,$14);
 $15 = 7612;
 HEAP32[$9>>2] = $15;
 $16 = ((($9)) + 36|0);
 $17 = 7704;
 HEAP32[$16>>2] = $17;
 $18 = ((($9)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 __THREW__ = 0;
 $22 = (invoke_ii(883,96)|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 5;
  } else {
   $25 = $6;
   __THREW__ = 0;
   invoke_vii(1023,($22|0),($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $7 = $32;
    $8 = $33;
    __ZdlPv($22);
    break;
   }
   __THREW__ = 0;
   (invoke_iiii($21|0,($18|0),($22|0),-1)|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $7 = $30;
  $8 = $31;
 }
 __THREW__ = 0;
 invoke_vi(367,($9|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $7;
  $37 = $8;
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN18AP4_AvcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 7612;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 7704;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN19AP4_HevcSampleEntryC2EjtttPKcRK12AP4_HvccAtom($this,$format,$width,$height,$depth,$compressor_name,$hvcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $hvcc = $hvcc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $hvcc;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __ZN21AP4_VisualSampleEntryC2EjtttPKc($9,$10,$11,$12,$13,$14);
 $15 = 7756;
 HEAP32[$9>>2] = $15;
 $16 = ((($9)) + 36|0);
 $17 = 7848;
 HEAP32[$16>>2] = $17;
 $18 = ((($9)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 __THREW__ = 0;
 $22 = (invoke_ii(883,120)|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 5;
  } else {
   $25 = $6;
   __THREW__ = 0;
   invoke_vii(1024,($22|0),($25|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $7 = $32;
    $8 = $33;
    __ZdlPv($22);
    break;
   }
   __THREW__ = 0;
   (invoke_iiii($21|0,($18|0),($22|0),-1)|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $7 = $30;
  $8 = $31;
 }
 __THREW__ = 0;
 invoke_vi(367,($9|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $7;
  $37 = $8;
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN18AP4_AvcSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(56)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 80|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($3)) + 82|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($3)) + 108|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 100|0);
 __THREW__ = 0;
 $14 = (invoke_ii(870,($13|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($3)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_iiii($20|0,($17|0),1635148611,0)|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = ($21|0)==(0|0);
   if ($24) {
    $30 = 0;
   } else {
    $25 = (___dynamic_cast($21,2392,688,0)|0);
    $30 = $25;
   }
   __THREW__ = 0;
   invoke_viiiiiii(1025,($4|0),($6|0),($8|0),($10|0),($12|0),($14|0),($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    STACKTOP = sp;return ($4|0);
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $1 = $26;
 $2 = $27;
 __ZdlPv($4);
 $28 = $1;
 $29 = $2;
 ___resumeException($28|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_HevcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 7756;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 7848;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN19AP4_HevcSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(56)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 80|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($3)) + 82|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($3)) + 108|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 100|0);
 __THREW__ = 0;
 $14 = (invoke_ii(870,($13|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($3)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_iiii($20|0,($17|0),1752589123,0)|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = ($21|0)==(0|0);
   if ($24) {
    $30 = 0;
   } else {
    $25 = (___dynamic_cast($21,2392,952,0)|0);
    $30 = $25;
   }
   __THREW__ = 0;
   invoke_viiiiiii(1026,($4|0),($6|0),($8|0),($10|0),($12|0),($14|0),($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if (!($32)) {
    STACKTOP = sp;return ($4|0);
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $1 = $26;
 $2 = $27;
 __ZdlPv($4);
 $28 = $1;
 $29 = $2;
 ___resumeException($28|0);
 // unreachable;
 return (0)|0;
}
function __ZN22AP4_RtpHintSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $0;
 $7 = $1;
 __ZN15AP4_SampleEntryC2Ejj($6,1920233504,$7);
 $8 = 7900;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 36|0);
 $10 = 7992;
 HEAP32[$9>>2] = $10;
 $11 = HEAP32[$6>>2]|0;
 $12 = ((($11)) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = $3;
 __THREW__ = 0;
 invoke_viii($13|0,($6|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $4 = $18;
 $5 = $19;
 __THREW__ = 0;
 invoke_vi(319,($6|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN22AP4_RtpHintSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN15AP4_SampleEntry13GetFieldsSizeEv($1)|0);
 $3 = (($2) + 8)|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN22AP4_RtpHintSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $8 = $result;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ((($3)) + 64|0);
   $11 = (__ZN14AP4_ByteStream8ReadUI16ERt($9,$10)|0);
   $result = $11;
   $12 = $result;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $result;
    $0 = $14;
    break;
   }
   $15 = $2;
   $16 = ((($3)) + 66|0);
   $17 = (__ZN14AP4_ByteStream8ReadUI16ERt($15,$16)|0);
   $result = $17;
   $18 = $result;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $result;
    $0 = $20;
    break;
   }
   $21 = $2;
   $22 = ((($3)) + 68|0);
   $23 = (__ZN14AP4_ByteStream8ReadUI32ERj($21,$22)|0);
   $result = $23;
   $24 = $result;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $result;
    $0 = $26;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function __ZN22AP4_RtpHintSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $9 = $2;
 $10 = ((($3)) + 64|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI16Et($9,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $16 = $2;
 $17 = ((($3)) + 66|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (__ZN14AP4_ByteStream9WriteUI16Et($16,$18)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $23 = $2;
  $24 = ((($3)) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZN14AP4_ByteStream9WriteUI32Ej($23,$25)|0);
  $result = $26;
  $27 = $result;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN22AP4_RtpHintSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 (__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($2,$3)|0);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 64|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 FUNCTION_TABLE_viiiii[$7 & 2047]($4,42171,$10,0,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 66|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,42190,$17,0,0);
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 68|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_viiiii[$21 & 2047]($18,42217,$23,0,0);
 STACKTOP = sp;return 0;
}
function __ZN23AP4_SubtitleSampleEntryC2EjPKcS1_S1_($this,$format,$namespce,$schema_location,$image_mime_type) {
 $this = $this|0;
 $format = $format|0;
 $namespce = $namespce|0;
 $schema_location = $schema_location|0;
 $image_mime_type = $image_mime_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $namespce;
 $3 = $schema_location;
 $4 = $image_mime_type;
 $7 = $0;
 $8 = $1;
 __ZN15AP4_SampleEntryC2Ej($7,$8);
 $9 = 8044;
 HEAP32[$7>>2] = $9;
 $10 = ((($7)) + 36|0);
 $11 = 8136;
 HEAP32[$10>>2] = $11;
 $12 = ((($7)) + 64|0);
 $13 = $2;
 __THREW__ = 0;
 invoke_vii(869,($12|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $5 = $46;
  $6 = $47;
 } else {
  $16 = ((($7)) + 72|0);
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(869,($16|0),($17|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $5 = $48;
   $6 = $49;
  } else {
   $20 = ((($7)) + 80|0);
   $21 = $4;
   __THREW__ = 0;
   invoke_vii(869,($20|0),($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $50 = ___cxa_find_matching_catch()|0;
    $51 = tempRet0;
    $5 = $50;
    $6 = $51;
   } else {
    $24 = ((($7)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($7)) + 64|0);
    __THREW__ = 0;
    $27 = (invoke_ii(863,($26|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($25) + ($27))|0;
     $31 = (($30) + 1)|0;
     $32 = ((($7)) + 72|0);
     __THREW__ = 0;
     $33 = (invoke_ii(863,($32|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      $36 = (($31) + ($33))|0;
      $37 = (($36) + 1)|0;
      $38 = ((($7)) + 80|0);
      __THREW__ = 0;
      $39 = (invoke_ii(863,($38|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = (($37) + ($39))|0;
       $43 = (($42) + 1)|0;
       __THREW__ = 0;
       invoke_viiii(1027,($7|0),($43|0),0,0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if (!($45)) {
        STACKTOP = sp;return;
       }
      }
     }
    }
    $52 = ___cxa_find_matching_catch()|0;
    $53 = tempRet0;
    $5 = $52;
    $6 = $53;
    __THREW__ = 0;
    invoke_vi(864,($20|0));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if ($55) {
     $64 = ___cxa_find_matching_catch(0|0)|0;
     $65 = tempRet0;
     ___clang_call_terminate($64);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(864,($16|0));
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    $64 = ___cxa_find_matching_catch(0|0)|0;
    $65 = tempRet0;
    ___clang_call_terminate($64);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $64 = ___cxa_find_matching_catch(0|0)|0;
   $65 = tempRet0;
   ___clang_call_terminate($64);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($7|0));
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $64 = ___cxa_find_matching_catch(0|0)|0;
  $65 = tempRet0;
  ___clang_call_terminate($64);
  // unreachable;
 } else {
  $62 = $5;
  $63 = $6;
  ___resumeException($62|0);
  // unreachable;
 }
}
function __ZN23AP4_SubtitleSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$format,$size,$stream,$atom_factory) {
 $this = $this|0;
 $format = $format|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN15AP4_SampleEntryC2Ejj($7,$8,$9);
 $10 = 8044;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 36|0);
 $12 = 8136;
 HEAP32[$11>>2] = $12;
 $13 = ((($7)) + 64|0);
 __THREW__ = 0;
 invoke_vi(860,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $5 = $29;
  $6 = $30;
 } else {
  $16 = ((($7)) + 72|0);
  __THREW__ = 0;
  invoke_vi(860,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $31 = ___cxa_find_matching_catch()|0;
   $32 = tempRet0;
   $5 = $31;
   $6 = $32;
  } else {
   $19 = ((($7)) + 80|0);
   __THREW__ = 0;
   invoke_vi(860,($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $5 = $33;
    $6 = $34;
   } else {
    $22 = HEAP32[$7>>2]|0;
    $23 = ((($22)) + 72|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $3;
    $26 = $4;
    __THREW__ = 0;
    invoke_viii($24|0,($7|0),($25|0),($26|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     STACKTOP = sp;return;
    }
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $5 = $35;
    $6 = $36;
    __THREW__ = 0;
    invoke_vi(864,($19|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $47 = ___cxa_find_matching_catch(0|0)|0;
     $48 = tempRet0;
     ___clang_call_terminate($47);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vi(864,($16|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $47 = ___cxa_find_matching_catch(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($13|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $47 = ___cxa_find_matching_catch(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($7|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  $45 = $5;
  $46 = $6;
  ___resumeException($45|0);
  // unreachable;
 }
}
function __ZN23AP4_SubtitleSampleEntry13GetFieldsSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN15AP4_SampleEntry13GetFieldsSizeEv($1)|0);
 $3 = (($2) + 3)|0;
 $4 = ((($1)) + 64|0);
 $5 = (__ZNK10AP4_String9GetLengthEv($4)|0);
 $6 = (($3) + ($5))|0;
 $7 = ((($1)) + 72|0);
 $8 = (__ZNK10AP4_String9GetLengthEv($7)|0);
 $9 = (($6) + ($8))|0;
 $10 = ((($1)) + 80|0);
 $11 = (__ZNK10AP4_String9GetLengthEv($10)|0);
 $12 = (($9) + ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN23AP4_SubtitleSampleEntry10ReadFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $8 = $result;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ((($3)) + 64|0);
   $11 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($9,$10)|0);
   $result = $11;
   $12 = $result;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $result;
    $0 = $14;
    break;
   }
   $15 = $2;
   $16 = ((($3)) + 72|0);
   $17 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($15,$16)|0);
   $result = $17;
   $18 = $result;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $result;
    $0 = $20;
    break;
   }
   $21 = $2;
   $22 = ((($3)) + 80|0);
   $23 = (__ZN14AP4_ByteStream24ReadNullTerminatedStringER10AP4_String($21,$22)|0);
   $result = $23;
   $24 = $result;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $result;
    $0 = $26;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function __ZN23AP4_SubtitleSampleEntry11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $result;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ((($3)) + 64|0);
   $11 = (__ZNK10AP4_String8GetCharsEv($10)|0);
   $12 = (__ZN14AP4_ByteStream11WriteStringEPKc($9,$11)|0);
   $result = $12;
   $13 = $result;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $result;
    $0 = $15;
    break;
   }
   $16 = $2;
   $17 = (__ZN14AP4_ByteStream9WriteUI08Eh($16,0)|0);
   $result = $17;
   $18 = $result;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $result;
    $0 = $20;
    break;
   }
   $21 = $2;
   $22 = ((($3)) + 72|0);
   $23 = (__ZNK10AP4_String8GetCharsEv($22)|0);
   $24 = (__ZN14AP4_ByteStream11WriteStringEPKc($21,$23)|0);
   $result = $24;
   $25 = $result;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $result;
    $0 = $27;
    break;
   }
   $28 = $2;
   $29 = (__ZN14AP4_ByteStream9WriteUI08Eh($28,0)|0);
   $result = $29;
   $30 = $result;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $result;
    $0 = $32;
    break;
   }
   $33 = $2;
   $34 = ((($3)) + 80|0);
   $35 = (__ZNK10AP4_String8GetCharsEv($34)|0);
   $36 = (__ZN14AP4_ByteStream11WriteStringEPKc($33,$35)|0);
   $result = $36;
   $37 = $result;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $result;
    $0 = $39;
    break;
   }
   $40 = $2;
   $41 = (__ZN14AP4_ByteStream9WriteUI08Eh($40,0)|0);
   $result = $41;
   $42 = $result;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $result;
    $0 = $44;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function __ZN23AP4_SubtitleSampleEntry13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 (__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector($2,$3)|0);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 64|0);
 $9 = (__ZNK10AP4_String8GetCharsEv($8)|0);
 FUNCTION_TABLE_viiii[$7 & 2047]($4,42233,$9,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 72|0);
 $15 = (__ZNK10AP4_String8GetCharsEv($14)|0);
 FUNCTION_TABLE_viiii[$13 & 2047]($10,42243,$15,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 80|0);
 $21 = (__ZNK10AP4_String8GetCharsEv($20)|0);
 FUNCTION_TABLE_viiii[$19 & 2047]($16,42259,$21,0);
 STACKTOP = sp;return 0;
}
function __ZN23AP4_SubtitleSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(56)|0);
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 64|0);
 __THREW__ = 0;
 $8 = (invoke_ii(870,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = ((($3)) + 72|0);
  __THREW__ = 0;
  $12 = (invoke_ii(870,($11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($3)) + 80|0);
   __THREW__ = 0;
   $16 = (invoke_ii(870,($15|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiiii(1028,($4|0),($6|0),($8|0),($12|0),($16|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     STACKTOP = sp;return ($4|0);
    }
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $1 = $21;
 $2 = $22;
 __ZdlPv($4);
 $23 = $1;
 $24 = $2;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZN15AP4_SampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ContainerAtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN20AP4_AudioSampleEntry13GetSampleSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 74|0);
 $3 = HEAP16[$2>>1]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN33AP4_GenericAudioSampleDescriptionC2EjjttP14AP4_AtomParent($this,$format,$sample_rate,$sample_size,$channel_count,$details) {
 $this = $this|0;
 $format = $format|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $sample_rate;
 $3 = $sample_size;
 $4 = $channel_count;
 $5 = $details;
 $8 = $0;
 $9 = $1;
 $10 = $5;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($8,0,$9,$10);
 $11 = ((($8)) + 32|0);
 $12 = $2;
 $13 = $3;
 $14 = $4;
 __THREW__ = 0;
 invoke_viiii(1029,($11|0),($12|0),($13|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = 10068;
  HEAP32[$8>>2] = $17;
  $18 = ((($8)) + 32|0);
  $19 = 10096;
  HEAP32[$18>>2] = $19;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $6 = $20;
 $7 = $21;
 __THREW__ = 0;
 invoke_vi(501,($8|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $6;
  $25 = $7;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZN20AP4_AudioSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 7036;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 7128;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 136|0);
 __THREW__ = 0;
 invoke_vi(486,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN15AP4_SampleEntryD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(319,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZNK10AP4_StringixEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + ($3)|0);
 $6 = HEAP8[$5>>0]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN33AP4_GenericVideoSampleDescriptionC2EjtttPKcP14AP4_AtomParent($this,$format,$width,$height,$depth,$compressor_name,$details) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $details;
 $9 = $0;
 $10 = $1;
 $11 = $6;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($9,0,$10,$11);
 $12 = ((($9)) + 32|0);
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 __THREW__ = 0;
 invoke_viiiii(1030,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  $19 = 10112;
  HEAP32[$9>>2] = $19;
  $20 = ((($9)) + 32|0);
  $21 = 10140;
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $7 = $22;
 $8 = $23;
 __THREW__ = 0;
 invoke_vi(501,($9|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $7;
  $27 = $8;
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZN21AP4_VisualSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 7324;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 7416;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 100|0);
 __THREW__ = 0;
 invoke_vi(864,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN15AP4_SampleEntryD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(319,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZThn36_N19AP4_Mp4vSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4vSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4vSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(412,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_Mp4vSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN24AP4_MpegVideoSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_Mp4vSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4vSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_Mp4aSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4aSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4aSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(408,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_Mp4aSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN24AP4_MpegAudioSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_Mp4aSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4aSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N23AP4_SubtitleSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN23AP4_SubtitleSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN23AP4_SubtitleSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(399,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN23AP4_SubtitleSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 8044;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 8136;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 80|0);
 __THREW__ = 0;
 invoke_vi(864,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $1 = $16;
   $2 = $17;
   $18 = ((($3)) + 72|0);
   __THREW__ = 0;
   invoke_vi(864,($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $32 = ___cxa_find_matching_catch(0|0)|0;
    $33 = tempRet0;
    ___clang_call_terminate($32);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $10 = ((($3)) + 72|0);
   __THREW__ = 0;
   invoke_vi(864,($10|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    label = 8;
    break;
   }
   $13 = ((($3)) + 64|0);
   __THREW__ = 0;
   invoke_vi(864,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $23 = ___cxa_find_matching_catch()|0;
    $24 = tempRet0;
    $1 = $23;
    $2 = $24;
    break;
   } else {
    __ZN15AP4_SampleEntryD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ((($3)) + 64|0);
  __THREW__ = 0;
  invoke_vi(864,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $32 = ___cxa_find_matching_catch(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(319,($3|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $32 = ___cxa_find_matching_catch(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $30 = $1;
  $31 = $2;
  ___resumeException($30|0);
  // unreachable;
 }
}
function __ZThn36_N23AP4_SubtitleSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN23AP4_SubtitleSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N22AP4_RtpHintSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN22AP4_RtpHintSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN22AP4_RtpHintSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(391,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_RtpHintSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15AP4_SampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N22AP4_RtpHintSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN22AP4_RtpHintSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_HevcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_HevcSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_HevcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(386,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_HevcSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN21AP4_VisualSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_HevcSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_HevcSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N18AP4_AvcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN18AP4_AvcSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN18AP4_AvcSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(381,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN18AP4_AvcSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN21AP4_VisualSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N18AP4_AvcSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN18AP4_AvcSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N24AP4_MpegVideoSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN24AP4_MpegVideoSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN24AP4_MpegVideoSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(376,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_MpegVideoSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN21AP4_VisualSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N24AP4_MpegVideoSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN24AP4_MpegVideoSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N21AP4_VisualSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN21AP4_VisualSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN21AP4_VisualSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(367,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N21AP4_VisualSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN21AP4_VisualSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N24AP4_MpegAudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN24AP4_MpegAudioSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN24AP4_MpegAudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(362,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_MpegAudioSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN20AP4_AudioSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N24AP4_MpegAudioSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN24AP4_MpegAudioSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N20AP4_AudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN20AP4_AudioSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN20AP4_AudioSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(353,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N20AP4_AudioSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN20AP4_AudioSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_Mp4sSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4sSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_Mp4sSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(348,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_Mp4sSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN25AP4_MpegSystemSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_Mp4sSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_Mp4sSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N25AP4_MpegSystemSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN25AP4_MpegSystemSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN25AP4_MpegSystemSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(343,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN25AP4_MpegSystemSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15AP4_SampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N25AP4_MpegSystemSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN25AP4_MpegSystemSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N22AP4_UnknownSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN22AP4_UnknownSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN22AP4_UnknownSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(334,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_UnknownSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 6604;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 6696;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 64|0);
 __THREW__ = 0;
 invoke_vi(486,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN15AP4_SampleEntryD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(319,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZThn36_N22AP4_UnknownSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN22AP4_UnknownSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N15AP4_SampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN15AP4_SampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN15AP4_SampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(319,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N15AP4_SampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN15AP4_SampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN26AP4_VideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(418,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN26AP4_VideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 8492;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 12|0);
 __ZN10AP4_StringD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN26AP4_VideoSampleDescriptionC2EtttPKc($this,$width,$height,$depth,$compressor_name) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $3 = $depth;
 $4 = $compressor_name;
 $5 = $0;
 $6 = 8492;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $1;
 HEAP16[$7>>1] = $8;
 $9 = ((($5)) + 6|0);
 $10 = $2;
 HEAP16[$9>>1] = $10;
 $11 = ((($5)) + 8|0);
 $12 = $3;
 HEAP16[$11>>1] = $12;
 $13 = ((($5)) + 12|0);
 $14 = $4;
 __ZN10AP4_StringC2EPKc($13,$14);
 STACKTOP = sp;return;
}
function __ZN21AP4_SampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9780;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 12|0);
 __ZN14AP4_AtomParentD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN26AP4_AudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(416,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN26AP4_AudioSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN26AP4_AudioSampleDescriptionC2Ejtt($this,$sample_rate,$sample_size,$channel_count) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample_rate;
 $2 = $sample_size;
 $3 = $channel_count;
 $4 = $0;
 $5 = 8476;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($4)) + 8|0);
 $9 = $2;
 HEAP16[$8>>1] = $9;
 $10 = ((($4)) + 10|0);
 $11 = $3;
 HEAP16[$10>>1] = $11;
 STACKTOP = sp;return;
}
function __ZN9AP4_MovieC2EP12AP4_MoovAtomR14AP4_ByteStreamb($this,$moov,$sample_stream,$transfer_moov_ownership) {
 $this = $this|0;
 $moov = $moov|0;
 $sample_stream = $sample_stream|0;
 $transfer_moov_ownership = $transfer_moov_ownership|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $item = 0, $time_scale = 0, $track = 0;
 var $trak_atoms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $moov;
 $2 = $sample_stream;
 $6 = $transfer_moov_ownership&1;
 $3 = $6;
 $7 = $0;
 $8 = 8508;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 $10 = $1;
 HEAP32[$9>>2] = $10;
 $11 = ((($7)) + 8|0);
 $12 = $3;
 $13 = $12&1;
 $14 = $13&1;
 HEAP8[$11>>0] = $14;
 $15 = ((($7)) + 16|0);
 __ZN8AP4_ListI9AP4_TrackEC2Ev($15);
 $16 = $1;
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 $23 = (invoke_iiii($22|0,($19|0),1836476516,0)|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 L4: do {
  if ($25) {
   label = 5;
  } else {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $31 = 0;
   } else {
    $27 = (___dynamic_cast($23,2392,1488,0)|0);
    $31 = $27;
   }
   $30 = ((($7)) + 12|0);
   HEAP32[$30>>2] = $31;
   $32 = ((($7)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = ((($7)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    __THREW__ = 0;
    $37 = (invoke_ii(1031,($36|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     label = 5;
     break;
    }
    $time_scale = $37;
   } else {
    $time_scale = 0;
   }
   $40 = $1;
   __THREW__ = 0;
   $41 = (invoke_ii(1032,($40|0))|0);
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    label = 5;
   } else {
    $trak_atoms = $41;
    $44 = $trak_atoms;
    __THREW__ = 0;
    $45 = (invoke_ii(1033,($44|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     label = 5;
    } else {
     $item = $45;
     while(1) {
      $48 = $item;
      $49 = ($48|0)!=(0|0);
      if (!($49)) {
       label = 21;
       break;
      }
      __THREW__ = 0;
      $50 = (invoke_ii(883,28)|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       label = 5;
       break L4;
      }
      $53 = $item;
      __THREW__ = 0;
      $54 = (invoke_ii(1034,($53|0))|0);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       label = 20;
       break;
      }
      $57 = $2;
      $58 = $time_scale;
      __THREW__ = 0;
      invoke_viiii(1035,($50|0),($54|0),($57|0),($58|0));
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 20;
       break;
      }
      $track = $50;
      $61 = ((($7)) + 16|0);
      $62 = $track;
      __THREW__ = 0;
      (invoke_iii(1036,($61|0),($62|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 5;
       break L4;
      }
      $65 = $item;
      __THREW__ = 0;
      $66 = (invoke_ii(1037,($65|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 5;
       break L4;
      }
      $item = $66;
     }
     if ((label|0) == 20) {
      $69 = ___cxa_find_matching_catch()|0;
      $70 = tempRet0;
      $4 = $69;
      $5 = $70;
      __ZdlPv($50);
      break;
     }
     else if ((label|0) == 21) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $4 = $28;
  $5 = $29;
 }
 __THREW__ = 0;
 invoke_vi(430,($15|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $75 = ___cxa_find_matching_catch(0|0)|0;
  $76 = tempRet0;
  ___clang_call_terminate($75);
  // unreachable;
 } else {
  $73 = $4;
  $74 = $5;
  ___resumeException($73|0);
  // unreachable;
 }
}
function __ZN9AP4_MovieD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 8508;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 16|0);
 __THREW__ = 0;
 (invoke_ii(1038,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 8|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if (!($10)) {
   $24 = ((($3)) + 16|0);
   __ZN8AP4_ListI9AP4_TrackED2Ev($24);
   STACKTOP = sp;return;
  }
  $11 = ((($3)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $24 = ((($3)) + 16|0);
   __ZN8AP4_ListI9AP4_TrackED2Ev($24);
   STACKTOP = sp;return;
  }
  $14 = HEAP32[$12>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  invoke_vi($16|0,($12|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $24 = ((($3)) + 16|0);
   __ZN8AP4_ListI9AP4_TrackED2Ev($24);
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $1 = $19;
 $2 = $20;
 $21 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(430,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $27 = ___cxa_find_matching_catch(0|0)|0;
  $28 = tempRet0;
  ___clang_call_terminate($27);
  // unreachable;
 } else {
  $25 = $1;
  $26 = $2;
  ___resumeException($25|0);
  // unreachable;
 }
}
function __ZN9AP4_MovieD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(420,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN9AP4_Movie7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (FUNCTION_TABLE_iii[$7 & 2047]($4,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN9AP4_Movie8GetTrackEj($this,$track_id) {
 $this = $this|0;
 $track_id = $track_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $track = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $track = sp + 16|0;
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $track_id;
 $6 = $1;
 HEAP32[$track>>2] = 0;
 $7 = ((($6)) + 16|0);
 $8 = $2;
 __ZN19AP4_TrackFinderByIdC2Ej($3,$8);
 __THREW__ = 0;
 $9 = (invoke_iiii(1039,($7|0),($3|0),($track|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __THREW__ = 0;
  invoke_vi(427,($3|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $21 = ___cxa_find_matching_catch(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   $19 = $4;
   $20 = $5;
   ___resumeException($19|0);
   // unreachable;
  }
 }
 $12 = ($9|0)==(0);
 __ZN19AP4_TrackFinderByIdD2Ev($3);
 if ($12) {
  $13 = HEAP32[$track>>2]|0;
  $0 = $13;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN9AP4_Movie8GetTrackEN9AP4_Track4TypeEj($this,$track_type,$index) {
 $this = $this|0;
 $track_type = $track_type|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $track = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $track = sp + 20|0;
 $4 = sp + 8|0;
 $1 = $this;
 $2 = $track_type;
 $3 = $index;
 $7 = $1;
 HEAP32[$track>>2] = 0;
 $8 = ((($7)) + 16|0);
 $9 = $2;
 $10 = $3;
 __ZN21AP4_TrackFinderByTypeC2EN9AP4_Track4TypeEj($4,$9,$10);
 __THREW__ = 0;
 $11 = (invoke_iiii(1039,($8|0),($4|0),($track|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $5 = $16;
  $6 = $17;
  __THREW__ = 0;
  invoke_vi(424,($4|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  } else {
   $21 = $5;
   $22 = $6;
   ___resumeException($21|0);
   // unreachable;
  }
 }
 $14 = ($11|0)==(0);
 __ZN21AP4_TrackFinderByTypeD2Ev($4);
 if ($14) {
  $15 = HEAP32[$track>>2]|0;
  $0 = $15;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN8AP4_ListI9AP4_TrackEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 8584;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI9AP4_TrackED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 8584;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListI9AP4_TrackE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN12AP4_MvhdAtom12GetTimeScaleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI9AP4_TrackE3AddEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(1040,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListI9AP4_TrackE3AddEPNS1_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN8AP4_ListI9AP4_TrackE16DeleteReferencesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vi[$16 & 2047]($12);
  }
  $17 = $item;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   invoke_vi(1041,($17|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 9;
    break;
   }
   __ZdlPv($17);
  }
  $21 = $next;
  $item = $21;
 }
 if ((label|0) == 9) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $1 = $22;
  $2 = $23;
  __ZdlPv($17);
  $24 = $1;
  $25 = $2;
  ___resumeException($24|0);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $26 = ((($3)) + 12|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($3)) + 8|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($3)) + 4|0);
  HEAP32[$28>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN19AP4_TrackFinderByIdC2Ej($this,$track_id) {
 $this = $this|0;
 $track_id = $track_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $track_id;
 $2 = $0;
 __ZN8AP4_ListI9AP4_TrackE4Item6FinderC2Ev($2);
 $3 = 8564;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI9AP4_TrackE4FindERKNS1_4Item6FinderERPS0_($this,$finder,$data) {
 $this = $this|0;
 $finder = $finder|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $finder;
 $3 = $data;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $item = $6;
 while(1) {
  $7 = $item;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $item;
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$12 & 2047]($9,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $item;
  if ($16) {
   label = 4;
   break;
  }
  $20 = ((($17)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $item = $21;
 }
 if ((label|0) == 4) {
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $22 = $3;
  HEAP32[$22>>2] = 0;
  $0 = -11;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZN19AP4_TrackFinderByIdD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_TrackFinderByTypeC2EN9AP4_Track4TypeEj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $index;
 $3 = $0;
 __ZN8AP4_ListI9AP4_TrackE4Item6FinderC2Ev($3);
 $4 = 8544;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $1;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN21AP4_TrackFinderByTypeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI9AP4_TrackE4ItemC2EPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI9AP4_TrackE3AddEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI9AP4_TrackE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI9AP4_TrackE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(1041,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI9AP4_TrackED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(430,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK9AP4_Track7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK21AP4_TrackFinderByType4TestEP9AP4_Track($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $track;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK9AP4_Track7GetTypeEv($4)|0);
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = ((($3)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$9>>2] = $11;
  $12 = ($10|0)==(0);
  if ($12) {
   $0 = 0;
   $13 = $0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $0 = -1;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function __ZN21AP4_TrackFinderByTypeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(424,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK19AP4_TrackFinderById4TestEP9AP4_Track($this,$track) {
 $this = $this|0;
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $track;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK9AP4_Track5GetIdEv($3)|0);
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = $7 ? 0 : -1;
 STACKTOP = sp;return ($8|0);
}
function __ZN19AP4_TrackFinderByIdD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(427,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI9AP4_TrackE4Item6FinderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(422,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI9AP4_TrackE4Item6FinderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 8524;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN19AP4_EncaSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$size,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 8600;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 8696;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN19AP4_EncaSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1701733217,$5,$6,$7);
 $8 = 8600;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 8696;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN19AP4_EncaSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $frma = 0, $odkm = 0, $original_format = 0, $schi = 0, $schm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = $1;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiii[$8 & 2047]($5,42628,0,0)|0);
 $frma = $9;
 $10 = ((($4)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiii[$13 & 2047]($10,42638,0,0)|0);
 $schi = $14;
 $15 = ((($4)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiiii[$18 & 2047]($15,42648,0,0)|0);
 $schm = $19;
 $20 = $frma;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $frma;
  $23 = (__ZN12AP4_FrmaAtom17GetOriginalFormatEv($22)|0);
  $24 = $23;
 } else {
  $24 = 1836069985;
 }
 $original_format = $24;
 $25 = $schm;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = (__Znwj(64)|0);
  $28 = ((($4)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$4>>2]|0;
  $31 = ((($30)) + 84|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $original_format;
  __THREW__ = 0;
  $34 = (invoke_iii($32|0,($4|0),($33|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   $37 = $original_format;
   $38 = $schm;
   __THREW__ = 0;
   $39 = (invoke_ii(1042,($38|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if (!($41)) {
    $42 = $schm;
    __THREW__ = 0;
    $43 = (invoke_ii(1043,($42|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if (!($45)) {
     $46 = $schm;
     __THREW__ = 0;
     $47 = (invoke_ii(1044,($46|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      __THREW__ = 0;
      $50 = (invoke_ii(870,($47|0))|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if (!($52)) {
       $53 = $schi;
       __THREW__ = 0;
       invoke_viiiiiiiii(1045,($27|0),($29|0),($34|0),($37|0),($39|0),($43|0),($50|0),($53|0),1);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if (!($55)) {
        $0 = $27;
        $84 = $0;
        STACKTOP = sp;return ($84|0);
       }
      }
     }
    }
   }
  }
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $2 = $56;
  $3 = $57;
  __ZdlPv($27);
  $85 = $2;
  $86 = $3;
  ___resumeException($85|0);
  // unreachable;
 } else {
  $58 = $schi;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $schi;
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 20|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iiii[$64 & 2047]($61,1868852077,0)|0);
   $odkm = $65;
   $66 = $odkm;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    $68 = (__Znwj(64)|0);
    $69 = ((($4)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$4>>2]|0;
    $72 = ((($71)) + 84|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $original_format;
    __THREW__ = 0;
    $75 = (invoke_iii($73|0,($4|0),($74|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if (!($77)) {
     $78 = $original_format;
     $79 = $schi;
     __THREW__ = 0;
     invoke_viiiiiiiii(1045,($68|0),($70|0),($75|0),($78|0),1868852077,512,(0|0),($79|0),1);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if (!($81)) {
      $0 = $68;
      $84 = $0;
      STACKTOP = sp;return ($84|0);
     }
    }
    $82 = ___cxa_find_matching_catch()|0;
    $83 = tempRet0;
    $2 = $82;
    $3 = $83;
    __ZdlPv($68);
    $85 = $2;
    $86 = $3;
    ___resumeException($85|0);
    // unreachable;
   }
  }
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function __ZN19AP4_EncaSampleEntry25ToTargetSampleDescriptionEj($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond = 0, $esds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $format;
 $5 = $1;
 $6 = $2;
 $cond = ($6|0)==(1836069985);
 if (!($cond)) {
  $44 = (__Znwj(44)|0);
  $45 = $2;
  __THREW__ = 0;
  $46 = (invoke_ii(1016,($5|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if (!($48)) {
   __THREW__ = 0;
   $49 = (invoke_ii(1017,($5|0))|0);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    __THREW__ = 0;
    $52 = (invoke_ii(1018,($5|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if (!($54)) {
     $55 = ((($5)) + 36|0);
     __THREW__ = 0;
     invoke_viiiiii(1019,($44|0),($45|0),($46|0),($49|0),($52|0),($55|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if (!($57)) {
      $0 = $44;
      $60 = $0;
      STACKTOP = sp;return ($60|0);
     }
    }
   }
  }
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $3 = $58;
  $4 = $59;
  __ZdlPv($44);
  $61 = $3;
  $62 = $4;
  ___resumeException($61|0);
  // unreachable;
 }
 $7 = ((($5)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiii[$10 & 2047]($7,1702061171,0)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $14 = 0;
 } else {
  $13 = (___dynamic_cast($11,2392,496,0)|0);
  $14 = $13;
 }
 $esds = $14;
 $15 = $esds;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = ((($5)) + 64|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)>(0);
  if ($20) {
   $21 = ((($5)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiiii[$24 & 2047]($21,42658,0,0)|0);
   $26 = ($25|0)==(0|0);
   if ($26) {
    $28 = 0;
   } else {
    $27 = (___dynamic_cast($25,2392,496,0)|0);
    $28 = $27;
   }
   $esds = $28;
  }
 }
 $29 = (__Znwj(84)|0);
 __THREW__ = 0;
 $30 = (invoke_ii(1016,($5|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if (!($32)) {
  __THREW__ = 0;
  $33 = (invoke_ii(1017,($5|0))|0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   __THREW__ = 0;
   $36 = (invoke_ii(1018,($5|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    $39 = $esds;
    __THREW__ = 0;
    invoke_viiiii(1020,($29|0),($30|0),($33|0),($36|0),($39|0));
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if (!($41)) {
     $0 = $29;
     $60 = $0;
     STACKTOP = sp;return ($60|0);
    }
   }
  }
 }
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $3 = $42;
 $4 = $43;
 __ZdlPv($29);
 $61 = $3;
 $62 = $4;
 ___resumeException($61|0);
 // unreachable;
 return (0)|0;
}
function __ZN19AP4_EncvSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$size,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $atom_factory;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($5,$6,$7,$8,$9);
 $10 = 8748;
 HEAP32[$5>>2] = $10;
 $11 = ((($5)) + 36|0);
 $12 = 8844;
 HEAP32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN19AP4_EncvSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN21AP4_VisualSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1701733238,$5,$6,$7);
 $8 = 8748;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 8844;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN19AP4_EncvSampleEntry19ToSampleDescriptionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $frma = 0, $odkm = 0, $original_format = 0, $schi = 0, $schm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = $1;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiii[$8 & 2047]($5,42628,0,0)|0);
 $frma = $9;
 $10 = ((($4)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiii[$13 & 2047]($10,42638,0,0)|0);
 $schi = $14;
 $15 = ((($4)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiiii[$18 & 2047]($15,42648,0,0)|0);
 $schm = $19;
 $20 = $frma;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $frma;
  $23 = (__ZN12AP4_FrmaAtom17GetOriginalFormatEv($22)|0);
  $24 = $23;
 } else {
  $24 = 1836070006;
 }
 $original_format = $24;
 $25 = $schm;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = (__Znwj(64)|0);
  $28 = ((($4)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$4>>2]|0;
  $31 = ((($30)) + 84|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $original_format;
  __THREW__ = 0;
  $34 = (invoke_iii($32|0,($4|0),($33|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if (!($36)) {
   $37 = $original_format;
   $38 = $schm;
   __THREW__ = 0;
   $39 = (invoke_ii(1042,($38|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if (!($41)) {
    $42 = $schm;
    __THREW__ = 0;
    $43 = (invoke_ii(1043,($42|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if (!($45)) {
     $46 = $schm;
     __THREW__ = 0;
     $47 = (invoke_ii(1044,($46|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      __THREW__ = 0;
      $50 = (invoke_ii(870,($47|0))|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if (!($52)) {
       $53 = $schi;
       __THREW__ = 0;
       invoke_viiiiiiiii(1045,($27|0),($29|0),($34|0),($37|0),($39|0),($43|0),($50|0),($53|0),1);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if (!($55)) {
        $0 = $27;
        $84 = $0;
        STACKTOP = sp;return ($84|0);
       }
      }
     }
    }
   }
  }
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $2 = $56;
  $3 = $57;
  __ZdlPv($27);
  $85 = $2;
  $86 = $3;
  ___resumeException($85|0);
  // unreachable;
 } else {
  $58 = $schi;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $schi;
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 20|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iiii[$64 & 2047]($61,1868852077,0)|0);
   $odkm = $65;
   $66 = $odkm;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    $68 = (__Znwj(64)|0);
    $69 = ((($4)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$4>>2]|0;
    $72 = ((($71)) + 84|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $original_format;
    __THREW__ = 0;
    $75 = (invoke_iii($73|0,($4|0),($74|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if (!($77)) {
     $78 = $original_format;
     $79 = $schi;
     __THREW__ = 0;
     invoke_viiiiiiiii(1045,($68|0),($70|0),($75|0),($78|0),1868852077,512,(0|0),($79|0),1);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if (!($81)) {
      $0 = $68;
      $84 = $0;
      STACKTOP = sp;return ($84|0);
     }
    }
    $82 = ___cxa_find_matching_catch()|0;
    $83 = tempRet0;
    $2 = $82;
    $3 = $83;
    __ZdlPv($68);
    $85 = $2;
    $86 = $3;
    ___resumeException($85|0);
    // unreachable;
   }
  }
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function __ZN19AP4_EncvSampleEntry25ToTargetSampleDescriptionEj($this,$format) {
 $this = $this|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $switch$split112D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $format;
 $5 = $1;
 $6 = $2;
 $switch$split2D = ($6|0)<(1635148596);
 L1: do {
  if ($switch$split2D) {
   switch ($6|0) {
   case 1635148595: case 1635148594: case 1635148593:  {
    label = 2;
    break;
   }
   default: {
    label = 17;
   }
   }
  } else {
   $switch$split52D = ($6|0)<(1752589105);
   L4: do {
    if ($switch$split52D) {
     $switch$split82D = ($6|0)<(1751479857);
     if ($switch$split82D) {
      switch ($6|0) {
      case 1635148596:  {
       label = 2;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     } else {
      switch ($6|0) {
      case 1751479857:  {
       break L4;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
    } else {
     $switch$split112D = ($6|0)<(1836070006);
     if ($switch$split112D) {
      switch ($6|0) {
      case 1752589105:  {
       break L4;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
     switch ($6|0) {
     case 1836070006:  {
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
     $41 = (__Znwj(92)|0);
     $42 = ((($5)) + 80|0);
     $43 = HEAP16[$42>>1]|0;
     $44 = ((($5)) + 82|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = ((($5)) + 108|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = ((($5)) + 100|0);
     __THREW__ = 0;
     $49 = (invoke_ii(870,($48|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      $52 = ((($5)) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($53)) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      __THREW__ = 0;
      $56 = (invoke_iiii($55|0,($52|0),1702061171,0)|0);
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if (!($58)) {
       $59 = ($56|0)==(0|0);
       if ($59) {
        $63 = 0;
       } else {
        $60 = (___dynamic_cast($56,2392,496,0)|0);
        $63 = $60;
       }
       __THREW__ = 0;
       invoke_viiiiii(1022,($41|0),($43|0),($45|0),($47|0),($49|0),($63|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       if (!($65)) {
        $0 = $41;
        $83 = $0;
        STACKTOP = sp;return ($83|0);
       }
      }
     }
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $3 = $61;
     $4 = $62;
     __ZdlPv($41);
     $84 = $3;
     $85 = $4;
     ___resumeException($84|0);
     // unreachable;
    }
   } while(0);
   $24 = (__Znwj(56)|0);
   $25 = $2;
   $26 = ((($5)) + 80|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = ((($5)) + 82|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = ((($5)) + 108|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ((($5)) + 100|0);
   __THREW__ = 0;
   $33 = (invoke_ii(870,($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $36 = ((($5)) + 36|0);
    __THREW__ = 0;
    invoke_viiiiiii(1047,($24|0),($25|0),($27|0),($29|0),($31|0),($33|0),($36|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $0 = $24;
     $83 = $0;
     STACKTOP = sp;return ($83|0);
    }
   }
   $39 = ___cxa_find_matching_catch()|0;
   $40 = tempRet0;
   $3 = $39;
   $4 = $40;
   __ZdlPv($24);
   $84 = $3;
   $85 = $4;
   ___resumeException($84|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 2) {
  $7 = (__Znwj(56)|0);
  $8 = $2;
  $9 = ((($5)) + 80|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ((($5)) + 82|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ((($5)) + 108|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ((($5)) + 100|0);
  __THREW__ = 0;
  $16 = (invoke_ii(870,($15|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = ((($5)) + 36|0);
   __THREW__ = 0;
   invoke_viiiiiii(1046,($7|0),($8|0),($10|0),($12|0),($14|0),($16|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $0 = $7;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
   }
  }
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $3 = $22;
  $4 = $23;
  __ZdlPv($7);
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable;
 }
 else if ((label|0) == 17) {
  $66 = (__Znwj(52)|0);
  $67 = $2;
  $68 = ((($5)) + 80|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = ((($5)) + 82|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = ((($5)) + 108|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = ((($5)) + 100|0);
  __THREW__ = 0;
  $75 = (invoke_ii(870,($74|0))|0);
  $76 = __THREW__; __THREW__ = 0;
  $77 = $76&1;
  if (!($77)) {
   $78 = ((($5)) + 36|0);
   __THREW__ = 0;
   invoke_viiiiiii(1021,($66|0),($67|0),($69|0),($71|0),($73|0),($75|0),($78|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if (!($80)) {
    $0 = $66;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
   }
  }
  $81 = ___cxa_find_matching_catch()|0;
  $82 = tempRet0;
  $3 = $81;
  $4 = $82;
  __ZdlPv($66);
  $84 = $3;
  $85 = $4;
  ___resumeException($84|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN19AP4_DrmsSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN19AP4_EncaSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1685220723,$5,$6,$7);
 $8 = 8968;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 9064;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN19AP4_DrmiSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN19AP4_EncvSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory($4,1685220713,$5,$6,$7);
 $8 = 9116;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = 9212;
 HEAP32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN24AP4_ProtectionSchemeInfoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 8896;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 2047]($4);
 STACKTOP = sp;return;
}
function __ZN24AP4_ProtectionSchemeInfoD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(444,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_ProtectionSchemeInfoC2EP17AP4_ContainerAtom($this,$schi) {
 $this = $this|0;
 $schi = $schi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $schi;
 $2 = $0;
 $3 = 8896;
 HEAP32[$2>>2] = $3;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
  $11 = ((($2)) + 4|0);
  HEAP32[$11>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $12 = ((($2)) + 4|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionC2EjP21AP4_SampleDescriptionjjjPKcP17AP4_ContainerAtomb($this,$format,$original_sample_description,$original_format,$scheme_type,$scheme_version,$scheme_uri,$schi,$transfer_ownership_of_original) {
 $this = $this|0;
 $format = $format|0;
 $original_sample_description = $original_sample_description|0;
 $original_format = $original_format|0;
 $scheme_type = $scheme_type|0;
 $scheme_version = $scheme_version|0;
 $scheme_uri = $scheme_uri|0;
 $schi = $schi|0;
 $transfer_ownership_of_original = $transfer_ownership_of_original|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $original_sample_description;
 $3 = $original_format;
 $4 = $scheme_type;
 $5 = $scheme_version;
 $6 = $scheme_uri;
 $7 = $schi;
 $11 = $transfer_ownership_of_original&1;
 $8 = $11;
 $12 = $0;
 $13 = $1;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($12,2,$13,0);
 $14 = 8912;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 32|0);
 $16 = $2;
 HEAP32[$15>>2] = $16;
 $17 = ((($12)) + 36|0);
 $18 = $8;
 $19 = $18&1;
 $20 = $19&1;
 HEAP8[$17>>0] = $20;
 $21 = ((($12)) + 40|0);
 $22 = $3;
 HEAP32[$21>>2] = $22;
 $23 = ((($12)) + 44|0);
 $24 = $4;
 HEAP32[$23>>2] = $24;
 $25 = ((($12)) + 48|0);
 $26 = $5;
 HEAP32[$25>>2] = $26;
 $27 = ((($12)) + 52|0);
 $28 = $6;
 __THREW__ = 0;
 invoke_vii(869,($27|0),($28|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $9 = $38;
  $10 = $39;
 } else {
  __THREW__ = 0;
  $31 = (invoke_ii(883,8)|0);
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  do {
   if ($33) {
    $40 = ___cxa_find_matching_catch()|0;
    $41 = tempRet0;
    $9 = $40;
    $10 = $41;
   } else {
    $34 = $7;
    __THREW__ = 0;
    invoke_vii(1048,($31|0),($34|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $42 = ___cxa_find_matching_catch()|0;
     $43 = tempRet0;
     $9 = $42;
     $10 = $43;
     __ZdlPv($31);
     break;
    } else {
     $37 = ((($12)) + 60|0);
     HEAP32[$37>>2] = $31;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(864,($27|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $50 = ___cxa_find_matching_catch(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($12|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $9;
  $49 = $10;
  ___resumeException($48|0);
  // unreachable;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 8912;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  label = 3;
 } else {
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_vi($10|0,($6|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   label = 6;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $13 = ((($3)) + 36|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&1;
   if ($15) {
    $16 = ((($3)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $19 = HEAP32[$17>>2]|0;
     $20 = ((($19)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     invoke_vi($21|0,($17|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 6;
      break;
     }
    }
   }
   $29 = ((($3)) + 52|0);
   __THREW__ = 0;
   invoke_vi(864,($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    $1 = $32;
    $2 = $33;
    break;
   } else {
    __ZN21AP4_SampleDescriptionD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $1 = $24;
  $2 = $25;
  $26 = ((($3)) + 52|0);
  __THREW__ = 0;
  invoke_vi(864,($26|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $38 = ___cxa_find_matching_catch(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $1;
  $37 = $2;
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN30AP4_ProtectedSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(446,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK30AP4_ProtectedSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $atom = 0, $container = 0, $frma = 0, $schm = 0, $sinf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = $1;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $8 = ((($4)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 2047]($9)|0);
 $atom = $13;
 $14 = $atom;
 $15 = ((($4)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 __ZN8AP4_Atom7SetTypeEj($14,$16);
 $17 = $atom;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = 0;
 } else {
  $19 = (___dynamic_cast($17,2392,2480,0)|0);
  $20 = $19;
 }
 $container = $20;
 $21 = $container;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $atom;
  $0 = $23;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $24 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(983,($24|0),1936289382);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $2 = $74;
  $3 = $75;
  __ZdlPv($24);
  $88 = $2;
  $89 = $3;
  ___resumeException($88|0);
  // unreachable;
 }
 $sinf = $24;
 $27 = (__Znwj(40)|0);
 $28 = ((($4)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 __THREW__ = 0;
 invoke_vii(1049,($27|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $2 = $76;
  $3 = $77;
  __ZdlPv($27);
  $88 = $2;
  $89 = $3;
  ___resumeException($88|0);
  // unreachable;
 }
 $frma = $27;
 $32 = $sinf;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $frma;
 (FUNCTION_TABLE_iiii[$36 & 2047]($33,$37,-1)|0);
 $38 = (__Znwj(56)|0);
 $39 = ((($4)) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($4)) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($4)) + 52|0);
 __THREW__ = 0;
 $44 = (invoke_ii(870,($43|0))|0);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if (!($46)) {
  __THREW__ = 0;
  invoke_viiiii(1050,($38|0),($40|0),($42|0),($44|0),0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if (!($48)) {
   $schm = $38;
   $49 = $sinf;
   $50 = ((($49)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $schm;
   (FUNCTION_TABLE_iiii[$53 & 2047]($50,$54,-1)|0);
   $55 = ((($4)) + 60|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0|0);
   if ($57) {
    $58 = ((($4)) + 60|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (__ZN24AP4_ProtectionSchemeInfo11GetSchiAtomEv($59)|0);
    $61 = ($60|0)!=(0|0);
    if ($61) {
     $62 = $sinf;
     $63 = ((($62)) + 36|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($4)) + 60|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (__ZN24AP4_ProtectionSchemeInfo11GetSchiAtomEv($68)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($70)) + 48|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 2047]($69)|0);
     (FUNCTION_TABLE_iiii[$66 & 2047]($63,$73,-1)|0);
    }
   }
   $80 = $container;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $sinf;
   (FUNCTION_TABLE_iiii[$84 & 2047]($81,$85,-1)|0);
   $86 = $atom;
   $0 = $86;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 }
 $78 = ___cxa_find_matching_catch()|0;
 $79 = tempRet0;
 $2 = $78;
 $3 = $79;
 __ZdlPv($38);
 $88 = $2;
 $89 = $3;
 ___resumeException($88|0);
 // unreachable;
 return (0)|0;
}
function __ZN29AP4_DefaultBlockCipherFactory12CreateCipherEN15AP4_BlockCipher10CipherTypeENS0_15CipherDirectionENS0_10CipherModeEPKvPKhjRPS0_($this,$type,$direction,$mode,$mode_params,$key,$key_size,$cipher) {
 $this = $this|0;
 $type = $type|0;
 $direction = $direction|0;
 $mode = $mode|0;
 $mode_params = $mode_params|0;
 $key = $key|0;
 $key_size = $key_size|0;
 $cipher = $cipher|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aes_cipher = 0, $cond = 0, $or$cond = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $aes_cipher = sp + 4|0;
 $1 = $this;
 $2 = $type;
 $3 = $direction;
 $4 = $mode;
 $5 = $mode_params;
 $6 = $key;
 $7 = $key_size;
 $8 = $cipher;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $2;
 $cond = ($10|0)==(0);
 if (!($cond)) {
  $0 = -18;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $11 = $6;
 $12 = ($11|0)==(0|0);
 $13 = $7;
 $14 = ($13|0)!=(16);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -3;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 HEAP32[$aes_cipher>>2] = 0;
 $15 = $6;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = (__ZN18AP4_AesBlockCipher6CreateEPKhN15AP4_BlockCipher15CipherDirectionENS2_10CipherModeEPKvRPS_($15,$16,$17,$18,$aes_cipher)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $23 = HEAP32[$aes_cipher>>2]|0;
  $24 = $8;
  HEAP32[$24>>2] = $23;
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZN29AP4_DefaultBlockCipherFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN22AP4_BlockCipherFactoryC2Ev($1);
 $2 = 8948;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_Ap4Protection_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_413();
 return;
}
function __ZN12AP4_FrmaAtom17GetOriginalFormatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_SchmAtom13GetSchemeTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_SchmAtom16GetSchemeVersionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN12AP4_SchmAtom12GetSchemeUriEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN22AP4_BlockCipherFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9264;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_DrmiSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_DrmiSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_DrmiSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(458,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_DrmiSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN19AP4_EncvSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_DrmiSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_DrmiSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_DrmsSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_DrmsSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_DrmsSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(454,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_DrmsSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN19AP4_EncaSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_DrmsSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_DrmsSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN29AP4_DefaultBlockCipherFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(451,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N19AP4_EncvSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_EncvSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_EncvSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(438,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_EncvSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN21AP4_VisualSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_EncvSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_EncvSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_EncaSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_EncaSampleEntryD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN19AP4_EncaSampleEntryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(432,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_EncaSampleEntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN20AP4_AudioSampleEntryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N19AP4_EncaSampleEntryD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN19AP4_EncaSampleEntryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN22AP4_BlockCipherFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(462,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_BlockCipherFactoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN29AP4_DefaultBlockCipherFactoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN22AP4_BlockCipherFactoryD2Ev($1);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_413() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN29AP4_DefaultBlockCipherFactoryC2Ev(8932);
 (___cxa_atexit((451|0),(8932|0),(___dso_handle|0))|0);
 return;
}
function __ZNK9AP4_ArrayIjEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_ElstAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1051,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_ElstAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $entry_count = 0, $i = 0, $media_rate = 0, $media_time = 0, $media_time2 = 0, $segment_duration = 0, $segment_duration1 = 0;
 var $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 76|0;
 $media_rate = sp + 106|0;
 $zero = sp + 104|0;
 $segment_duration = sp + 68|0;
 $media_time = sp + 64|0;
 $7 = sp + 40|0;
 $segment_duration1 = sp + 32|0;
 $media_time2 = sp + 24|0;
 $8 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __ZN8AP4_AtomC2Ejjhj($9,1701606260,$10,$11,$12);
 $13 = 9284;
 HEAP32[$9>>2] = $13;
 $14 = ((($9)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1052,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $5 = $50;
  $6 = $51;
 } else {
  $17 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($17|0),($entry_count|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  L4: do {
   if (!($19)) {
    $20 = ((($9)) + 36|0);
    $21 = HEAP32[$entry_count>>2]|0;
    __THREW__ = 0;
    (invoke_iii(1053,($20|0),($21|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     $i = 0;
     while(1) {
      $24 = $i;
      $25 = HEAP32[$entry_count>>2]|0;
      $26 = ($24>>>0)<($25>>>0);
      if (!($26)) {
       break;
      }
      $27 = $2;
      $28 = $27&255;
      $29 = ($28|0)==(0);
      $30 = $4;
      __THREW__ = 0;
      if ($29) {
       (__ZN14AP4_ByteStream8ReadUI32ERj($30,$segment_duration)|0);
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break L4;
       }
       $33 = $4;
       __THREW__ = 0;
       (invoke_iii(854,($33|0),($media_time|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        break L4;
       }
       $36 = $4;
       __THREW__ = 0;
       (invoke_iii(866,($36|0),($media_rate|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        break L4;
       }
       $39 = $4;
       __THREW__ = 0;
       (invoke_iii(866,($39|0),($zero|0))|0);
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        break L4;
       }
       $42 = ((($9)) + 36|0);
       $43 = HEAP32[$segment_duration>>2]|0;
       $44 = HEAP32[$media_time>>2]|0;
       $45 = HEAP16[$media_rate>>1]|0;
       __THREW__ = 0;
       invoke_viiiiii(1054,($7|0),($43|0),0,($44|0),0,($45|0));
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        break L4;
       }
       __THREW__ = 0;
       (invoke_iii(1055,($42|0),($7|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
      } else {
       (__ZN14AP4_ByteStream8ReadUI64ERy($30,$segment_duration1)|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        break L4;
       }
       $58 = $4;
       __THREW__ = 0;
       (invoke_iii(857,($58|0),($media_time2|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break L4;
       }
       $61 = $4;
       __THREW__ = 0;
       (invoke_iii(866,($61|0),($media_rate|0))|0);
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break L4;
       }
       $64 = $4;
       __THREW__ = 0;
       (invoke_iii(866,($64|0),($zero|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        break L4;
       }
       $67 = ((($9)) + 36|0);
       $68 = $segment_duration1;
       $69 = $68;
       $70 = HEAP32[$69>>2]|0;
       $71 = (($68) + 4)|0;
       $72 = $71;
       $73 = HEAP32[$72>>2]|0;
       $74 = $media_time2;
       $75 = $74;
       $76 = HEAP32[$75>>2]|0;
       $77 = (($74) + 4)|0;
       $78 = $77;
       $79 = HEAP32[$78>>2]|0;
       $80 = HEAP16[$media_rate>>1]|0;
       __THREW__ = 0;
       invoke_viiiiii(1054,($8|0),($70|0),($73|0),($76|0),($79|0),($80|0));
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        break L4;
       }
       __THREW__ = 0;
       (invoke_iii(1055,($67|0),($8|0))|0);
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       if ($84) {
        break L4;
       }
      }
      $85 = $i;
      $86 = (($85) + 1)|0;
      $i = $86;
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $52 = ___cxa_find_matching_catch()|0;
  $53 = tempRet0;
  $5 = $52;
  $6 = $53;
  __THREW__ = 0;
  invoke_vi(468,($14|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $91 = ___cxa_find_matching_catch(0|0)|0;
   $92 = tempRet0;
   ___clang_call_terminate($91);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($9|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $91 = ___cxa_find_matching_catch(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 } else {
  $89 = $5;
  $90 = $6;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZN12AP4_ElstAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = (__ZNK9AP4_ArrayI13AP4_ElstEntryE9ItemCountEv($5)|0);
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($3)) + 36|0);
  $13 = (__ZNK9AP4_ArrayI13AP4_ElstEntryE9ItemCountEv($12)|0);
  $14 = ($11>>>0)<($13>>>0);
  if (!($14)) {
   label = 19;
   break;
  }
  $15 = ((($3)) + 25|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)==(0);
  $19 = $2;
  $20 = ((($3)) + 36|0);
  $21 = $i;
  $22 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($20,$21)|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  if ($18) {
   $29 = (__ZN14AP4_ByteStream9WriteUI32Ej($19,$25)|0);
   $result = $29;
   $30 = $result;
   $31 = ($30|0)!=(0);
   if ($31) {
    label = 7;
    break;
   }
   $33 = $2;
   $34 = ((($3)) + 36|0);
   $35 = $i;
   $36 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($34,$35)|0);
   $37 = ((($36)) + 8|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (__ZN14AP4_ByteStream9WriteUI32Ej($33,$40)|0);
   $result = $44;
   $45 = $result;
   $46 = ($45|0)!=(0);
   if ($46) {
    label = 9;
    break;
   }
  } else {
   $48 = (__ZN14AP4_ByteStream9WriteUI64Ey($19,$25,$28)|0);
   $result = $48;
   $49 = $result;
   $50 = ($49|0)!=(0);
   if ($50) {
    label = 11;
    break;
   }
   $52 = $2;
   $53 = ((($3)) + 36|0);
   $54 = $i;
   $55 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($53,$54)|0);
   $56 = ((($55)) + 8|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (__ZN14AP4_ByteStream9WriteUI64Ey($52,$59,$62)|0);
   $result = $63;
   $64 = $result;
   $65 = ($64|0)!=(0);
   if ($65) {
    label = 13;
    break;
   }
  }
  $67 = $2;
  $68 = ((($3)) + 36|0);
  $69 = $i;
  $70 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($68,$69)|0);
  $71 = ((($70)) + 16|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = (__ZN14AP4_ByteStream9WriteUI16Et($67,$72)|0);
  $result = $73;
  $74 = $result;
  $75 = ($74|0)!=(0);
  if ($75) {
   label = 15;
   break;
  }
  $77 = $2;
  $78 = (__ZN14AP4_ByteStream9WriteUI16Et($77,0)|0);
  $result = $78;
  $79 = $result;
  $80 = ($79|0)!=(0);
  if ($80) {
   label = 17;
   break;
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 if ((label|0) == 7) {
  $32 = $result;
  $0 = $32;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 9) {
  $47 = $result;
  $0 = $47;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 11) {
  $51 = $result;
  $0 = $51;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 13) {
  $66 = $result;
  $0 = $66;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 15) {
  $76 = $result;
  $0 = $76;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 17) {
  $81 = $result;
  $0 = $81;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 return (0)|0;
}
function __ZN12AP4_ElstAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayI13AP4_ElstEntryE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,42752,$8,0,0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($2)) + 36|0);
  $11 = (__ZNK9AP4_ArrayI13AP4_ElstEntryE9ItemCountEv($10)|0);
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($17,$18)|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,42764,$22,0,0);
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($2)) + 36|0);
  $31 = $i;
  $32 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($30,$31)|0);
  $33 = ((($32)) + 8|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36|0)<(0);
  $41 = $40 << 31 >> 31;
  FUNCTION_TABLE_viiiii[$29 & 2047]($26,42787,$36,$41,0);
  $42 = $1;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($2)) + 36|0);
  $47 = $i;
  $48 = (__ZN9AP4_ArrayI13AP4_ElstEntryEixEm($46,$47)|0);
  $49 = ((($48)) + 16|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  FUNCTION_TABLE_viiiii[$45 & 2047]($42,42804,$51,0,0);
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9344;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ($8*24)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*24)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*24)|0)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$29+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$29+20>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN13AP4_ElstEntryC2Eyxt($this,$0,$1,$2,$3,$media_rate) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $media_rate = $media_rate|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $6 = sp;
 $4 = $this;
 $8 = $5;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $3;
 $7 = $media_rate;
 $16 = $4;
 $17 = $5;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $16;
 $24 = $23;
 HEAP32[$24>>2] = $19;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $22;
 $27 = ((($16)) + 8|0);
 $28 = $6;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $27;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = ((($16)) + 16|0);
 $39 = $7;
 HEAP16[$38>>1] = $39;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayI13AP4_ElstEntryE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*24)|0)|0);
 $36 = $2;
 ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$36+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$36+20>>2]|0;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN9AP4_ArrayI13AP4_ElstEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9344;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayI13AP4_ElstEntryE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayI13AP4_ElstEntryE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayI13AP4_ElstEntryEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*24)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayI13AP4_ElstEntryE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI13AP4_ElstEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(468,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_ElstAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(464,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_ElstAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 9284;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(468,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_MvhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(152)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1056,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_MvhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $creation_time = 0, $duration = 0, $i = 0, $modification_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 20|0;
 $modification_time = sp + 8|0;
 $duration = sp + 4|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1836476516,$8,$9,$10);
 $11 = 9360;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 25|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 $16 = $4;
 if ($15) {
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($creation_time|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = HEAP32[$creation_time>>2]|0;
   $20 = ((($7)) + 40|0);
   $21 = $20;
   $22 = $21;
   HEAP32[$22>>2] = $19;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   $25 = $4;
   __THREW__ = 0;
   (invoke_iii(854,($25|0),($modification_time|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $28 = HEAP32[$modification_time>>2]|0;
    $29 = ((($7)) + 48|0);
    $30 = $29;
    $31 = $30;
    HEAP32[$31>>2] = $28;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = 0;
    $34 = $4;
    $35 = ((($7)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(854,($34|0),($35|0))|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if (!($37)) {
     $38 = $4;
     __THREW__ = 0;
     (invoke_iii(854,($38|0),($duration|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      $41 = HEAP32[$duration>>2]|0;
      $42 = ((($7)) + 64|0);
      $43 = $42;
      $44 = $43;
      HEAP32[$44>>2] = $41;
      $45 = (($43) + 4)|0;
      $46 = $45;
      HEAP32[$46>>2] = 0;
      label = 12;
     }
    }
   }
  }
 } else {
  $51 = ((($7)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(857,($16|0),($51|0))|0);
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if (!($53)) {
   $54 = $4;
   $55 = ((($7)) + 48|0);
   __THREW__ = 0;
   (invoke_iii(857,($54|0),($55|0))|0);
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if (!($57)) {
    $58 = $4;
    $59 = ((($7)) + 56|0);
    __THREW__ = 0;
    (invoke_iii(854,($58|0),($59|0))|0);
    $60 = __THREW__; __THREW__ = 0;
    $61 = $60&1;
    if (!($61)) {
     $62 = $4;
     $63 = ((($7)) + 64|0);
     __THREW__ = 0;
     (invoke_iii(857,($62|0),($63|0))|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      label = 12;
     }
    }
   }
  }
 }
 L11: do {
  if ((label|0) == 12) {
   $66 = $4;
   $67 = ((($7)) + 72|0);
   __THREW__ = 0;
   (invoke_iii(854,($66|0),($67|0))|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    $70 = $4;
    $71 = ((($7)) + 76|0);
    __THREW__ = 0;
    (invoke_iii(866,($70|0),($71|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if (!($73)) {
     $74 = $4;
     $75 = ((($7)) + 78|0);
     __THREW__ = 0;
     (invoke_iiii(851,($74|0),($75|0),2)|0);
     $76 = __THREW__; __THREW__ = 0;
     $77 = $76&1;
     if (!($77)) {
      $78 = $4;
      $79 = ((($7)) + 80|0);
      __THREW__ = 0;
      (invoke_iiii(851,($78|0),($79|0),8)|0);
      $80 = __THREW__; __THREW__ = 0;
      $81 = $80&1;
      if (!($81)) {
       $i = 0;
       while(1) {
        $82 = $i;
        $83 = ($82|0)<(9);
        $84 = $4;
        if (!($83)) {
         break;
        }
        $85 = $i;
        $86 = ((($7)) + 88|0);
        $87 = (($86) + ($85<<2)|0);
        __THREW__ = 0;
        (invoke_iii(854,($84|0),($87|0))|0);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         break L11;
        }
        $90 = $i;
        $91 = (($90) + 1)|0;
        $i = $91;
       }
       $92 = ((($7)) + 124|0);
       __THREW__ = 0;
       (invoke_iiii(851,($84|0),($92|0),24)|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if (!($94)) {
        $95 = $4;
        $96 = ((($7)) + 148|0);
        __THREW__ = 0;
        (invoke_iii(854,($95|0),($96|0))|0);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if (!($98)) {
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 $5 = $47;
 $6 = $48;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $101 = ___cxa_find_matching_catch(0|0)|0;
  $102 = tempRet0;
  ___clang_call_terminate($101);
  // unreachable;
 } else {
  $99 = $5;
  $100 = $6;
  ___resumeException($99|0);
  // unreachable;
 }
}
function __ZN12AP4_MvhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = ((($3)) + 40|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 if ($7) {
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
  $result = $16;
  $17 = $result;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $result;
   $0 = $19;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $20 = $2;
  $21 = ((($3)) + 48|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($20,$24)|0);
  $result = $28;
  $29 = $result;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $result;
   $0 = $31;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $32 = $2;
  $33 = ((($3)) + 56|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (__ZN14AP4_ByteStream9WriteUI32Ej($32,$34)|0);
  $result = $35;
  $36 = $result;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $result;
   $0 = $38;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $39 = $2;
  $40 = ((($3)) + 64|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($39,$43)|0);
  $result = $47;
  $48 = $result;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $result;
   $0 = $50;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 } else {
  $51 = (__ZN14AP4_ByteStream9WriteUI64Ey($8,$12,$15)|0);
  $result = $51;
  $52 = $result;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $result;
   $0 = $54;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $55 = $2;
  $56 = ((($3)) + 48|0);
  $57 = $56;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (__ZN14AP4_ByteStream9WriteUI64Ey($55,$59,$62)|0);
  $result = $63;
  $64 = $result;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $result;
   $0 = $66;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $67 = $2;
  $68 = ((($3)) + 56|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (__ZN14AP4_ByteStream9WriteUI32Ej($67,$69)|0);
  $result = $70;
  $71 = $result;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $result;
   $0 = $73;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
  $74 = $2;
  $75 = ((($3)) + 64|0);
  $76 = $75;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (__ZN14AP4_ByteStream9WriteUI64Ey($74,$78,$81)|0);
  $result = $82;
  $83 = $result;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $result;
   $0 = $85;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 $86 = $2;
 $87 = ((($3)) + 72|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (__ZN14AP4_ByteStream9WriteUI32Ej($86,$88)|0);
 $result = $89;
 $90 = $result;
 $91 = ($90|0)!=(0);
 if ($91) {
  $92 = $result;
  $0 = $92;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $93 = $2;
 $94 = ((($3)) + 76|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = (__ZN14AP4_ByteStream9WriteUI16Et($93,$95)|0);
 $result = $96;
 $97 = $result;
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = $result;
  $0 = $99;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $100 = $2;
 $101 = ((($3)) + 78|0);
 $102 = (__ZN14AP4_ByteStream5WriteEPKvj($100,$101,2)|0);
 $result = $102;
 $103 = $result;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $result;
  $0 = $105;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $106 = $2;
 $107 = ((($3)) + 80|0);
 $108 = (__ZN14AP4_ByteStream5WriteEPKvj($106,$107,8)|0);
 $result = $108;
 $109 = $result;
 $110 = ($109|0)!=(0);
 if ($110) {
  $111 = $result;
  $0 = $111;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $i = 0;
 while(1) {
  $112 = $i;
  $113 = ($112|0)<(9);
  $114 = $2;
  if (!($113)) {
   break;
  }
  $115 = $i;
  $116 = ((($3)) + 88|0);
  $117 = (($116) + ($115<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (__ZN14AP4_ByteStream9WriteUI32Ej($114,$118)|0);
  $result = $119;
  $120 = $result;
  $121 = ($120|0)!=(0);
  if ($121) {
   label = 29;
   break;
  }
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
 }
 if ((label|0) == 29) {
  $122 = $result;
  $0 = $122;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $125 = ((($3)) + 124|0);
 $126 = (__ZN14AP4_ByteStream5WriteEPKvj($114,$125,24)|0);
 $result = $126;
 $127 = $result;
 $128 = ($127|0)!=(0);
 if ($128) {
  $129 = $result;
  $0 = $129;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 } else {
  $130 = $2;
  $131 = ((($3)) + 148|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (__ZN14AP4_ByteStream9WriteUI32Ej($130,$132)|0);
  $0 = $133;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function __ZN12AP4_MvhdAtom13GetDurationMsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = ((($2)) + 64|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($2)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (__Z15AP4_ConvertTimeyjj($9,$12,$14,1000)|0);
  $16 = tempRet0;
  $0 = $15;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN12AP4_MvhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45014,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 64|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,46674,$16,$19,0);
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZN12AP4_MvhdAtom13GetDurationMsEv($2)|0);
 FUNCTION_TABLE_viiiii[$23 & 2047]($20,44214,$24,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MvhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(470,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MvhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_HmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1057,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_HmhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1752000612,$8,$9,$10);
 $11 = 9420;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($7)) + 38|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($7)) + 40|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($7)) + 44|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($7)) + 48|0);
 HEAP32[$16>>2] = 0;
 $17 = $4;
 $18 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(866,($17|0),($18|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $21 = $4;
  $22 = ((($7)) + 38|0);
  __THREW__ = 0;
  (invoke_iii(866,($21|0),($22|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if (!($24)) {
   $25 = $4;
   $26 = ((($7)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(854,($25|0),($26|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = $4;
    $30 = ((($7)) + 44|0);
    __THREW__ = 0;
    (invoke_iii(854,($29|0),($30|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = $4;
     $34 = ((($7)) + 48|0);
     __THREW__ = 0;
     (invoke_iii(854,($33|0),($34|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 $5 = $37;
 $6 = $38;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  $41 = $5;
  $42 = $6;
  ___resumeException($41|0);
  // unreachable;
 }
}
function __ZN12AP4_HmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI16Et($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $10 = $result;
   $0 = $10;
  } else {
   $11 = $2;
   $12 = ((($3)) + 38|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = (__ZN14AP4_ByteStream9WriteUI16Et($11,$13)|0);
   $result = $14;
   $15 = $result;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $result;
    $0 = $17;
    break;
   }
   $18 = $2;
   $19 = ((($3)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (__ZN14AP4_ByteStream9WriteUI32Ej($18,$20)|0);
   $result = $21;
   $22 = $result;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $result;
    $0 = $24;
    break;
   }
   $25 = $2;
   $26 = ((($3)) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($25,$27)|0);
   $result = $28;
   $29 = $result;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $result;
    $0 = $31;
    break;
   }
   $32 = $2;
   $33 = ((($3)) + 48|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (__ZN14AP4_ByteStream9WriteUI32Ej($32,$34)|0);
   $result = $35;
   $36 = $result;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $result;
    $0 = $38;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN12AP4_HmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,42879,$9,0,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 38|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 FUNCTION_TABLE_viiiii[$13 & 2047]($10,42892,$16,0,0);
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_viiiii[$20 & 2047]($17,42905,$22,0,0);
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 2047]($23,42917,$28,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_HmhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(474,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_HmhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_OdheAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $2;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(64)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(1058,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_OdheAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes_available = 0, $content_type = 0, $content_type_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $content_type_length = sp + 288|0;
 $content_type = sp + 32|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $5 = $atom_factory;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN17AP4_ContainerAtomC2Ejybhj($8,1868851301,$9,0,0,$10,$11);
 $12 = 9480;
 HEAP32[$8>>2] = $12;
 $13 = ((($8)) + 36|0);
 $14 = 9556;
 HEAP32[$13>>2] = $14;
 $15 = ((($8)) + 56|0);
 __THREW__ = 0;
 invoke_vi(860,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $6 = $41;
  $7 = $42;
 } else {
  $18 = $4;
  __THREW__ = 0;
  (invoke_iii(940,($18|0),($content_type_length|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   $21 = $4;
   $22 = HEAP8[$content_type_length>>0]|0;
   $23 = $22&255;
   __THREW__ = 0;
   (invoke_iiii(851,($21|0),($content_type|0),($23|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ((($8)) + 56|0);
    $27 = HEAP8[$content_type_length>>0]|0;
    $28 = $27&255;
    __THREW__ = 0;
    invoke_viii(948,($26|0),($content_type|0),($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $31 = $1;
     $32 = HEAP8[$content_type_length>>0]|0;
     $33 = $32&255;
     $34 = (13 + ($33))|0;
     $35 = (($31) - ($34))|0;
     $bytes_available = $35;
     $36 = $5;
     $37 = $4;
     $38 = $bytes_available;
     __THREW__ = 0;
     invoke_viiiii(961,($8|0),($36|0),($37|0),($38|0),0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $6 = $43;
  $7 = $44;
  __THREW__ = 0;
  invoke_vi(864,($15|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $51 = ___cxa_find_matching_catch(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(726,($8|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $51 = ___cxa_find_matching_catch(0|0)|0;
  $52 = tempRet0;
  ___clang_call_terminate($51);
  // unreachable;
 } else {
  $49 = $6;
  $50 = $7;
  ___resumeException($49|0);
  // unreachable;
 }
}
function __ZN12AP4_OdheAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_result = 0, $_result1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 56|0);
 $9 = (__ZNK10AP4_String9GetLengthEv($8)|0);
 $10 = $9&255;
 $11 = (__ZN14AP4_ByteStream9WriteUI08Eh($7,$10)|0);
 $_result = $11;
 $12 = $_result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $_result;
  $0 = $14;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $15 = ((($6)) + 56|0);
 $16 = (__ZNK10AP4_String9GetLengthEv($15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  $19 = ((($6)) + 56|0);
  $20 = (__ZNK10AP4_String8GetCharsEv($19)|0);
  $21 = ((($6)) + 56|0);
  $22 = (__ZNK10AP4_String9GetLengthEv($21)|0);
  $23 = (__ZN14AP4_ByteStream5WriteEPKvj($18,$20,$22)|0);
  $_result1 = $23;
  $24 = $_result1;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $_result1;
   $0 = $26;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $27 = ((($6)) + 36|0);
 $28 = ((($27)) + 4|0);
 $29 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$29);
 __THREW__ = 0;
 $30 = (invoke_iii(881,($28|0),($3|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if (!($32)) {
  $0 = $30;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $4 = $33;
 $5 = $34;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $4;
  $39 = $5;
  ___resumeException($38|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_OdheAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 56|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,42944,$8,0);
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (FUNCTION_TABLE_iii[$11 & 2047]($2,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN12AP4_OdheAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
 $11 = (($10) + 1)|0;
 $12 = ((($6)) + 56|0);
 $13 = (__ZNK10AP4_String9GetLengthEv($12)|0);
 $14 = (($11) + ($13))|0;
 $15 = $size;
 $16 = $15;
 HEAP32[$16>>2] = $14;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = ((($6)) + 36|0);
 $20 = ((($19)) + 4|0);
 __ZN17AP4_AtomSizeAdderC2ERy($3,$size);
 __THREW__ = 0;
 (invoke_iii(881,($20|0),($3|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $4 = $37;
  $5 = $38;
  __THREW__ = 0;
  invoke_vi(262,($3|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $43 = ___cxa_find_matching_catch(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  } else {
   $41 = $4;
   $42 = $5;
   ___resumeException($41|0);
   // unreachable;
  }
 }
 __ZN17AP4_AtomSizeAdderD2Ev($3);
 $23 = $size;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 __ZN8AP4_Atom7SetSizeEyb($6,$25,$28,0);
 $29 = ((($6)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = ((($6)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_vii[$36 & 2047]($33,$6);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_OdheAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + -36|0);
 $5 = $2;
 __ZN12AP4_OdheAtom14OnChildChangedEP8AP4_Atom($4,$5);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_OdheAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_OdheAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_OdheAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(478,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_OdheAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 9480;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 9556;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 56|0);
 __THREW__ = 0;
 invoke_vi(864,($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN17AP4_ContainerAtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __THREW__ = 0;
 invoke_vi(726,($3|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_OdheAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_OdheAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9608;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP8[$3>>0] = 1;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferC2Ej($this,$buffer_size) {
 $this = $this|0;
 $buffer_size = $buffer_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $buffer_size;
 $2 = $0;
 $3 = 9608;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($2)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = (__Znaj($9)|0);
 $11 = ((($2)) + 8|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferC2EPKvj($this,$data,$data_size) {
 $this = $this|0;
 $data = $data|0;
 $data_size = $data_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $data_size;
 $3 = $0;
 $4 = 9608;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 12|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 $9 = ((($3)) + 16|0);
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 $13 = $2;
 $14 = ($13|0)!=(0);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = (__Znaj($15)|0);
 $17 = ((($3)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($3)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = $2;
 _memcpy(($19|0),($20|0),($21|0))|0;
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = 9608;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 12|0);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($2)) + 16|0);
 $11 = $1;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$10>>2] = $13;
 $14 = ((($2)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__Znaj($15)|0);
 $17 = ((($2)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($2)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 _memcpy(($19|0),($22|0),($24|0))|0;
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9608;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   __ZdaPv($7);
  }
 }
 STACKTOP = sp;return;
}
function __ZN14AP4_DataBufferD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(486,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN14AP4_DataBuffer7ReserveEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $8 = ((($3)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<1;
 $11 = (($10) + 1024)|0;
 $new_size = $11;
 $12 = $new_size;
 $13 = $2;
 $14 = ($12>>>0)<($13>>>0);
 if ($14) {
  $15 = $2;
  $new_size = $15;
 }
 $16 = $new_size;
 $17 = (__ZN14AP4_DataBuffer13SetBufferSizeEj($3,$16)|0);
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function __ZN14AP4_DataBuffer13SetBufferSizeEj($this,$buffer_size) {
 $this = $this|0;
 $buffer_size = $buffer_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer_size;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  $7 = $2;
  $8 = (__ZN14AP4_DataBuffer16ReallocateBufferEj($3,$7)|0);
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN14AP4_DataBuffer16ReallocateBufferEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ($5>>>0)>($6>>>0);
 if ($7) {
  $0 = -1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $8 = $2;
 $9 = (__Znaj($8)|0);
 $new_buffer = $9;
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($3)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $new_buffer;
   $17 = ((($3)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($3)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   _memcpy(($16|0),($18|0),($20|0))|0;
  }
 }
 $21 = ((($3)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  __ZdaPv($22);
 }
 $24 = $new_buffer;
 $25 = ((($3)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = $2;
 $27 = ((($3)) + 12|0);
 HEAP32[$27>>2] = $26;
 $0 = 0;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __ZN14AP4_DataBuffer11SetDataSizeEj($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  $8 = ((($3)) + 4|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if (!($10)) {
   $0 = -1;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
  $11 = $2;
  $12 = (__ZN14AP4_DataBuffer16ReallocateBufferEj($3,$11)|0);
  $result = $12;
  $13 = $result;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $result;
   $0 = $15;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 $16 = $2;
 $17 = ((($3)) + 16|0);
 HEAP32[$17>>2] = $16;
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function __ZN14AP4_DataBuffer7SetDataEPKhj($this,$data,$size) {
 $this = $this|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $data;
 $3 = $size;
 $4 = $1;
 $5 = $3;
 $6 = ((($4)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = ((($4)) + 4|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&1;
  if (!($11)) {
   $0 = -1;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
  $12 = $3;
  $13 = (__ZN14AP4_DataBuffer16ReallocateBufferEj($4,$12)|0);
  $result = $13;
  $14 = $result;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $result;
   $0 = $16;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 }
 $17 = ((($4)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = $3;
 _memcpy(($18|0),($19|0),($20|0))|0;
 $21 = $3;
 $22 = ((($4)) + 16|0);
 HEAP32[$22>>2] = $21;
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN12AP4_StsdAtom6CreateEjR14AP4_ByteStreamR15AP4_AtomFactory($size,$stream,$atom_factory) {
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $2;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)>(1);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(72)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(1059,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_StsdAtomC2EP15AP4_SampleTable($this,$sample_table) {
 $this = $this|0;
 $sample_table = $sample_table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $i = 0, $sample_description = 0, $sample_description_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $0 = $this;
 $1 = $sample_table;
 $5 = $0;
 __ZN17AP4_ContainerAtomC2Ejhj($5,1937011556,0,0);
 $6 = 9624;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 36|0);
 $8 = 9712;
 HEAP32[$7>>2] = $8;
 $9 = ((($5)) + 56|0);
 __THREW__ = 0;
 invoke_vi(1060,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $2 = $56;
  $3 = $57;
 } else {
  $12 = ((($5)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 4)|0;
  HEAP32[$12>>2] = $14;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_ii($18|0,($15|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  L4: do {
   if (!($21)) {
    $sample_description_count = $19;
    $22 = ((($5)) + 56|0);
    $23 = $sample_description_count;
    __THREW__ = 0;
    (invoke_iii(1061,($22|0),($23|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $i = 0;
     while(1) {
      $26 = $i;
      $27 = $sample_description_count;
      $28 = ($26>>>0)<($27>>>0);
      if (!($28)) {
       break;
      }
      $29 = ((($5)) + 56|0);
      HEAP32[$4>>2] = 0;
      __THREW__ = 0;
      (invoke_iii(1062,($29|0),($4|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       break L4;
      }
      $32 = $1;
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $i;
      __THREW__ = 0;
      $37 = (invoke_iii($35|0,($32|0),($36|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break L4;
      }
      $sample_description = $37;
      $40 = $sample_description;
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($40|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break L4;
      }
      $entry = $44;
      $47 = ((($5)) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($48)) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = $entry;
      __THREW__ = 0;
      (invoke_iiii($50|0,($47|0),($51|0),-1)|0);
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       break L4;
      }
      $54 = $i;
      $55 = (($54) + 1)|0;
      $i = $55;
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $2 = $58;
  $3 = $59;
  __THREW__ = 0;
  invoke_vi(499,($9|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   $66 = ___cxa_find_matching_catch(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(726,($5|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 } else {
  $64 = $2;
  $65 = $3;
  ___resumeException($64|0);
  // unreachable;
 }
}
function __ZN12AP4_StsdAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $atom = 0, $bytes_available = 0, $entry_count = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 24|0;
 $bytes_available = sp;
 $atom = sp + 16|0;
 $8 = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $5 = $atom_factory;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __ZN17AP4_ContainerAtomC2Ejybhj($9,1937011556,$10,0,0,$11,$12);
 $13 = 9624;
 HEAP32[$9>>2] = $13;
 $14 = ((($9)) + 36|0);
 $15 = 9712;
 HEAP32[$14>>2] = $15;
 $16 = ((($9)) + 56|0);
 __THREW__ = 0;
 invoke_vi(1060,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $6 = $55;
  $7 = $56;
 } else {
  $19 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($19|0),($entry_count|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  L4: do {
   if (!($21)) {
    $22 = $5;
    $23 = ((($9)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    invoke_vii(1063,($22|0),($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $27 = $1;
     $28 = (($27) - 12)|0;
     $29 = (($28) - 4)|0;
     $30 = $bytes_available;
     $31 = $30;
     HEAP32[$31>>2] = $29;
     $32 = (($30) + 4)|0;
     $33 = $32;
     HEAP32[$33>>2] = 0;
     $i = 0;
     while(1) {
      $34 = $i;
      $35 = HEAP32[$entry_count>>2]|0;
      $36 = ($34>>>0)<($35>>>0);
      $37 = $5;
      if (!($36)) {
       break;
      }
      $38 = $4;
      __THREW__ = 0;
      $39 = (invoke_iiiii(879,($37|0),($38|0),($bytes_available|0),($atom|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break L4;
      }
      $42 = ($39|0)==(0);
      if ($42) {
       $43 = HEAP32[$atom>>2]|0;
       $44 = HEAP32[$43>>2]|0;
       $45 = ((($44)) + 36|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ((($9)) + 36|0);
       __THREW__ = 0;
       (invoke_iii($46|0,($43|0),($47|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = ((($9)) + 36|0);
       $51 = ((($50)) + 4|0);
       $52 = HEAP32[$atom>>2]|0;
       __THREW__ = 0;
       (invoke_iii(880,($51|0),($52|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        break L4;
       }
      }
      $61 = $i;
      $62 = (($61) + 1)|0;
      $i = $62;
     }
     __THREW__ = 0;
     invoke_vi(1064,($37|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if (!($64)) {
      $65 = ((($9)) + 56|0);
      $66 = ((($9)) + 36|0);
      $67 = ((($66)) + 4|0);
      __THREW__ = 0;
      $68 = (invoke_ii(1065,($67|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if (!($70)) {
       __THREW__ = 0;
       (invoke_iii(1061,($65|0),($68|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if (!($72)) {
        $i1 = 0;
        while(1) {
         $73 = $i1;
         $74 = ((($9)) + 36|0);
         $75 = ((($74)) + 4|0);
         __THREW__ = 0;
         $76 = (invoke_ii(1065,($75|0))|0);
         $77 = __THREW__; __THREW__ = 0;
         $78 = $77&1;
         if ($78) {
          break L4;
         }
         $79 = ($73>>>0)<($76>>>0);
         if (!($79)) {
          break;
         }
         $80 = ((($9)) + 56|0);
         HEAP32[$8>>2] = 0;
         __THREW__ = 0;
         (invoke_iii(1062,($80|0),($8|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          break L4;
         }
         $83 = $i1;
         $84 = (($83) + 1)|0;
         $i1 = $84;
        }
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  } while(0);
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $6 = $57;
  $7 = $58;
  __THREW__ = 0;
  invoke_vi(499,($16|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if ($60) {
   $89 = ___cxa_find_matching_catch(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(726,($9|0));
 $85 = __THREW__; __THREW__ = 0;
 $86 = $85&1;
 if ($86) {
  $89 = ___cxa_find_matching_catch(0|0)|0;
  $90 = tempRet0;
  ___clang_call_terminate($89);
  // unreachable;
 } else {
  $87 = $6;
  $88 = $7;
  ___resumeException($87|0);
  // unreachable;
 }
}
function __ZN12AP4_StsdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 9624;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = 9712;
 HEAP32[$5>>2] = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ((($3)) + 56|0);
  __THREW__ = 0;
  $9 = (invoke_ii(1066,($8|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
   break;
  }
  $12 = ($7>>>0)<($9>>>0);
  $13 = ((($3)) + 56|0);
  if (!($12)) {
   label = 9;
   break;
  }
  $14 = $i;
  __THREW__ = 0;
  $15 = (invoke_iii(1067,($13|0),($14|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   label = 8;
   break;
  }
  $18 = HEAP32[$15>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = HEAP32[$18>>2]|0;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   invoke_vi($22|0,($18|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 8;
    break;
   }
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 do {
  if ((label|0) == 8) {
   $27 = ___cxa_find_matching_catch()|0;
   $28 = tempRet0;
   $1 = $27;
   $2 = $28;
   $29 = ((($3)) + 56|0);
   __THREW__ = 0;
   invoke_vi(499,($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $40 = ___cxa_find_matching_catch(0|0)|0;
    $41 = tempRet0;
    ___clang_call_terminate($40);
    // unreachable;
   }
  }
  else if ((label|0) == 9) {
   __THREW__ = 0;
   invoke_vi(499,($13|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $1 = $34;
    $2 = $35;
    break;
   } else {
    __ZN17AP4_ContainerAtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(726,($3|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $1;
  $39 = $2;
  ___resumeException($38|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_StsdAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_StsdAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_StsdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(488,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N12AP4_StsdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_StsdAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_StsdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 36|0);
 $9 = ((($8)) + 4|0);
 $10 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($9)|0);
 $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($7,$10)|0);
 $result = $11;
 $12 = $result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $result;
  $0 = $14;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $15 = ((($6)) + 36|0);
 $16 = ((($15)) + 4|0);
 $17 = $2;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($3,$17);
 __THREW__ = 0;
 $18 = (invoke_iii(881,($16|0),($3|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $0 = $18;
  __ZN18AP4_AtomListWriterD2Ev($3);
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $4 = $21;
 $5 = $22;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $4;
  $27 = $5;
  ___resumeException($26|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN12AP4_StsdAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
 $11 = (($10) + 4)|0;
 $12 = $size;
 $13 = $12;
 HEAP32[$13>>2] = $11;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($6)) + 36|0);
 $17 = ((($16)) + 4|0);
 __ZN17AP4_AtomSizeAdderC2ERy($3,$size);
 __THREW__ = 0;
 (invoke_iii(881,($17|0),($3|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $4 = $35;
  $5 = $36;
  __THREW__ = 0;
  invoke_vi(262,($3|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  } else {
   $39 = $4;
   $40 = $5;
   ___resumeException($39|0);
   // unreachable;
  }
 }
 __ZN17AP4_AtomSizeAdderD2Ev($3);
 $20 = $size;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($6)) + 8|0);
 HEAP32[$26>>2] = $22;
 $27 = ((($6)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = ((($6)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vii[$34 & 2047]($31,$6);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_StsdAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + -36|0);
 $5 = $2;
 __ZN12AP4_StsdAtom14OnChildChangedEP8AP4_Atom($4,$5);
 STACKTOP = sp;return;
}
function __ZN12AP4_StsdAtom20GetSampleDescriptionEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $sample_entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry = sp + 12|0;
 $1 = $this;
 $2 = $index;
 $5 = $1;
 $6 = $2;
 $7 = ((($5)) + 36|0);
 $8 = ((($7)) + 4|0);
 $9 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($8)|0);
 $10 = ($6>>>0)>=($9>>>0);
 if ($10) {
  $0 = 0;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $11 = ((($5)) + 56|0);
 $12 = $2;
 $13 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($11,$12)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = ((($5)) + 56|0);
  $17 = $2;
  $18 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($16,$17)|0);
  $19 = HEAP32[$18>>2]|0;
  $0 = $19;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $20 = ((($5)) + 36|0);
 $21 = ((($20)) + 4|0);
 $22 = $2;
 (__ZNK8AP4_ListI8AP4_AtomE3GetEjRPS0_($21,$22,$entry)|0);
 $23 = HEAP32[$entry>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $26 = 0;
 } else {
  $25 = (___dynamic_cast($23,2392,1056,0)|0);
  $26 = $25;
 }
 $sample_entry = $26;
 $27 = $sample_entry;
 $28 = ($27|0)==(0|0);
 do {
  if ($28) {
   $29 = (__Znwj(36)|0);
   $30 = HEAP32[$entry>>2]|0;
   __THREW__ = 0;
   invoke_vii(1013,($29|0),($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $3 = $36;
    $4 = $37;
    __ZdlPv($29);
    $38 = $3;
    $39 = $4;
    ___resumeException($38|0);
    // unreachable;
   } else {
    $33 = ((($5)) + 56|0);
    $34 = $2;
    $35 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($33,$34)|0);
    HEAP32[$35>>2] = $29;
    break;
   }
  } else {
   $40 = $sample_entry;
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 68|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 2047]($40)|0);
   $45 = ((($5)) + 56|0);
   $46 = $2;
   $47 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($45,$46)|0);
   HEAP32[$47>>2] = $44;
  }
 } while(0);
 $48 = ((($5)) + 56|0);
 $49 = $2;
 $50 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($48,$49)|0);
 $51 = HEAP32[$50>>2]|0;
 $0 = $51;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function __ZN12AP4_StsdAtom14GetSampleEntryEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry = sp;
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = ((($5)) + 4|0);
 $7 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($6)|0);
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $9 = ((($3)) + 36|0);
 $10 = ((($9)) + 4|0);
 $11 = $2;
 (__ZNK8AP4_ListI8AP4_AtomE3GetEjRPS0_($10,$11,$entry)|0);
 $12 = HEAP32[$entry>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $15 = 0;
 } else {
  $14 = (___dynamic_cast($12,2392,1056,0)|0);
  $15 = $14;
 }
 $0 = $15;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZN12AP4_StsdAtom25GetSampleDescriptionCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12AP4_StsdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 36|0);
 $11 = ((($10)) + 4|0);
 $12 = (__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv($11)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,42989,$12,0,0);
 $13 = ((($5)) + 36|0);
 $14 = ((($13)) + 4|0);
 $15 = $1;
 __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($2,$15);
 __THREW__ = 0;
 (invoke_iii(881,($14|0),($2|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __ZN21AP4_AtomListInspectorD2Ev($2);
  STACKTOP = sp;return 0;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(89,($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $3;
  $23 = $4;
  ___resumeException($22|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9764;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 $9 = $8<<2;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<2)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$25>>2] = $30;
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   $33 = ((($3)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   __ZdlPv($34);
  }
 }
 $35 = $new_items;
 $36 = ((($3)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = $2;
 $38 = ((($3)) + 4|0);
 HEAP32[$38>>2] = $37;
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionE6AppendERKS1_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0;
 var $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayIP21AP4_SampleDescriptionE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<2)|0);
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 9764;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIP21AP4_SampleDescriptionE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayIP21AP4_SampleDescriptionE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8AP4_ListI8AP4_AtomE3GetEjRPS0_($this,$idx,$data) {
 $this = $this|0;
 $idx = $idx|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $idx;
 $3 = $data;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $item = $6;
 $7 = $2;
 $8 = ((($4)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $19 = $3;
  HEAP32[$19>>2] = 0;
  $0 = -11;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 while(1) {
  $11 = $2;
  $12 = (($11) + -1)|0;
  $2 = $12;
  $13 = ($11|0)!=(0);
  $14 = $item;
  if (!($13)) {
   break;
  }
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $item = $16;
 }
 $17 = HEAP32[$14>>2]|0;
 $18 = $3;
 HEAP32[$18>>2] = $17;
 $0 = 0;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIP21AP4_SampleDescriptionED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(499,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($this,$type,$format,$details) {
 $this = $this|0;
 $type = $type|0;
 $format = $format|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $clone = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $format;
 $3 = $details;
 $6 = $0;
 $7 = 9780;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $1;
 HEAP32[$8>>2] = $9;
 $10 = ((($6)) + 8|0);
 $11 = $2;
 HEAP32[$10>>2] = $11;
 $12 = ((($6)) + 12|0);
 __ZN14AP4_AtomParentC2Ev($12);
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $3;
 __THREW__ = 0;
 $16 = (invoke_ii(1068,($15|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 L4: do {
  if (!($18)) {
   __THREW__ = 0;
   $19 = (invoke_ii(1069,($16|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $item = $19;
    while(1) {
     $22 = $item;
     $23 = ($22|0)!=(0|0);
     if (!($23)) {
      break;
     }
     $24 = $item;
     __THREW__ = 0;
     $25 = (invoke_ii(1070,($24|0))|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      break L4;
     }
     $atom = $25;
     $28 = $atom;
     $29 = ($28|0)!=(0|0);
     if ($29) {
      $30 = $atom;
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + 48|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      $34 = (invoke_ii($33|0,($30|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break L4;
      }
      $clone = $34;
      $37 = $clone;
      $38 = ($37|0)!=(0|0);
      if ($38) {
       $39 = ((($6)) + 12|0);
       $40 = $clone;
       __THREW__ = 0;
       (invoke_iiii(78,($39|0),($40|0),-1)|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break L4;
       }
      }
     }
     $47 = $item;
     __THREW__ = 0;
     $48 = (invoke_ii(1071,($47|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      break L4;
     }
     $item = $48;
    }
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 $4 = $43;
 $5 = $44;
 __THREW__ = 0;
 invoke_vi(716,($12|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if ($46) {
  $53 = ___cxa_find_matching_catch(0|0)|0;
  $54 = tempRet0;
  ___clang_call_terminate($53);
  // unreachable;
 } else {
  $51 = $4;
  $52 = $5;
  ___resumeException($51|0);
  // unreachable;
 }
}
function __ZN21AP4_SampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $atom = 0, $atom_clone = 0, $clone = 0, $factory = 0, $lresult = 0, $mbs = 0, $or$cond = 0, $sample_entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom_clone = sp + 12|0;
 $1 = $this;
 $2 = $result;
 $5 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  HEAP32[$8>>2] = 0;
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 2047]($5)|0);
 $atom = $12;
 $13 = $atom;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $2;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $2;
   HEAP32[$17>>2] = -1;
  }
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $18 = (__Znwj(32)|0);
 $19 = $atom;
 __THREW__ = 0;
 $20 = (invoke_ii(1072,($19|0))|0);
 $21 = tempRet0;
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if (!($23)) {
  __THREW__ = 0;
  invoke_vii(1073,($18|0),($20|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $mbs = $18;
   $26 = $atom;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $mbs;
   (FUNCTION_TABLE_iii[$29 & 2047]($26,$30)|0);
   $31 = $atom;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $33 = HEAP32[$31>>2]|0;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vi[$35 & 2047]($31);
   }
   $atom = 0;
   $36 = $mbs;
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   (FUNCTION_TABLE_iiii[$39 & 2047]($36,0,0)|0);
   $40 = (__Znwj(36)|0);
   __THREW__ = 0;
   invoke_vi(1074,($40|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $59 = ___cxa_find_matching_catch()|0;
    $60 = tempRet0;
    $3 = $59;
    $4 = $60;
    __ZdlPv($40);
    $98 = $3;
    $99 = $4;
    ___resumeException($98|0);
    // unreachable;
   }
   $factory = $40;
   $43 = $factory;
   __ZN15AP4_AtomFactory11PushContextEj($43,1937011556);
   HEAP32[$atom_clone>>2] = 0;
   $44 = $factory;
   $45 = $mbs;
   $46 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom($44,$45,$atom_clone)|0);
   $lresult = $46;
   $47 = $factory;
   __ZN15AP4_AtomFactory10PopContextEv($47);
   $48 = $factory;
   $49 = ($48|0)==(0|0);
   if (!($49)) {
    $50 = HEAP32[$48>>2]|0;
    $51 = ((($50)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    FUNCTION_TABLE_vi[$52 & 2047]($48);
   }
   $53 = $2;
   $54 = ($53|0)!=(0|0);
   if ($54) {
    $55 = $lresult;
    $56 = $2;
    HEAP32[$56>>2] = $55;
   }
   $61 = $mbs;
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   FUNCTION_TABLE_vi[$64 & 2047]($61);
   $65 = $lresult;
   $66 = ($65|0)!=(0);
   if ($66) {
    $0 = 0;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
   $67 = HEAP32[$atom_clone>>2]|0;
   $68 = ($67|0)==(0|0);
   if ($68) {
    $70 = 0;
   } else {
    $69 = (___dynamic_cast($67,2392,1056,0)|0);
    $70 = $69;
   }
   $sample_entry = $70;
   $71 = $sample_entry;
   $72 = ($71|0)==(0|0);
   if ($72) {
    $73 = $2;
    $74 = ($73|0)!=(0|0);
    if ($74) {
     $75 = $2;
     HEAP32[$75>>2] = -13;
    }
    $76 = HEAP32[$atom_clone>>2]|0;
    $77 = ($76|0)==(0|0);
    if (!($77)) {
     $78 = HEAP32[$76>>2]|0;
     $79 = ((($78)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     FUNCTION_TABLE_vi[$80 & 2047]($76);
    }
    $0 = 0;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   } else {
    $81 = $sample_entry;
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($82)) + 68|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (FUNCTION_TABLE_ii[$84 & 2047]($81)|0);
    $clone = $85;
    $86 = $clone;
    $87 = ($86|0)==(0|0);
    $88 = $2;
    $89 = ($88|0)!=(0|0);
    $or$cond = $87 & $89;
    if ($or$cond) {
     $90 = $2;
     HEAP32[$90>>2] = -13;
    }
    $91 = HEAP32[$atom_clone>>2]|0;
    $92 = ($91|0)==(0|0);
    if (!($92)) {
     $93 = HEAP32[$91>>2]|0;
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     FUNCTION_TABLE_vi[$95 & 2047]($91);
    }
    $96 = $clone;
    $0 = $96;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
  }
 }
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 $3 = $57;
 $4 = $58;
 __ZdlPv($18);
 $98 = $3;
 $99 = $4;
 ___resumeException($98|0);
 // unreachable;
 return (0)|0;
}
function __ZNK21AP4_SampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(64)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_vii(1075,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $1 = $9;
  $2 = $10;
  __ZdlPv($4);
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN21AP4_SampleDescription14GetCodecStringER10AP4_String($this,$codec) {
 $this = $this|0;
 $codec = $codec|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $codec;
 $2 = $1;
 (__ZN10AP4_StringaSEPKc($2,46145)|0);
 STACKTOP = sp;return 0;
}
function __ZN28AP4_UnknownSampleDescriptionC2EP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNK8AP4_Atom7GetTypeEv($5)|0);
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($4,0,$6,0);
 $7 = 9808;
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 32|0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_ii($12|0,($9|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  HEAP32[$8>>2] = $13;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 invoke_vi(501,($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN28AP4_UnknownSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 9808;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_vi($10|0,($6|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN28AP4_UnknownSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(504,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN28AP4_UnknownSampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom_clone = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $result;
 $5 = $1;
 $atom_clone = 0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = ((($5)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$13 & 2047]($10)|0);
  $atom_clone = $14;
  $15 = $atom_clone;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $17 = $2;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $2;
    HEAP32[$19>>2] = -1;
   }
   $0 = 0;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $20 = $2;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $2;
  HEAP32[$22>>2] = 0;
 }
 $23 = (__Znwj(36)|0);
 $24 = $atom_clone;
 __THREW__ = 0;
 invoke_vii(1013,($23|0),($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $3 = $27;
  $4 = $28;
  __ZdlPv($23);
  $29 = $3;
  $30 = $4;
  ___resumeException($29|0);
  // unreachable;
 }
 $0 = $23;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function __ZNK28AP4_UnknownSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_ii[$10 & 2047]($7)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZNK33AP4_GenericAudioSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $child = 0, $details = 0, $item = 0, $sample_entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(160)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 32|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 32|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 32|0);
 $14 = ((($13)) + 10|0);
 $15 = HEAP16[$14>>1]|0;
 __THREW__ = 0;
 invoke_viiiii(1076,($4|0),($6|0),($9|0),($12|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $1 = $38;
  $2 = $39;
  __ZdlPv($4);
  $40 = $1;
  $41 = $2;
  ___resumeException($40|0);
  // unreachable;
 }
 $sample_entry = $4;
 $18 = ((($3)) + 12|0);
 $details = $18;
 $19 = $details;
 $20 = (__ZN14AP4_AtomParent11GetChildrenEv($19)|0);
 $21 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($20)|0);
 $item = $21;
 while(1) {
  $22 = $item;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = $item;
  $25 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($24)|0);
  $child = $25;
  $26 = $sample_entry;
  $27 = ((($26)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $child;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_ii[$34 & 2047]($31)|0);
  (FUNCTION_TABLE_iiii[$30 & 2047]($27,$35,-1)|0);
  $36 = $item;
  $37 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($36)|0);
  $item = $37;
 }
 $42 = $sample_entry;
 STACKTOP = sp;return ($42|0);
}
function __ZNK33AP4_GenericVideoSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $child = 0, $details = 0, $item = 0, $sample_entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(112)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 32|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($3)) + 32|0);
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 32|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($3)) + 32|0);
 $17 = ((($16)) + 12|0);
 __THREW__ = 0;
 $18 = (invoke_ii(870,($17|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $1 = $43;
  $2 = $44;
  __ZdlPv($4);
  $45 = $1;
  $46 = $2;
  ___resumeException($45|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viiiiii(1077,($4|0),($6|0),($9|0),($12|0),($15|0),($18|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $1 = $43;
  $2 = $44;
  __ZdlPv($4);
  $45 = $1;
  $46 = $2;
  ___resumeException($45|0);
  // unreachable;
 }
 $sample_entry = $4;
 $23 = ((($3)) + 12|0);
 $details = $23;
 $24 = $details;
 $25 = (__ZN14AP4_AtomParent11GetChildrenEv($24)|0);
 $26 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($25)|0);
 $item = $26;
 while(1) {
  $27 = $item;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $item;
  $30 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($29)|0);
  $child = $30;
  $31 = $sample_entry;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $child;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 2047]($36)|0);
  (FUNCTION_TABLE_iiii[$35 & 2047]($32,$40,-1)|0);
  $41 = $item;
  $42 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($41)|0);
  $item = $42;
 }
 $47 = $sample_entry;
 STACKTOP = sp;return ($47|0);
}
function __ZN24AP4_AvcSampleDescriptionC2EjtttPKcPK12AP4_AvccAtom($this,$format,$width,$height,$depth,$compressor_name,$avcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $avcc = $avcc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $avcc;
 $9 = $0;
 $10 = $1;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($9,3,$10,0);
 $11 = ((($9)) + 32|0);
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 __THREW__ = 0;
 invoke_viiiii(1030,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $7 = $30;
  $8 = $31;
 } else {
  $18 = 9836;
  HEAP32[$9>>2] = $18;
  $19 = ((($9)) + 32|0);
  $20 = 9864;
  HEAP32[$19>>2] = $20;
  $21 = $6;
  $22 = ($21|0)!=(0|0);
  __THREW__ = 0;
  $23 = (invoke_ii(883,96)|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  do {
   if ($22) {
    if ($25) {
     label = 7;
    } else {
     $26 = $6;
     __THREW__ = 0;
     invoke_vii(1023,($23|0),($26|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      $7 = $34;
      $8 = $35;
      __ZdlPv($23);
      break;
     } else {
      $29 = ((($9)) + 52|0);
      HEAP32[$29>>2] = $23;
      label = 13;
      break;
     }
    }
   } else {
    if ($25) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vi(1078,($23|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $39 = ___cxa_find_matching_catch()|0;
      $40 = tempRet0;
      $7 = $39;
      $8 = $40;
      __ZdlPv($23);
      break;
     } else {
      $38 = ((($9)) + 52|0);
      HEAP32[$38>>2] = $23;
      label = 13;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 13) {
   $41 = ((($9)) + 12|0);
   $42 = ((($9)) + 52|0);
   $43 = HEAP32[$42>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(78,($41|0),($43|0),-1)|0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    label = 7;
   } else {
    STACKTOP = sp;return;
   }
  }
  if ((label|0) == 7) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   $7 = $32;
   $8 = $33;
  }
  $46 = ((($9)) + 32|0);
  __THREW__ = 0;
  invoke_vi(418,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch(0|0)|0;
   $54 = tempRet0;
   ___clang_call_terminate($53);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($9|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $53 = ___cxa_find_matching_catch(0|0)|0;
  $54 = tempRet0;
  ___clang_call_terminate($53);
  // unreachable;
 } else {
  $51 = $7;
  $52 = $8;
  ___resumeException($51|0);
  // unreachable;
 }
}
function __ZN24AP4_AvcSampleDescriptionC2EjtttPKcP14AP4_AtomParent($this,$format,$width,$height,$depth,$compressor_name,$details) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $avcc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $details;
 $9 = $0;
 $10 = $1;
 $11 = $6;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($9,3,$10,$11);
 $12 = ((($9)) + 32|0);
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 __THREW__ = 0;
 invoke_viiiii(1030,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $7 = $32;
  $8 = $33;
 } else {
  $19 = 9836;
  HEAP32[$9>>2] = $19;
  $20 = ((($9)) + 32|0);
  $21 = 9864;
  HEAP32[$20>>2] = $21;
  $22 = ((($9)) + 52|0);
  HEAP32[$22>>2] = 0;
  $23 = $6;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  __THREW__ = 0;
  $27 = (invoke_iiii($26|0,($23|0),1635148611,0)|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  L4: do {
   if ($29) {
    label = 6;
   } else {
    $30 = ($27|0)==(0|0);
    if ($30) {
     $36 = 0;
    } else {
     $31 = (___dynamic_cast($27,2392,688,0)|0);
     $36 = $31;
    }
    $avcc = $36;
    $37 = $avcc;
    $38 = ($37|0)!=(0|0);
    __THREW__ = 0;
    $39 = (invoke_ii(883,96)|0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    do {
     if ($38) {
      if ($41) {
       label = 6;
       break L4;
      }
      $42 = $avcc;
      __THREW__ = 0;
      invoke_vii(1023,($39|0),($42|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $46 = ___cxa_find_matching_catch()|0;
       $47 = tempRet0;
       $7 = $46;
       $8 = $47;
       __ZdlPv($39);
       break L4;
      } else {
       $45 = ((($9)) + 52|0);
       HEAP32[$45>>2] = $39;
       break;
      }
     } else {
      if ($41) {
       label = 6;
       break L4;
      }
      __THREW__ = 0;
      invoke_vi(1078,($39|0));
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       $51 = ___cxa_find_matching_catch()|0;
       $52 = tempRet0;
       $7 = $51;
       $8 = $52;
       __ZdlPv($39);
       break L4;
      } else {
       $50 = ((($9)) + 52|0);
       HEAP32[$50>>2] = $39;
       break;
      }
     }
    } while(0);
    $53 = ((($9)) + 12|0);
    $54 = ((($9)) + 52|0);
    $55 = HEAP32[$54>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(78,($53|0),($55|0),-1)|0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     label = 6;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 6) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $7 = $34;
   $8 = $35;
  }
  $58 = ((($9)) + 32|0);
  __THREW__ = 0;
  invoke_vi(418,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if ($60) {
   $65 = ___cxa_find_matching_catch(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($9|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $65 = ___cxa_find_matching_catch(0|0)|0;
  $66 = tempRet0;
  ___clang_call_terminate($65);
  // unreachable;
 } else {
  $63 = $7;
  $64 = $8;
  ___resumeException($63|0);
  // unreachable;
 }
}
function __ZN24AP4_AvcSampleDescription14GetCodecStringER10AP4_String($this,$codec) {
 $this = $this|0;
 $codec = $codec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coding = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $coding = sp + 88|0;
 $workspace = sp + 24|0;
 $0 = $this;
 $1 = $codec;
 $2 = $0;
 $3 = (__ZNK21AP4_SampleDescription9GetFormatEv($2)|0);
 __Z19AP4_FormatFourCharsPcj($coding,$3);
 $4 = (__ZNK24AP4_AvcSampleDescription10GetProfileEv($2)|0);
 $5 = $4&255;
 $6 = (__ZNK24AP4_AvcSampleDescription23GetProfileCompatibilityEv($2)|0);
 $7 = $6&255;
 $8 = (__ZNK24AP4_AvcSampleDescription8GetLevelEv($2)|0);
 $9 = $8&255;
 HEAP32[$vararg_buffer>>2] = $coding;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $9;
 (_snprintf($workspace,64,43352,$vararg_buffer)|0);
 $10 = $1;
 (__ZN10AP4_StringaSEPKc($10,$workspace)|0);
 STACKTOP = sp;return 0;
}
function __ZNK24AP4_AvcSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(112)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 32|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($3)) + 32|0);
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 32|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($3)) + 32|0);
 $17 = ((($16)) + 12|0);
 __THREW__ = 0;
 $18 = (invoke_ii(870,($17|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $1 = $25;
  $2 = $26;
  __ZdlPv($4);
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 }
 $21 = ((($3)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(1079,($4|0),($6|0),($9|0),($12|0),($15|0),($18|0),($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $1 = $25;
  $2 = $26;
  __ZdlPv($4);
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN25AP4_HevcSampleDescriptionC2EjtttPKcPK12AP4_HvccAtom($this,$format,$width,$height,$depth,$compressor_name,$hvcc) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $hvcc = $hvcc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $hvcc;
 $9 = $0;
 $10 = $1;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($9,4,$10,0);
 $11 = ((($9)) + 32|0);
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 __THREW__ = 0;
 invoke_viiiii(1030,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $7 = $30;
  $8 = $31;
 } else {
  $18 = 9880;
  HEAP32[$9>>2] = $18;
  $19 = ((($9)) + 32|0);
  $20 = 9908;
  HEAP32[$19>>2] = $20;
  $21 = $6;
  $22 = ($21|0)!=(0|0);
  __THREW__ = 0;
  $23 = (invoke_ii(883,120)|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  do {
   if ($22) {
    if ($25) {
     label = 7;
    } else {
     $26 = $6;
     __THREW__ = 0;
     invoke_vii(1024,($23|0),($26|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      $7 = $34;
      $8 = $35;
      __ZdlPv($23);
      break;
     } else {
      $29 = ((($9)) + 52|0);
      HEAP32[$29>>2] = $23;
      label = 13;
      break;
     }
    }
   } else {
    if ($25) {
     label = 7;
    } else {
     __THREW__ = 0;
     invoke_vi(1080,($23|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $39 = ___cxa_find_matching_catch()|0;
      $40 = tempRet0;
      $7 = $39;
      $8 = $40;
      __ZdlPv($23);
      break;
     } else {
      $38 = ((($9)) + 52|0);
      HEAP32[$38>>2] = $23;
      label = 13;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 13) {
   $41 = ((($9)) + 12|0);
   $42 = ((($9)) + 52|0);
   $43 = HEAP32[$42>>2]|0;
   __THREW__ = 0;
   (invoke_iiii(78,($41|0),($43|0),-1)|0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    label = 7;
   } else {
    STACKTOP = sp;return;
   }
  }
  if ((label|0) == 7) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   $7 = $32;
   $8 = $33;
  }
  $46 = ((($9)) + 32|0);
  __THREW__ = 0;
  invoke_vi(418,($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch(0|0)|0;
   $54 = tempRet0;
   ___clang_call_terminate($53);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($9|0));
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $53 = ___cxa_find_matching_catch(0|0)|0;
  $54 = tempRet0;
  ___clang_call_terminate($53);
  // unreachable;
 } else {
  $51 = $7;
  $52 = $8;
  ___resumeException($51|0);
  // unreachable;
 }
}
function __ZN25AP4_HevcSampleDescriptionC2EjtttPKcP14AP4_AtomParent($this,$format,$width,$height,$depth,$compressor_name,$details) {
 $this = $this|0;
 $format = $format|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $details = $details|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $hvcc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $width;
 $3 = $height;
 $4 = $depth;
 $5 = $compressor_name;
 $6 = $details;
 $9 = $0;
 $10 = $1;
 $11 = $6;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($9,4,$10,$11);
 $12 = ((($9)) + 32|0);
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 __THREW__ = 0;
 invoke_viiiii(1030,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $7 = $32;
  $8 = $33;
 } else {
  $19 = 9880;
  HEAP32[$9>>2] = $19;
  $20 = ((($9)) + 32|0);
  $21 = 9908;
  HEAP32[$20>>2] = $21;
  $22 = ((($9)) + 52|0);
  HEAP32[$22>>2] = 0;
  $23 = $6;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  __THREW__ = 0;
  $27 = (invoke_iiii($26|0,($23|0),1752589123,0)|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  L4: do {
   if ($29) {
    label = 6;
   } else {
    $30 = ($27|0)==(0|0);
    if ($30) {
     $36 = 0;
    } else {
     $31 = (___dynamic_cast($27,2392,952,0)|0);
     $36 = $31;
    }
    $hvcc = $36;
    $37 = $hvcc;
    $38 = ($37|0)!=(0|0);
    __THREW__ = 0;
    $39 = (invoke_ii(883,120)|0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    do {
     if ($38) {
      if ($41) {
       label = 6;
       break L4;
      }
      $42 = $hvcc;
      __THREW__ = 0;
      invoke_vii(1024,($39|0),($42|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $46 = ___cxa_find_matching_catch()|0;
       $47 = tempRet0;
       $7 = $46;
       $8 = $47;
       __ZdlPv($39);
       break L4;
      } else {
       $45 = ((($9)) + 52|0);
       HEAP32[$45>>2] = $39;
       break;
      }
     } else {
      if ($41) {
       label = 6;
       break L4;
      }
      __THREW__ = 0;
      invoke_vi(1080,($39|0));
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       $51 = ___cxa_find_matching_catch()|0;
       $52 = tempRet0;
       $7 = $51;
       $8 = $52;
       __ZdlPv($39);
       break L4;
      } else {
       $50 = ((($9)) + 52|0);
       HEAP32[$50>>2] = $39;
       break;
      }
     }
    } while(0);
    $53 = ((($9)) + 12|0);
    $54 = ((($9)) + 52|0);
    $55 = HEAP32[$54>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(78,($53|0),($55|0),-1)|0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     label = 6;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 6) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $7 = $34;
   $8 = $35;
  }
  $58 = ((($9)) + 32|0);
  __THREW__ = 0;
  invoke_vi(418,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if ($60) {
   $65 = ___cxa_find_matching_catch(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($9|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $65 = ___cxa_find_matching_catch(0|0)|0;
  $66 = tempRet0;
  ___clang_call_terminate($65);
  // unreachable;
 } else {
  $63 = $7;
  $64 = $8;
  ___resumeException($63|0);
  // unreachable;
 }
}
function __ZN25AP4_HevcSampleDescription14GetCodecStringER10AP4_String($this,$codec) {
 $this = $this|0;
 $codec = $codec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $coding = 0, $constraints = 0, $profile_space = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $coding = sp + 114|0;
 $profile_space = sp + 112|0;
 $constraints = sp;
 $workspace = sp + 48|0;
 $0 = $this;
 $1 = $codec;
 $2 = $0;
 $3 = (__ZNK21AP4_SampleDescription9GetFormatEv($2)|0);
 __Z19AP4_FormatFourCharsPcj($coding,$3);
 ;HEAP8[$profile_space>>0]=0|0;HEAP8[$profile_space+1>>0]=0|0;
 $4 = (__ZNK25AP4_HevcSampleDescription22GetGeneralProfileSpaceEv($2)|0);
 $5 = $4&255;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = (__ZNK25AP4_HevcSampleDescription22GetGeneralProfileSpaceEv($2)|0);
  $8 = $7&255;
  $9 = ($8|0)<=(3);
  if ($9) {
   $10 = (__ZNK25AP4_HevcSampleDescription22GetGeneralProfileSpaceEv($2)|0);
   $11 = $10&255;
   $12 = (65 + ($11))|0;
   $13 = (($12) - 1)|0;
   $14 = $13&255;
   HEAP8[$profile_space>>0] = $14;
  }
 }
 $15 = (__ZNK25AP4_HevcSampleDescription34GetGeneralConstraintIndicatorFlagsEv($2)|0);
 $16 = tempRet0;
 $17 = $constraints;
 $18 = $17;
 HEAP32[$18>>2] = $15;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 while(1) {
  $21 = $constraints;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)!=(0);
  $28 = ($26|0)!=(0);
  $29 = $27 | $28;
  if (!($29)) {
   break;
  }
  $30 = $constraints;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $32 & 255;
  $37 = ($36|0)==(0);
  $38 = (0)==(0);
  $39 = $37 & $38;
  if (!($39)) {
   break;
  }
  $40 = $constraints;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_bitshift64Lshr(($42|0),($45|0),8)|0);
  $47 = tempRet0;
  $48 = $constraints;
  $49 = $48;
  HEAP32[$49>>2] = $46;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $47;
 }
 $52 = (__ZNK25AP4_HevcSampleDescription17GetGeneralProfileEv($2)|0);
 $53 = $52&255;
 $54 = (__ZNK25AP4_HevcSampleDescription35GetGeneralProfileCompatibilityFlagsEv($2)|0);
 $55 = (__ZL11ReverseBitsj($54)|0);
 $56 = (__ZNK25AP4_HevcSampleDescription18GetGeneralTierFlagEv($2)|0);
 $57 = ($56<<24>>24)!=(0);
 $58 = $57 ? 72 : 76;
 $59 = $58 << 24 >> 24;
 $60 = (__ZNK25AP4_HevcSampleDescription15GetGeneralLevelEv($2)|0);
 $61 = $60&255;
 $62 = $constraints;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$vararg_buffer>>2] = $coding;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $profile_space;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $53;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $55;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $59;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $61;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 $68 = $vararg_ptr6;
 $69 = $68;
 HEAP32[$69>>2] = $64;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $67;
 (_snprintf($workspace,64,43368,$vararg_buffer)|0);
 $72 = $1;
 (__ZN10AP4_StringaSEPKc($72,$workspace)|0);
 STACKTOP = sp;return 0;
}
function __ZNK25AP4_HevcSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(112)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 32|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($3)) + 32|0);
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 32|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($3)) + 32|0);
 $17 = ((($16)) + 12|0);
 __THREW__ = 0;
 $18 = (invoke_ii(870,($17|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $1 = $25;
  $2 = $26;
  __ZdlPv($4);
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 }
 $21 = ((($3)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 invoke_viiiiiii(1081,($4|0),($6|0),($9|0),($12|0),($15|0),($18|0),($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $1 = $25;
  $2 = $26;
  __ZdlPv($4);
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($this,$format,$esds) {
 $this = $this|0;
 $format = $format|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dc_desc = 0, $dsi_desc = 0, $es_desc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $esds;
 $5 = $0;
 $6 = $1;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($5,1,$6,0);
 $7 = 10156;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($5)) + 37|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($5)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($5)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($5)) + 48|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($5)) + 52|0);
 __THREW__ = 0;
 invoke_vi(847,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $3 = $24;
  $4 = $25;
 } else {
  $16 = $2;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = $2;
  __THREW__ = 0;
  $19 = (invoke_ii(1082,($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $es_desc = $19;
   $22 = $es_desc;
   $23 = ($22|0)==(0|0);
   if ($23) {
    STACKTOP = sp;return;
   }
   $30 = $es_desc;
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   __THREW__ = 0;
   $34 = (invoke_ii($33|0,($30|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if (!($36)) {
    $dc_desc = $34;
    $37 = $dc_desc;
    $38 = ($37|0)!=(0|0);
    if (!($38)) {
     STACKTOP = sp;return;
    }
    $39 = $dc_desc;
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    __THREW__ = 0;
    $43 = (invoke_ii($42|0,($39|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if (!($45)) {
     $46 = ((($5)) + 36|0);
     HEAP8[$46>>0] = $43;
     $47 = $dc_desc;
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($48)) + 24|0);
     $50 = HEAP32[$49>>2]|0;
     __THREW__ = 0;
     $51 = (invoke_ii($50|0,($47|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if (!($53)) {
      $54 = ((($5)) + 37|0);
      HEAP8[$54>>0] = $51;
      $55 = $dc_desc;
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 32|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      $59 = (invoke_ii($58|0,($55|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if (!($61)) {
       $62 = ((($5)) + 40|0);
       HEAP32[$62>>2] = $59;
       $63 = $dc_desc;
       $64 = HEAP32[$63>>2]|0;
       $65 = ((($64)) + 36|0);
       $66 = HEAP32[$65>>2]|0;
       __THREW__ = 0;
       $67 = (invoke_ii($66|0,($63|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if (!($69)) {
        $70 = ((($5)) + 44|0);
        HEAP32[$70>>2] = $67;
        $71 = $dc_desc;
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($72)) + 40|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($71|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if (!($77)) {
         $78 = ((($5)) + 48|0);
         HEAP32[$78>>2] = $75;
         $79 = $dc_desc;
         $80 = HEAP32[$79>>2]|0;
         $81 = ((($80)) + 20|0);
         $82 = HEAP32[$81>>2]|0;
         __THREW__ = 0;
         $83 = (invoke_ii($82|0,($79|0))|0);
         $84 = __THREW__; __THREW__ = 0;
         $85 = $84&1;
         if (!($85)) {
          $dsi_desc = $83;
          $86 = $dsi_desc;
          $87 = ($86|0)!=(0|0);
          if (!($87)) {
           STACKTOP = sp;return;
          }
          $88 = ((($5)) + 52|0);
          $89 = $dsi_desc;
          $90 = HEAP32[$89>>2]|0;
          $91 = ((($90)) + 20|0);
          $92 = HEAP32[$91>>2]|0;
          __THREW__ = 0;
          $93 = (invoke_ii($92|0,($89|0))|0);
          $94 = __THREW__; __THREW__ = 0;
          $95 = $94&1;
          if (!($95)) {
           __THREW__ = 0;
           $96 = (invoke_ii(861,($93|0))|0);
           $97 = __THREW__; __THREW__ = 0;
           $98 = $97&1;
           if (!($98)) {
            $99 = $dsi_desc;
            $100 = HEAP32[$99>>2]|0;
            $101 = ((($100)) + 20|0);
            $102 = HEAP32[$101>>2]|0;
            __THREW__ = 0;
            $103 = (invoke_ii($102|0,($99|0))|0);
            $104 = __THREW__; __THREW__ = 0;
            $105 = $104&1;
            if (!($105)) {
             __THREW__ = 0;
             $106 = (invoke_ii(850,($103|0))|0);
             $107 = __THREW__; __THREW__ = 0;
             $108 = $107&1;
             if (!($108)) {
              __THREW__ = 0;
              (invoke_iiii(886,($88|0),($96|0),($106|0))|0);
              $109 = __THREW__; __THREW__ = 0;
              $110 = $109&1;
              if (!($110)) {
               STACKTOP = sp;return;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  $3 = $26;
  $4 = $27;
  __THREW__ = 0;
  invoke_vi(486,($13|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $115 = ___cxa_find_matching_catch(0|0)|0;
   $116 = tempRet0;
   ___clang_call_terminate($115);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($5|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 } else {
  $113 = $3;
  $114 = $4;
  ___resumeException($113|0);
  // unreachable;
 }
}
function __ZNK25AP4_MpegSampleDescription18CreateEsDescriptorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $decoder_config = 0, $desc = 0, $dsi_desc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(56)|0);
 __THREW__ = 0;
 invoke_vii(1083,($4|0),0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $1 = $14;
  $2 = $15;
  __ZdlPv($4);
  $49 = $1;
  $50 = $2;
  ___resumeException($49|0);
  // unreachable;
 }
 $desc = $4;
 $7 = ((($3)) + 52|0);
 $8 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($7)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $10 = (__Znwj(40)|0);
   $11 = ((($3)) + 52|0);
   __THREW__ = 0;
   invoke_vii(1084,($10|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $dsi_desc = $10;
    break;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $1 = $16;
   $2 = $17;
   __ZdlPv($10);
   $49 = $1;
   $50 = $2;
   ___resumeException($49|0);
   // unreachable;
  } else {
   $dsi_desc = 0;
  }
 } while(0);
 $18 = (__Znwj(52)|0);
 $19 = ((($3)) + 36|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ((($3)) + 37|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ((($3)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $dsi_desc;
 __THREW__ = 0;
 invoke_viiiiiii(1085,($18|0),($20|0),($22|0),($24|0),($26|0),($28|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $1 = $45;
  $2 = $46;
  __ZdlPv($18);
  $49 = $1;
  $50 = $2;
  ___resumeException($49|0);
  // unreachable;
 }
 $decoder_config = $18;
 $32 = $desc;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $decoder_config;
 (FUNCTION_TABLE_iii[$35 & 2047]($32,$36)|0);
 $37 = $desc;
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vii(1086,($41|0),2);
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  (FUNCTION_TABLE_iii[$40 & 2047]($37,$41)|0);
  $44 = $desc;
  STACKTOP = sp;return ($44|0);
 }
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 $1 = $47;
 $2 = $48;
 __ZdlPv($41);
 $49 = $1;
 $50 = $2;
 ___resumeException($49|0);
 // unreachable;
 return (0)|0;
}
function __ZN31AP4_MpegSystemSampleDescriptionC2EP12AP4_EsdsAtom($this,$esds) {
 $this = $this|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $esds;
 $2 = $0;
 $3 = $1;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($2,1836070003,$3);
 $4 = 9924;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNK31AP4_MpegSystemSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(64)|0);
 __THREW__ = 0;
 $5 = (invoke_ii(1087,($3|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vii(1088,($4|0),($5|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $1 = $10;
 $2 = $11;
 __ZdlPv($4);
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZN30AP4_MpegAudioSampleDescriptionC2EjttP12AP4_EsdsAtom($this,$sample_rate,$sample_size,$channel_count,$esds) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $sample_size = $sample_size|0;
 $channel_count = $channel_count|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample_rate;
 $2 = $sample_size;
 $3 = $channel_count;
 $4 = $esds;
 $7 = $0;
 $8 = $4;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($7,1836069985,$8);
 $9 = ((($7)) + 72|0);
 $10 = $1;
 $11 = $2;
 $12 = $3;
 __THREW__ = 0;
 invoke_viiii(1029,($9|0),($10|0),($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = 9952;
  HEAP32[$7>>2] = $15;
  $16 = ((($7)) + 72|0);
  $17 = 9980;
  HEAP32[$16>>2] = $17;
  STACKTOP = sp;return;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $5 = $18;
 $6 = $19;
 __THREW__ = 0;
 invoke_vi(548,($7|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $5;
  $23 = $6;
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZNK30AP4_MpegAudioSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(160)|0);
 $5 = ((($3)) + 72|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 16;
 $9 = ((($3)) + 72|0);
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ((($3)) + 72|0);
 $13 = ((($12)) + 10|0);
 $14 = HEAP16[$13>>1]|0;
 __THREW__ = 0;
 $15 = (invoke_ii(1087,($3|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __THREW__ = 0;
  invoke_viiiii(1089,($4|0),($8|0),($11|0),($14|0),($15|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   STACKTOP = sp;return ($4|0);
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $1 = $20;
 $2 = $21;
 __ZdlPv($4);
 $22 = $1;
 $23 = $2;
 ___resumeException($22|0);
 // unreachable;
 return (0)|0;
}
function __ZN30AP4_MpegAudioSampleDescription14GetCodecStringER10AP4_String($this,$codec) {
 $this = $this|0;
 $codec = $codec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coding = 0, $dec_config = 0;
 var $dsi = 0, $object_type = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $coding = sp + 152|0;
 $workspace = sp + 88|0;
 $dec_config = sp + 32|0;
 $0 = $this;
 $1 = $codec;
 $2 = $0;
 $3 = (__ZNK21AP4_SampleDescription9GetFormatEv($2)|0);
 __Z19AP4_FormatFourCharsPcj($coding,$3);
 HEAP8[$workspace>>0] = 0;
 $4 = (__ZNK21AP4_SampleDescription9GetFormatEv($2)|0);
 $5 = ($4|0)==(1836069985);
 if (!($5)) {
  $37 = $1;
  (__ZN10AP4_StringaSEPKc($37,$workspace)|0);
  STACKTOP = sp;return 0;
 }
 $6 = (__ZNK25AP4_MpegSampleDescription15GetObjectTypeIdEv($2)|0);
 $7 = $6&255;
 $8 = ($7|0)==(64);
 if (!($8)) {
  $35 = (__ZNK25AP4_MpegSampleDescription15GetObjectTypeIdEv($2)|0);
  $36 = $35&255;
  HEAP32[$vararg_buffer3>>2] = $coding;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $36;
  (_snprintf($workspace,64,43400,$vararg_buffer3)|0);
  $37 = $1;
  (__ZN10AP4_StringaSEPKc($37,$workspace)|0);
  STACKTOP = sp;return 0;
 }
 $9 = (__ZNK30AP4_MpegAudioSampleDescription23GetMpeg4AudioObjectTypeEv($2)|0);
 $object_type = $9;
 $10 = $object_type;
 $11 = $10&255;
 $12 = ($11|0)==(2);
 do {
  if ($12) {
   $13 = (__ZNK25AP4_MpegSampleDescription14GetDecoderInfoEv($2)|0);
   $dsi = $13;
   $14 = $dsi;
   $15 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    __ZN25AP4_Mp4AudioDecoderConfigC2Ev($dec_config);
    $17 = $dsi;
    $18 = (__ZNK14AP4_DataBuffer7GetDataEv($17)|0);
    $19 = $dsi;
    $20 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($19)|0);
    $21 = (__ZN25AP4_Mp4AudioDecoderConfig5ParseEPKhj($dec_config,$18,$20)|0);
    $result = $21;
    $22 = $result;
    $23 = ($22|0)==(0);
    if ($23) {
     $24 = ((($dec_config)) + 28|0);
     $25 = ((($24)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&1;
     if ($27) {
      $object_type = 29;
      break;
     }
     $28 = ((($dec_config)) + 28|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&1;
     if ($30) {
      $object_type = 5;
     }
    }
   }
  }
 } while(0);
 $31 = (__ZNK25AP4_MpegSampleDescription15GetObjectTypeIdEv($2)|0);
 $32 = $31&255;
 $33 = $object_type;
 $34 = $33&255;
 HEAP32[$vararg_buffer>>2] = $coding;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $32;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $34;
 (_snprintf($workspace,64,43389,$vararg_buffer)|0);
 $37 = $1;
 (__ZN10AP4_StringaSEPKc($37,$workspace)|0);
 STACKTOP = sp;return 0;
}
function __ZNK30AP4_MpegAudioSampleDescription23GetMpeg4AudioObjectTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 37|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(64);
 if ($6) {
  $7 = ((($2)) + 52|0);
  $8 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($7)|0);
  $9 = ($8>>>0)>=(1);
  if ($9) {
   $10 = ((($2)) + 52|0);
   $11 = (__ZNK14AP4_DataBuffer7GetDataEv($10)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = $13 >> 3;
   $15 = $14&255;
   $type = $15;
   $16 = $type;
   $17 = $16&255;
   $18 = ($17|0)==(31);
   do {
    if ($18) {
     $19 = ((($2)) + 52|0);
     $20 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($19)|0);
     $21 = ($20>>>0)<(2);
     if (!($21)) {
      $22 = ((($2)) + 52|0);
      $23 = (__ZNK14AP4_DataBuffer7GetDataEv($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = $24&255;
      $26 = $25 & 7;
      $27 = $26 << 3;
      $28 = ((($2)) + 52|0);
      $29 = (__ZNK14AP4_DataBuffer7GetDataEv($28)|0);
      $30 = ((($29)) + 1|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31&255;
      $33 = $32 & 224;
      $34 = $33 >> 5;
      $35 = $27 | $34;
      $36 = (32 + ($35))|0;
      $37 = $36&255;
      $type = $37;
      break;
     }
     $0 = 0;
     $39 = $0;
     STACKTOP = sp;return ($39|0);
    }
   } while(0);
   $38 = $type;
   $0 = $38;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
 }
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN30AP4_MpegVideoSampleDescriptionC2EtttPKcP12AP4_EsdsAtom($this,$width,$height,$depth,$compressor_name,$esds) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 $depth = $depth|0;
 $compressor_name = $compressor_name|0;
 $esds = $esds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $width;
 $2 = $height;
 $3 = $depth;
 $4 = $compressor_name;
 $5 = $esds;
 $8 = $0;
 $9 = $5;
 __ZN25AP4_MpegSampleDescriptionC2EjP12AP4_EsdsAtom($8,1836070006,$9);
 $10 = ((($8)) + 72|0);
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 __THREW__ = 0;
 invoke_viiiii(1030,($10|0),($11|0),($12|0),($13|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = 9996;
  HEAP32[$8>>2] = $17;
  $18 = ((($8)) + 72|0);
  $19 = 10024;
  HEAP32[$18>>2] = $19;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $6 = $20;
 $7 = $21;
 __THREW__ = 0;
 invoke_vi(548,($8|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $6;
  $25 = $7;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZNK30AP4_MpegVideoSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(112)|0);
 $5 = ((($3)) + 72|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($3)) + 72|0);
 $9 = ((($8)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($3)) + 72|0);
 $12 = ((($11)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($3)) + 72|0);
 $15 = ((($14)) + 12|0);
 __THREW__ = 0;
 $16 = (invoke_ii(870,($15|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  __THREW__ = 0;
  $19 = (invoke_ii(1087,($3|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   invoke_viiiiii(1090,($4|0),($7|0),($10|0),($13|0),($16|0),($19|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    STACKTOP = sp;return ($4|0);
   }
  }
 }
 $24 = ___cxa_find_matching_catch()|0;
 $25 = tempRet0;
 $1 = $24;
 $2 = $25;
 __ZdlPv($4);
 $26 = $1;
 $27 = $2;
 ___resumeException($26|0);
 // unreachable;
 return (0)|0;
}
function __ZN29AP4_SubtitleSampleDescriptionC2EjPKcS1_S1_($this,$format,$namespce,$schema_location,$image_mime_type) {
 $this = $this|0;
 $format = $format|0;
 $namespce = $namespce|0;
 $schema_location = $schema_location|0;
 $image_mime_type = $image_mime_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $format;
 $2 = $namespce;
 $3 = $schema_location;
 $4 = $image_mime_type;
 $7 = $0;
 $8 = $1;
 __ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent($7,5,$8,0);
 $9 = 10040;
 HEAP32[$7>>2] = $9;
 $10 = ((($7)) + 32|0);
 $11 = $2;
 __THREW__ = 0;
 invoke_vii(869,($10|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $5 = $22;
  $6 = $23;
 } else {
  $14 = ((($7)) + 40|0);
  $15 = $3;
  __THREW__ = 0;
  invoke_vii(869,($14|0),($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $5 = $24;
   $6 = $25;
  } else {
   $18 = ((($7)) + 48|0);
   $19 = $4;
   __THREW__ = 0;
   invoke_vii(869,($18|0),($19|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    STACKTOP = sp;return;
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $5 = $26;
   $6 = $27;
   __THREW__ = 0;
   invoke_vi(864,($14|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $36 = ___cxa_find_matching_catch(0|0)|0;
    $37 = tempRet0;
    ___clang_call_terminate($36);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($10|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $36 = ___cxa_find_matching_catch(0|0)|0;
   $37 = tempRet0;
   ___clang_call_terminate($36);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($7|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $36 = ___cxa_find_matching_catch(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  $34 = $5;
  $35 = $6;
  ___resumeException($34|0);
  // unreachable;
 }
}
function __ZN29AP4_SubtitleSampleDescription5CloneEPi($this,$result) {
 $this = $this|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $result;
 $4 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  HEAP32[$7>>2] = 0;
 }
 $8 = (__Znwj(56)|0);
 $9 = ((($4)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 32|0);
 __THREW__ = 0;
 $12 = (invoke_ii(870,($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = ((($4)) + 40|0);
  __THREW__ = 0;
  $16 = (invoke_ii(870,($15|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = ((($4)) + 48|0);
   __THREW__ = 0;
   $20 = (invoke_ii(870,($19|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    __THREW__ = 0;
    invoke_viiiii(1028,($8|0),($10|0),($12|0),($16|0),($20|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     STACKTOP = sp;return ($8|0);
    }
   }
  }
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $2 = $25;
 $3 = $26;
 __ZdlPv($8);
 $27 = $2;
 $28 = $3;
 ___resumeException($27|0);
 // unreachable;
 return (0)|0;
}
function __ZNK29AP4_SubtitleSampleDescription6ToAtomEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(88)|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 32|0);
 __THREW__ = 0;
 $8 = (invoke_ii(870,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = ((($3)) + 40|0);
  __THREW__ = 0;
  $12 = (invoke_ii(870,($11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($3)) + 48|0);
   __THREW__ = 0;
   $16 = (invoke_ii(870,($15|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiiii(1091,($4|0),($6|0),($8|0),($12|0),($16|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     STACKTOP = sp;return ($4|0);
    }
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $1 = $21;
 $2 = $22;
 __ZdlPv($4);
 $23 = $1;
 $24 = $2;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZNK24AP4_AvcSampleDescription10GetProfileEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_AvccAtom10GetProfileEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK24AP4_AvcSampleDescription23GetProfileCompatibilityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_AvccAtom23GetProfileCompatibilityEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK24AP4_AvcSampleDescription8GetLevelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_AvccAtom8GetLevelEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK25AP4_HevcSampleDescription22GetGeneralProfileSpaceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom22GetGeneralProfileSpaceEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK25AP4_HevcSampleDescription34GetGeneralConstraintIndicatorFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom34GetGeneralConstraintIndicatorFlagsEv($3)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 STACKTOP = sp;return ($4|0);
}
function __ZNK25AP4_HevcSampleDescription17GetGeneralProfileEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom17GetGeneralProfileEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK25AP4_HevcSampleDescription35GetGeneralProfileCompatibilityFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom35GetGeneralProfileCompatibilityFlagsEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZL11ReverseBitsj($bits) {
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $reverse_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bits;
 $count = 32;
 $reverse_bits = 0;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0);
  $3 = $reverse_bits;
  if (!($2)) {
   break;
  }
  $4 = $3 << 1;
  $5 = $0;
  $6 = $5 & 1;
  $7 = $4 | $6;
  $reverse_bits = $7;
  $8 = $0;
  $9 = $8 >>> 1;
  $0 = $9;
  $10 = $count;
  $11 = (($10) + -1)|0;
  $count = $11;
 }
 $12 = $count;
 $13 = $3 << $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNK25AP4_HevcSampleDescription18GetGeneralTierFlagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom18GetGeneralTierFlagEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK25AP4_HevcSampleDescription15GetGeneralLevelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK12AP4_HvccAtom15GetGeneralLevelEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK12AP4_EsdsAtom15GetEsDescriptorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN25AP4_MpegSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10156;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZNK25AP4_MpegSampleDescription15GetObjectTypeIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 37|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN25AP4_MpegSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(548,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN29AP4_SubtitleSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(534,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN29AP4_SubtitleSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10040;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 48|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $8 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $11 = ((($3)) + 32|0);
   __THREW__ = 0;
   invoke_vi(864,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN21AP4_SampleDescriptionD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 32|0);
  __THREW__ = 0;
  invoke_vi(864,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZThn72_N30AP4_MpegVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -72|0);
 __ZN30AP4_MpegVideoSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN30AP4_MpegVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(529,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN30AP4_MpegVideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 72|0);
 __THREW__ = 0;
 invoke_vi(418,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN25AP4_MpegSampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(548,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn72_N30AP4_MpegVideoSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -72|0);
 __ZN30AP4_MpegVideoSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn72_N30AP4_MpegAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -72|0);
 __ZN30AP4_MpegAudioSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN30AP4_MpegAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(523,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN30AP4_MpegAudioSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 72|0);
 __THREW__ = 0;
 invoke_vi(416,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN25AP4_MpegSampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(548,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn72_N30AP4_MpegAudioSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -72|0);
 __ZN30AP4_MpegAudioSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN31AP4_MpegSystemSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(520,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN31AP4_MpegSystemSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN25AP4_MpegSampleDescriptionD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn32_N25AP4_HevcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN25AP4_HevcSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN25AP4_HevcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(514,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN25AP4_HevcSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(418,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn32_N25AP4_HevcSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN25AP4_HevcSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn32_N24AP4_AvcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN24AP4_AvcSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN24AP4_AvcSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(508,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN24AP4_AvcSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(418,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn32_N24AP4_AvcSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN24AP4_AvcSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn32_N33AP4_GenericVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN33AP4_GenericVideoSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN33AP4_GenericVideoSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(543,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN33AP4_GenericVideoSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(418,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn32_N33AP4_GenericVideoSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN33AP4_GenericVideoSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn32_N33AP4_GenericAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN33AP4_GenericAudioSampleDescriptionD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN33AP4_GenericAudioSampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(538,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN33AP4_GenericAudioSampleDescriptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 __THREW__ = 0;
 invoke_vi(416,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN21AP4_SampleDescriptionD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn32_N33AP4_GenericAudioSampleDescriptionD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -32|0);
 __ZN33AP4_GenericAudioSampleDescriptionD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN21AP4_SampleDescriptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(501,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK12AP4_HvccAtom15GetGeneralLevelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_HvccAtom18GetGeneralTierFlagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 38|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_HvccAtom35GetGeneralProfileCompatibilityFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_HvccAtom17GetGeneralProfileEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 39|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_HvccAtom34GetGeneralConstraintIndicatorFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 tempRet0 = ($8);
 STACKTOP = sp;return ($5|0);
}
function __ZNK12AP4_HvccAtom22GetGeneralProfileSpaceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 37|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_AvccAtom8GetLevelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 38|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_AvccAtom23GetProfileCompatibilityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 39|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK12AP4_AvccAtom10GetProfileEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 37|0);
 $3 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN16AP4_EsDescriptorC2Et($this,$es_id) {
 $this = $this|0;
 $es_id = $es_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $es_id;
 $4 = $0;
 __ZN14AP4_DescriptorC2Ehjj($4,3,2,3);
 $5 = 10184;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 20|0);
 $7 = $1;
 HEAP16[$6>>1] = $7;
 $8 = ((($4)) + 22|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($4)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($4)) + 28|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($4)) + 30|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($4)) + 32|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $2 = $18;
  $3 = $19;
 } else {
  $15 = ((($4)) + 40|0);
  __THREW__ = 0;
  invoke_vi(937,($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $2 = $20;
  $3 = $21;
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $28 = ___cxa_find_matching_catch(0|0)|0;
   $29 = tempRet0;
   ___clang_call_terminate($28);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($4|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $2;
  $27 = $3;
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZN16AP4_EsDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0;
 var $descriptor = 0, $offset = 0, $start = 0, $substream = 0, $url = 0, $url_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $start = sp + 8|0;
 $bits = sp + 53|0;
 $url_length = sp + 52|0;
 $offset = sp;
 $descriptor = sp + 16|0;
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,3,$7,$8);
 $9 = 10184;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 32|0);
 __THREW__ = 0;
 invoke_vi(860,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $47 = ___cxa_find_matching_catch()|0;
  $48 = tempRet0;
  $4 = $47;
  $5 = $48;
 } else {
  $13 = ((($6)) + 40|0);
  __THREW__ = 0;
  invoke_vi(937,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $49 = ___cxa_find_matching_catch()|0;
   $50 = tempRet0;
   $4 = $49;
   $5 = $50;
  } else {
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   __THREW__ = 0;
   (invoke_iii($19|0,($16|0),($start|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   L7: do {
    if ($21) {
     label = 10;
    } else {
     $22 = $1;
     $23 = ((($6)) + 20|0);
     __THREW__ = 0;
     (invoke_iii(866,($22|0),($23|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 10;
     } else {
      $26 = $1;
      __THREW__ = 0;
      (invoke_iii(940,($26|0),($bits|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       label = 10;
      } else {
       $29 = HEAP8[$bits>>0]|0;
       $30 = $29&255;
       $31 = $30 >> 5;
       $32 = $31 & 7;
       $33 = ((($6)) + 24|0);
       HEAP32[$33>>2] = $32;
       $34 = HEAP8[$bits>>0]|0;
       $35 = $34&255;
       $36 = $35 & 31;
       $37 = $36&255;
       $38 = ((($6)) + 28|0);
       HEAP8[$38>>0] = $37;
       $39 = ((($6)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $40 & 1;
       $42 = ($41|0)!=(0);
       if ($42) {
        $43 = $1;
        $44 = ((($6)) + 30|0);
        __THREW__ = 0;
        (invoke_iii(866,($43|0),($44|0))|0);
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if ($46) {
         label = 10;
         break;
        }
       } else {
        $53 = ((($6)) + 30|0);
        HEAP16[$53>>1] = 0;
       }
       $54 = ((($6)) + 24|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $55 & 2;
       $57 = ($56|0)!=(0);
       if ($57) {
        $58 = $1;
        __THREW__ = 0;
        (invoke_iii(940,($58|0),($url_length|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         label = 10;
         break;
        }
        $61 = HEAP8[$url_length>>0]|0;
        $62 = ($61<<24>>24)!=(0);
        if ($62) {
         $63 = HEAP8[$url_length>>0]|0;
         $64 = $63&255;
         $65 = (($64) + 1)|0;
         $66 = ($65|0)<(0);
         $67 = $66 ? -1 : $65;
         __THREW__ = 0;
         $68 = (invoke_ii(867,($67|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          label = 10;
          break;
         }
         $url = $68;
         $71 = $url;
         $72 = ($71|0)!=(0|0);
         if ($72) {
          $73 = $1;
          $74 = $url;
          $75 = HEAP8[$url_length>>0]|0;
          $76 = $75&255;
          __THREW__ = 0;
          (invoke_iiii(851,($73|0),($74|0),($76|0))|0);
          $77 = __THREW__; __THREW__ = 0;
          $78 = $77&1;
          if ($78) {
           label = 10;
           break;
          }
          $79 = HEAP8[$url_length>>0]|0;
          $80 = $79&255;
          $81 = $url;
          $82 = (($81) + ($80)|0);
          HEAP8[$82>>0] = 0;
          $83 = ((($6)) + 32|0);
          $84 = $url;
          __THREW__ = 0;
          (invoke_iii(862,($83|0),($84|0))|0);
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if ($86) {
           label = 10;
           break;
          }
          $87 = $url;
          $88 = ($87|0)==(0|0);
          if (!($88)) {
           __ZdaPv($87);
          }
         }
        }
       }
       $89 = ((($6)) + 24|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $90 & 2;
       $92 = ($91|0)!=(0);
       if ($92) {
        $93 = $1;
        $94 = ((($6)) + 22|0);
        __THREW__ = 0;
        (invoke_iii(866,($93|0),($94|0))|0);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         label = 10;
         break;
        }
       } else {
        $97 = ((($6)) + 22|0);
        HEAP16[$97>>1] = 0;
       }
       $98 = $1;
       $99 = HEAP32[$98>>2]|0;
       $100 = ((($99)) + 28|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       (invoke_iii($101|0,($98|0),($offset|0))|0);
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        label = 10;
       } else {
        __THREW__ = 0;
        $104 = (invoke_ii(883,40)|0);
        $105 = __THREW__; __THREW__ = 0;
        $106 = $105&1;
        if ($106) {
         label = 10;
        } else {
         $107 = $1;
         $108 = $offset;
         $109 = $108;
         $110 = HEAP32[$109>>2]|0;
         $111 = (($108) + 4)|0;
         $112 = $111;
         $113 = HEAP32[$112>>2]|0;
         $114 = $3;
         $115 = $offset;
         $116 = $115;
         $117 = HEAP32[$116>>2]|0;
         $118 = (($115) + 4)|0;
         $119 = $118;
         $120 = HEAP32[$119>>2]|0;
         $121 = $start;
         $122 = $121;
         $123 = HEAP32[$122>>2]|0;
         $124 = (($121) + 4)|0;
         $125 = $124;
         $126 = HEAP32[$125>>2]|0;
         $127 = (_i64Subtract(($117|0),($120|0),($123|0),($126|0))|0);
         $128 = tempRet0;
         $129 = (($114) - ($127))|0;
         __THREW__ = 0;
         invoke_viiiiii(942,($104|0),($107|0),($110|0),($113|0),($129|0),0);
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if ($131) {
          $141 = ___cxa_find_matching_catch()|0;
          $142 = tempRet0;
          $4 = $141;
          $5 = $142;
          __ZdlPv($104);
          break;
         }
         $substream = $104;
         HEAP32[$descriptor>>2] = 0;
         while(1) {
          $132 = $substream;
          __THREW__ = 0;
          $133 = (invoke_iii(936,($132|0),($descriptor|0))|0);
          $134 = __THREW__; __THREW__ = 0;
          $135 = $134&1;
          if ($135) {
           label = 10;
           break L7;
          }
          $136 = ($133|0)==(0);
          if (!($136)) {
           break;
          }
          $137 = ((($6)) + 40|0);
          $138 = HEAP32[$descriptor>>2]|0;
          __THREW__ = 0;
          (invoke_iii(938,($137|0),($138|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 10;
           break L7;
          }
         }
         $143 = $substream;
         $144 = HEAP32[$143>>2]|0;
         $145 = ((($144)) + 12|0);
         $146 = HEAP32[$145>>2]|0;
         __THREW__ = 0;
         invoke_vi($146|0,($143|0));
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 10;
         } else {
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 10) {
    $51 = ___cxa_find_matching_catch()|0;
    $52 = tempRet0;
    $4 = $51;
    $5 = $52;
   }
   __THREW__ = 0;
   invoke_vi(177,($13|0));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    $157 = ___cxa_find_matching_catch(0|0)|0;
    $158 = tempRet0;
    ___clang_call_terminate($157);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($10|0));
  $151 = __THREW__; __THREW__ = 0;
  $152 = $151&1;
  if ($152) {
   $157 = ___cxa_find_matching_catch(0|0)|0;
   $158 = tempRet0;
   ___clang_call_terminate($157);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $153 = __THREW__; __THREW__ = 0;
 $154 = $153&1;
 if ($154) {
  $157 = ___cxa_find_matching_catch(0|0)|0;
  $158 = tempRet0;
  ___clang_call_terminate($157);
  // unreachable;
 } else {
  $155 = $4;
  $156 = $5;
  ___resumeException($155|0);
  // unreachable;
 }
}
function __ZN16AP4_EsDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10184;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 40|0);
 __THREW__ = 0;
 (invoke_ii(943,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $14 = ___cxa_find_matching_catch()|0;
   $15 = tempRet0;
   $1 = $14;
   $2 = $15;
   $16 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(177,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    label = 8;
   }
  } else {
   $8 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(177,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $1 = $19;
    $2 = $20;
    label = 8;
    break;
   }
   $11 = ((($3)) + 32|0);
   __THREW__ = 0;
   invoke_vi(864,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $1 = $21;
    $2 = $22;
    break;
   } else {
    __ZN14AP4_DescriptorD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ((($3)) + 32|0);
  __THREW__ = 0;
  invoke_vi(864,($23|0));
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $30 = ___cxa_find_matching_catch(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(40,($3|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN16AP4_EsDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(550,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN16AP4_EsDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $bits = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $1 = $this;
 $2 = $stream;
 $6 = $1;
 $7 = $2;
 $8 = ((($6)) + 20|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = (__ZN14AP4_ByteStream9WriteUI16Et($7,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $result;
  $0 = $13;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $14 = ((($6)) + 28|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ((($6)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 5;
 $20 = $19&255;
 $21 = $20&255;
 $22 = $16 | $21;
 $23 = $22&255;
 $bits = $23;
 $24 = $2;
 $25 = $bits;
 $26 = (__ZN14AP4_ByteStream9WriteUI08Eh($24,$25)|0);
 $result = $26;
 $27 = $result;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $result;
  $0 = $29;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $30 = ((($6)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 1;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $2;
  $35 = ((($6)) + 30|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = (__ZN14AP4_ByteStream9WriteUI16Et($34,$36)|0);
  $result = $37;
  $38 = $result;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $result;
   $0 = $40;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 }
 $41 = ((($6)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 2;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $2;
  $46 = ((($6)) + 32|0);
  $47 = (__ZNK10AP4_String9GetLengthEv($46)|0);
  $48 = $47&255;
  $49 = (__ZN14AP4_ByteStream9WriteUI08Eh($45,$48)|0);
  $result = $49;
  $50 = $result;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $result;
   $0 = $52;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
  $53 = $2;
  $54 = ((($6)) + 32|0);
  $55 = (__ZNK10AP4_String8GetCharsEv($54)|0);
  $56 = (__ZN14AP4_ByteStream11WriteStringEPKc($53,$55)|0);
  $result = $56;
  $57 = $result;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $result;
   $0 = $59;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
  $60 = $2;
  $61 = (__ZN14AP4_ByteStream9WriteUI08Eh($60,0)|0);
  $result = $61;
  $62 = $result;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $result;
   $0 = $64;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 }
 $65 = ((($6)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 4;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $2;
  $70 = ((($6)) + 22|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = (__ZN14AP4_ByteStream9WriteUI16Et($69,$71)|0);
  $result = $72;
  $73 = $result;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $result;
   $0 = $75;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 }
 $76 = ((($6)) + 40|0);
 $77 = $2;
 __ZN24AP4_DescriptorListWriterC2ER14AP4_ByteStream($3,$77);
 __THREW__ = 0;
 (invoke_iii(944,($76|0),($3|0))|0);
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if (!($79)) {
  __ZN24AP4_DescriptorListWriterD2Ev($3);
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $80 = ___cxa_find_matching_catch()|0;
 $81 = tempRet0;
 $4 = $80;
 $5 = $81;
 __THREW__ = 0;
 invoke_vi(174,($3|0));
 $82 = __THREW__; __THREW__ = 0;
 $83 = $82&1;
 if ($83) {
  $87 = ___cxa_find_matching_catch(0|0)|0;
  $88 = tempRet0;
  ___clang_call_terminate($87);
  // unreachable;
 } else {
  $85 = $4;
  $86 = $5;
  ___resumeException($85|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN16AP4_EsDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN14AP4_Expandable13GetHeaderSizeEv($5)|0);
 $11 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 FUNCTION_TABLE_viiiii[$9 & 2047]($6,43503,$10,$11,0);
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($5)) + 20|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 FUNCTION_TABLE_viiiii[$15 & 2047]($12,43516,$18,0,0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 28|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,43522,$25,0,0);
 $26 = ((($5)) + 40|0);
 $27 = $1;
 __ZN27AP4_DescriptorListInspectorC2ER17AP4_AtomInspector($2,$27);
 __THREW__ = 0;
 (invoke_iii(944,($26|0),($2|0))|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  __ZN27AP4_DescriptorListInspectorD2Ev($2);
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 2047]($30);
  STACKTOP = sp;return 0;
 }
 $34 = ___cxa_find_matching_catch()|0;
 $35 = tempRet0;
 $3 = $34;
 $4 = $35;
 __THREW__ = 0;
 invoke_vi(171,($2|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $3;
  $39 = $4;
  ___resumeException($38|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN16AP4_EsDescriptor16AddSubDescriptorEP14AP4_Descriptor($this,$descriptor) {
 $this = $this|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $descriptor;
 $2 = $0;
 $3 = ((($2)) + 40|0);
 $4 = $1;
 (__ZN8AP4_ListI14AP4_DescriptorE3AddEPS0_($3,$4)|0);
 $5 = $1;
 $6 = (__ZN14AP4_Expandable7GetSizeEv($5)|0);
 $7 = ((($2)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZNK16AP4_EsDescriptor26GetDecoderConfigDescriptorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $descriptor = sp + 20|0;
 $2 = sp + 8|0;
 $1 = $this;
 $5 = $1;
 HEAP32[$descriptor>>2] = 0;
 $6 = ((($5)) + 40|0);
 __ZN20AP4_DescriptorFinderC2Eh($2,4);
 __THREW__ = 0;
 $7 = (invoke_iiii(945,($6|0),($2|0),($descriptor|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $3 = $15;
  $4 = $16;
  __THREW__ = 0;
  invoke_vi(168,($2|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $23 = ___cxa_find_matching_catch(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  } else {
   $21 = $3;
   $22 = $4;
   ___resumeException($21|0);
   // unreachable;
  }
 }
 __ZN20AP4_DescriptorFinderD2Ev($2);
 $result = $7;
 $10 = $result;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $12 = HEAP32[$descriptor>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $19 = 0;
 } else {
  $14 = (___dynamic_cast($12,104,512,0)|0);
  $19 = $14;
 }
 $0 = $19;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function __ZN21AP4_EsIdIncDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,14,$7,$8);
 $9 = 10220;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 20|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($6)) + 20|0);
 __THREW__ = 0;
 (invoke_iii(854,($11|0),($12|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $4 = $15;
 $5 = $16;
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $19 = $4;
  $20 = $5;
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZN21AP4_EsIdIncDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN21AP4_EsIdIncDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $8 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,43538,$7,$8,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,43548,$14,0,0);
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 2047]($15);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_EsIdRefDescriptorC2ER14AP4_ByteStreamjj($this,$stream,$header_size,$payload_size) {
 $this = $this|0;
 $stream = $stream|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $header_size;
 $3 = $payload_size;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 __ZN14AP4_DescriptorC2Ehjj($6,15,$7,$8);
 $9 = 10248;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 20|0);
 HEAP16[$10>>1] = 0;
 $11 = $1;
 $12 = ((($6)) + 20|0);
 __THREW__ = 0;
 (invoke_iii(866,($11|0),($12|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $4 = $15;
 $5 = $16;
 __THREW__ = 0;
 invoke_vi(40,($6|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $19 = $4;
  $20 = $5;
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZN21AP4_EsIdRefDescriptor11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 20|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI16Et($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN21AP4_EsIdRefDescriptor7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $8 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,43557,$7,$8,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 20|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,43567,$15,0,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_vi[$19 & 2047]($16);
 STACKTOP = sp;return 0;
}
function __ZN21AP4_EsIdRefDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(560,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_EsIdRefDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_DescriptorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_EsIdIncDescriptorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(556,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_EsIdIncDescriptorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_DescriptorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_SaizAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(72)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1092,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SaizAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $i = 0, $remains = 0, $result = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1935763834,$8,$9,$10);
 $11 = 10276;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($7)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($7)) + 52|0);
 __THREW__ = 0;
 invoke_vi(1093,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $5 = $38;
  $6 = $39;
 } else {
  $17 = $1;
  $18 = HEAP32[$7>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_ii($20|0,($7|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  L4: do {
   if (!($23)) {
    $24 = (($17) - ($21))|0;
    $remains = $24;
    $25 = $3;
    $26 = $25 & 1;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $4;
     $29 = ((($7)) + 36|0);
     __THREW__ = 0;
     (invoke_iii(854,($28|0),($29|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = $4;
     $33 = ((($7)) + 40|0);
     __THREW__ = 0;
     (invoke_iii(854,($32|0),($33|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break;
     }
     $36 = $remains;
     $37 = (($36) - 8)|0;
     $remains = $37;
    }
    $44 = $4;
    $45 = ((($7)) + 44|0);
    __THREW__ = 0;
    (invoke_iii(940,($44|0),($45|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $48 = $4;
     $49 = ((($7)) + 48|0);
     __THREW__ = 0;
     (invoke_iii(854,($48|0),($49|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      $52 = $remains;
      $53 = (($52) - 5)|0;
      $remains = $53;
      $54 = ((($7)) + 44|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = ($56|0)==(0);
      if (!($57)) {
       STACKTOP = sp;return;
      }
      $58 = ((($7)) + 48|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $remains;
      $61 = ($59>>>0)>($60>>>0);
      if ($61) {
       $62 = $remains;
       $63 = ((($7)) + 48|0);
       HEAP32[$63>>2] = $62;
      }
      $64 = ((($7)) + 48|0);
      $65 = HEAP32[$64>>2]|0;
      $sample_count = $65;
      $66 = ((($7)) + 52|0);
      $67 = $sample_count;
      __THREW__ = 0;
      (invoke_iii(1094,($66|0),($67|0))|0);
      $68 = __THREW__; __THREW__ = 0;
      $69 = $68&1;
      if (!($69)) {
       $70 = $sample_count;
       __THREW__ = 0;
       $71 = (invoke_ii(867,($70|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if (!($73)) {
        $buffer = $71;
        $74 = $4;
        $75 = $buffer;
        $76 = $sample_count;
        __THREW__ = 0;
        $77 = (invoke_iiii(851,($74|0),($75|0),($76|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if (!($79)) {
         $result = $77;
         $80 = $result;
         $81 = ($80|0)!=(0);
         if ($81) {
          $82 = $buffer;
          $83 = ($82|0)==(0|0);
          if ($83) {
           STACKTOP = sp;return;
          }
          __ZdaPv($82);
          STACKTOP = sp;return;
         }
         $i = 0;
         while(1) {
          $84 = $i;
          $85 = $sample_count;
          $86 = ($84>>>0)<($85>>>0);
          if (!($86)) {
           break;
          }
          $87 = $i;
          $88 = $buffer;
          $89 = (($88) + ($87)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ((($7)) + 52|0);
          $92 = $i;
          __THREW__ = 0;
          $93 = (invoke_iii(1095,($91|0),($92|0))|0);
          $94 = __THREW__; __THREW__ = 0;
          $95 = $94&1;
          if ($95) {
           break L4;
          }
          HEAP8[$93>>0] = $90;
          $96 = $i;
          $97 = (($96) + 1)|0;
          $i = $97;
         }
         $98 = $buffer;
         $99 = ($98|0)==(0|0);
         if ($99) {
          STACKTOP = sp;return;
         }
         __ZdaPv($98);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  } while(0);
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $5 = $40;
  $6 = $41;
  __THREW__ = 0;
  invoke_vi(568,($14|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $104 = ___cxa_find_matching_catch(0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 if ($101) {
  $104 = ___cxa_find_matching_catch(0|0)|0;
  $105 = tempRet0;
  ___clang_call_terminate($104);
  // unreachable;
 } else {
  $102 = $5;
  $103 = $6;
  ___resumeException($102|0);
  // unreachable;
 }
}
function __ZN12AP4_SaizAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = ((($3)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$10)|0);
  $result = $11;
  $12 = $result;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $result;
   $0 = $14;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
  $15 = $2;
  $16 = ((($3)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 }
 $22 = $2;
 $23 = ((($3)) + 44|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (__ZN14AP4_ByteStream9WriteUI08Eh($22,$24)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $29 = $2;
 $30 = ((($3)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (__ZN14AP4_ByteStream9WriteUI32Ej($29,$31)|0);
 $result = $32;
 $33 = $result;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $result;
  $0 = $35;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $36 = ((($3)) + 44|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)==(0);
 L18: do {
  if ($39) {
   $i = 0;
   while(1) {
    $40 = $i;
    $41 = ((($3)) + 48|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($40>>>0)<($42>>>0);
    if (!($43)) {
     break L18;
    }
    $44 = $2;
    $45 = ((($3)) + 52|0);
    $46 = $i;
    $47 = (__ZN9AP4_ArrayIhEixEm($45,$46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = (__ZN14AP4_ByteStream9WriteUI08Eh($44,$48)|0);
    $result = $49;
    $50 = $result;
    $51 = ($50|0)!=(0);
    if ($51) {
     break;
    }
    $53 = $i;
    $54 = (($53) + 1)|0;
    $i = $54;
   }
   $52 = $result;
   $0 = $52;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __ZN12AP4_SaizAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($2)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$10 & 2047]($7,43592,$12,0,1);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,43606,$18,0,1);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 44|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,43630,$25,0,0);
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($2)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_viiiii[$29 & 2047]($26,46096,$31,0,0);
 $32 = $1;
 $33 = (__ZN17AP4_AtomInspector12GetVerbosityEv($32)|0);
 $34 = ($33>>>0)>=(2);
 if (!($34)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ((($2)) + 52|0);
  $37 = (__ZNK9AP4_ArrayIhE9ItemCountEv($36)|0);
  $38 = ($35>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  HEAP32[$vararg_buffer>>2] = $39;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $40 = $1;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($2)) + 52|0);
  $45 = $i;
  $46 = (__ZN9AP4_ArrayIhEixEm($44,$45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  FUNCTION_TABLE_viiiii[$43 & 2047]($40,$header,$48,0,0);
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10336;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIhED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10336;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIhE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIhE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIhE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30)|0);
  HEAP8[$33>>0] = 0;
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIhEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayIhE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZNK9AP4_ArrayIhE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIhE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 $9 = $8;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26)|0);
    $30 = HEAP8[$29>>0]|0;
    HEAP8[$25>>0] = $30;
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   $33 = ((($3)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   __ZdlPv($34);
  }
 }
 $35 = $new_items;
 $36 = ((($3)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = $2;
 $38 = ((($3)) + 4|0);
 HEAP32[$38>>2] = $37;
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN9AP4_ArrayIhED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(568,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SaizAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(564,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SaizAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10276;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(568,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_FtypAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $compatible_brand = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $compatible_brand = sp;
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1718909296,$6);
 $7 = 10352;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 44|0);
 __THREW__ = 0;
 invoke_vi(891,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $3 = $31;
  $4 = $32;
 } else {
  $11 = $2;
  $12 = ((($5)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($11|0),($12|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  L4: do {
   if (!($14)) {
    $15 = $2;
    $16 = ((($5)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(854,($15|0),($16|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = $1;
     $20 = (($19) - 16)|0;
     $1 = $20;
     while(1) {
      $21 = $1;
      $22 = ($21|0)!=(0);
      if (!($22)) {
       break;
      }
      $23 = $2;
      __THREW__ = 0;
      (invoke_iii(854,($23|0),($compatible_brand|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break L4;
      }
      $26 = ((($5)) + 44|0);
      __THREW__ = 0;
      (invoke_iii(968,($26|0),($compatible_brand|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break L4;
      }
      $29 = $1;
      $30 = (($29) - 4)|0;
      $1 = $30;
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $3 = $33;
  $4 = $34;
  __THREW__ = 0;
  invoke_vi(1,($8|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $3;
  $40 = $4;
  ___resumeException($39|0);
  // unreachable;
 }
}
function __ZN12AP4_FtypAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compat_brand_count = 0, $i = 0, $result = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $11 = $2;
 $12 = ((($3)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $18 = ((($3)) + 44|0);
 $19 = (__ZNK9AP4_ArrayIjE9ItemCountEv($18)|0);
 $compat_brand_count = $19;
 $i = 0;
 while(1) {
  $20 = $i;
  $21 = $compat_brand_count;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   label = 10;
   break;
  }
  $23 = $2;
  $24 = ((($3)) + 44|0);
  $25 = $i;
  $26 = (__ZN9AP4_ArrayIjEixEm($24,$25)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($23,$27)|0);
  $result = $28;
  $29 = $result;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 8;
   break;
  }
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 if ((label|0) == 8) {
  $31 = $result;
  $0 = $31;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 10) {
  $34 = $result;
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZN12AP4_FtypAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $i = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($name,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,43684,$name,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,43696,$14,0,1);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ((($2)) + 44|0);
  $17 = (__ZNK9AP4_ArrayIjE9ItemCountEv($16)|0);
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = ((($2)) + 44|0);
  $20 = $i;
  $21 = (__ZN9AP4_ArrayIjEixEm($19,$20)|0);
  $22 = HEAP32[$21>>2]|0;
  $cb = $22;
  $23 = $cb;
  __Z19AP4_FormatFourCharsPcj($name,$23);
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_viiii[$27 & 2047]($24,43710,$name,0);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_FtypAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(570,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_FtypAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10352;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_StcoAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1096,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_StcoAtomC2EPjj($this,$entries,$entry_count) {
 $this = $this|0;
 $entries = $entries|0;
 $entry_count = $entry_count|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $entries;
 $2 = $entry_count;
 $5 = $0;
 $6 = $2;
 $7 = $6<<2;
 $8 = (16 + ($7))|0;
 __ZN8AP4_AtomC2Ejjhj($5,1937007471,$8,0,0);
 $9 = 10412;
 HEAP32[$5>>2] = $9;
 $10 = ((($5)) + 36|0);
 $11 = $2;
 $$arith = $11<<2;
 $$overflow = ($11>>>0)>(1073741823);
 $12 = $$overflow ? -1 : $$arith;
 __THREW__ = 0;
 $13 = (invoke_ii(867,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  HEAP32[$10>>2] = $13;
  $16 = ((($5)) + 40|0);
  $17 = $2;
  HEAP32[$16>>2] = $17;
  $18 = ((($5)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ((($5)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<2;
  _memcpy(($19|0),($20|0),($23|0))|0;
  STACKTOP = sp;return;
 }
 $24 = ___cxa_find_matching_catch()|0;
 $25 = tempRet0;
 $3 = $24;
 $4 = $25;
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $3;
  $29 = $4;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN12AP4_StcoAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $buffer = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1937007471,$8,$9,$10);
 $11 = 10412;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 40|0);
 __THREW__ = 0;
 (invoke_iii(854,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L1: do {
  if (!($15)) {
   $16 = ((($7)) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) - 12)|0;
   $20 = (($19) - 4)|0;
   $21 = (($20>>>0) / 4)&-1;
   $22 = ($17>>>0)>($21>>>0);
   if ($22) {
    $23 = $1;
    $24 = (($23) - 12)|0;
    $25 = (($24) - 4)|0;
    $26 = (($25>>>0) / 4)&-1;
    $27 = ((($7)) + 40|0);
    HEAP32[$27>>2] = $26;
   }
   $32 = ((($7)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $$arith = $33<<2;
   $$overflow = ($33>>>0)>(1073741823);
   $34 = $$overflow ? -1 : $$arith;
   __THREW__ = 0;
   $35 = (invoke_ii(867,($34|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    $38 = ((($7)) + 36|0);
    HEAP32[$38>>2] = $35;
    $39 = ((($7)) + 40|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40<<2;
    __THREW__ = 0;
    $42 = (invoke_ii(867,($41|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if (!($44)) {
     $buffer = $42;
     $45 = $4;
     $46 = $buffer;
     $47 = ((($7)) + 40|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $48<<2;
     __THREW__ = 0;
     $50 = (invoke_iiii(851,($45|0),($46|0),($49|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if (!($52)) {
      $result = $50;
      $53 = $result;
      $54 = ($53|0)!=(0);
      if ($54) {
       $55 = $buffer;
       $56 = ($55|0)==(0|0);
       if ($56) {
        STACKTOP = sp;return;
       }
       __ZdaPv($55);
       STACKTOP = sp;return;
      }
      $i = 0;
      while(1) {
       $57 = $i;
       $58 = ((($7)) + 40|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ($57>>>0)<($59>>>0);
       if (!($60)) {
        break;
       }
       $61 = $i;
       $62 = $61<<2;
       $63 = $buffer;
       $64 = (($63) + ($62)|0);
       __THREW__ = 0;
       $65 = (invoke_ii(893,($64|0))|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break L1;
       }
       $68 = $i;
       $69 = ((($7)) + 36|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($70) + ($68<<2)|0);
       HEAP32[$71>>2] = $65;
       $72 = $i;
       $73 = (($72) + 1)|0;
       $i = $73;
      }
      $74 = $buffer;
      $75 = ($74|0)==(0|0);
      if ($75) {
       STACKTOP = sp;return;
      }
      __ZdaPv($74);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $5 = $28;
 $6 = $29;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $78 = ___cxa_find_matching_catch(0|0)|0;
  $79 = tempRet0;
  ___clang_call_terminate($78);
  // unreachable;
 } else {
  $76 = $5;
  $77 = $6;
  ___resumeException($76|0);
  // unreachable;
 }
}
function __ZN12AP4_StcoAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10412;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdaPv($4);
 }
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_StcoAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(574,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_StcoAtom14GetChunkOffsetEjRj($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $chunk;
 $3 = $chunk_offset;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -12;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $11 = $2;
  $12 = (($11) - 1)|0;
  $13 = ((($4)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  HEAP32[$17>>2] = $16;
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN12AP4_StcoAtom14SetChunkOffsetEjj($this,$chunk,$chunk_offset) {
 $this = $this|0;
 $chunk = $chunk|0;
 $chunk_offset = $chunk_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $chunk;
 $3 = $chunk_offset;
 $4 = $1;
 $5 = $2;
 $6 = ((($4)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 $9 = $2;
 $10 = ($9|0)==(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = -12;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $11 = $3;
  $12 = $2;
  $13 = (($12) - 1)|0;
  $14 = ((($4)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<2)|0);
  HEAP32[$16>>2] = $11;
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN12AP4_StcoAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($3)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $2;
  $16 = $i;
  $17 = ((($3)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$20)|0);
  $result = $21;
  $22 = $result;
  $23 = ($22|0)!=(0);
  if ($23) {
   label = 6;
   break;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 if ((label|0) == 6) {
  $24 = $result;
  $0 = $24;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 8) {
  $27 = $result;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN12AP4_StcoAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $9 = $1;
 $10 = (__ZN17AP4_AtomInspector12GetVerbosityEv($9)|0);
 $11 = ($10>>>0)>=(1);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($2)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  HEAP32[$vararg_buffer>>2] = $16;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $i;
  $22 = ((($2)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($21<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_viiiii[$20 & 2047]($17,$header,$25,0,0);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TfdtAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1097,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_TfdtAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1952867444,$8,$9,$10);
 $11 = 10472;
 HEAP32[$7>>2] = $11;
 $12 = $2;
 $13 = $12&255;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$value>>2] = 0;
  $15 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($value|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = HEAP32[$value>>2]|0;
   $19 = ((($7)) + 40|0);
   $20 = $19;
   $21 = $20;
   HEAP32[$21>>2] = $18;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   STACKTOP = sp;return;
  }
 } else {
  $28 = $2;
  $29 = $28&255;
  $30 = ($29|0)==(1);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = $4;
  $32 = ((($7)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(857,($31|0),($32|0))|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   STACKTOP = sp;return;
  }
 }
 $24 = ___cxa_find_matching_catch()|0;
 $25 = tempRet0;
 $5 = $24;
 $6 = $25;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $35 = $5;
  $36 = $6;
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZN12AP4_TfdtAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $2;
   $9 = ((($3)) + 40|0);
   $10 = $9;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = (($10) + 4)|0;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
   $result = $16;
  } else {
   $17 = ((($3)) + 25|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)==(1);
   if ($20) {
    $21 = $2;
    $22 = ((($3)) + 40|0);
    $23 = $22;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = (__ZN14AP4_ByteStream9WriteUI64Ey($21,$25,$28)|0);
    $result = $29;
    break;
   }
   $0 = -18;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 } while(0);
 $30 = $result;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $result;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN12AP4_TfdtAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,43757,$10,$13,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TfdtAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(578,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TfdtAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_TfraAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $result = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 12|0;
 $1 = $size;
 $2 = $stream;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)>(1);
 if ($11) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $12 = (__Znwj(64)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 __THREW__ = 0;
 invoke_viiiii(1098,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
  __ZdlPv($12);
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 $0 = $12;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN12AP4_TfraAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $entry_count = 0, $fields = 0, $i = 0, $moof_offset = 0, $sample_number = 0, $sample_number7 = 0, $sample_number8 = 0, $sample_number9 = 0, $time = 0, $traf_number = 0, $traf_number1 = 0, $traf_number2 = 0, $traf_number3 = 0, $trun_number = 0, $trun_number4 = 0, $trun_number5 = 0, $trun_number6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fields = sp + 40|0;
 $entry_count = sp + 36|0;
 $time = sp + 28|0;
 $moof_offset = sp + 24|0;
 $traf_number = sp + 76|0;
 $traf_number1 = sp + 72|0;
 $traf_number2 = sp + 20|0;
 $traf_number3 = sp + 16|0;
 $trun_number = sp + 75|0;
 $trun_number4 = sp + 70|0;
 $trun_number5 = sp + 12|0;
 $trun_number6 = sp + 8|0;
 $sample_number = sp + 74|0;
 $sample_number7 = sp + 68|0;
 $sample_number8 = sp + 4|0;
 $sample_number9 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1952871009,$8,$9,$10);
 $11 = 10532;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1099,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $5 = $66;
  $6 = $67;
 } else {
  $15 = $4;
  $16 = ((($7)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($16|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if (!($18)) {
    HEAP32[$fields>>2] = 0;
    $19 = $4;
    __THREW__ = 0;
    (invoke_iii(854,($19|0),($fields|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $22 = HEAP32[$fields>>2]|0;
     $23 = $22 >>> 4;
     $24 = $23 & 3;
     $25 = $24&255;
     $26 = ((($7)) + 40|0);
     HEAP8[$26>>0] = $25;
     $27 = HEAP32[$fields>>2]|0;
     $28 = $27 >>> 2;
     $29 = $28 & 3;
     $30 = $29&255;
     $31 = ((($7)) + 41|0);
     HEAP8[$31>>0] = $30;
     $32 = HEAP32[$fields>>2]|0;
     $33 = $32 & 3;
     $34 = $33&255;
     $35 = ((($7)) + 42|0);
     HEAP8[$35>>0] = $34;
     HEAP32[$entry_count>>2] = 0;
     $36 = $4;
     __THREW__ = 0;
     (invoke_iii(854,($36|0),($entry_count|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      $39 = ((($7)) + 44|0);
      $40 = HEAP32[$entry_count>>2]|0;
      __THREW__ = 0;
      (invoke_iii(1100,($39|0),($40|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if (!($42)) {
       $i = 0;
       while(1) {
        $43 = $i;
        $44 = HEAP32[$entry_count>>2]|0;
        $45 = ($43>>>0)<($44>>>0);
        if (!($45)) {
         break;
        }
        $46 = $2;
        $47 = $46&255;
        $48 = ($47|0)==(1);
        if ($48) {
         $49 = $4;
         $50 = ((($7)) + 44|0);
         $51 = $i;
         __THREW__ = 0;
         $52 = (invoke_iii(1101,($50|0),($51|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          break L4;
         }
         __THREW__ = 0;
         (invoke_iii(857,($49|0),($52|0))|0);
         $55 = __THREW__; __THREW__ = 0;
         $56 = $55&1;
         if ($56) {
          break L4;
         }
         $57 = $4;
         $58 = ((($7)) + 44|0);
         $59 = $i;
         __THREW__ = 0;
         $60 = (invoke_iii(1101,($58|0),($59|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break L4;
         }
         $63 = ((($60)) + 8|0);
         __THREW__ = 0;
         (invoke_iii(857,($57|0),($63|0))|0);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if ($65) {
          break L4;
         }
        } else {
         HEAP32[$time>>2] = 0;
         HEAP32[$moof_offset>>2] = 0;
         $72 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($72|0),($time|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L4;
         }
         $75 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($75|0),($moof_offset|0))|0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          break L4;
         }
         $78 = HEAP32[$time>>2]|0;
         $79 = ((($7)) + 44|0);
         $80 = $i;
         __THREW__ = 0;
         $81 = (invoke_iii(1101,($79|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if ($83) {
          break L4;
         }
         $84 = $81;
         $85 = $84;
         HEAP32[$85>>2] = $78;
         $86 = (($84) + 4)|0;
         $87 = $86;
         HEAP32[$87>>2] = 0;
         $88 = HEAP32[$moof_offset>>2]|0;
         $89 = ((($7)) + 44|0);
         $90 = $i;
         __THREW__ = 0;
         $91 = (invoke_iii(1101,($89|0),($90|0))|0);
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if ($93) {
          break L4;
         }
         $94 = ((($91)) + 8|0);
         $95 = $94;
         $96 = $95;
         HEAP32[$96>>2] = $88;
         $97 = (($95) + 4)|0;
         $98 = $97;
         HEAP32[$98>>2] = 0;
        }
        $99 = ((($7)) + 40|0);
        $100 = HEAP8[$99>>0]|0;
        $101 = $100&255;
        switch ($101|0) {
        case 0:  {
         $102 = $4;
         __THREW__ = 0;
         (invoke_iii(940,($102|0),($traf_number|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          break L4;
         }
         $105 = HEAP8[$traf_number>>0]|0;
         $106 = $105&255;
         $107 = ((($7)) + 44|0);
         $108 = $i;
         __THREW__ = 0;
         $109 = (invoke_iii(1101,($107|0),($108|0))|0);
         $110 = __THREW__; __THREW__ = 0;
         $111 = $110&1;
         if ($111) {
          break L4;
         }
         $112 = ((($109)) + 16|0);
         HEAP32[$112>>2] = $106;
         break;
        }
        case 1:  {
         $113 = $4;
         __THREW__ = 0;
         (invoke_iii(866,($113|0),($traf_number1|0))|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if ($115) {
          break L4;
         }
         $116 = HEAP16[$traf_number1>>1]|0;
         $117 = $116&65535;
         $118 = ((($7)) + 44|0);
         $119 = $i;
         __THREW__ = 0;
         $120 = (invoke_iii(1101,($118|0),($119|0))|0);
         $121 = __THREW__; __THREW__ = 0;
         $122 = $121&1;
         if ($122) {
          break L4;
         }
         $123 = ((($120)) + 16|0);
         HEAP32[$123>>2] = $117;
         break;
        }
        case 2:  {
         $124 = $4;
         __THREW__ = 0;
         (invoke_iii(941,($124|0),($traf_number2|0))|0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          break L4;
         }
         $127 = HEAP32[$traf_number2>>2]|0;
         $128 = ((($7)) + 44|0);
         $129 = $i;
         __THREW__ = 0;
         $130 = (invoke_iii(1101,($128|0),($129|0))|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          break L4;
         }
         $133 = ((($130)) + 16|0);
         HEAP32[$133>>2] = $127;
         break;
        }
        case 3:  {
         $134 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($134|0),($traf_number3|0))|0);
         $135 = __THREW__; __THREW__ = 0;
         $136 = $135&1;
         if ($136) {
          break L4;
         }
         $137 = HEAP32[$traf_number3>>2]|0;
         $138 = ((($7)) + 44|0);
         $139 = $i;
         __THREW__ = 0;
         $140 = (invoke_iii(1101,($138|0),($139|0))|0);
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if ($142) {
          break L4;
         }
         $143 = ((($140)) + 16|0);
         HEAP32[$143>>2] = $137;
         break;
        }
        default: {
        }
        }
        $144 = ((($7)) + 41|0);
        $145 = HEAP8[$144>>0]|0;
        $146 = $145&255;
        switch ($146|0) {
        case 0:  {
         $147 = $4;
         __THREW__ = 0;
         (invoke_iii(940,($147|0),($trun_number|0))|0);
         $148 = __THREW__; __THREW__ = 0;
         $149 = $148&1;
         if ($149) {
          break L4;
         }
         $150 = HEAP8[$trun_number>>0]|0;
         $151 = $150&255;
         $152 = ((($7)) + 44|0);
         $153 = $i;
         __THREW__ = 0;
         $154 = (invoke_iii(1101,($152|0),($153|0))|0);
         $155 = __THREW__; __THREW__ = 0;
         $156 = $155&1;
         if ($156) {
          break L4;
         }
         $157 = ((($154)) + 20|0);
         HEAP32[$157>>2] = $151;
         break;
        }
        case 1:  {
         $158 = $4;
         __THREW__ = 0;
         (invoke_iii(866,($158|0),($trun_number4|0))|0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if ($160) {
          break L4;
         }
         $161 = HEAP16[$trun_number4>>1]|0;
         $162 = $161&65535;
         $163 = ((($7)) + 44|0);
         $164 = $i;
         __THREW__ = 0;
         $165 = (invoke_iii(1101,($163|0),($164|0))|0);
         $166 = __THREW__; __THREW__ = 0;
         $167 = $166&1;
         if ($167) {
          break L4;
         }
         $168 = ((($165)) + 20|0);
         HEAP32[$168>>2] = $162;
         break;
        }
        case 2:  {
         $169 = $4;
         __THREW__ = 0;
         (invoke_iii(941,($169|0),($trun_number5|0))|0);
         $170 = __THREW__; __THREW__ = 0;
         $171 = $170&1;
         if ($171) {
          break L4;
         }
         $172 = HEAP32[$trun_number5>>2]|0;
         $173 = ((($7)) + 44|0);
         $174 = $i;
         __THREW__ = 0;
         $175 = (invoke_iii(1101,($173|0),($174|0))|0);
         $176 = __THREW__; __THREW__ = 0;
         $177 = $176&1;
         if ($177) {
          break L4;
         }
         $178 = ((($175)) + 20|0);
         HEAP32[$178>>2] = $172;
         break;
        }
        case 3:  {
         $179 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($179|0),($trun_number6|0))|0);
         $180 = __THREW__; __THREW__ = 0;
         $181 = $180&1;
         if ($181) {
          break L4;
         }
         $182 = HEAP32[$trun_number6>>2]|0;
         $183 = ((($7)) + 44|0);
         $184 = $i;
         __THREW__ = 0;
         $185 = (invoke_iii(1101,($183|0),($184|0))|0);
         $186 = __THREW__; __THREW__ = 0;
         $187 = $186&1;
         if ($187) {
          break L4;
         }
         $188 = ((($185)) + 20|0);
         HEAP32[$188>>2] = $182;
         break;
        }
        default: {
        }
        }
        $189 = ((($7)) + 42|0);
        $190 = HEAP8[$189>>0]|0;
        $191 = $190&255;
        switch ($191|0) {
        case 0:  {
         $192 = $4;
         __THREW__ = 0;
         (invoke_iii(940,($192|0),($sample_number|0))|0);
         $193 = __THREW__; __THREW__ = 0;
         $194 = $193&1;
         if ($194) {
          break L4;
         }
         $195 = HEAP8[$sample_number>>0]|0;
         $196 = $195&255;
         $197 = ((($7)) + 44|0);
         $198 = $i;
         __THREW__ = 0;
         $199 = (invoke_iii(1101,($197|0),($198|0))|0);
         $200 = __THREW__; __THREW__ = 0;
         $201 = $200&1;
         if ($201) {
          break L4;
         }
         $202 = ((($199)) + 24|0);
         HEAP32[$202>>2] = $196;
         break;
        }
        case 1:  {
         $203 = $4;
         __THREW__ = 0;
         (invoke_iii(866,($203|0),($sample_number7|0))|0);
         $204 = __THREW__; __THREW__ = 0;
         $205 = $204&1;
         if ($205) {
          break L4;
         }
         $206 = HEAP16[$sample_number7>>1]|0;
         $207 = $206&65535;
         $208 = ((($7)) + 44|0);
         $209 = $i;
         __THREW__ = 0;
         $210 = (invoke_iii(1101,($208|0),($209|0))|0);
         $211 = __THREW__; __THREW__ = 0;
         $212 = $211&1;
         if ($212) {
          break L4;
         }
         $213 = ((($210)) + 24|0);
         HEAP32[$213>>2] = $207;
         break;
        }
        case 2:  {
         $214 = $4;
         __THREW__ = 0;
         (invoke_iii(941,($214|0),($sample_number8|0))|0);
         $215 = __THREW__; __THREW__ = 0;
         $216 = $215&1;
         if ($216) {
          break L4;
         }
         $217 = HEAP32[$sample_number8>>2]|0;
         $218 = ((($7)) + 44|0);
         $219 = $i;
         __THREW__ = 0;
         $220 = (invoke_iii(1101,($218|0),($219|0))|0);
         $221 = __THREW__; __THREW__ = 0;
         $222 = $221&1;
         if ($222) {
          break L4;
         }
         $223 = ((($220)) + 24|0);
         HEAP32[$223>>2] = $217;
         break;
        }
        case 3:  {
         $224 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($224|0),($sample_number9|0))|0);
         $225 = __THREW__; __THREW__ = 0;
         $226 = $225&1;
         if ($226) {
          break L4;
         }
         $227 = HEAP32[$sample_number9>>2]|0;
         $228 = ((($7)) + 44|0);
         $229 = $i;
         __THREW__ = 0;
         $230 = (invoke_iii(1101,($228|0),($229|0))|0);
         $231 = __THREW__; __THREW__ = 0;
         $232 = $231&1;
         if ($232) {
          break L4;
         }
         $233 = ((($230)) + 24|0);
         HEAP32[$233>>2] = $227;
         break;
        }
        default: {
        }
        }
        $234 = $i;
        $235 = (($234) + 1)|0;
        $i = $235;
       }
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $68 = ___cxa_find_matching_catch()|0;
  $69 = tempRet0;
  $5 = $68;
  $6 = $69;
  __THREW__ = 0;
  invoke_vi(586,($12|0));
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  if ($71) {
   $240 = ___cxa_find_matching_catch(0|0)|0;
   $241 = tempRet0;
   ___clang_call_terminate($240);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $236 = __THREW__; __THREW__ = 0;
 $237 = $236&1;
 if ($237) {
  $240 = ___cxa_find_matching_catch(0|0)|0;
  $241 = tempRet0;
  ___clang_call_terminate($240);
  // unreachable;
 } else {
  $238 = $5;
  $239 = $6;
  ___resumeException($238|0);
  // unreachable;
 }
}
function __ZN12AP4_TfraAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fields = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $11 = ((($3)) + 40|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 4;
 $15 = ((($3)) + 41|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 2;
 $19 = $14 | $18;
 $20 = ((($3)) + 42|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $19 | $22;
 $fields = $23;
 $24 = $2;
 $25 = $fields;
 $26 = (__ZN14AP4_ByteStream9WriteUI32Ej($24,$25)|0);
 $result = $26;
 $27 = $result;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $result;
  $0 = $29;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $30 = $2;
 $31 = ((($3)) + 44|0);
 $32 = (__ZNK9AP4_ArrayIN12AP4_TfraAtom5EntryEE9ItemCountEv($31)|0);
 $33 = (__ZN14AP4_ByteStream9WriteUI32Ej($30,$32)|0);
 $result = $33;
 $34 = $result;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $result;
  $0 = $36;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $i = 0;
 L13: while(1) {
  $37 = $i;
  $38 = ((($3)) + 44|0);
  $39 = (__ZNK9AP4_ArrayIN12AP4_TfraAtom5EntryEE9ItemCountEv($38)|0);
  $40 = ($37>>>0)<($39>>>0);
  if (!($40)) {
   label = 46;
   break;
  }
  $41 = ((($3)) + 25|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(1);
  $45 = $2;
  $46 = ((($3)) + 44|0);
  $47 = $i;
  $48 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($46,$47)|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  if ($44) {
   $55 = (__ZN14AP4_ByteStream9WriteUI64Ey($45,$51,$54)|0);
   $result = $55;
   $56 = $result;
   $57 = ($56|0)!=(0);
   if ($57) {
    label = 11;
    break;
   }
   $59 = $2;
   $60 = ((($3)) + 44|0);
   $61 = $i;
   $62 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($60,$61)|0);
   $63 = ((($62)) + 8|0);
   $64 = $63;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($64) + 4)|0;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = (__ZN14AP4_ByteStream9WriteUI64Ey($59,$66,$69)|0);
   $result = $70;
   $71 = $result;
   $72 = ($71|0)!=(0);
   if ($72) {
    label = 13;
    break;
   }
  } else {
   $74 = (__ZN14AP4_ByteStream9WriteUI32Ej($45,$51)|0);
   $result = $74;
   $75 = $result;
   $76 = ($75|0)!=(0);
   if ($76) {
    label = 15;
    break;
   }
   $78 = $2;
   $79 = ((($3)) + 44|0);
   $80 = $i;
   $81 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($79,$80)|0);
   $82 = ((($81)) + 8|0);
   $83 = $82;
   $84 = $83;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($83) + 4)|0;
   $87 = $86;
   $88 = HEAP32[$87>>2]|0;
   $89 = (__ZN14AP4_ByteStream9WriteUI32Ej($78,$85)|0);
   $result = $89;
   $90 = $result;
   $91 = ($90|0)!=(0);
   if ($91) {
    label = 17;
    break;
   }
  }
  $93 = ((($3)) + 40|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  switch ($95|0) {
  case 0:  {
   $96 = $2;
   $97 = ((($3)) + 44|0);
   $98 = $i;
   $99 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($97,$98)|0);
   $100 = ((($99)) + 16|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101&255;
   $103 = (__ZN14AP4_ByteStream9WriteUI08Eh($96,$102)|0);
   $result = $103;
   $104 = $result;
   $105 = ($104|0)!=(0);
   if ($105) {
    label = 20;
    break L13;
   }
   break;
  }
  case 1:  {
   $107 = $2;
   $108 = ((($3)) + 44|0);
   $109 = $i;
   $110 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($108,$109)|0);
   $111 = ((($110)) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112&65535;
   $114 = (__ZN14AP4_ByteStream9WriteUI16Et($107,$113)|0);
   $result = $114;
   $115 = $result;
   $116 = ($115|0)!=(0);
   if ($116) {
    label = 22;
    break L13;
   }
   break;
  }
  case 2:  {
   $118 = $2;
   $119 = ((($3)) + 44|0);
   $120 = $i;
   $121 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($119,$120)|0);
   $122 = ((($121)) + 16|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (__ZN14AP4_ByteStream9WriteUI24Ej($118,$123)|0);
   $result = $124;
   $125 = $result;
   $126 = ($125|0)!=(0);
   if ($126) {
    label = 24;
    break L13;
   }
   break;
  }
  case 3:  {
   $128 = $2;
   $129 = ((($3)) + 44|0);
   $130 = $i;
   $131 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($129,$130)|0);
   $132 = ((($131)) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (__ZN14AP4_ByteStream9WriteUI32Ej($128,$133)|0);
   $result = $134;
   $135 = $result;
   $136 = ($135|0)!=(0);
   if ($136) {
    label = 26;
    break L13;
   }
   break;
  }
  default: {
  }
  }
  $138 = ((($3)) + 41|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  switch ($140|0) {
  case 0:  {
   $141 = $2;
   $142 = ((($3)) + 44|0);
   $143 = $i;
   $144 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($142,$143)|0);
   $145 = ((($144)) + 20|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146&255;
   $148 = (__ZN14AP4_ByteStream9WriteUI08Eh($141,$147)|0);
   $result = $148;
   $149 = $result;
   $150 = ($149|0)!=(0);
   if ($150) {
    label = 29;
    break L13;
   }
   break;
  }
  case 1:  {
   $152 = $2;
   $153 = ((($3)) + 44|0);
   $154 = $i;
   $155 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($153,$154)|0);
   $156 = ((($155)) + 20|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $157&65535;
   $159 = (__ZN14AP4_ByteStream9WriteUI16Et($152,$158)|0);
   $result = $159;
   $160 = $result;
   $161 = ($160|0)!=(0);
   if ($161) {
    label = 31;
    break L13;
   }
   break;
  }
  case 2:  {
   $163 = $2;
   $164 = ((($3)) + 44|0);
   $165 = $i;
   $166 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($164,$165)|0);
   $167 = ((($166)) + 20|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (__ZN14AP4_ByteStream9WriteUI24Ej($163,$168)|0);
   $result = $169;
   $170 = $result;
   $171 = ($170|0)!=(0);
   if ($171) {
    label = 33;
    break L13;
   }
   break;
  }
  case 3:  {
   $173 = $2;
   $174 = ((($3)) + 44|0);
   $175 = $i;
   $176 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($174,$175)|0);
   $177 = ((($176)) + 20|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (__ZN14AP4_ByteStream9WriteUI32Ej($173,$178)|0);
   $result = $179;
   $180 = $result;
   $181 = ($180|0)!=(0);
   if ($181) {
    label = 35;
    break L13;
   }
   break;
  }
  default: {
  }
  }
  $183 = ((($3)) + 42|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  switch ($185|0) {
  case 0:  {
   $186 = $2;
   $187 = ((($3)) + 44|0);
   $188 = $i;
   $189 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($187,$188)|0);
   $190 = ((($189)) + 24|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $191&255;
   $193 = (__ZN14AP4_ByteStream9WriteUI08Eh($186,$192)|0);
   $result = $193;
   $194 = $result;
   $195 = ($194|0)!=(0);
   if ($195) {
    label = 38;
    break L13;
   }
   break;
  }
  case 1:  {
   $197 = $2;
   $198 = ((($3)) + 44|0);
   $199 = $i;
   $200 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($198,$199)|0);
   $201 = ((($200)) + 24|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $202&65535;
   $204 = (__ZN14AP4_ByteStream9WriteUI16Et($197,$203)|0);
   $result = $204;
   $205 = $result;
   $206 = ($205|0)!=(0);
   if ($206) {
    label = 40;
    break L13;
   }
   break;
  }
  case 2:  {
   $208 = $2;
   $209 = ((($3)) + 44|0);
   $210 = $i;
   $211 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($209,$210)|0);
   $212 = ((($211)) + 24|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (__ZN14AP4_ByteStream9WriteUI24Ej($208,$213)|0);
   $result = $214;
   $215 = $result;
   $216 = ($215|0)!=(0);
   if ($216) {
    label = 42;
    break L13;
   }
   break;
  }
  case 3:  {
   $218 = $2;
   $219 = ((($3)) + 44|0);
   $220 = $i;
   $221 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($219,$220)|0);
   $222 = ((($221)) + 24|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (__ZN14AP4_ByteStream9WriteUI32Ej($218,$223)|0);
   $result = $224;
   $225 = $result;
   $226 = ($225|0)!=(0);
   if ($226) {
    label = 44;
    break L13;
   }
   break;
  }
  default: {
  }
  }
  $228 = $i;
  $229 = (($228) + 1)|0;
  $i = $229;
 }
 switch (label|0) {
  case 11: {
   $58 = $result;
   $0 = $58;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 13: {
   $73 = $result;
   $0 = $73;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 15: {
   $77 = $result;
   $0 = $77;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 17: {
   $92 = $result;
   $0 = $92;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 20: {
   $106 = $result;
   $0 = $106;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 22: {
   $117 = $result;
   $0 = $117;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 24: {
   $127 = $result;
   $0 = $127;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 26: {
   $137 = $result;
   $0 = $137;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 29: {
   $151 = $result;
   $0 = $151;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 31: {
   $162 = $result;
   $0 = $162;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 33: {
   $172 = $result;
   $0 = $172;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 35: {
   $182 = $result;
   $0 = $182;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 38: {
   $196 = $result;
   $0 = $196;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 40: {
   $207 = $result;
   $0 = $207;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 42: {
   $217 = $result;
   $0 = $217;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 44: {
   $227 = $result;
   $0 = $227;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
  case 46: {
   $0 = 0;
   $230 = $0;
   STACKTOP = sp;return ($230|0);
   break;
  }
 }
 return (0)|0;
}
function __ZN12AP4_TfraAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i = 0, $name = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $name = sp + 312|0;
 $value = sp + 56|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,43795,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 40|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,43804,$15,0,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 41|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 FUNCTION_TABLE_viiiii[$19 & 2047]($16,43828,$22,0,0);
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 42|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 FUNCTION_TABLE_viiiii[$26 & 2047]($23,43852,$29,0,0);
 $30 = $1;
 $31 = (__ZN17AP4_AtomInspector12GetVerbosityEv($30)|0);
 $32 = ($31>>>0)>=(1);
 if (!($32)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = ((($2)) + 44|0);
  $35 = (__ZNK9AP4_ArrayIN12AP4_TfraAtom5EntryEE9ItemCountEv($34)|0);
  $36 = ($33>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = $i;
  HEAP32[$vararg_buffer>>2] = $37;
  (_snprintf($name,16,46183,$vararg_buffer)|0);
  $38 = ((($2)) + 44|0);
  $39 = $i;
  $40 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($38,$39)|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($2)) + 44|0);
  $48 = $i;
  $49 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($47,$48)|0);
  $50 = ((($49)) + 8|0);
  $51 = $50;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($2)) + 44|0);
  $58 = $i;
  $59 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($57,$58)|0);
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($2)) + 44|0);
  $63 = $i;
  $64 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($62,$63)|0);
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($2)) + 44|0);
  $68 = $i;
  $69 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm($67,$68)|0);
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $vararg_buffer1;
  $73 = $72;
  HEAP32[$73>>2] = $43;
  $74 = (($72) + 4)|0;
  $75 = $74;
  HEAP32[$75>>2] = $46;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  $76 = $vararg_ptr4;
  $77 = $76;
  HEAP32[$77>>2] = $53;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $56;
  $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr5>>2] = $61;
  $vararg_ptr6 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr6>>2] = $66;
  $vararg_ptr7 = ((($vararg_buffer1)) + 24|0);
  HEAP32[$vararg_ptr7>>2] = $71;
  (_snprintf($value,256,43878,$vararg_buffer1)|0);
  $80 = $1;
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 32|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_viiii[$83 & 2047]($80,$name,$value,0);
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10592;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<5)|0);
  __ZN12AP4_TfraAtom5EntryC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10592;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN12AP4_TfraAtom5EntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 24|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<5;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<5)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<5)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$29+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$29+20>>2]|0;HEAP32[$25+24>>2]=HEAP32[$29+24>>2]|0;HEAP32[$25+28>>2]=HEAP32[$29+28>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(586,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TfraAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(582,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TfraAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10532;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(586,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN11AP4_RtpAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $str_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1920233504,$6);
 $7 = 10608;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 40|0);
 __THREW__ = 0;
 invoke_vi(860,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $3 = $40;
  $4 = $41;
 } else {
  $11 = $2;
  $12 = ((($5)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($11|0),($12|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = $1;
   $16 = (($15) - 12)|0;
   $str_size = $16;
   $17 = $str_size;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    STACKTOP = sp;return;
   }
   $19 = $str_size;
   $20 = (($19) + 1)|0;
   $21 = ($20|0)<(0);
   $22 = $21 ? -1 : $20;
   __THREW__ = 0;
   $23 = (invoke_ii(867,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $str = $23;
    $26 = $2;
    $27 = $str;
    $28 = $str_size;
    __THREW__ = 0;
    (invoke_iiii(851,($26|0),($27|0),($28|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $31 = $str_size;
     $32 = $str;
     $33 = (($32) + ($31)|0);
     HEAP8[$33>>0] = 0;
     $34 = ((($5)) + 40|0);
     $35 = $str;
     __THREW__ = 0;
     (invoke_iii(862,($34|0),($35|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      $38 = $str;
      $39 = ($38|0)==(0|0);
      if ($39) {
       STACKTOP = sp;return;
      }
      __ZdaPv($38);
      STACKTOP = sp;return;
     }
    }
   }
  }
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $3 = $42;
  $4 = $43;
  __THREW__ = 0;
  invoke_vi(864,($8|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $50 = ___cxa_find_matching_catch(0|0)|0;
   $51 = tempRet0;
   ___clang_call_terminate($50);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 } else {
  $48 = $3;
  $49 = $4;
  ___resumeException($48|0);
  // unreachable;
 }
}
function __ZN11AP4_RtpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $11 = $2;
 $12 = ((($3)) + 40|0);
 $13 = (__ZNK10AP4_String8GetCharsEv($12)|0);
 $14 = ((($3)) + 40|0);
 $15 = (__ZNK10AP4_String9GetLengthEv($14)|0);
 $16 = (__ZN14AP4_ByteStream5WriteEPKvj($11,$13,$15)|0);
 $result = $16;
 $17 = $result;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $result;
  $0 = $19;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $20 = ((($3)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($3)) + 40|0);
 $23 = (__ZNK10AP4_String9GetLengthEv($22)|0);
 $24 = (12 + ($23))|0;
 $25 = (($21) - ($24))|0;
 $padding = $25;
 while(1) {
  $26 = $padding;
  $27 = (($26) + -1)|0;
  $padding = $27;
  $28 = ($26|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $2;
  (__ZN14AP4_ByteStream9WriteUI08Eh($29,0)|0);
 }
 $0 = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function __ZN11AP4_RtpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $format_string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $format_string = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($format_string,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,44005,$format_string,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 40|0);
 $14 = (__ZNK10AP4_String8GetCharsEv($13)|0);
 FUNCTION_TABLE_viiii[$12 & 2047]($9,44024,$14,0);
 STACKTOP = sp;return 0;
}
function __ZN11AP4_RtpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(588,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN11AP4_RtpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10608;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 40|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_SgpdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1102,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SgpdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10668;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 $6 = (invoke_ii(1103,($5|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   label = 9;
  } else {
   $item = $6;
   while(1) {
    $9 = $item;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break;
    }
    $11 = $item;
    __THREW__ = 0;
    $12 = (invoke_ii(1104,($11|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 9;
     break L1;
    }
    $15 = ($12|0)==(0|0);
    if (!($15)) {
     $16 = HEAP32[$12>>2]|0;
     $17 = ((($16)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     __THREW__ = 0;
     invoke_vi($18|0,($12|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      label = 9;
      break L1;
     }
    }
    $21 = $item;
    __THREW__ = 0;
    $22 = (invoke_ii(1105,($21|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 9;
     break L1;
    }
    $item = $22;
   }
   $30 = ((($3)) + 44|0);
   __THREW__ = 0;
   invoke_vi(596,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $1 = $33;
    $2 = $34;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $1 = $25;
  $2 = $26;
  $27 = ((($3)) + 44|0);
  __THREW__ = 0;
  invoke_vi(596,($27|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $39 = ___cxa_find_matching_catch(0|0)|0;
   $40 = tempRet0;
   ___clang_call_terminate($39);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  $37 = $1;
  $38 = $2;
  ___resumeException($37|0);
  // unreachable;
 }
}
function __ZN12AP4_SgpdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(592,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SgpdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bytes_available = 0, $description_length = 0, $entry_count = 0, $i = 0, $payload = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 16|0;
 $description_length = sp + 4|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1936158820,$8,$9,$10);
 $11 = 10668;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($7)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1106,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $5 = $34;
  $6 = $35;
 } else {
  $17 = $1;
  $18 = (($17) - 12)|0;
  $bytes_available = $18;
  $19 = $4;
  $20 = ((($7)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($19|0),($20|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  L4: do {
   if ($22) {
    label = 7;
   } else {
    $23 = $bytes_available;
    $24 = (($23) - 4)|0;
    $bytes_available = $24;
    $25 = $2;
    $26 = $25&255;
    $27 = ($26|0)>=(1);
    if ($27) {
     $28 = $4;
     $29 = ((($7)) + 40|0);
     __THREW__ = 0;
     (invoke_iii(854,($28|0),($29|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 7;
      break;
     }
     $32 = $bytes_available;
     $33 = (($32) - 4)|0;
     $bytes_available = $33;
    }
    HEAP32[$entry_count>>2] = 0;
    $38 = $4;
    __THREW__ = 0;
    $39 = (invoke_iii(854,($38|0),($entry_count|0))|0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if ($41) {
     label = 7;
    } else {
     $result = $39;
     $42 = $result;
     $43 = ($42|0)!=(0);
     if ($43) {
      STACKTOP = sp;return;
     }
     $44 = $bytes_available;
     $45 = (($44) - 4)|0;
     $bytes_available = $45;
     $i = 0;
     while(1) {
      $46 = $i;
      $47 = HEAP32[$entry_count>>2]|0;
      $48 = ($46>>>0)<($47>>>0);
      if (!($48)) {
       label = 27;
       break;
      }
      $49 = ((($7)) + 40|0);
      $50 = HEAP32[$49>>2]|0;
      HEAP32[$description_length>>2] = $50;
      $51 = ((($7)) + 25|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($53|0)==(0);
      if ($54) {
       $55 = $bytes_available;
       HEAP32[$description_length>>2] = $55;
      } else {
       $56 = ((($7)) + 40|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       if ($58) {
        $59 = $4;
        __THREW__ = 0;
        $60 = (invoke_iii(854,($59|0),($description_length|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         label = 7;
         break L4;
        }
        HEAP32[$description_length>>2] = $60;
       }
      }
      $63 = HEAP32[$description_length>>2]|0;
      $64 = $bytes_available;
      $65 = ($63>>>0)<=($64>>>0);
      if ($65) {
       __THREW__ = 0;
       $66 = (invoke_ii(883,20)|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if ($68) {
        label = 7;
        break L4;
       }
       __THREW__ = 0;
       invoke_vi(847,($66|0));
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        label = 24;
        break;
       }
       $payload = $66;
       $71 = HEAP32[$description_length>>2]|0;
       $72 = ($71|0)!=(0);
       if ($72) {
        $73 = $payload;
        $74 = HEAP32[$description_length>>2]|0;
        __THREW__ = 0;
        (invoke_iii(848,($73|0),($74|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 7;
         break L4;
        }
        $77 = $4;
        $78 = $payload;
        __THREW__ = 0;
        $79 = (invoke_ii(849,($78|0))|0);
        $80 = __THREW__; __THREW__ = 0;
        $81 = $80&1;
        if ($81) {
         label = 7;
         break L4;
        }
        $82 = HEAP32[$description_length>>2]|0;
        __THREW__ = 0;
        (invoke_iiii(851,($77|0),($79|0),($82|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 7;
         break L4;
        }
       }
       $87 = ((($7)) + 44|0);
       $88 = $payload;
       __THREW__ = 0;
       (invoke_iii(1107,($87|0),($88|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        label = 7;
        break L4;
       }
      }
      $91 = $i;
      $92 = (($91) + 1)|0;
      $i = $92;
     }
     if ((label|0) == 24) {
      $85 = ___cxa_find_matching_catch()|0;
      $86 = tempRet0;
      $5 = $85;
      $6 = $86;
      __ZdlPv($66);
      break;
     }
     else if ((label|0) == 27) {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   $36 = ___cxa_find_matching_catch()|0;
   $37 = tempRet0;
   $5 = $36;
   $6 = $37;
  }
  __THREW__ = 0;
  invoke_vi(596,($14|0));
  $93 = __THREW__; __THREW__ = 0;
  $94 = $93&1;
  if ($94) {
   $99 = ___cxa_find_matching_catch(0|0)|0;
   $100 = tempRet0;
   ___clang_call_terminate($99);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $99 = ___cxa_find_matching_catch(0|0)|0;
  $100 = tempRet0;
  ___clang_call_terminate($99);
  // unreachable;
 } else {
  $97 = $5;
  $98 = $6;
  ___resumeException($97|0);
  // unreachable;
 }
}
function __ZN12AP4_SgpdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $item = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $11 = ((($3)) + 25|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>=(1);
 if ($14) {
  $15 = $2;
  $16 = ((($3)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $56 = $0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $22 = $2;
 $23 = ((($3)) + 44|0);
 $24 = (__ZNK8AP4_ListI14AP4_DataBufferE9ItemCountEv($23)|0);
 $25 = (__ZN14AP4_ByteStream9WriteUI32Ej($22,$24)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $29 = ((($3)) + 44|0);
 $30 = (__ZNK8AP4_ListI14AP4_DataBufferE9FirstItemEv($29)|0);
 $item = $30;
 while(1) {
  $31 = $item;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 16;
   break;
  }
  $33 = $item;
  $34 = (__ZN8AP4_ListI14AP4_DataBufferE4Item7GetDataEv($33)|0);
  $entry = $34;
  $35 = ((($3)) + 25|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37|0)>=(1);
  if ($38) {
   $39 = ((($3)) + 40|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = $2;
    $43 = $entry;
    $44 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($43)|0);
    (__ZN14AP4_ByteStream9WriteUI32Ej($42,$44)|0);
   }
  }
  $45 = $2;
  $46 = $entry;
  $47 = (__ZNK14AP4_DataBuffer7GetDataEv($46)|0);
  $48 = $entry;
  $49 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($48)|0);
  $50 = (__ZN14AP4_ByteStream5WriteEPKvj($45,$47,$49)|0);
  $result = $50;
  $51 = $result;
  $52 = ($51|0)!=(0);
  if ($52) {
   label = 14;
   break;
  }
  $54 = $item;
  $55 = (__ZN8AP4_ListI14AP4_DataBufferE4Item7GetNextEv($54)|0);
  $item = $55;
 }
 if ((label|0) == 14) {
  $53 = $result;
  $0 = $53;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function __ZN12AP4_SgpdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $fourcc = 0, $header = 0, $i = 0, $item = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fourcc = sp + 56|0;
 $header = sp + 24|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($fourcc,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,45232,$fourcc,0);
 $9 = ((($2)) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)>=(1);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,44048,$18,0,0);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 44|0);
 $24 = (__ZNK8AP4_ListI14AP4_DataBufferE9ItemCountEv($23)|0);
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,45775,$24,0,0);
 $i = 0;
 $25 = ((($2)) + 44|0);
 $26 = (__ZNK8AP4_ListI14AP4_DataBufferE9FirstItemEv($25)|0);
 $item = $26;
 while(1) {
  $27 = $item;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $item;
  $30 = (__ZN8AP4_ListI14AP4_DataBufferE4Item7GetDataEv($29)|0);
  $entry = $30;
  $31 = $i;
  HEAP32[$vararg_buffer>>2] = $31;
  (_snprintf($header,32,45270,$vararg_buffer)|0);
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
  $34 = $1;
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $entry;
  $39 = (__ZNK14AP4_DataBuffer7GetDataEv($38)|0);
  $40 = $entry;
  $41 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($40)|0);
  FUNCTION_TABLE_viiiii[$37 & 2047]($34,$header,$39,$41,0);
  $42 = $item;
  $43 = (__ZN8AP4_ListI14AP4_DataBufferE4Item7GetNextEv($42)|0);
  $item = $43;
 }
 STACKTOP = sp;return 0;
}
function __ZNK8AP4_ListI14AP4_DataBufferE9FirstItemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI14AP4_DataBufferE4Item7GetDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8AP4_ListI14AP4_DataBufferE4Item7GetNextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI14AP4_DataBufferED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10728;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListI14AP4_DataBufferE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DataBufferEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10728;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DataBufferE3AddEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $4 = $0;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(1108,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($5);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = (__ZN8AP4_ListI14AP4_DataBufferE3AddEPNS1_4ItemE($4,$5)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZNK8AP4_ListI14AP4_DataBufferE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8AP4_ListI14AP4_DataBufferE4ItemC2EPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DataBufferE3AddEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = $7;
  $10 = $1;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = $1;
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $1;
  $17 = ((($2)) + 12|0);
  HEAP32[$17>>2] = $16;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 } else {
  $18 = $1;
  $19 = ((($2)) + 8|0);
  HEAP32[$19>>2] = $18;
  $20 = $1;
  $21 = ((($2)) + 12|0);
  HEAP32[$21>>2] = $20;
  $22 = $1;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $1;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI14AP4_DataBufferED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(596,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI14AP4_DataBufferE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI14AP4_DataBufferE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(1109,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN9AP4_TrackC2ER12AP4_TrakAtomR14AP4_ByteStreamj($this,$atom,$sample_stream,$movie_time_scale) {
 $this = $this|0;
 $atom = $atom|0;
 $sample_stream = $sample_stream|0;
 $movie_time_scale = $movie_time_scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $hdlr = 0, $or$cond = 0;
 var $or$cond3 = 0, $stbl = 0, $sub = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom;
 $2 = $sample_stream;
 $3 = $movie_time_scale;
 $6 = $0;
 $7 = 10744;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $1;
 HEAP32[$8>>2] = $9;
 $10 = ((($6)) + 8|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($6)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($6)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($6)) + 20|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($6)) + 24|0);
 $15 = $3;
 HEAP32[$14>>2] = $15;
 $16 = $1;
 $17 = ((($16)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_iiiii[$20 & 2047]($17,44102,0,0)|0);
 $sub = $21;
 $22 = $sub;
 $23 = ($22|0)!=(0|0);
 do {
  if ($23) {
   $24 = $sub;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $27 = 0;
   } else {
    $26 = (___dynamic_cast($24,2392,2096,0)|0);
    $27 = $26;
   }
   $hdlr = $27;
   $28 = $hdlr;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $hdlr;
    $31 = (__ZN12AP4_HdlrAtom14GetHandlerTypeEv($30)|0);
    $type = $31;
    $32 = $type;
    $33 = ($32|0)==(1936684398);
    if ($33) {
     $34 = ((($6)) + 12|0);
     HEAP32[$34>>2] = 1;
     break;
    }
    $35 = $type;
    $36 = ($35|0)==(1986618469);
    if ($36) {
     $37 = ((($6)) + 12|0);
     HEAP32[$37>>2] = 2;
     break;
    }
    $38 = $type;
    $39 = ($38|0)==(1751740020);
    if ($39) {
     $40 = ((($6)) + 12|0);
     HEAP32[$40>>2] = 4;
     break;
    }
    $41 = $type;
    $42 = ($41|0)==(1868854125);
    $43 = $type;
    $44 = ($43|0)==(1935962989);
    $or$cond = $42 | $44;
    if ($or$cond) {
     $45 = ((($6)) + 12|0);
     HEAP32[$45>>2] = 3;
     break;
    }
    $46 = $type;
    $47 = ($46|0)==(1952807028);
    $48 = $type;
    $49 = ($48|0)==(1954034535);
    $or$cond3 = $47 | $49;
    if ($or$cond3) {
     $50 = ((($6)) + 12|0);
     HEAP32[$50>>2] = 5;
     break;
    }
    $51 = $type;
    $52 = ($51|0)==(1785750887);
    if ($52) {
     $53 = ((($6)) + 12|0);
     HEAP32[$53>>2] = 6;
     break;
    }
    $54 = $type;
    $55 = ($54|0)==(1937072756);
    if ($55) {
     $56 = ((($6)) + 12|0);
     HEAP32[$56>>2] = 8;
    }
   }
  }
 } while(0);
 $57 = $1;
 $58 = ((($57)) + 36|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 28|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_iiiii[$61 & 2047]($58,44112,0,0)|0);
 $63 = ($62|0)==(0|0);
 if ($63) {
  $65 = 0;
 } else {
  $64 = (___dynamic_cast($62,2392,2480,0)|0);
  $65 = $64;
 }
 $stbl = $65;
 $66 = $stbl;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = (__Znwj(44)|0);
 $69 = $stbl;
 $70 = $2;
 __THREW__ = 0;
 invoke_viii(1110,($68|0),($69|0),($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $4 = $74;
  $5 = $75;
  __ZdlPv($68);
  $76 = $4;
  $77 = $5;
  ___resumeException($76|0);
  // unreachable;
 }
 $73 = ((($6)) + 16|0);
 HEAP32[$73>>2] = $68;
 STACKTOP = sp;return;
}
function __ZN9AP4_TrackD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10744;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$7>>2]|0;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 2047]($7);
  }
 }
 $12 = ((($1)) + 20|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$16>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 2047]($16);
 STACKTOP = sp;return;
}
function __ZN9AP4_TrackD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(598,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK9AP4_Track5GetIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN12AP4_TrakAtom5GetIdEv($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN12AP4_CttsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1111,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_CttsAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejjhj($3,1668576371,16,0,0);
 $4 = 10760;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1112,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 52|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 52|0);
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $1 = $11;
 $2 = $12;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 }
}
function __ZN12AP4_CttsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $buffer = 0, $entry_count = 0, $i = 0, $offset = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 16|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1668576371,$8,$9,$10);
 $11 = 10760;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1112,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $5 = $41;
  $6 = $42;
 } else {
  $15 = ((($7)) + 52|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($7)) + 52|0);
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = 0;
  $18 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($18|0),($entry_count|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  L4: do {
   if (!($20)) {
    $21 = ((($7)) + 36|0);
    $22 = HEAP32[$entry_count>>2]|0;
    __THREW__ = 0;
    (invoke_iii(1113,($21|0),($22|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     $25 = HEAP32[$entry_count>>2]|0;
     $26 = $25<<3;
     __THREW__ = 0;
     $27 = (invoke_ii(867,($26|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if (!($29)) {
      $buffer = $27;
      $30 = $4;
      $31 = $buffer;
      $32 = HEAP32[$entry_count>>2]|0;
      $33 = $32<<3;
      __THREW__ = 0;
      $34 = (invoke_iiii(851,($30|0),($31|0),($33|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if (!($36)) {
       $result = $34;
       $37 = $result;
       $38 = ($37|0)!=(0);
       if ($38) {
        $39 = $buffer;
        $40 = ($39|0)==(0|0);
        if ($40) {
         STACKTOP = sp;return;
        }
        __ZdaPv($39);
        STACKTOP = sp;return;
       }
       $i = 0;
       while(1) {
        $47 = $i;
        $48 = HEAP32[$entry_count>>2]|0;
        $49 = ($47>>>0)<($48>>>0);
        if (!($49)) {
         break;
        }
        $50 = $i;
        $51 = $50<<3;
        $52 = $buffer;
        $53 = (($52) + ($51)|0);
        __THREW__ = 0;
        $54 = (invoke_ii(893,($53|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break L4;
        }
        $57 = ((($7)) + 36|0);
        $58 = $i;
        __THREW__ = 0;
        $59 = (invoke_iii(1114,($57|0),($58|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        HEAP32[$59>>2] = $54;
        $62 = $i;
        $63 = $62<<3;
        $64 = (($63) + 4)|0;
        $65 = $buffer;
        $66 = (($65) + ($64)|0);
        __THREW__ = 0;
        $67 = (invoke_ii(893,($66|0))|0);
        $68 = __THREW__; __THREW__ = 0;
        $69 = $68&1;
        if ($69) {
         break L4;
        }
        $offset = $67;
        $70 = $offset;
        $71 = ((($7)) + 36|0);
        $72 = $i;
        __THREW__ = 0;
        $73 = (invoke_iii(1114,($71|0),($72|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L4;
        }
        $76 = ((($73)) + 4|0);
        HEAP32[$76>>2] = $70;
        $77 = $i;
        $78 = (($77) + 1)|0;
        $i = $78;
       }
       $79 = $buffer;
       $80 = ($79|0)==(0|0);
       if ($80) {
        STACKTOP = sp;return;
       }
       __ZdaPv($79);
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $5 = $43;
  $6 = $44;
  __THREW__ = 0;
  invoke_vi(604,($12|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $85 = ___cxa_find_matching_catch(0|0)|0;
   $86 = tempRet0;
   ___clang_call_terminate($85);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $85 = ___cxa_find_matching_catch(0|0)|0;
  $86 = tempRet0;
  ___clang_call_terminate($85);
  // unreachable;
 } else {
  $83 = $5;
  $84 = $6;
  ___resumeException($83|0);
  // unreachable;
 }
}
function __ZN12AP4_CttsAtom8AddEntryEjj($this,$count,$cts_offset) {
 $this = $this|0;
 $count = $count|0;
 $cts_offset = $cts_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $count;
 $2 = $cts_offset;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = $1;
 $7 = $2;
 __ZN18AP4_CttsTableEntryC2Ejj($3,$6,$7);
 (__ZN9AP4_ArrayI18AP4_CttsTableEntryE6AppendERKS0_($5,$3)|0);
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 8)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_CttsAtom12GetCtsOffsetEjRj($this,$sample,$cts_offset) {
 $this = $this|0;
 $sample = $sample|0;
 $cts_offset = $cts_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $i = 0, $lookup_start = 0, $sample_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $cts_offset;
 $4 = $1;
 $5 = $3;
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $0 = -12;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $lookup_start = 0;
 $sample_start = 0;
 $8 = $2;
 $9 = ((($4)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>=($10>>>0);
 if ($11) {
  $12 = ((($4)) + 52|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $lookup_start = $14;
  $15 = ((($4)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $sample_start = $16;
 }
 $17 = $lookup_start;
 $i = $17;
 while(1) {
  $18 = $i;
  $19 = ((($4)) + 36|0);
  $20 = (__ZNK9AP4_ArrayI18AP4_CttsTableEntryE9ItemCountEv($19)|0);
  $21 = ($18>>>0)<($20>>>0);
  if (!($21)) {
   label = 10;
   break;
  }
  $22 = ((($4)) + 36|0);
  $23 = $i;
  $24 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($22,$23)|0);
  $entry = $24;
  $25 = $2;
  $26 = $sample_start;
  $27 = $entry;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + ($28))|0;
  $30 = ($25>>>0)<=($29>>>0);
  $31 = $entry;
  if ($30) {
   label = 8;
   break;
  }
  $40 = HEAP32[$31>>2]|0;
  $41 = $sample_start;
  $42 = (($41) + ($40))|0;
  $sample_start = $42;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 if ((label|0) == 8) {
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $3;
  HEAP32[$34>>2] = $33;
  $35 = $i;
  $36 = ((($4)) + 52|0);
  $37 = ((($36)) + 4|0);
  HEAP32[$37>>2] = $35;
  $38 = $sample_start;
  $39 = ((($4)) + 52|0);
  HEAP32[$39>>2] = $38;
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 10) {
  $0 = -12;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __ZN12AP4_CttsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $i = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = (__ZNK9AP4_ArrayI18AP4_CttsTableEntryE9ItemCountEv($4)|0);
 $entry_count = $5;
 $6 = $2;
 $7 = $entry_count;
 $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($6,$7)|0);
 $result = $8;
 $9 = $result;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $result;
  $0 = $11;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $entry_count;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 10;
   break;
  }
  $15 = $2;
  $16 = ((($3)) + 36|0);
  $17 = $i;
  $18 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($16,$17)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$19)|0);
  $result = $20;
  $21 = $result;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 6;
   break;
  }
  $24 = $2;
  $25 = ((($3)) + 36|0);
  $26 = $i;
  $27 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($25,$26)|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (__ZN14AP4_ByteStream9WriteUI32Ej($24,$29)|0);
  $result = $30;
  $31 = $result;
  $32 = ($31|0)!=(0);
  if ($32) {
   label = 8;
   break;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 6) {
  $23 = $result;
  $0 = $23;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 8) {
  $33 = $result;
  $0 = $33;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZN12AP4_CttsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 96|0;
 $value = sp + 32|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayI18AP4_CttsTableEntryE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $9 = $1;
 $10 = (__ZN17AP4_AtomInspector12GetVerbosityEv($9)|0);
 $11 = ($10>>>0)>=(2);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($2)) + 36|0);
  $14 = (__ZNK9AP4_ArrayI18AP4_CttsTableEntryE9ItemCountEv($13)|0);
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  HEAP32[$vararg_buffer>>2] = $16;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($17,$18)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 36|0);
  $22 = $i;
  $23 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($21,$22)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  (_snprintf($value,64,44142,$vararg_buffer1)|0);
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_viiii[$29 & 2047]($26,$header,$value,0);
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10820;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<3)|0);
  __ZN18AP4_CttsTableEntryC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 10820;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayI18AP4_CttsTableEntryE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN18AP4_CttsTableEntryC2Ejj($this,$sample_count,$sample_offset) {
 $this = $this|0;
 $sample_count = $sample_count|0;
 $sample_offset = $sample_offset|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample_count;
 $2 = $sample_offset;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayI18AP4_CttsTableEntryE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<3)|0);
 $36 = $2;
 ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZNK9AP4_ArrayI18AP4_CttsTableEntryE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN18AP4_CttsTableEntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<3)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<3)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_CttsTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(604,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_CttsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(600,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_CttsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10760;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(604,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_MdhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(80)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1115,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_MdhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $creation_time = 0, $duration = 0, $l0 = 0, $l1 = 0, $l2 = 0, $lang = 0, $lang_str = 0, $modification_time = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $creation_time = sp + 8|0;
 $modification_time = sp + 4|0;
 $duration = sp;
 $lang = sp + 42|0;
 $lang_str = sp + 36|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1835296868,$8,$9,$10);
 $11 = 10836;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 72|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $5 = $50;
  $6 = $51;
 } else {
  $15 = ((($7)) + 25|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)==(0);
  $19 = $4;
  if ($18) {
   __THREW__ = 0;
   (invoke_iii(854,($19|0),($creation_time|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = HEAP32[$creation_time>>2]|0;
    $23 = ((($7)) + 40|0);
    $24 = $23;
    $25 = $24;
    HEAP32[$25>>2] = $22;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = 0;
    $28 = $4;
    __THREW__ = 0;
    (invoke_iii(854,($28|0),($modification_time|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $31 = HEAP32[$modification_time>>2]|0;
     $32 = ((($7)) + 48|0);
     $33 = $32;
     $34 = $33;
     HEAP32[$34>>2] = $31;
     $35 = (($33) + 4)|0;
     $36 = $35;
     HEAP32[$36>>2] = 0;
     $37 = $4;
     $38 = ((($7)) + 56|0);
     __THREW__ = 0;
     (invoke_iii(854,($37|0),($38|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      $41 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($41|0),($duration|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if (!($43)) {
       $44 = HEAP32[$duration>>2]|0;
       $45 = ((($7)) + 64|0);
       $46 = $45;
       $47 = $46;
       HEAP32[$47>>2] = $44;
       $48 = (($46) + 4)|0;
       $49 = $48;
       HEAP32[$49>>2] = 0;
       label = 14;
      }
     }
    }
   }
  } else {
   $56 = ((($7)) + 40|0);
   __THREW__ = 0;
   (invoke_iii(857,($19|0),($56|0))|0);
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   if (!($58)) {
    $59 = $4;
    $60 = ((($7)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(857,($59|0),($60|0))|0);
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if (!($62)) {
     $63 = $4;
     $64 = ((($7)) + 56|0);
     __THREW__ = 0;
     (invoke_iii(854,($63|0),($64|0))|0);
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if (!($66)) {
      $67 = $4;
      $68 = ((($7)) + 64|0);
      __THREW__ = 0;
      (invoke_iii(857,($67|0),($68|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if (!($70)) {
       label = 14;
      }
     }
    }
   }
  }
  do {
   if ((label|0) == 14) {
    $71 = $4;
    __THREW__ = 0;
    (invoke_iiii(851,($71|0),($lang|0),2)|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if (!($73)) {
     $74 = HEAP8[$lang>>0]|0;
     $75 = $74&255;
     $76 = $75 >> 2;
     $77 = $76 & 31;
     $78 = $77&255;
     $l0 = $78;
     $79 = HEAP8[$lang>>0]|0;
     $80 = $79&255;
     $81 = $80 & 3;
     $82 = $81 << 3;
     $83 = ((($lang)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = $85 >> 5;
     $87 = $86 & 7;
     $88 = $82 | $87;
     $89 = $88&255;
     $l1 = $89;
     $90 = ((($lang)) + 1|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = $92 & 31;
     $94 = $93&255;
     $l2 = $94;
     $95 = $l0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $l1;
     $98 = ($97<<24>>24)!=(0);
     $or$cond = $96 & $98;
     $99 = $l2;
     $100 = ($99<<24>>24)!=(0);
     $or$cond3 = $or$cond & $100;
     if ($or$cond3) {
      $101 = $l0;
      $102 = $101 << 24 >> 24;
      $103 = (($102) + 96)|0;
      $104 = $103&255;
      HEAP8[$lang_str>>0] = $104;
      $105 = ((($lang_str)) + 1|0);
      $106 = $l1;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + 96)|0;
      $109 = $108&255;
      HEAP8[$105>>0] = $109;
      $110 = ((($105)) + 1|0);
      $111 = $l2;
      $112 = $111 << 24 >> 24;
      $113 = (($112) + 96)|0;
      $114 = $113&255;
      HEAP8[$110>>0] = $114;
      $115 = ((($7)) + 72|0);
      __THREW__ = 0;
      invoke_viii(948,($115|0),($lang_str|0),3);
      $116 = __THREW__; __THREW__ = 0;
      $117 = $116&1;
      if ($117) {
       break;
      }
      STACKTOP = sp;return;
     } else {
      $118 = ((($7)) + 72|0);
      __THREW__ = 0;
      invoke_viii(948,($118|0),(44210|0),3);
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if ($120) {
       break;
      }
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $52 = ___cxa_find_matching_catch()|0;
  $53 = tempRet0;
  $5 = $52;
  $6 = $53;
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $125 = ___cxa_find_matching_catch(0|0)|0;
   $126 = tempRet0;
   ___clang_call_terminate($125);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $125 = ___cxa_find_matching_catch(0|0)|0;
  $126 = tempRet0;
  ___clang_call_terminate($125);
  // unreachable;
 } else {
  $123 = $5;
  $124 = $6;
  ___resumeException($123|0);
  // unreachable;
 }
}
function __ZN12AP4_MdhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l0 = 0, $l1 = 0, $l2 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = ((($3)) + 40|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 if ($7) {
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
  $result = $16;
  $17 = $result;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $result;
   $0 = $19;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $20 = $2;
  $21 = ((($3)) + 48|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZN14AP4_ByteStream9WriteUI32Ej($20,$24)|0);
  $result = $28;
  $29 = $result;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $result;
   $0 = $31;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $32 = $2;
  $33 = ((($3)) + 56|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (__ZN14AP4_ByteStream9WriteUI32Ej($32,$34)|0);
  $result = $35;
  $36 = $result;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $result;
   $0 = $38;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $39 = $2;
  $40 = ((($3)) + 64|0);
  $41 = $40;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($39,$43)|0);
  $result = $47;
  $48 = $result;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $result;
   $0 = $50;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
 } else {
  $51 = (__ZN14AP4_ByteStream9WriteUI64Ey($8,$12,$15)|0);
  $result = $51;
  $52 = $result;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $result;
   $0 = $54;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $55 = $2;
  $56 = ((($3)) + 48|0);
  $57 = $56;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (__ZN14AP4_ByteStream9WriteUI64Ey($55,$59,$62)|0);
  $result = $63;
  $64 = $result;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $result;
   $0 = $66;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $67 = $2;
  $68 = ((($3)) + 56|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (__ZN14AP4_ByteStream9WriteUI32Ej($67,$69)|0);
  $result = $70;
  $71 = $result;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $result;
   $0 = $73;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
  $74 = $2;
  $75 = ((($3)) + 64|0);
  $76 = $75;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (__ZN14AP4_ByteStream9WriteUI64Ey($74,$78,$81)|0);
  $result = $82;
  $83 = $result;
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $result;
   $0 = $85;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
 }
 $86 = ((($3)) + 72|0);
 $87 = (__ZNK10AP4_StringixEj($86,0)|0);
 $88 = $87 << 24 >> 24;
 $89 = (($88) - 96)|0;
 $90 = $89&255;
 $l0 = $90;
 $91 = ((($3)) + 72|0);
 $92 = (__ZNK10AP4_StringixEj($91,1)|0);
 $93 = $92 << 24 >> 24;
 $94 = (($93) - 96)|0;
 $95 = $94&255;
 $l1 = $95;
 $96 = ((($3)) + 72|0);
 $97 = (__ZNK10AP4_StringixEj($96,2)|0);
 $98 = $97 << 24 >> 24;
 $99 = (($98) - 96)|0;
 $100 = $99&255;
 $l2 = $100;
 $101 = $2;
 $102 = $l0;
 $103 = $102&255;
 $104 = $103 << 2;
 $105 = $l1;
 $106 = $105&255;
 $107 = $106 >> 3;
 $108 = $104 | $107;
 $109 = $108 & 255;
 $110 = $109&255;
 $111 = (__ZN14AP4_ByteStream9WriteUI08Eh($101,$110)|0);
 $result = $111;
 $112 = $result;
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $result;
  $0 = $114;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 $115 = $2;
 $116 = $l1;
 $117 = $116&255;
 $118 = $117 << 5;
 $119 = $l2;
 $120 = $119&255;
 $121 = $118 | $120;
 $122 = $121 & 255;
 $123 = $122&255;
 $124 = (__ZN14AP4_ByteStream9WriteUI08Eh($115,$123)|0);
 $result = $124;
 $125 = $result;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $result;
  $0 = $127;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 } else {
  $128 = $2;
  $129 = (__ZN14AP4_ByteStream9WriteUI16Et($128,0)|0);
  $0 = $129;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 return (0)|0;
}
function __ZN12AP4_MdhdAtom13GetDurationMsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 64|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__Z23AP4_DurationMsFromUnitsyj($5,$8,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN12AP4_MdhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45014,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 64|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,46674,$16,$19,0);
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZN12AP4_MdhdAtom13GetDurationMsEv($2)|0);
 FUNCTION_TABLE_viiiii[$23 & 2047]($20,44214,$24,0,0);
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 72|0);
 $30 = (__ZNK10AP4_String8GetCharsEv($29)|0);
 FUNCTION_TABLE_viiii[$28 & 2047]($25,46665,$30,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MdhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(606,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MdhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10836;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 72|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_GrpiAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(72)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1116,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_GrpiAtomC2EhPKcPKhj($this,$key_encryption_method,$group_id,$group_key,$group_key_length) {
 $this = $this|0;
 $key_encryption_method = $key_encryption_method|0;
 $group_id = $group_id|0;
 $group_key = $group_key|0;
 $group_key_length = $group_key_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $key_encryption_method;
 $2 = $group_id;
 $3 = $group_key;
 $4 = $group_key_length;
 $7 = $0;
 __ZN8AP4_AtomC2Ejjhj($7,1735553129,12,0,0);
 $8 = 10896;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 36|0);
 $10 = $1;
 HEAP8[$9>>0] = $10;
 $11 = ((($7)) + 40|0);
 $12 = $2;
 __THREW__ = 0;
 invoke_vii(869,($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $5 = $30;
  $6 = $31;
 } else {
  $15 = ((($7)) + 48|0);
  $16 = $3;
  $17 = $4;
  __THREW__ = 0;
  invoke_viii(960,($15|0),($16|0),($17|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   $5 = $32;
   $6 = $33;
  } else {
   $20 = ((($7)) + 40|0);
   __THREW__ = 0;
   $21 = (invoke_ii(863,($20|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = (5 + ($21))|0;
    $25 = $4;
    $26 = (($24) + ($25))|0;
    $27 = ((($7)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26))|0;
    HEAP32[$27>>2] = $29;
    STACKTOP = sp;return;
   }
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $5 = $34;
   $6 = $35;
   __THREW__ = 0;
   invoke_vi(486,($15|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $44 = ___cxa_find_matching_catch(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($11|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $44 = ___cxa_find_matching_catch(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $44 = ___cxa_find_matching_catch(0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 } else {
  $42 = $5;
  $43 = $6;
  ___resumeException($42|0);
  // unreachable;
 }
}
function __ZN12AP4_GrpiAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $group_id = 0, $group_id_length = 0;
 var $group_key_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $group_id_length = sp + 30|0;
 $group_key_length = sp + 28|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejybhj($7,1735553129,$8,0,0,$9,$10);
 $11 = 10896;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($7)) + 40|0);
 __THREW__ = 0;
 invoke_vi(860,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $62 = ___cxa_find_matching_catch()|0;
  $63 = tempRet0;
  $5 = $62;
  $6 = $63;
 } else {
  $16 = ((($7)) + 48|0);
  __THREW__ = 0;
  invoke_vi(847,($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $64 = ___cxa_find_matching_catch()|0;
   $65 = tempRet0;
   $5 = $64;
   $6 = $65;
  } else {
   HEAP16[$group_id_length>>1] = 0;
   $19 = $4;
   __THREW__ = 0;
   (invoke_iii(866,($19|0),($group_id_length|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $22 = $4;
    $23 = ((($7)) + 36|0);
    __THREW__ = 0;
    (invoke_iii(940,($22|0),($23|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     HEAP16[$group_key_length>>1] = 0;
     $26 = $4;
     __THREW__ = 0;
     (invoke_iii(866,($26|0),($group_key_length|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      $29 = HEAP16[$group_id_length>>1]|0;
      $30 = $29&65535;
      __THREW__ = 0;
      $31 = (invoke_ii(867,($30|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       $group_id = $31;
       $34 = $4;
       $35 = $group_id;
       $36 = HEAP16[$group_id_length>>1]|0;
       $37 = $36&65535;
       __THREW__ = 0;
       (invoke_iiii(851,($34|0),($35|0),($37|0))|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if (!($39)) {
        $40 = ((($7)) + 40|0);
        $41 = $group_id;
        $42 = HEAP16[$group_id_length>>1]|0;
        $43 = $42&65535;
        __THREW__ = 0;
        invoke_viii(948,($40|0),($41|0),($43|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if (!($45)) {
         $46 = $group_id;
         $47 = ($46|0)==(0|0);
         if (!($47)) {
          __ZdaPv($46);
         }
         $48 = ((($7)) + 48|0);
         $49 = HEAP16[$group_key_length>>1]|0;
         $50 = $49&65535;
         __THREW__ = 0;
         (invoke_iii(848,($48|0),($50|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if (!($52)) {
          $53 = $4;
          $54 = ((($7)) + 48|0);
          __THREW__ = 0;
          $55 = (invoke_ii(849,($54|0))|0);
          $56 = __THREW__; __THREW__ = 0;
          $57 = $56&1;
          if (!($57)) {
           $58 = HEAP16[$group_key_length>>1]|0;
           $59 = $58&65535;
           __THREW__ = 0;
           (invoke_iiii(851,($53|0),($55|0),($59|0))|0);
           $60 = __THREW__; __THREW__ = 0;
           $61 = $60&1;
           if (!($61)) {
            STACKTOP = sp;return;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $5 = $66;
   $6 = $67;
   __THREW__ = 0;
   invoke_vi(486,($16|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    $76 = ___cxa_find_matching_catch(0|0)|0;
    $77 = tempRet0;
    ___clang_call_terminate($76);
    // unreachable;
   }
  }
  __THREW__ = 0;
  invoke_vi(864,($13|0));
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  if ($71) {
   $76 = ___cxa_find_matching_catch(0|0)|0;
   $77 = tempRet0;
   ___clang_call_terminate($76);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $72 = __THREW__; __THREW__ = 0;
 $73 = $72&1;
 if ($73) {
  $76 = ___cxa_find_matching_catch(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 } else {
  $74 = $5;
  $75 = $6;
  ___resumeException($74|0);
  // unreachable;
 }
}
function __ZN12AP4_GrpiAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_result = 0, $_result1 = 0, $_result2 = 0, $_result3 = 0, $_result4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 40|0);
 $6 = (__ZNK10AP4_String9GetLengthEv($5)|0);
 $7 = $6&65535;
 $8 = (__ZN14AP4_ByteStream9WriteUI16Et($4,$7)|0);
 $_result = $8;
 $9 = $_result;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $_result;
  $0 = $11;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $12 = $2;
 $13 = ((($3)) + 36|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = (__ZN14AP4_ByteStream9WriteUI08Eh($12,$14)|0);
 $_result1 = $15;
 $16 = $_result1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $_result1;
  $0 = $18;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $19 = $2;
 $20 = ((($3)) + 48|0);
 $21 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($20)|0);
 $22 = $21&65535;
 $23 = (__ZN14AP4_ByteStream9WriteUI16Et($19,$22)|0);
 $_result2 = $23;
 $24 = $_result2;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $_result2;
  $0 = $26;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $27 = $2;
 $28 = ((($3)) + 40|0);
 $29 = (__ZNK10AP4_String8GetCharsEv($28)|0);
 $30 = ((($3)) + 40|0);
 $31 = (__ZNK10AP4_String9GetLengthEv($30)|0);
 $32 = (__ZN14AP4_ByteStream5WriteEPKvj($27,$29,$31)|0);
 $_result3 = $32;
 $33 = $_result3;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $_result3;
  $0 = $35;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $36 = $2;
 $37 = ((($3)) + 48|0);
 $38 = (__ZNK14AP4_DataBuffer7GetDataEv($37)|0);
 $39 = ((($3)) + 48|0);
 $40 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($39)|0);
 $41 = (__ZN14AP4_ByteStream5WriteEPKvj($36,$38,$40)|0);
 $_result4 = $41;
 $42 = $_result4;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $_result4;
  $0 = $44;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 } else {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __ZN12AP4_GrpiAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,44242,$9,0,0);
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 40|0);
 $15 = (__ZNK10AP4_String8GetCharsEv($14)|0);
 FUNCTION_TABLE_viiii[$13 & 2047]($10,44264,$15,0);
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 48|0);
 $21 = (__ZNK14AP4_DataBuffer7GetDataEv($20)|0);
 $22 = ((($2)) + 48|0);
 $23 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($22)|0);
 FUNCTION_TABLE_viiiii[$19 & 2047]($16,44273,$21,$23,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_GrpiAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(72)|0);
 $5 = ((($3)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($3)) + 40|0);
 __THREW__ = 0;
 $8 = (invoke_ii(870,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = ((($3)) + 48|0);
  __THREW__ = 0;
  $12 = (invoke_ii(861,($11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($3)) + 48|0);
   __THREW__ = 0;
   $16 = (invoke_ii(850,($15|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __THREW__ = 0;
    invoke_viiiii(1117,($4|0),($6|0),($8|0),($12|0),($16|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     STACKTOP = sp;return ($4|0);
    }
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $1 = $21;
 $2 = $22;
 __ZdlPv($4);
 $23 = $1;
 $24 = $2;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZN12AP4_GrpiAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(610,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_GrpiAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 10896;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 48|0);
 __THREW__ = 0;
 invoke_vi(486,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $1 = $11;
   $2 = $12;
   $13 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $22 = ___cxa_find_matching_catch(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  } else {
   $8 = ((($3)) + 40|0);
   __THREW__ = 0;
   invoke_vi(864,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $1 = $16;
    $2 = $17;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $1;
  $21 = $2;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN12AP4_MfhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1118,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_MfhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1835427940,$8,$9,$10);
 $11 = 10956;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = $4;
 $14 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($13|0),($14|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $5 = $17;
 $6 = $18;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $23 = ___cxa_find_matching_catch(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $5;
  $22 = $6;
  ___resumeException($21|0);
  // unreachable;
 }
}
function __ZN12AP4_MfhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_MfhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,44298,$8,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MfhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(615,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MfhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_HdlrAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1119,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_HdlrAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $name = 0, $name_size = 0, $predefined = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $predefined = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1751411826,$8,$9,$10);
 $11 = 11016;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 52|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $5 = $40;
  $6 = $41;
 } else {
  $15 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($predefined|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if (!($17)) {
    $18 = $4;
    $19 = ((($7)) + 36|0);
    __THREW__ = 0;
    (invoke_iii(854,($18|0),($19|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $22 = $4;
     $23 = ((($7)) + 40|0);
     __THREW__ = 0;
     (invoke_iii(854,($22|0),($23|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      $26 = $4;
      $27 = ((($7)) + 40|0);
      $28 = ((($27)) + 4|0);
      __THREW__ = 0;
      (invoke_iii(854,($26|0),($28|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = $4;
       $32 = ((($7)) + 40|0);
       $33 = ((($32)) + 8|0);
       __THREW__ = 0;
       (invoke_iii(854,($31|0),($33|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if (!($35)) {
        $36 = $1;
        $37 = (($36) - 32)|0;
        $name_size = $37;
        $38 = $name_size;
        $39 = ($38|0)==(0);
        if ($39) {
         STACKTOP = sp;return;
        }
        $46 = $name_size;
        $47 = (($46) + 1)|0;
        $48 = ($47|0)<(0);
        $49 = $48 ? -1 : $47;
        __THREW__ = 0;
        $50 = (invoke_ii(867,($49|0))|0);
        $51 = __THREW__; __THREW__ = 0;
        $52 = $51&1;
        if (!($52)) {
         $name = $50;
         $53 = $4;
         $54 = $name;
         $55 = $name_size;
         __THREW__ = 0;
         (invoke_iiii(851,($53|0),($54|0),($55|0))|0);
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if (!($57)) {
          $58 = $name_size;
          $59 = $name;
          $60 = (($59) + ($58)|0);
          HEAP8[$60>>0] = 0;
          $61 = $name;
          $62 = HEAP8[$61>>0]|0;
          $63 = $62 << 24 >> 24;
          $64 = $name_size;
          $65 = (($64) - 1)|0;
          $66 = ($63|0)==($65|0);
          $67 = ((($7)) + 52|0);
          $68 = $name;
          if ($66) {
           $69 = ((($68)) + 1|0);
           __THREW__ = 0;
           (invoke_iii(862,($67|0),($69|0))|0);
           $70 = __THREW__; __THREW__ = 0;
           $71 = $70&1;
           if ($71) {
            break;
           }
          } else {
           __THREW__ = 0;
           (invoke_iii(862,($67|0),($68|0))|0);
           $72 = __THREW__; __THREW__ = 0;
           $73 = $72&1;
           if ($73) {
            break;
           }
          }
          $74 = $name;
          $75 = ($74|0)==(0|0);
          if ($75) {
           STACKTOP = sp;return;
          }
          __ZdaPv($74);
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $5 = $42;
  $6 = $43;
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $80 = ___cxa_find_matching_catch(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $80 = ___cxa_find_matching_catch(0|0)|0;
  $81 = tempRet0;
  ___clang_call_terminate($80);
  // unreachable;
 } else {
  $78 = $5;
  $79 = $6;
  ___resumeException($78|0);
  // unreachable;
 }
}
function __ZN12AP4_HdlrAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $name_size = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,0)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $result;
  $0 = $8;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $9 = $2;
 $10 = ((($3)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI32Ej($9,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $16 = $2;
 $17 = ((($3)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZN14AP4_ByteStream9WriteUI32Ej($16,$18)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $23 = $2;
 $24 = ((($3)) + 40|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (__ZN14AP4_ByteStream9WriteUI32Ej($23,$26)|0);
 $result = $27;
 $28 = $result;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $result;
  $0 = $30;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $31 = $2;
 $32 = ((($3)) + 40|0);
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (__ZN14AP4_ByteStream9WriteUI32Ej($31,$34)|0);
 $result = $35;
 $36 = $result;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $result;
  $0 = $38;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $39 = ((($3)) + 52|0);
 $40 = (__ZNK10AP4_String9GetLengthEv($39)|0);
 $41 = $40&255;
 $name_size = $41;
 $42 = $name_size;
 $43 = $42&255;
 $44 = (32 + ($43))|0;
 $45 = ((($3)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44>>>0)>($46>>>0);
 if ($47) {
  $48 = ((($3)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) - 12)|0;
  $51 = (($50) + 20)|0;
  $52 = $51&255;
  $name_size = $52;
 }
 $53 = $name_size;
 $54 = ($53<<24>>24)!=(0);
 if ($54) {
  $55 = $2;
  $56 = ((($3)) + 52|0);
  $57 = (__ZNK10AP4_String8GetCharsEv($56)|0);
  $58 = $name_size;
  $59 = $58&255;
  $60 = (__ZN14AP4_ByteStream5WriteEPKvj($55,$57,$59)|0);
  $result = $60;
  $61 = $result;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $result;
   $0 = $63;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 }
 $64 = ((($3)) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $name_size;
 $67 = $66&255;
 $68 = (32 + ($67))|0;
 $69 = (($65) - ($68))|0;
 $padding = $69;
 while(1) {
  $70 = $padding;
  $71 = (($70) + -1)|0;
  $padding = $71;
  $72 = ($70|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = $2;
  (__ZN14AP4_ByteStream9WriteUI08Eh($73,0)|0);
 }
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZN12AP4_HdlrAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($type,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,44329,$type,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 52|0);
 $14 = (__ZNK10AP4_String8GetCharsEv($13)|0);
 FUNCTION_TABLE_viiii[$12 & 2047]($9,44342,$14,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_HdlrAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(619,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_HdlrAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11016;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_SmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1120,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SmhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1936549988,$8,$9,$10);
 $11 = 11076;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(866,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = $4;
  $17 = ((($7)) + 38|0);
  __THREW__ = 0;
  (invoke_iii(866,($16|0),($17|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZN12AP4_SmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI16Et($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $11 = $2;
 $12 = ((($3)) + 38|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI16Et($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN12AP4_SmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,44370,$9,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SmhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(623,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SmhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_MehdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1121,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_MehdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $duration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $duration = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1835362404,$8,$9,$10);
 $11 = 11136;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 25|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 $16 = $4;
 if ($15) {
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($duration|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   $19 = HEAP32[$duration>>2]|0;
   $20 = ((($7)) + 40|0);
   $21 = $20;
   $22 = $21;
   HEAP32[$22>>2] = $19;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = 0;
   STACKTOP = sp;return;
  }
 } else {
  $29 = ((($7)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(857,($16|0),($29|0))|0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if (!($31)) {
   STACKTOP = sp;return;
  }
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $5 = $25;
 $6 = $26;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $34 = ___cxa_find_matching_catch(0|0)|0;
  $35 = tempRet0;
  ___clang_call_terminate($34);
  // unreachable;
 } else {
  $32 = $5;
  $33 = $6;
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN12AP4_MehdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = ((($3)) + 40|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 if ($7) {
  $16 = (__ZN14AP4_ByteStream9WriteUI32Ej($8,$12)|0);
  $0 = $16;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = (__ZN14AP4_ByteStream9WriteUI64Ey($8,$12,$15)|0);
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZN12AP4_MehdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46674,$10,$13,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MehdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(627,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MehdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_StscAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1122,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_StscAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejjhj($3,1937011555,16,0,0);
 $4 = 11196;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1123,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 52|0);
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 }
}
function __ZN12AP4_StscAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $entry_count = 0, $first_chunk = 0, $first_sample = 0, $i = 0, $prev = 0, $result = 0, $sample_description_index = 0, $samples_per_chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 28|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1937011555,$8,$9,$10);
 $11 = 11196;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1123,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $5 = $39;
  $6 = $40;
 } else {
  $15 = ((($7)) + 52|0);
  HEAP32[$15>>2] = 0;
  $first_sample = 1;
  $16 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($entry_count|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if (!($18)) {
    $19 = ((($7)) + 36|0);
    $20 = HEAP32[$entry_count>>2]|0;
    __THREW__ = 0;
    (invoke_iii(1124,($19|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = HEAP32[$entry_count>>2]|0;
     $24 = ($23*12)|0;
     __THREW__ = 0;
     $25 = (invoke_ii(867,($24|0))|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      $buffer = $25;
      $28 = $4;
      $29 = $buffer;
      $30 = HEAP32[$entry_count>>2]|0;
      $31 = ($30*12)|0;
      __THREW__ = 0;
      $32 = (invoke_iiii(851,($28|0),($29|0),($31|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       $result = $32;
       $35 = $result;
       $36 = ($35|0)!=(0);
       if ($36) {
        $37 = $buffer;
        $38 = ($37|0)==(0|0);
        if ($38) {
         STACKTOP = sp;return;
        }
        __ZdaPv($37);
        STACKTOP = sp;return;
       }
       $i = 0;
       while(1) {
        $45 = $i;
        $46 = HEAP32[$entry_count>>2]|0;
        $47 = ($45>>>0)<($46>>>0);
        if (!($47)) {
         break;
        }
        $48 = $i;
        $49 = ($48*12)|0;
        $50 = $buffer;
        $51 = (($50) + ($49)|0);
        __THREW__ = 0;
        $52 = (invoke_ii(893,($51|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         break L4;
        }
        $first_chunk = $52;
        $55 = $i;
        $56 = ($55*12)|0;
        $57 = (($56) + 4)|0;
        $58 = $buffer;
        $59 = (($58) + ($57)|0);
        __THREW__ = 0;
        $60 = (invoke_ii(893,($59|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break L4;
        }
        $samples_per_chunk = $60;
        $63 = $i;
        $64 = ($63*12)|0;
        $65 = (($64) + 8)|0;
        $66 = $buffer;
        $67 = (($66) + ($65)|0);
        __THREW__ = 0;
        $68 = (invoke_ii(893,($67|0))|0);
        $69 = __THREW__; __THREW__ = 0;
        $70 = $69&1;
        if ($70) {
         break L4;
        }
        $sample_description_index = $68;
        $71 = $i;
        $72 = ($71|0)!=(0);
        if ($72) {
         $73 = $i;
         $74 = (($73) - 1)|0;
         $prev = $74;
         $75 = $first_chunk;
         $76 = ((($7)) + 36|0);
         $77 = $prev;
         __THREW__ = 0;
         $78 = (invoke_iii(1125,($76|0),($77|0))|0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          break L4;
         }
         $81 = HEAP32[$78>>2]|0;
         $82 = (($75) - ($81))|0;
         $83 = ((($7)) + 36|0);
         $84 = $prev;
         __THREW__ = 0;
         $85 = (invoke_iii(1125,($83|0),($84|0))|0);
         $86 = __THREW__; __THREW__ = 0;
         $87 = $86&1;
         if ($87) {
          break L4;
         }
         $88 = ((($85)) + 8|0);
         HEAP32[$88>>2] = $82;
         $89 = ((($7)) + 36|0);
         $90 = $prev;
         __THREW__ = 0;
         $91 = (invoke_iii(1125,($89|0),($90|0))|0);
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if ($93) {
          break L4;
         }
         $94 = ((($91)) + 8|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ((($7)) + 36|0);
         $97 = $prev;
         __THREW__ = 0;
         $98 = (invoke_iii(1125,($96|0),($97|0))|0);
         $99 = __THREW__; __THREW__ = 0;
         $100 = $99&1;
         if ($100) {
          break L4;
         }
         $101 = ((($98)) + 12|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = Math_imul($95, $102)|0;
         $104 = $first_sample;
         $105 = (($104) + ($103))|0;
         $first_sample = $105;
        }
        $106 = ((($7)) + 36|0);
        $107 = $i;
        __THREW__ = 0;
        $108 = (invoke_iii(1125,($106|0),($107|0))|0);
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         break L4;
        }
        $111 = ((($108)) + 8|0);
        HEAP32[$111>>2] = 0;
        $112 = $first_chunk;
        $113 = ((($7)) + 36|0);
        $114 = $i;
        __THREW__ = 0;
        $115 = (invoke_iii(1125,($113|0),($114|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         break L4;
        }
        HEAP32[$115>>2] = $112;
        $118 = $first_sample;
        $119 = ((($7)) + 36|0);
        $120 = $i;
        __THREW__ = 0;
        $121 = (invoke_iii(1125,($119|0),($120|0))|0);
        $122 = __THREW__; __THREW__ = 0;
        $123 = $122&1;
        if ($123) {
         break L4;
        }
        $124 = ((($121)) + 4|0);
        HEAP32[$124>>2] = $118;
        $125 = $samples_per_chunk;
        $126 = ((($7)) + 36|0);
        $127 = $i;
        __THREW__ = 0;
        $128 = (invoke_iii(1125,($126|0),($127|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         break L4;
        }
        $131 = ((($128)) + 12|0);
        HEAP32[$131>>2] = $125;
        $132 = $sample_description_index;
        $133 = ((($7)) + 36|0);
        $134 = $i;
        __THREW__ = 0;
        $135 = (invoke_iii(1125,($133|0),($134|0))|0);
        $136 = __THREW__; __THREW__ = 0;
        $137 = $136&1;
        if ($137) {
         break L4;
        }
        $138 = ((($135)) + 16|0);
        HEAP32[$138>>2] = $132;
        $139 = $i;
        $140 = (($139) + 1)|0;
        $i = $140;
       }
       $141 = $buffer;
       $142 = ($141|0)==(0|0);
       if ($142) {
        STACKTOP = sp;return;
       }
       __ZdaPv($141);
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $5 = $41;
  $6 = $42;
  __THREW__ = 0;
  invoke_vi(637,($12|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $147 = ___cxa_find_matching_catch(0|0)|0;
   $148 = tempRet0;
   ___clang_call_terminate($147);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 if ($144) {
  $147 = ___cxa_find_matching_catch(0|0)|0;
  $148 = tempRet0;
  ___clang_call_terminate($147);
  // unreachable;
 } else {
  $145 = $5;
  $146 = $6;
  ___resumeException($145|0);
  // unreachable;
 }
}
function __ZN12AP4_StscAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $entry_count = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($4)|0);
 $entry_count = $5;
 $6 = $2;
 $7 = $entry_count;
 $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($6,$7)|0);
 $result = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $entry_count;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   label = 10;
   break;
  }
  $12 = $2;
  $13 = ((($3)) + 36|0);
  $14 = $i;
  $15 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($13,$14)|0);
  $16 = HEAP32[$15>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($12,$16)|0);
  $17 = $result;
  $18 = ($17|0)!=(0);
  if ($18) {
   label = 4;
   break;
  }
  $20 = $2;
  $21 = ((($3)) + 36|0);
  $22 = $i;
  $23 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($21,$22)|0);
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($20,$25)|0);
  $26 = $result;
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 6;
   break;
  }
  $29 = $2;
  $30 = ((($3)) + 36|0);
  $31 = $i;
  $32 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($30,$31)|0);
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($29,$34)|0);
  $35 = $result;
  $36 = ($35|0)!=(0);
  if ($36) {
   label = 8;
   break;
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 if ((label|0) == 4) {
  $19 = $result;
  $0 = $19;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $28 = $result;
  $0 = $28;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 8) {
  $37 = $result;
  $0 = $37;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 10) {
  $40 = $result;
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function __ZN12AP4_StscAtom8AddEntryEjjj($this,$chunk_count,$samples_per_chunk,$sample_description_index) {
 $this = $this|0;
 $chunk_count = $chunk_count|0;
 $samples_per_chunk = $samples_per_chunk|0;
 $sample_description_index = $sample_description_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $first_chunk = 0, $first_sample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $0 = $this;
 $1 = $chunk_count;
 $2 = $samples_per_chunk;
 $3 = $sample_description_index;
 $5 = $0;
 $6 = ((($5)) + 36|0);
 $7 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($6)|0);
 $entry_count = $7;
 $8 = $entry_count;
 $9 = ($8|0)==(0);
 if ($9) {
  $first_chunk = 1;
  $first_sample = 1;
 } else {
  $10 = ((($5)) + 36|0);
  $11 = $entry_count;
  $12 = (($11) - 1)|0;
  $13 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($10,$12)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($5)) + 36|0);
  $16 = $entry_count;
  $17 = (($16) - 1)|0;
  $18 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($15,$17)|0);
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($14) + ($20))|0;
  $first_chunk = $21;
  $22 = ((($5)) + 36|0);
  $23 = $entry_count;
  $24 = (($23) - 1)|0;
  $25 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($22,$24)|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($5)) + 36|0);
  $29 = $entry_count;
  $30 = (($29) - 1)|0;
  $31 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($28,$30)|0);
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($5)) + 36|0);
  $35 = $entry_count;
  $36 = (($35) - 1)|0;
  $37 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($34,$36)|0);
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($33, $39)|0;
  $41 = (($27) + ($40))|0;
  $first_sample = $41;
 }
 $42 = ((($5)) + 36|0);
 $43 = $first_chunk;
 $44 = $first_sample;
 $45 = $1;
 $46 = $2;
 $47 = $3;
 __ZN18AP4_StscTableEntryC2Ejjjjj($4,$43,$44,$45,$46,$47);
 (__ZN9AP4_ArrayI18AP4_StscTableEntryE6AppendERKS0_($42,$4)|0);
 $48 = ((($5)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 12)|0;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_StscAtom17GetChunkForSampleEjRjS0_S0_($this,$sample,$chunk,$skip,$sample_description_index) {
 $this = $this|0;
 $sample = $sample|0;
 $chunk = $chunk|0;
 $skip = $skip|0;
 $sample_description_index = $sample_description_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk_offset = 0, $group = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample;
 $3 = $chunk;
 $4 = $skip;
 $5 = $sample_description_index;
 $6 = $1;
 $7 = $2;
 $8 = ($7>>>0)>(0);
 if (!($8)) {
  ___assert_fail((44408|0),(44419|0),166,(44451|0));
  // unreachable;
 }
 $9 = ((($6)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 36|0);
 $12 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($11)|0);
 $13 = ($10>>>0)<($12>>>0);
 if ($13) {
  $14 = ((($6)) + 36|0);
  $15 = ((($6)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($14,$16)|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = ($19>>>0)<=($20>>>0);
  if ($21) {
   $22 = ((($6)) + 52|0);
   $23 = HEAP32[$22>>2]|0;
   $group = $23;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $group = 0;
 }
 while(1) {
  $24 = $group;
  $25 = ((($6)) + 36|0);
  $26 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($25)|0);
  $27 = ($24>>>0)<($26>>>0);
  if (!($27)) {
   label = 16;
   break;
  }
  $28 = ((($6)) + 36|0);
  $29 = $group;
  $30 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($28,$29)|0);
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($6)) + 36|0);
  $34 = $group;
  $35 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($33,$34)|0);
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($32, $37)|0;
  $sample_count = $38;
  $39 = $sample_count;
  $40 = ($39|0)==(0);
  $41 = ((($6)) + 36|0);
  $42 = $group;
  $43 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($41,$42)|0);
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  if ($40) {
   label = 9;
   break;
  }
  $48 = $sample_count;
  $49 = (($45) + ($48))|0;
  $50 = $2;
  $51 = ($49>>>0)<=($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $group;
  $53 = (($52) + 1)|0;
  $group = $53;
 }
 if ((label|0) == 16) {
  $104 = $3;
  HEAP32[$104>>2] = 0;
  $105 = $4;
  HEAP32[$105>>2] = 0;
  $106 = $5;
  HEAP32[$106>>2] = 0;
  $0 = -12;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 if ((label|0) == 9) {
  $46 = $2;
  $47 = ($45>>>0)>($46>>>0);
  if ($47) {
   $0 = -10;
   $107 = $0;
   STACKTOP = sp;return ($107|0);
  }
 }
 $54 = ((($6)) + 36|0);
 $55 = $group;
 $56 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($54,$55)|0);
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 if ($59) {
  $0 = -10;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else {
  $60 = $2;
  $61 = ((($6)) + 36|0);
  $62 = $group;
  $63 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($61,$62)|0);
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($60) - ($65))|0;
  $67 = ((($6)) + 36|0);
  $68 = $group;
  $69 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($67,$68)|0);
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($66>>>0) / ($71>>>0))&-1;
  $chunk_offset = $72;
  $73 = ((($6)) + 36|0);
  $74 = $group;
  $75 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($73,$74)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $chunk_offset;
  $78 = (($76) + ($77))|0;
  $79 = $3;
  HEAP32[$79>>2] = $78;
  $80 = $2;
  $81 = ((($6)) + 36|0);
  $82 = $group;
  $83 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($81,$82)|0);
  $84 = ((($83)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($6)) + 36|0);
  $87 = $group;
  $88 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($86,$87)|0);
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $chunk_offset;
  $92 = Math_imul($90, $91)|0;
  $93 = (($85) + ($92))|0;
  $94 = (($80) - ($93))|0;
  $95 = $4;
  HEAP32[$95>>2] = $94;
  $96 = ((($6)) + 36|0);
  $97 = $group;
  $98 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($96,$97)|0);
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  HEAP32[$101>>2] = $100;
  $102 = $group;
  $103 = ((($6)) + 52|0);
  HEAP32[$103>>2] = $102;
  $0 = 0;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function __ZN12AP4_StscAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 296|0;
 $value = sp + 40|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $9 = $1;
 $10 = (__ZN17AP4_AtomInspector12GetVerbosityEv($9)|0);
 $11 = ($10>>>0)>=(1);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($2)) + 36|0);
  $14 = (__ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($13)|0);
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  HEAP32[$vararg_buffer>>2] = $16;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($17,$18)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 36|0);
  $22 = $i;
  $23 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($21,$22)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($2)) + 36|0);
  $27 = $i;
  $28 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($26,$27)|0);
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($2)) + 36|0);
  $32 = $i;
  $33 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($31,$32)|0);
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($2)) + 36|0);
  $37 = $i;
  $38 = (__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($36,$37)|0);
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $30;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $35;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $40;
  (_snprintf($value,256,44469,$vararg_buffer1)|0);
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 32|0);
  $44 = HEAP32[$43>>2]|0;
  FUNCTION_TABLE_viiii[$44 & 2047]($41,$header,$value,0);
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11264;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayI18AP4_StscTableEntryE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($30*20)|0)|0);
  __ZN18AP4_StscTableEntryC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11264;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayI18AP4_StscTableEntryE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*20)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK9AP4_ArrayI18AP4_StscTableEntryE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN18AP4_StscTableEntryC2Ejjjjj($this,$first_chunk,$first_sample,$chunk_count,$samples_per_chunk,$sample_description_index) {
 $this = $this|0;
 $first_chunk = $first_chunk|0;
 $first_sample = $first_sample|0;
 $chunk_count = $chunk_count|0;
 $samples_per_chunk = $samples_per_chunk|0;
 $sample_description_index = $sample_description_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $first_chunk;
 $2 = $first_sample;
 $3 = $chunk_count;
 $4 = $samples_per_chunk;
 $5 = $sample_description_index;
 $6 = $0;
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = ((($6)) + 8|0);
 $11 = $3;
 HEAP32[$10>>2] = $11;
 $12 = ((($6)) + 12|0);
 $13 = $4;
 HEAP32[$12>>2] = $13;
 $14 = ((($6)) + 16|0);
 $15 = $5;
 HEAP32[$14>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayI18AP4_StscTableEntryE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*20)|0)|0);
 $36 = $2;
 ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$36+16>>2]|0;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN18AP4_StscTableEntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ($8*20)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*20)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*20)|0)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$29+16>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_StscTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(637,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_StscAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(631,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_StscAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11196;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(637,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_OddaAtom6CreateEyR14AP4_ByteStream($0,$1,$stream) {
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $version = sp + 28|0;
 $flags = sp + 16|0;
 $7 = $3;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $4 = $stream;
 $11 = $4;
 $12 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($11,$version,$flags)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $14 = HEAP8[$version>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(0);
 if ($16) {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $17 = (__Znwj(56)|0);
 $18 = $3;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP8[$version>>0]|0;
 $25 = HEAP32[$flags>>2]|0;
 $26 = $4;
 __THREW__ = 0;
 invoke_viiiiii(1126,($17|0),($20|0),($23|0),($24|0),($25|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $5 = $29;
  $6 = $30;
  __ZdlPv($17);
  $31 = $5;
  $32 = $6;
  ___resumeException($31|0);
  // unreachable;
 }
 $2 = $17;
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function __ZN12AP4_OddaAtomC2EyhjR14AP4_ByteStream($this,$0,$1,$version,$flags,$stream) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, $position = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $position = sp;
 $2 = $this;
 $9 = $3;
 $10 = $9;
 HEAP32[$10>>2] = $0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $4 = $version;
 $5 = $flags;
 $6 = $stream;
 $13 = $2;
 $14 = $3;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = $5;
 __ZN8AP4_AtomC2Ejybhj($13,1868850273,$16,$19,1,$20,$21);
 $22 = 11280;
 HEAP32[$13>>2] = $22;
 $23 = $6;
 $24 = ((($13)) + 40|0);
 __THREW__ = 0;
 (invoke_iii(857,($23|0),($24|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   label = 7;
  } else {
   $27 = $6;
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   __THREW__ = 0;
   (invoke_iii($30|0,($27|0),($position|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 7;
   } else {
    __THREW__ = 0;
    $33 = (invoke_ii(883,40)|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 7;
    } else {
     $36 = $6;
     $37 = $position;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($13)) + 40|0);
     $44 = $43;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $47 = (($44) + 4)|0;
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     __THREW__ = 0;
     invoke_viiiiii(942,($33|0),($36|0),($39|0),($42|0),($46|0),($49|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $76 = ___cxa_find_matching_catch()|0;
      $77 = tempRet0;
      $7 = $76;
      $8 = $77;
      __ZdlPv($33);
      break;
     }
     $52 = ((($13)) + 48|0);
     HEAP32[$52>>2] = $33;
     $53 = $6;
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($54)) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $position;
     $58 = $57;
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + 4)|0;
     $61 = $60;
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($13)) + 40|0);
     $64 = $63;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $67 = (($64) + 4)|0;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $70 = (_i64Add(($59|0),($62|0),($66|0),($69|0))|0);
     $71 = tempRet0;
     __THREW__ = 0;
     (invoke_iiii($56|0,($53|0),($70|0),($71|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 7;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $7 = $74;
  $8 = $75;
 }
 __THREW__ = 0;
 invoke_vi(706,($13|0));
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if ($79) {
  $82 = ___cxa_find_matching_catch(0|0)|0;
  $83 = tempRet0;
  ___clang_call_terminate($82);
  // unreachable;
 } else {
  $80 = $7;
  $81 = $8;
  ___resumeException($80|0);
  // unreachable;
 }
}
function __ZN12AP4_OddaAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11280;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vi($12|0,($9|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $1 = $15;
 $2 = $16;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $19 = $1;
  $20 = $2;
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZN12AP4_OddaAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(639,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_OddaAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_result = 0, $_result1 = 0, $_result2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 40|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN14AP4_ByteStream9WriteUI64Ey($4,$8,$11)|0);
 $_result = $12;
 $13 = $_result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $_result;
  $0 = $15;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $16 = ((($3)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
  $20 = tempRet0;
  $21 = ($20>>>0)<(0);
  $22 = ($19>>>0)<(8);
  $23 = ($20|0)==(0);
  $24 = $23 & $22;
  $25 = $21 | $24;
  if (!($25)) {
   $26 = ((($3)) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_iiii[$30 & 2047]($27,0,0)|0);
   $_result1 = $31;
   $32 = $_result1;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $_result1;
    $0 = $34;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
   $35 = ((($3)) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $2;
   $41 = ((($3)) + 40|0);
   $42 = $41;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiiii[$39 & 2047]($36,$40,$44,$47)|0);
   $_result2 = $48;
   $49 = $_result2;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = $_result2;
    $0 = $51;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   } else {
    $0 = 0;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
  }
 }
 $0 = -1;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function __ZN12AP4_OddaAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,44609,$10,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MfroAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $result = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 12|0;
 $1 = $size;
 $2 = $stream;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $12 = (__Znwj(40)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 __THREW__ = 0;
 invoke_viiiii(1127,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
  __ZdlPv($12);
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 $0 = $12;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN12AP4_MfroAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1835430511,$8,$9,$10);
 $11 = 11340;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = $4;
 $14 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($13|0),($14|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $5 = $17;
 $6 = $18;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $23 = ___cxa_find_matching_catch(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $5;
  $22 = $6;
  ___resumeException($21|0);
  // unreachable;
 }
}
function __ZN12AP4_MfroAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_MfroAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,44646,$8,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_MfroAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(643,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MfroAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14AP4_Expandable13MinHeaderSizeEj($payload_size) {
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $payload_size;
 $1 = $0;
 $2 = (($1>>>0) / 128)&-1;
 $3 = (2 + ($2))|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14AP4_ExpandableC2EjNS_11ClassIdSizeEjj($this,$class_id,$class_id_size,$header_size,$payload_size) {
 $this = $this|0;
 $class_id = $class_id|0;
 $class_id_size = $class_id_size|0;
 $header_size = $header_size|0;
 $payload_size = $payload_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $class_id;
 $2 = $class_id_size;
 $3 = $header_size;
 $4 = $payload_size;
 $5 = $0;
 $6 = 11400;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($5)) + 8|0);
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $11 = ((($5)) + 12|0);
 $12 = $3;
 HEAP32[$11>>2] = $12;
 $13 = ((($5)) + 16|0);
 $14 = $4;
 HEAP32[$13>>2] = $14;
 $15 = $3;
 $16 = ($15>>>0)>=(2);
 if (!($16)) {
  ___assert_fail((44673|0),(44692|0),60,(44726|0));
  // unreachable;
 }
 $17 = $3;
 $18 = ($17>>>0)<=(5);
 if ($18) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((44741|0),(44692|0),61,(44726|0));
  // unreachable;
 }
}
function __ZN14AP4_Expandable5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0;
 var $cond = 0, $i = 0, $result = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes = sp + 24|0;
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $cond = ($5|0)==(0);
 if (!($cond)) {
  $0 = -13;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $6 = $2;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = (__ZN14AP4_ByteStream9WriteUI08Eh($6,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $result;
  $0 = $13;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $14 = ((($3)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - 1)|0;
 $17 = ($16>>>0)<=(8);
 if (!($17)) {
  ___assert_fail((44760|0),(44692|0),84,(44780|0));
  // unreachable;
 }
 $18 = ((($3)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)>=(2);
 if (!($20)) {
  ___assert_fail((44786|0),(44692|0),85,(44780|0));
  // unreachable;
 }
 $21 = ((($3)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $size = $22;
 $23 = $size;
 $24 = $23 & 127;
 $25 = $24&255;
 $26 = ((($3)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) - 2)|0;
 $29 = (($bytes) + ($28)|0);
 HEAP8[$29>>0] = $25;
 $30 = ((($3)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) - 3)|0;
 $i = $32;
 while(1) {
  $33 = $i;
  $34 = ($33|0)>=(0);
  if (!($34)) {
   break;
  }
  $35 = $size;
  $36 = $35 >>> 7;
  $size = $36;
  $37 = $size;
  $38 = $37 & 127;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = $i;
  $42 = (($bytes) + ($41)|0);
  HEAP8[$42>>0] = $40;
  $43 = $i;
  $44 = (($43) + -1)|0;
  $i = $44;
 }
 $45 = $2;
 $46 = ((($3)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) - 1)|0;
 $49 = (__ZN14AP4_ByteStream5WriteEPKvj($45,$bytes,$48)|0);
 $result = $49;
 $50 = $result;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $result;
  $0 = $52;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 } else {
  $53 = HEAP32[$3>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $2;
  (FUNCTION_TABLE_iii[$55 & 2047]($3,$56)|0);
  $57 = $result;
  $0 = $57;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZN14AP4_Expandable7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 16|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_snprintf($name,64,44804,$vararg_buffer)|0);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN14AP4_Expandable13GetHeaderSizeEv($2)|0);
 $10 = (__ZN14AP4_Expandable7GetSizeEv($2)|0);
 FUNCTION_TABLE_viiiii[$8 & 2047]($5,$name,$9,$10,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 2047]($11);
 STACKTOP = sp;return 0;
}
function __ZN14AP4_ExpandableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(647,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN11AP4_UrlAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1128,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN11AP4_UrlAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $str_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1970433056,$8,$9,$10);
 $11 = 11428;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(860,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $5 = $42;
  $6 = $43;
 } else {
  $15 = ((($7)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 1;
  $18 = ($17|0)==(0);
  if (!($18)) {
   STACKTOP = sp;return;
  }
  $19 = $1;
  $20 = (($19) - 12)|0;
  $str_size = $20;
  $21 = $str_size;
  $22 = ($21>>>0)>(0);
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $23 = $str_size;
  __THREW__ = 0;
  $24 = (invoke_ii(867,($23|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $str = $24;
   $27 = $4;
   $28 = $str;
   $29 = $str_size;
   __THREW__ = 0;
   (invoke_iiii(851,($27|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    $32 = $str_size;
    $33 = (($32) - 1)|0;
    $34 = $str;
    $35 = (($34) + ($33)|0);
    HEAP8[$35>>0] = 0;
    $36 = ((($7)) + 36|0);
    $37 = $str;
    __THREW__ = 0;
    (invoke_iii(862,($36|0),($37|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     $40 = $str;
     $41 = ($40|0)==(0|0);
     if ($41) {
      STACKTOP = sp;return;
     }
     __ZdaPv($40);
     STACKTOP = sp;return;
    }
   }
  }
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $5 = $44;
  $6 = $45;
  __THREW__ = 0;
  invoke_vi(864,($12|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   $52 = ___cxa_find_matching_catch(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $52 = ___cxa_find_matching_catch(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 } else {
  $50 = $5;
  $51 = $6;
  ___resumeException($50|0);
  // unreachable;
 }
}
function __ZN11AP4_UrlAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $8 = ((($3)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(12);
 L5: do {
  if ($10) {
   $11 = $2;
   $12 = ((($3)) + 36|0);
   $13 = (__ZNK10AP4_String8GetCharsEv($12)|0);
   $14 = ((($3)) + 36|0);
   $15 = (__ZNK10AP4_String9GetLengthEv($14)|0);
   $16 = (($15) + 1)|0;
   $17 = (__ZN14AP4_ByteStream5WriteEPKvj($11,$13,$16)|0);
   $result = $17;
   $18 = $result;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $result;
    $0 = $20;
    $32 = $0;
    STACKTOP = sp;return ($32|0);
   }
   $21 = ((($3)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($3)) + 36|0);
   $24 = (__ZNK10AP4_String9GetLengthEv($23)|0);
   $25 = (12 + ($24))|0;
   $26 = (($25) + 1)|0;
   $27 = (($22) - ($26))|0;
   $padding = $27;
   while(1) {
    $28 = $padding;
    $29 = (($28) + -1)|0;
    $padding = $29;
    $30 = ($28|0)!=(0);
    if (!($30)) {
     break L5;
    }
    $31 = $2;
    (__ZN14AP4_ByteStream9WriteUI08Eh($31,0)|0);
   }
  }
 } while(0);
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function __ZN11AP4_UrlAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 if ($6) {
  FUNCTION_TABLE_viiii[$10 & 2047]($7,44825,44834,0);
  STACKTOP = sp;return 0;
 } else {
  $11 = ((($2)) + 36|0);
  $12 = (__ZNK10AP4_String8GetCharsEv($11)|0);
  FUNCTION_TABLE_viiii[$10 & 2047]($7,44825,$12,0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN11AP4_UrlAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(650,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN11AP4_UrlAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11428;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __Z19AP4_BytesToDoubleBEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d_value = 0, $i_value = 0, $v_value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i_value = sp;
 $0 = $bytes;
 $1 = $0;
 $2 = (__Z19AP4_BytesToUInt64BEPKh($1)|0);
 $3 = tempRet0;
 $4 = $i_value;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $v_value = $i_value;
 $8 = $v_value;
 $d_value = $8;
 $9 = $d_value;
 $10 = +HEAPF64[$9>>3];
 STACKTOP = sp;return (+$10);
}
function __Z19AP4_BytesToUInt64BEPKh($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,56)|0);
 $5 = tempRet0;
 $6 = $0;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (_bitshift64Shl(($9|0),0,48)|0);
 $11 = tempRet0;
 $12 = $4 | $10;
 $13 = $5 | $11;
 $14 = $0;
 $15 = ((($14)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (_bitshift64Shl(($17|0),0,40)|0);
 $19 = tempRet0;
 $20 = $12 | $18;
 $21 = $13 | $19;
 $22 = $0;
 $23 = ((($22)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $21 | $25;
 $27 = $0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (_bitshift64Shl(($30|0),0,24)|0);
 $32 = tempRet0;
 $33 = $20 | $31;
 $34 = $26 | $32;
 $35 = $0;
 $36 = ((($35)) + 5|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = (_bitshift64Shl(($38|0),0,16)|0);
 $40 = tempRet0;
 $41 = $33 | $39;
 $42 = $34 | $40;
 $43 = $0;
 $44 = ((($43)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = (_bitshift64Shl(($46|0),0,8)|0);
 $48 = tempRet0;
 $49 = $41 | $47;
 $50 = $42 | $48;
 $51 = $0;
 $52 = ((($51)) + 7|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $49 | $54;
 tempRet0 = ($50);
 STACKTOP = sp;return ($55|0);
}
function __Z21AP4_BytesFromDoubleBEPhd($bytes,$value) {
 $bytes = $bytes|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i_value = 0, $v_value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $bytes;
 HEAPF64[$1>>3] = $value;
 $v_value = $1;
 $2 = $v_value;
 $i_value = $2;
 $3 = $0;
 $4 = $i_value;
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 __Z21AP4_BytesFromUInt64BEPhy($3,$7,$10);
 STACKTOP = sp;return;
}
function __Z21AP4_BytesFromUInt64BEPhy($bytes,$0,$1) {
 $bytes = $bytes|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $bytes;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_bitshift64Lshr(($10|0),($13|0),56)|0);
 $15 = tempRet0;
 $16 = $14 & 255;
 $17 = $16&255;
 $18 = $2;
 HEAP8[$18>>0] = $17;
 $19 = $3;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Lshr(($21|0),($24|0),48)|0);
 $26 = tempRet0;
 $27 = $25 & 255;
 $28 = $27&255;
 $29 = $2;
 $30 = ((($29)) + 1|0);
 HEAP8[$30>>0] = $28;
 $31 = $3;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_bitshift64Lshr(($33|0),($36|0),40)|0);
 $38 = tempRet0;
 $39 = $37 & 255;
 $40 = $39&255;
 $41 = $2;
 $42 = ((($41)) + 2|0);
 HEAP8[$42>>0] = $40;
 $43 = $3;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 255;
 $50 = $49&255;
 $51 = $2;
 $52 = ((($51)) + 3|0);
 HEAP8[$52>>0] = $50;
 $53 = $3;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_bitshift64Lshr(($55|0),($58|0),24)|0);
 $60 = tempRet0;
 $61 = $59 & 255;
 $62 = $61&255;
 $63 = $2;
 $64 = ((($63)) + 4|0);
 HEAP8[$64>>0] = $62;
 $65 = $3;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (_bitshift64Lshr(($67|0),($70|0),16)|0);
 $72 = tempRet0;
 $73 = $71 & 255;
 $74 = $73&255;
 $75 = $2;
 $76 = ((($75)) + 5|0);
 HEAP8[$76>>0] = $74;
 $77 = $3;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (_bitshift64Lshr(($79|0),($82|0),8)|0);
 $84 = tempRet0;
 $85 = $83 & 255;
 $86 = $85&255;
 $87 = $2;
 $88 = ((($87)) + 6|0);
 HEAP8[$88>>0] = $86;
 $89 = $3;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + 4)|0;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = $91 & 255;
 $96 = $95&255;
 $97 = $2;
 $98 = ((($97)) + 7|0);
 HEAP8[$98>>0] = $96;
 STACKTOP = sp;return;
}
function __Z23AP4_DurationMsFromUnitsyj($0,$1,$units_per_second) {
 $0 = $0|0;
 $1 = $1|0;
 $units_per_second = $units_per_second|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $units_per_second;
 $9 = $4;
 $10 = ($9|0)==(0);
 if ($10) {
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $11 = $3;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (+($13>>>0)) + (4294967296.0*(+($16>>>0)));
  $18 = $17 * 1000.0;
  $19 = $4;
  $20 = (+($19>>>0));
  $21 = $18 / $20;
  $22 = (~~(($21))>>>0);
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __Z15AP4_ConvertTimeyjj($0,$1,$from_time_scale,$to_time_scale) {
 $0 = $0|0;
 $1 = $1|0;
 $from_time_scale = $from_time_scale|0;
 $to_time_scale = $to_time_scale|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ratio = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $6 = $3;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $4 = $from_time_scale;
 $5 = $to_time_scale;
 $10 = $4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $2;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  $37 = $2;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  tempRet0 = ($42);
  STACKTOP = sp;return ($39|0);
 } else {
  $16 = $5;
  $17 = (+($16>>>0));
  $18 = $4;
  $19 = (+($18>>>0));
  $20 = $17 / $19;
  $ratio = $20;
  $21 = $3;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($23>>>0)) + (4294967296.0*(+($26>>>0)));
  $28 = $ratio;
  $29 = $27 * $28;
  $30 = 0.5 + $29;
  $31 = (~~$30)>>>0;
  $32 = +Math_abs($30) >= 1.0 ? $30 > 0.0 ? (~~+Math_min(+Math_floor($30 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($30 - +(~~$30 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $33 = $2;
  $34 = $33;
  HEAP32[$34>>2] = $31;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $32;
  $37 = $2;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  tempRet0 = ($42);
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __Z19AP4_FormatFourCharsPcj($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $value;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >>> 16;
 $9 = $8 & 255;
 $10 = $9&255;
 $11 = $0;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >>> 8;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $0;
 $18 = ((($17)) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $0;
 $23 = ((($22)) + 3|0);
 HEAP8[$23>>0] = $21;
 $24 = $0;
 $25 = ((($24)) + 4|0);
 HEAP8[$25>>0] = 0;
 STACKTOP = sp;return;
}
function __Z28AP4_FormatFourCharsPrintablePcj($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __Z19AP4_FormatFourCharsPcj($2,$3);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(4);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)<(32);
  if ($11) {
   label = 5;
  } else {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)>=(127);
   if ($17) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $18 = $i;
   $19 = $0;
   $20 = (($19) + ($18)|0);
   HEAP8[$20>>0] = 46;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function __Z13AP4_NibbleHexj($nibble) {
 $nibble = $nibble|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nibble;
 $2 = $1;
 $3 = ($2>>>0)<(10);
 $4 = $1;
 do {
  if ($3) {
   $5 = (48 + ($4))|0;
   $6 = $5&255;
   $0 = $6;
  } else {
   $7 = ($4>>>0)<(16);
   if ($7) {
    $8 = $1;
    $9 = (($8) - 10)|0;
    $10 = (65 + ($9))|0;
    $11 = $10&255;
    $0 = $11;
    break;
   } else {
    $0 = 32;
    break;
   }
  }
 } while(0);
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __ZN29AP4_MarlinIpmpAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom($this,$type,$size,$stream,$0,$atom) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $0 = $0|0;
 $atom = $atom|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $type;
 $3 = $size;
 $4 = $stream;
 $5 = $0;
 $6 = $atom;
 $9 = $1;
 $10 = $2;
 $switch$split2D = ($10|0)<(1937013104);
 L1: do {
  if ($switch$split2D) {
   switch ($10|0) {
   case 1935766642:  {
    break;
   }
   default: {
    label = 6;
    break L1;
   }
   }
   $11 = $2;
   $12 = $3;
   $13 = $4;
   $14 = ((($9)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($11,$12,0,0,0,$13,$15)|0);
   $17 = $6;
   HEAP32[$17>>2] = $16;
  } else {
   switch ($10|0) {
   case 1937013104:  {
    break;
   }
   default: {
    label = 6;
    break L1;
   }
   }
   $18 = (__Znwj(48)|0);
   $19 = $2;
   $20 = $3;
   $21 = $4;
   __THREW__ = 0;
   invoke_viiiii(914,($18|0),($19|0),($20|0),0,($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $25 = ___cxa_find_matching_catch()|0;
    $26 = tempRet0;
    $7 = $25;
    $8 = $26;
    __ZdlPv($18);
    $27 = $7;
    $28 = $8;
    ___resumeException($27|0);
    // unreachable;
   } else {
    $24 = $6;
    HEAP32[$24>>2] = $18;
    break;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $29 = $6;
  HEAP32[$29>>2] = 0;
 }
 $30 = $6;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 $33 = $32 ? 0 : -1;
 STACKTOP = sp;return ($33|0);
}
function __ZN12AP4_MkidAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1129,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_MkidAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $available = 0, $content_id = 0, $content_id_size = 0, $entry_count = 0, $entry_size = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 16|0;
 $entry_size = sp + 8|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1835755876,$8,$9,$10);
 $11 = 11528;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1130,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $5 = $24;
  $6 = $25;
 } else {
  $15 = $1;
  $16 = (($15) - 16)|0;
  $available = $16;
  HEAP32[$entry_count>>2] = 0;
  $17 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($17|0),($entry_count|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  L4: do {
   if (!($19)) {
    $20 = $available;
    $21 = HEAP32[$entry_count>>2]|0;
    $22 = ($21*20)|0;
    $23 = ($20>>>0)<($22>>>0);
    if ($23) {
     STACKTOP = sp;return;
    }
    $30 = ((($7)) + 36|0);
    $31 = HEAP32[$entry_count>>2]|0;
    __THREW__ = 0;
    (invoke_iii(1131,($30|0),($31|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $i = 0;
     while(1) {
      $34 = $i;
      $35 = HEAP32[$entry_count>>2]|0;
      $36 = ($34>>>0)<($35>>>0);
      $37 = $available;
      $38 = ($37>>>0)>=(20);
      $39 = $36 ? $38 : 0;
      if (!($39)) {
       label = 21;
       break;
      }
      $40 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($40|0),($entry_size|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break L4;
      }
      $43 = $available;
      $44 = HEAP32[$entry_size>>2]|0;
      $45 = (4 + ($44))|0;
      $46 = ($43>>>0)<($45>>>0);
      if ($46) {
       label = 21;
       break;
      }
      $47 = HEAP32[$entry_size>>2]|0;
      $48 = ($47>>>0)<(16);
      if (!($48)) {
       $49 = HEAP32[$entry_size>>2]|0;
       $50 = (4 + ($49))|0;
       $51 = $available;
       $52 = (($51) - ($50))|0;
       $available = $52;
       $53 = $4;
       $54 = ((($7)) + 36|0);
       $55 = $i;
       __THREW__ = 0;
       $56 = (invoke_iii(1132,($54|0),($55|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break L4;
       }
       __THREW__ = 0;
       (invoke_iiii(851,($53|0),($56|0),16)|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break L4;
       }
       $61 = HEAP32[$entry_size>>2]|0;
       $62 = (($61) - 16)|0;
       $content_id_size = $62;
       $63 = $content_id_size;
       __THREW__ = 0;
       $64 = (invoke_ii(867,($63|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        break L4;
       }
       $content_id = $64;
       $67 = $4;
       $68 = $content_id;
       $69 = $content_id_size;
       __THREW__ = 0;
       (invoke_iiii(851,($67|0),($68|0),($69|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break L4;
       }
       $72 = ((($7)) + 36|0);
       $73 = $i;
       __THREW__ = 0;
       $74 = (invoke_iii(1132,($72|0),($73|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ((($74)) + 16|0);
       $78 = $content_id;
       $79 = $content_id_size;
       __THREW__ = 0;
       invoke_viii(948,($77|0),($78|0),($79|0));
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        break L4;
       }
       $82 = $content_id;
       $83 = ($82|0)==(0|0);
       if (!($83)) {
        __ZdaPv($82);
       }
      }
      $84 = $i;
      $85 = (($84) + 1)|0;
      $i = $85;
     }
     if ((label|0) == 21) {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $26 = ___cxa_find_matching_catch()|0;
  $27 = tempRet0;
  $5 = $26;
  $6 = $27;
  __THREW__ = 0;
  invoke_vi(663,($12|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $90 = ___cxa_find_matching_catch(0|0)|0;
   $91 = tempRet0;
   ___clang_call_terminate($90);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if ($87) {
  $90 = ___cxa_find_matching_catch(0|0)|0;
  $91 = tempRet0;
  ___clang_call_terminate($90);
  // unreachable;
 } else {
  $88 = $5;
  $89 = $6;
  ___resumeException($88|0);
  // unreachable;
 }
}
function __ZN12AP4_MkidAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = (__ZNK9AP4_ArrayIN12AP4_MkidAtom5EntryEE9ItemCountEv($5)|0);
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($3)) + 36|0);
  $13 = (__ZNK9AP4_ArrayIN12AP4_MkidAtom5EntryEE9ItemCountEv($12)|0);
  $14 = ($11>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = ((($3)) + 36|0);
  $17 = $i;
  $18 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($16,$17)|0);
  $19 = ((($18)) + 16|0);
  $20 = (__ZNK10AP4_String9GetLengthEv($19)|0);
  $21 = (16 + ($20))|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($15,$21)|0);
  $22 = $2;
  $23 = ((($3)) + 36|0);
  $24 = $i;
  $25 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($23,$24)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($22,$25,16)|0);
  $26 = $2;
  $27 = ((($3)) + 36|0);
  $28 = $i;
  $29 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($27,$28)|0);
  $30 = ((($29)) + 16|0);
  $31 = (__ZNK10AP4_String8GetCharsEv($30)|0);
  $32 = ((($3)) + 36|0);
  $33 = $i;
  $34 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($32,$33)|0);
  $35 = ((($34)) + 16|0);
  $36 = (__ZNK10AP4_String9GetLengthEv($35)|0);
  (__ZN14AP4_ByteStream5WriteEPKvj($26,$31,$36)|0);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $result;
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function __ZN12AP4_MkidAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayIN12AP4_MkidAtom5EntryEE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ((($2)) + 36|0);
  $11 = (__ZNK9AP4_ArrayIN12AP4_MkidAtom5EntryEE9ItemCountEv($10)|0);
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($17,$18)|0);
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,44897,$19,16,0);
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($2)) + 36|0);
  $25 = $i;
  $26 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($24,$25)|0);
  $27 = ((($26)) + 16|0);
  $28 = (__ZNK10AP4_String8GetCharsEv($27)|0);
  FUNCTION_TABLE_viiii[$23 & 2047]($20,44901,$28,0);
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 STACKTOP = sp;return 0;
}
function __GLOBAL__sub_I_Ap4Marlin_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_851();
 return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11628;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11628;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = ((($3)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + (($17*24)|0)|0);
   __ZN12AP4_MkidAtom5EntryD2Ev($20);
   $21 = $i;
   $22 = (($21) + 1)|0;
   $i = $22;
  }
  $23 = $2;
  $24 = ((($3)) + 8|0);
  HEAP32[$24>>2] = $23;
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $25 = (__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE14EnsureCapacityEj($3,$12)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $29 = ((($3)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $i1 = $30;
 while(1) {
  $31 = $i1;
  $32 = $2;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $i1;
  $35 = ((($3)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + (($34*24)|0)|0);
  ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;HEAP32[$37+16>>2]=0|0;HEAP32[$37+20>>2]=0|0;
  __ZN12AP4_MkidAtom5EntryC2Ev($37);
  $38 = $i1;
  $39 = (($38) + 1)|0;
  $i1 = $39;
 }
 $40 = $2;
 $41 = ((($3)) + 8|0);
 HEAP32[$41>>2] = $40;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*24)|0)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN12AP4_MkidAtom5EntryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN10AP4_StringC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_MkidAtom5EntryC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$4+12>>2]|0;
 $5 = ((($3)) + 16|0);
 $6 = $2;
 $7 = ((($6)) + 16|0);
 __ZN10AP4_StringC2ERKS_($5,$7);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $2;
 $9 = ($8*24)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*24)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*24)|0)|0);
    __ZN12AP4_MkidAtom5EntryC2ERKS0_($25,$29);
    $30 = $i;
    $31 = ((($3)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + (($30*24)|0)|0);
    __ZN12AP4_MkidAtom5EntryD2Ev($33);
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
   $36 = ((($3)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   __ZdlPv($37);
  }
 }
 $38 = $new_items;
 $39 = ((($3)) + 12|0);
 HEAP32[$39>>2] = $38;
 $40 = $2;
 $41 = ((($3)) + 4|0);
 HEAP32[$41>>2] = $40;
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZN12AP4_MkidAtom5EntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZN10AP4_StringD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + (($6*24)|0)|0);
  __ZN12AP4_MkidAtom5EntryD2Ev($9);
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = ((($1)) + 8|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(663,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MkidAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(654,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_MkidAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11528;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(663,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN29AP4_MarlinIpmpAtomTypeHandlerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(658,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN29AP4_MarlinIpmpAtomTypeHandlerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15AP4_AtomFactory11TypeHandlerD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN25AP4_MarlinIpmpAtomFactoryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN22AP4_DefaultAtomFactoryD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN25AP4_MarlinIpmpAtomFactoryD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(661,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN29AP4_MarlinIpmpAtomTypeHandlerC2EP15AP4_AtomFactory($this,$atom_factory) {
 $this = $this|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $atom_factory;
 $2 = $0;
 __ZN15AP4_AtomFactory11TypeHandlerC2Ev($2);
 $3 = 11588;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN25AP4_MarlinIpmpAtomFactoryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN22AP4_DefaultAtomFactoryC2Ev($3);
 $4 = 11608;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 $5 = (invoke_ii(883,8)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   label = 5;
  } else {
   __THREW__ = 0;
   invoke_vii(1133,($5|0),($3|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $14 = ___cxa_find_matching_catch()|0;
    $15 = tempRet0;
    $1 = $14;
    $2 = $15;
    __ZdlPv($5);
    break;
   }
   __THREW__ = 0;
   (invoke_iii(1134,($3|0),($5|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 5;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $1 = $12;
  $2 = $13;
 }
 __THREW__ = 0;
 invoke_vi(127,($3|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
}
function ___cxx_global_var_init_851() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN25AP4_MarlinIpmpAtomFactoryC2Ev(11480);
 (___cxa_atexit((661|0),(11480|0),(___dso_handle|0))|0);
 return;
}
function __ZN10AP4_StringC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 44975;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10AP4_StringC2EPKc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$2>>2] = 44975;
  $5 = ((($2)) + 4|0);
  HEAP32[$5>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $6 = $1;
  $7 = (_strlen($6)|0);
  $8 = ((($2)) + 4|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($2)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  $12 = (__Znaj($11)|0);
  HEAP32[$2>>2] = $12;
  $13 = HEAP32[$2>>2]|0;
  $14 = $1;
  $15 = ((($2)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  _memcpy(($13|0),($14|0),($17|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN10AP4_StringC2EPKcj($this,$s,$size) {
 $this = $this|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $size;
 $3 = $0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $6 = (__Znaj($5)|0);
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 $9 = $2;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($10) + ($9)|0);
 HEAP8[$11>>0] = 0;
 $12 = HEAP32[$3>>2]|0;
 $13 = $1;
 $14 = $2;
 _memcpy(($12|0),($13|0),($14|0))|0;
 STACKTOP = sp;return;
}
function __ZN10AP4_StringC2ERKS_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = (__Znaj($9)|0);
 HEAP32[$2>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 _memcpy(($11|0),($13|0),($16|0))|0;
 STACKTOP = sp;return;
}
function __ZN10AP4_StringC2Ej($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (__Znaj($7)|0);
 HEAP32[$2>>2] = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $1;
  $11 = (($10) + 1)|0;
  $12 = ($9>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) + ($13)|0);
  HEAP8[$15>>0] = 0;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function __ZN10AP4_StringD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(44975|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZdaPv($4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN10AP4_StringaSEPKc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $10 = $1;
  $11 = $1;
  $12 = (_strlen($11)|0);
  __ZN10AP4_String6AssignEPKcj($2,$10,$12);
  STACKTOP = sp;return ($2|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)!=(44975|0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   __ZdaPv($7);
  }
 }
 HEAP32[$2>>2] = 44975;
 $9 = ((($2)) + 4|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10AP4_String6AssignEPKcj($this,$s,$size) {
 $this = $this|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $size;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(44975|0);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   __ZdaPv($6);
  }
 }
 $8 = $2;
 $9 = ((($3)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = (__Znaj($12)|0);
 HEAP32[$3>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = $1;
 $16 = ((($3)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 _memcpy(($14|0),($15|0),($17|0))|0;
 $18 = $2;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_FileC2ER14AP4_ByteStreamR15AP4_AtomFactoryb($this,$stream,$atom_factory,$moov_only) {
 $this = $this|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 $moov_only = $moov_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $atom = 0, $keep_parsing = 0, $stream_position = 0, $switch$split2D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom = sp + 16|0;
 $stream_position = sp;
 $0 = $this;
 $1 = $stream;
 $2 = $atom_factory;
 $6 = $moov_only&1;
 $3 = $6;
 $7 = $0;
 __ZN14AP4_AtomParentC2Ev($7);
 $8 = 11644;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($7)) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($7)) + 28|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($7)) + 32|0);
 HEAP8[$12>>0] = 1;
 $keep_parsing = 1;
 L1: while(1) {
  $13 = $keep_parsing;
  $14 = $13&1;
  if (!($14)) {
   label = 23;
   break;
  }
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_iii($18|0,($15|0),($stream_position|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   label = 10;
   break;
  }
  $22 = ($19|0)==(0);
  if (!($22)) {
   label = 23;
   break;
  }
  $23 = $2;
  $24 = $1;
  __THREW__ = 0;
  $25 = (invoke_iiii(1135,($23|0),($24|0),($atom|0))|0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 10;
   break;
  }
  $28 = ($25|0)==(0);
  if (!($28)) {
   label = 23;
   break;
  }
  $29 = HEAP32[$7>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$atom>>2]|0;
  __THREW__ = 0;
  (invoke_iiii($31|0,($7|0),($32|0),-1)|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   label = 10;
   break;
  }
  $35 = HEAP32[$atom>>2]|0;
  __THREW__ = 0;
  $36 = (invoke_ii(1136,($35|0))|0);
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 10;
   break;
  }
  $switch$split2D = ($36|0)<(1835295092);
  if ($switch$split2D) {
   switch ($36|0) {
   case 1718909296:  {
    break;
   }
   default: {
    continue L1;
   }
   }
   $56 = HEAP32[$atom>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $60 = 0;
   } else {
    $58 = (___dynamic_cast($56,2392,1904,0)|0);
    $60 = $58;
   }
   $59 = ((($7)) + 24|0);
   HEAP32[$59>>2] = $60;
   continue;
  }
  $switch$split82D = ($36|0)<(1836019574);
  if ($switch$split82D) {
   switch ($36|0) {
   case 1835295092:  {
    break;
   }
   default: {
    continue L1;
   }
   }
   $61 = ((($7)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if (!($63)) {
    continue;
   }
   $64 = ((($7)) + 32|0);
   HEAP8[$64>>0] = 0;
   continue;
  }
  switch ($36|0) {
  case 1836019574:  {
   break;
  }
  default: {
   continue L1;
  }
  }
  __THREW__ = 0;
  $41 = (invoke_ii(883,32)|0);
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   label = 10;
   break;
  }
  $44 = HEAP32[$atom>>2]|0;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $48 = 0;
  } else {
   $46 = (___dynamic_cast($44,2392,912,0)|0);
   $48 = $46;
  }
  $47 = $1;
  __THREW__ = 0;
  invoke_viiii(1137,($41|0),($48|0),($47|0),0);
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   label = 17;
   break;
  }
  $51 = ((($7)) + 20|0);
  HEAP32[$51>>2] = $41;
  $52 = $3;
  $53 = $52&1;
  if (!($53)) {
   continue;
  }
  $keep_parsing = 0;
 }
 if ((label|0) == 10) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $4 = $39;
  $5 = $40;
 }
 else if ((label|0) == 17) {
  $54 = ___cxa_find_matching_catch()|0;
  $55 = tempRet0;
  $4 = $54;
  $5 = $55;
  __ZdlPv($41);
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(716,($7|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $69 = ___cxa_find_matching_catch(0|0)|0;
  $70 = tempRet0;
  ___clang_call_terminate($69);
  // unreachable;
 } else {
  $67 = $4;
  $68 = $5;
  ___resumeException($67|0);
  // unreachable;
 }
}
function __ZN8AP4_FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11644;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  label = 3;
 } else {
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_vi($10|0,($6|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
  } else {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $13 = ((($3)) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __ZN14AP4_AtomParentD2Ev($3);
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_vi(1138,($14|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    $1 = $20;
    $2 = $21;
    __ZdlPv($14);
    break;
   }
   __ZdlPv($14);
   __ZN14AP4_AtomParentD2Ev($3);
   STACKTOP = sp;return;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(716,($3|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $1;
  $25 = $2;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZN8AP4_FileD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(665,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_File7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = ((($5)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  (__ZN9AP4_Movie7InspectER17AP4_AtomInspector($10,$11)|0);
 }
 $12 = ((($5)) + 4|0);
 $13 = $1;
 __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($2,$13);
 __THREW__ = 0;
 (invoke_iii(881,($12|0),($2|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZN21AP4_AtomListInspectorD2Ev($2);
  STACKTOP = sp;return 0;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __THREW__ = 0;
 invoke_vi(89,($2|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN14AP4_AtomParent14OnChildRemovedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN14AP4_AtomParent12OnChildAddedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN14AP4_AtomParent14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN12AP4_SidxAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(80)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1139,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SidxAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $earliest_presentation_time = 0, $first_offset = 0, $i = 0, $reference_count = 0, $reserved = 0;
 var $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $earliest_presentation_time = sp + 12|0;
 $first_offset = sp + 8|0;
 $reserved = sp + 42|0;
 $reference_count = sp + 40|0;
 $value = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1936286840,$8,$9,$10);
 $11 = 11700;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 64|0);
 __THREW__ = 0;
 invoke_vi(1140,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $5 = $44;
  $6 = $45;
 } else {
  $15 = $4;
  $16 = ((($7)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($16|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  L4: do {
   if (!($18)) {
    $19 = $4;
    $20 = ((($7)) + 40|0);
    __THREW__ = 0;
    (invoke_iii(854,($19|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = $2;
     $24 = $23&255;
     $25 = ($24|0)==(0);
     if ($25) {
      HEAP32[$earliest_presentation_time>>2] = 0;
      HEAP32[$first_offset>>2] = 0;
      $26 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($26|0),($earliest_presentation_time|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break;
      }
      $29 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($29|0),($first_offset|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       break;
      }
      $32 = HEAP32[$earliest_presentation_time>>2]|0;
      $33 = ((($7)) + 48|0);
      $34 = $33;
      $35 = $34;
      HEAP32[$35>>2] = $32;
      $36 = (($34) + 4)|0;
      $37 = $36;
      HEAP32[$37>>2] = 0;
      $38 = HEAP32[$first_offset>>2]|0;
      $39 = ((($7)) + 56|0);
      $40 = $39;
      $41 = $40;
      HEAP32[$41>>2] = $38;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = 0;
     } else {
      $50 = $4;
      $51 = ((($7)) + 48|0);
      __THREW__ = 0;
      (invoke_iii(857,($50|0),($51|0))|0);
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       break;
      }
      $54 = $4;
      $55 = ((($7)) + 56|0);
      __THREW__ = 0;
      (invoke_iii(857,($54|0),($55|0))|0);
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if ($57) {
       break;
      }
     }
     $58 = $4;
     __THREW__ = 0;
     (invoke_iii(866,($58|0),($reserved|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if (!($60)) {
      HEAP16[$reference_count>>1] = 0;
      $61 = $4;
      __THREW__ = 0;
      (invoke_iii(866,($61|0),($reference_count|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if (!($63)) {
       $64 = $1;
       $65 = $2;
       $66 = $65&255;
       $67 = ($66|0)==(0);
       $68 = $67 ? 8 : 16;
       $69 = (20 + ($68))|0;
       $70 = (($69) + 2)|0;
       $71 = (($70) + 2)|0;
       $72 = HEAP16[$reference_count>>1]|0;
       $73 = $72&65535;
       $74 = ($73*12)|0;
       $75 = (($71) + ($74))|0;
       $76 = ($64>>>0)<($75>>>0);
       if ($76) {
        STACKTOP = sp;return;
       }
       $77 = ((($7)) + 64|0);
       $78 = HEAP16[$reference_count>>1]|0;
       $79 = $78&65535;
       __THREW__ = 0;
       (invoke_iii(1141,($77|0),($79|0))|0);
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if (!($81)) {
        $i = 0;
        while(1) {
         $82 = $i;
         $83 = HEAP16[$reference_count>>1]|0;
         $84 = $83&65535;
         $85 = ($82>>>0)<($84>>>0);
         if (!($85)) {
          break;
         }
         HEAP32[$value>>2] = 0;
         $86 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($86|0),($value|0))|0);
         $87 = __THREW__; __THREW__ = 0;
         $88 = $87&1;
         if ($88) {
          break L4;
         }
         $89 = HEAP32[$value>>2]|0;
         $90 = $89 & -2147483648;
         $91 = ($90|0)!=(0);
         $92 = $91 ? 1 : 0;
         $93 = $92&255;
         $94 = ((($7)) + 64|0);
         $95 = $i;
         __THREW__ = 0;
         $96 = (invoke_iii(1142,($94|0),($95|0))|0);
         $97 = __THREW__; __THREW__ = 0;
         $98 = $97&1;
         if ($98) {
          break L4;
         }
         HEAP8[$96>>0] = $93;
         $99 = HEAP32[$value>>2]|0;
         $100 = $99 & 2147483647;
         $101 = ((($7)) + 64|0);
         $102 = $i;
         __THREW__ = 0;
         $103 = (invoke_iii(1142,($101|0),($102|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          break L4;
         }
         $106 = ((($103)) + 4|0);
         HEAP32[$106>>2] = $100;
         $107 = $4;
         $108 = ((($7)) + 64|0);
         $109 = $i;
         __THREW__ = 0;
         $110 = (invoke_iii(1142,($108|0),($109|0))|0);
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if ($112) {
          break L4;
         }
         $113 = ((($110)) + 8|0);
         __THREW__ = 0;
         (invoke_iii(854,($107|0),($113|0))|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if ($115) {
          break L4;
         }
         $116 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($116|0),($value|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          break L4;
         }
         $119 = HEAP32[$value>>2]|0;
         $120 = $119 & -2147483648;
         $121 = ($120|0)!=(0);
         $122 = ((($7)) + 64|0);
         $123 = $i;
         __THREW__ = 0;
         $124 = (invoke_iii(1142,($122|0),($123|0))|0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          break L4;
         }
         $127 = ((($124)) + 12|0);
         $128 = $121&1;
         HEAP8[$127>>0] = $128;
         $129 = HEAP32[$value>>2]|0;
         $130 = $129 >>> 28;
         $131 = $130 & 7;
         $132 = $131&255;
         $133 = ((($7)) + 64|0);
         $134 = $i;
         __THREW__ = 0;
         $135 = (invoke_iii(1142,($133|0),($134|0))|0);
         $136 = __THREW__; __THREW__ = 0;
         $137 = $136&1;
         if ($137) {
          break L4;
         }
         $138 = ((($135)) + 13|0);
         HEAP8[$138>>0] = $132;
         $139 = HEAP32[$value>>2]|0;
         $140 = $139 & 268435455;
         $141 = ((($7)) + 64|0);
         $142 = $i;
         __THREW__ = 0;
         $143 = (invoke_iii(1142,($141|0),($142|0))|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          break L4;
         }
         $146 = ((($143)) + 16|0);
         HEAP32[$146>>2] = $140;
         $147 = $i;
         $148 = (($147) + 1)|0;
         $i = $148;
        }
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  } while(0);
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $5 = $46;
  $6 = $47;
  __THREW__ = 0;
  invoke_vi(675,($12|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $153 = ___cxa_find_matching_catch(0|0)|0;
   $154 = tempRet0;
   ___clang_call_terminate($153);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $149 = __THREW__; __THREW__ = 0;
 $150 = $149&1;
 if ($150) {
  $153 = ___cxa_find_matching_catch(0|0)|0;
  $154 = tempRet0;
  ___clang_call_terminate($153);
  // unreachable;
 } else {
  $151 = $5;
  $152 = $6;
  ___resumeException($151|0);
  // unreachable;
 }
}
function __ZN12AP4_SidxAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($6,$8)|0);
 $9 = ((($2)) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 $13 = $1;
 $14 = ((($2)) + 48|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 if ($12) {
  (__ZN14AP4_ByteStream9WriteUI32Ej($13,$17)|0);
  $21 = $1;
  $22 = ((($2)) + 56|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($21,$25)|0);
 } else {
  (__ZN14AP4_ByteStream9WriteUI64Ey($13,$17,$20)|0);
  $29 = $1;
  $30 = ((($2)) + 56|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI64Ey($29,$33,$36)|0);
 }
 $37 = $1;
 (__ZN14AP4_ByteStream9WriteUI16Et($37,0)|0);
 $38 = $1;
 $39 = ((($2)) + 64|0);
 $40 = (__ZNK9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE9ItemCountEv($39)|0);
 $41 = $40&65535;
 (__ZN14AP4_ByteStream9WriteUI16Et($38,$41)|0);
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = ((($2)) + 64|0);
  $44 = (__ZNK9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE9ItemCountEv($43)|0);
  $45 = ($42>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $1;
  $47 = ((($2)) + 64|0);
  $48 = $i;
  $49 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($47,$48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 << 31;
  $53 = ((($2)) + 64|0);
  $54 = $i;
  $55 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($53,$54)|0);
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $52 | $57;
  (__ZN14AP4_ByteStream9WriteUI32Ej($46,$58)|0);
  $59 = $1;
  $60 = ((($2)) + 64|0);
  $61 = $i;
  $62 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($60,$61)|0);
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  (__ZN14AP4_ByteStream9WriteUI32Ej($59,$64)|0);
  $65 = $1;
  $66 = ((($2)) + 64|0);
  $67 = $i;
  $68 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($66,$67)|0);
  $69 = ((($68)) + 12|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&1;
  $72 = $71 ? 1 : 0;
  $73 = $72 << 31;
  $74 = ((($2)) + 64|0);
  $75 = $i;
  $76 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($74,$75)|0);
  $77 = ((($76)) + 13|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 << 28;
  $81 = $73 | $80;
  $82 = ((($2)) + 64|0);
  $83 = $i;
  $84 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($82,$83)|0);
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $81 | $86;
  (__ZN14AP4_ByteStream9WriteUI32Ej($65,$87)|0);
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SidxAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $header = 0, $i = 0, $reference_count = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 304|0;
 $value = sp + 48|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45001,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,45014,$14,0,0);
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 48|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_viiiii[$18 & 2047]($15,45024,$22,$25,0);
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($2)) + 56|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_viiiii[$29 & 2047]($26,45051,$33,$36,0);
 $37 = $1;
 $38 = (__ZN17AP4_AtomInspector12GetVerbosityEv($37)|0);
 $39 = ($38>>>0)>=(1);
 if (!($39)) {
  STACKTOP = sp;return 0;
 }
 $40 = ((($2)) + 64|0);
 $41 = (__ZNK9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE9ItemCountEv($40)|0);
 $reference_count = $41;
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $reference_count;
  $44 = ($42>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  $45 = $i;
  HEAP32[$vararg_buffer>>2] = $45;
  (_snprintf($header,32,46183,$vararg_buffer)|0);
  $46 = ((($2)) + 64|0);
  $47 = $i;
  $48 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($46,$47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ((($2)) + 64|0);
  $52 = $i;
  $53 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($51,$52)|0);
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($2)) + 64|0);
  $57 = $i;
  $58 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($56,$57)|0);
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($2)) + 64|0);
  $62 = $i;
  $63 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($61,$62)|0);
  $64 = ((($63)) + 12|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&1;
  $67 = $66&1;
  $68 = ((($2)) + 64|0);
  $69 = $i;
  $70 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($68,$69)|0);
  $71 = ((($70)) + 13|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = ((($2)) + 64|0);
  $75 = $i;
  $76 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm($74,$75)|0);
  $77 = ((($76)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $50;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $55;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $60;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $67;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $73;
  $vararg_ptr8 = ((($vararg_buffer1)) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $78;
  (_snprintf($value,256,45064,$vararg_buffer1)|0);
  $79 = $1;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 32|0);
  $82 = HEAP32[$81>>2]|0;
  FUNCTION_TABLE_viiii[$82 & 2047]($79,$header,$value,0);
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11760;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11760;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($30*20)|0)|0);
  __ZN12AP4_SidxAtom9ReferenceC2Ev($33);
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN12AP4_SidxAtom9ReferenceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP8[$1>>0] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($1)) + 13|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ($8*20)|0;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + (($23*20)|0)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + (($26*20)|0)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$29+16>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(675,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SidxAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(671,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SidxAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11700;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 64|0);
 __THREW__ = 0;
 invoke_vi(675,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_SbgpAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1143,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SbgpAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $entry = 0, $entry_count = 0, $i = 0, $remains = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 16|0;
 $entry = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1935828848,$8,$9,$10);
 $11 = 11776;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($7)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1144,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $5 = $40;
  $6 = $41;
 } else {
  $17 = $1;
  $18 = HEAP32[$7>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_ii($20|0,($7|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  L4: do {
   if (!($23)) {
    $24 = (($17) - ($21))|0;
    $remains = $24;
    $25 = $4;
    $26 = ((($7)) + 36|0);
    __THREW__ = 0;
    (invoke_iii(854,($25|0),($26|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = $remains;
     $30 = (($29) - 4)|0;
     $remains = $30;
     $31 = $2;
     $32 = $31&255;
     $33 = ($32|0)>=(1);
     if ($33) {
      $34 = $4;
      $35 = ((($7)) + 40|0);
      __THREW__ = 0;
      (invoke_iii(854,($34|0),($35|0))|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
      $38 = $remains;
      $39 = (($38) - 4)|0;
      $remains = $39;
     }
     HEAP32[$entry_count>>2] = 0;
     $46 = $4;
     __THREW__ = 0;
     $47 = (invoke_iii(854,($46|0),($entry_count|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      $result = $47;
      $50 = $result;
      $51 = ($50|0)!=(0);
      if ($51) {
       STACKTOP = sp;return;
      }
      $52 = $remains;
      $53 = (($52) - 4)|0;
      $remains = $53;
      $54 = $remains;
      $55 = HEAP32[$entry_count>>2]|0;
      $56 = $55<<3;
      $57 = ($54>>>0)<($56>>>0);
      if ($57) {
       STACKTOP = sp;return;
      }
      $58 = ((($7)) + 44|0);
      $59 = HEAP32[$entry_count>>2]|0;
      __THREW__ = 0;
      (invoke_iii(1145,($58|0),($59|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if (!($61)) {
       $i = 0;
       while(1) {
        $62 = $i;
        $63 = HEAP32[$entry_count>>2]|0;
        $64 = ($62>>>0)<($63>>>0);
        if (!($64)) {
         break;
        }
        $65 = $4;
        __THREW__ = 0;
        (invoke_iii(854,($65|0),($entry|0))|0);
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         break L4;
        }
        $68 = $4;
        $69 = ((($entry)) + 4|0);
        __THREW__ = 0;
        (invoke_iii(854,($68|0),($69|0))|0);
        $70 = __THREW__; __THREW__ = 0;
        $71 = $70&1;
        if ($71) {
         break L4;
        }
        $72 = ((($7)) + 44|0);
        $73 = $i;
        __THREW__ = 0;
        $74 = (invoke_iii(1146,($72|0),($73|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         break L4;
        }
        ;HEAP32[$74>>2]=HEAP32[$entry>>2]|0;HEAP32[$74+4>>2]=HEAP32[$entry+4>>2]|0;
        $77 = $i;
        $78 = (($77) + 1)|0;
        $i = $78;
       }
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $5 = $42;
  $6 = $43;
  __THREW__ = 0;
  invoke_vi(681,($14|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $83 = ___cxa_find_matching_catch(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $83 = ___cxa_find_matching_catch(0|0)|0;
  $84 = tempRet0;
  ___clang_call_terminate($83);
  // unreachable;
 } else {
  $81 = $5;
  $82 = $6;
  ___resumeException($81|0);
  // unreachable;
 }
}
function __ZN12AP4_SbgpAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $11 = ((($3)) + 25|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>=(1);
 if ($14) {
  $15 = $2;
  $16 = ((($3)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 }
 $22 = $2;
 $23 = ((($3)) + 44|0);
 $24 = (__ZNK9AP4_ArrayIN12AP4_SbgpAtom5EntryEE9ItemCountEv($23)|0);
 $25 = (__ZN14AP4_ByteStream9WriteUI32Ej($22,$24)|0);
 $result = $25;
 $26 = $result;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $result;
  $0 = $28;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ((($3)) + 44|0);
  $31 = (__ZNK9AP4_ArrayIN12AP4_SbgpAtom5EntryEE9ItemCountEv($30)|0);
  $32 = ($29>>>0)<($31>>>0);
  if (!($32)) {
   label = 15;
   break;
  }
  $33 = $2;
  $34 = ((($3)) + 44|0);
  $35 = $i;
  $36 = (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm($34,$35)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZN14AP4_ByteStream9WriteUI32Ej($33,$37)|0);
  $result = $38;
  $39 = $result;
  $40 = ($39|0)!=(0);
  if ($40) {
   label = 11;
   break;
  }
  $42 = $2;
  $43 = ((($3)) + 44|0);
  $44 = $i;
  $45 = (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm($43,$44)|0);
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZN14AP4_ByteStream9WriteUI32Ej($42,$47)|0);
  $result = $48;
  $49 = $result;
  $50 = ($49|0)!=(0);
  if ($50) {
   label = 13;
   break;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 if ((label|0) == 11) {
  $41 = $result;
  $0 = $41;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 13) {
  $51 = $result;
  $0 = $51;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function __ZN12AP4_SbgpAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fourcc = 0, $header = 0, $i = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fourcc = sp + 192|0;
 $header = sp + 160|0;
 $value = sp + 32|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 __Z19AP4_FormatFourCharsPcj($fourcc,$4);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 2047]($5,45232,$fourcc,0);
 $9 = ((($2)) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)>=(1);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,45246,$18,0,0);
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 44|0);
 $24 = (__ZNK9AP4_ArrayIN12AP4_SbgpAtom5EntryEE9ItemCountEv($23)|0);
 FUNCTION_TABLE_viiiii[$22 & 2047]($19,45775,$24,0,0);
 $25 = $1;
 $26 = (__ZN17AP4_AtomInspector12GetVerbosityEv($25)|0);
 $27 = ($26>>>0)>=(2);
 if (!($27)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = ((($2)) + 44|0);
  $30 = (__ZNK9AP4_ArrayIN12AP4_SbgpAtom5EntryEE9ItemCountEv($29)|0);
  $31 = ($28>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  HEAP32[$vararg_buffer>>2] = $32;
  (_snprintf($header,32,45270,$vararg_buffer)|0);
  $33 = ((($2)) + 44|0);
  $34 = $i;
  $35 = (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm($33,$34)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($2)) + 44|0);
  $38 = $i;
  $39 = (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm($37,$38)|0);
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $36;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $41;
  (_snprintf($value,128,45281,$vararg_buffer1)|0);
  $42 = $1;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_viiii[$45 & 2047]($42,$header,$value,0);
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11836;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 11836;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE12SetItemCountEj($this,$item_count) {
 $this = $this|0;
 $item_count = $item_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $i1 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item_count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 $12 = $2;
 if ($11) {
  $i = $12;
  while(1) {
   $13 = $i;
   $14 = ((($3)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $2;
  $20 = ((($3)) + 8|0);
  HEAP32[$20>>2] = $19;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $21 = (__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE14EnsureCapacityEj($3,$12)|0);
 $result = $21;
 $22 = $result;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $result;
  $0 = $24;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $i1 = $26;
 while(1) {
  $27 = $i1;
  $28 = $2;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $i1;
  $31 = ((($3)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<3)|0);
  ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
  $34 = $i1;
  $35 = (($34) + 1)|0;
  $i1 = $35;
 }
 $36 = $2;
 $37 = ((($3)) + 8|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK9AP4_ArrayIN12AP4_SbgpAtom5EntryEE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<3)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<3)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(681,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SbgpAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(677,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SbgpAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11776;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(681,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN19AP4_AtomSampleTableC2EP17AP4_ContainerAtomR14AP4_ByteStream($this,$stbl,$sample_stream) {
 $this = $this|0;
 $stbl = $stbl|0;
 $sample_stream = $sample_stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stbl;
 $2 = $sample_stream;
 $5 = $0;
 __ZN15AP4_SampleTableC2Ev($5);
 $6 = 11852;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 $9 = $1;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 __THREW__ = 0;
 $14 = (invoke_iiii($13|0,($10|0),1937011555,0)|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ($14|0)==(0|0);
  if ($17) {
   $24 = 0;
  } else {
   $18 = (___dynamic_cast($14,2392,2144,0)|0);
   $24 = $18;
  }
  $23 = ((($5)) + 8|0);
  HEAP32[$23>>2] = $24;
  $25 = $1;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  __THREW__ = 0;
  $30 = (invoke_iiii($29|0,($26|0),1937007471,0)|0);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   $33 = ($30|0)==(0|0);
   if ($33) {
    $36 = 0;
   } else {
    $34 = (___dynamic_cast($30,2392,1920,0)|0);
    $36 = $34;
   }
   $35 = ((($5)) + 12|0);
   HEAP32[$35>>2] = $36;
   $37 = $1;
   $38 = ((($37)) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   __THREW__ = 0;
   $42 = (invoke_iiii($41|0,($38|0),1937011578,0)|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    $45 = ($42|0)==(0|0);
    if ($45) {
     $48 = 0;
    } else {
     $46 = (___dynamic_cast($42,2392,320,0)|0);
     $48 = $46;
    }
    $47 = ((($5)) + 16|0);
    HEAP32[$47>>2] = $48;
    $49 = $1;
    $50 = ((($49)) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 20|0);
    $53 = HEAP32[$52>>2]|0;
    __THREW__ = 0;
    $54 = (invoke_iiii($53|0,($50|0),1937013298,0)|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if (!($56)) {
     $57 = ($54|0)==(0|0);
     if ($57) {
      $60 = 0;
     } else {
      $58 = (___dynamic_cast($54,2392,1024,0)|0);
      $60 = $58;
     }
     $59 = ((($5)) + 20|0);
     HEAP32[$59>>2] = $60;
     $61 = $1;
     $62 = ((($61)) + 36|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($63)) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     __THREW__ = 0;
     $66 = (invoke_iiii($65|0,($62|0),1668576371,0)|0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if (!($68)) {
      $69 = ($66|0)==(0|0);
      if ($69) {
       $72 = 0;
      } else {
       $70 = (___dynamic_cast($66,2392,2024,0)|0);
       $72 = $70;
      }
      $71 = ((($5)) + 28|0);
      HEAP32[$71>>2] = $72;
      $73 = $1;
      $74 = ((($73)) + 36|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($75)) + 20|0);
      $77 = HEAP32[$76>>2]|0;
      __THREW__ = 0;
      $78 = (invoke_iiii($77|0,($74|0),1937011827,0)|0);
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if (!($80)) {
       $81 = ($78|0)==(0|0);
       if ($81) {
        $84 = 0;
       } else {
        $82 = (___dynamic_cast($78,2392,2512,0)|0);
        $84 = $82;
       }
       $83 = ((($5)) + 24|0);
       HEAP32[$83>>2] = $84;
       $85 = $1;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($87)) + 20|0);
       $89 = HEAP32[$88>>2]|0;
       __THREW__ = 0;
       $90 = (invoke_iiii($89|0,($86|0),1937011571,0)|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if (!($92)) {
        $93 = ($90|0)==(0|0);
        if ($93) {
         $96 = 0;
        } else {
         $94 = (___dynamic_cast($90,2392,1040,0)|0);
         $96 = $94;
        }
        $95 = ((($5)) + 36|0);
        HEAP32[$95>>2] = $96;
        $97 = $1;
        $98 = ((($97)) + 36|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ((($99)) + 20|0);
        $101 = HEAP32[$100>>2]|0;
        __THREW__ = 0;
        $102 = (invoke_iiii($101|0,($98|0),1937011556,0)|0);
        $103 = __THREW__; __THREW__ = 0;
        $104 = $103&1;
        if (!($104)) {
         $105 = ($102|0)==(0|0);
         if ($105) {
          $108 = 0;
         } else {
          $106 = (___dynamic_cast($102,2392,1544,0)|0);
          $108 = $106;
         }
         $107 = ((($5)) + 32|0);
         HEAP32[$107>>2] = $108;
         $109 = $1;
         $110 = ((($109)) + 36|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ((($111)) + 20|0);
         $113 = HEAP32[$112>>2]|0;
         __THREW__ = 0;
         $114 = (invoke_iiii($113|0,($110|0),1668232756,0)|0);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if (!($116)) {
          $117 = ($114|0)==(0|0);
          if ($117) {
           $120 = 0;
          } else {
           $118 = (___dynamic_cast($114,2392,432,0)|0);
           $120 = $118;
          }
          $119 = ((($5)) + 40|0);
          HEAP32[$119>>2] = $120;
          $121 = ((($5)) + 4|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = HEAP32[$122>>2]|0;
          $124 = ((($123)) + 8|0);
          $125 = HEAP32[$124>>2]|0;
          __THREW__ = 0;
          invoke_vi($125|0,($122|0));
          $126 = __THREW__; __THREW__ = 0;
          $127 = $126&1;
          if (!($127)) {
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $3 = $19;
 $4 = $20;
 __THREW__ = 0;
 invoke_vi(293,($5|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $130 = ___cxa_find_matching_catch(0|0)|0;
  $131 = tempRet0;
  ___clang_call_terminate($130);
  // unreachable;
 } else {
  $128 = $3;
  $129 = $4;
  ___resumeException($128|0);
  // unreachable;
 }
}
function __ZN19AP4_AtomSampleTableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 11852;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_vi($9|0,($6|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __ZN15AP4_SampleTableD2Ev($3);
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __THREW__ = 0;
 invoke_vi(293,($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN19AP4_AtomSampleTableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(683,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN19AP4_AtomSampleTable9GetSampleEjR10AP4_Sample($this,$index,$sample) {
 $this = $this|0;
 $index = $index|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $chunk = 0, $cts_offset = 0, $desc = 0, $dts = 0, $duration = 0, $i = 0, $offset = 0, $offset_32 = 0, $result = 0, $sample_size = 0, $size = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk = sp + 48|0;
 $skip = sp + 44|0;
 $desc = sp + 40|0;
 $offset = sp + 8|0;
 $offset_32 = sp + 36|0;
 $size = sp + 28|0;
 $cts_offset = sp + 24|0;
 $dts = sp;
 $duration = sp + 20|0;
 $sample_size = sp + 16|0;
 $1 = $this;
 $2 = $index;
 $3 = $sample;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($4)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $0 = -10;
   $180 = $0;
   STACKTOP = sp;return ($180|0);
  }
 }
 $11 = $2;
 $12 = (($11) + 1)|0;
 $2 = $12;
 $13 = ((($4)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = (FUNCTION_TABLE_iiiiii[$17 & 1023]($14,$18,$chunk,$skip,$desc)|0);
 $result = $19;
 $20 = $result;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $result;
  $0 = $22;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $23 = HEAP32[$skip>>2]|0;
 $24 = $2;
 $25 = ($23>>>0)>($24>>>0);
 if ($25) {
  $0 = -13;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $26 = ((($4)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($4)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$chunk>>2]|0;
  $32 = (__ZN12AP4_StcoAtom14GetChunkOffsetEjRj($30,$31,$offset_32)|0);
  $result = $32;
  $33 = HEAP32[$offset_32>>2]|0;
  $34 = $offset;
  $35 = $34;
  HEAP32[$35>>2] = $33;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = 0;
 } else {
  $38 = ((($4)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$chunk>>2]|0;
  $41 = (__ZN12AP4_Co64Atom14GetChunkOffsetEjRy($39,$40,$offset)|0);
  $result = $41;
 }
 $42 = $result;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $result;
  $0 = $44;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $45 = $2;
 $46 = HEAP32[$skip>>2]|0;
 $47 = (($45) - ($46))|0;
 $i = $47;
 while(1) {
  $48 = $i;
  $49 = $2;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  HEAP32[$size>>2] = 0;
  $51 = ((($4)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)!=(0|0);
  do {
   if ($53) {
    $54 = ((($4)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 56|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $i;
    $60 = (FUNCTION_TABLE_iiii[$58 & 2047]($55,$59,$size)|0);
    $result = $60;
   } else {
    $61 = ((($4)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0|0);
    if ($63) {
     $64 = ((($4)) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 56|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $i;
     $70 = (FUNCTION_TABLE_iiii[$68 & 2047]($65,$69,$size)|0);
     $result = $70;
     break;
    } else {
     $result = -10;
     break;
    }
   }
  } while(0);
  $71 = $result;
  $72 = ($71|0)!=(0);
  if ($72) {
   label = 21;
   break;
  }
  $74 = HEAP32[$size>>2]|0;
  $75 = $offset;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (_i64Add(($77|0),($80|0),($74|0),0)|0);
  $82 = tempRet0;
  $83 = $offset;
  $84 = $83;
  HEAP32[$84>>2] = $81;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $87 = $i;
  $88 = (($87) + 1)|0;
  $i = $88;
 }
 if ((label|0) == 21) {
  $73 = $result;
  $0 = $73;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $89 = $3;
 $90 = HEAP32[$desc>>2]|0;
 $91 = (($90) - 1)|0;
 __ZN10AP4_Sample19SetDescriptionIndexEj($89,$91);
 HEAP32[$cts_offset>>2] = 0;
 $92 = $dts;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = 0;
 HEAP32[$duration>>2] = 0;
 $96 = ((($4)) + 24|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 52|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $2;
 $102 = (FUNCTION_TABLE_iiiii[$100 & 2047]($97,$101,$dts,$duration)|0);
 $result = $102;
 $103 = $result;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $result;
  $0 = $105;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $106 = $3;
 $107 = HEAP32[$duration>>2]|0;
 __ZN10AP4_Sample11SetDurationEj($106,$107);
 $108 = $3;
 $109 = $dts;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 __ZN10AP4_Sample6SetDtsEy($108,$111,$114);
 $115 = ((($4)) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 do {
  if ($117) {
   $118 = $3;
   $119 = $dts;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   __ZN10AP4_Sample6SetCtsEy($118,$121,$124);
  } else {
   $125 = ((($4)) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $2;
   $128 = (__ZN12AP4_CttsAtom12GetCtsOffsetEjRj($126,$127,$cts_offset)|0);
   $result = $128;
   $129 = $result;
   $130 = ($129|0)!=(0);
   if (!($130)) {
    $132 = $3;
    $133 = HEAP32[$cts_offset>>2]|0;
    __ZN10AP4_Sample11SetCtsDeltaEj($132,$133);
    break;
   }
   $131 = $result;
   $0 = $131;
   $180 = $0;
   STACKTOP = sp;return ($180|0);
  }
 } while(0);
 HEAP32[$sample_size>>2] = 0;
 $134 = ((($4)) + 16|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 do {
  if ($136) {
   $137 = ((($4)) + 16|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($139)) + 56|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $2;
   $143 = (FUNCTION_TABLE_iiii[$141 & 2047]($138,$142,$sample_size)|0);
   $result = $143;
  } else {
   $144 = ((($4)) + 20|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)!=(0|0);
   if ($146) {
    $147 = ((($4)) + 20|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($149)) + 56|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $2;
    $153 = (FUNCTION_TABLE_iiii[$151 & 2047]($148,$152,$sample_size)|0);
    $result = $153;
    break;
   } else {
    $result = -10;
    break;
   }
  }
 } while(0);
 $154 = $result;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $result;
  $0 = $156;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $157 = $3;
 $158 = HEAP32[$sample_size>>2]|0;
 __ZN10AP4_Sample7SetSizeEj($157,$158);
 $159 = ((($4)) + 36|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)==(0|0);
 $162 = $3;
 if ($161) {
  __ZN10AP4_Sample7SetSyncEb($162,1);
 } else {
  $163 = ((($4)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$164>>2]|0;
  $166 = ((($165)) + 52|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $2;
  $169 = (FUNCTION_TABLE_iii[$167 & 2047]($164,$168)|0);
  __ZN10AP4_Sample7SetSyncEb($162,$169);
 }
 $170 = $3;
 $171 = $offset;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 __ZN10AP4_Sample9SetOffsetEy($170,$173,$176);
 $177 = $3;
 $178 = ((($4)) + 4|0);
 $179 = HEAP32[$178>>2]|0;
 __ZN10AP4_Sample13SetDataStreamER14AP4_ByteStream($177,$179);
 $0 = 0;
 $180 = $0;
 STACKTOP = sp;return ($180|0);
}
function __ZN19AP4_AtomSampleTable14GetSampleCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_ii[$10 & 2047]($7)|0);
  $0 = $11;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $12 = ((($2)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = ((($2)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 2047]($16)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable20GetSampleDescriptionEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $6 = ((($2)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (FUNCTION_TABLE_iii[$10 & 2047]($7,$11)|0);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZN19AP4_AtomSampleTable25GetSampleDescriptionCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $11 = 0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function __ZN19AP4_AtomSampleTable22GetSampleChunkPositionEjRjS0_($this,$sample_index,$chunk_index,$position_in_chunk) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $chunk_index = $chunk_index|0;
 $position_in_chunk = $position_in_chunk|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sample_description_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample_description_index = sp;
 $0 = $this;
 $1 = $sample_index;
 $2 = $chunk_index;
 $3 = $position_in_chunk;
 $4 = $0;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($4,$10,$11,$12,$sample_description_index)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN19AP4_AtomSampleTable17GetChunkForSampleEjRjS0_S0_($this,$sample_index,$chunk_index,$position_in_chunk,$sample_description_index) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $chunk_index = $chunk_index|0;
 $position_in_chunk = $position_in_chunk|0;
 $sample_description_index = $sample_description_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk = sp + 4|0;
 $1 = $this;
 $2 = $sample_index;
 $3 = $chunk_index;
 $4 = $position_in_chunk;
 $5 = $sample_description_index;
 $6 = $1;
 $7 = $3;
 HEAP32[$7>>2] = 0;
 $8 = $4;
 HEAP32[$8>>2] = 0;
 $9 = $5;
 HEAP32[$9>>2] = 0;
 $10 = ((($6)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -14;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 HEAP32[$chunk>>2] = 0;
 $13 = ((($6)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = (($18) + 1)|0;
 $20 = $4;
 $21 = $5;
 $22 = (FUNCTION_TABLE_iiiiii[$17 & 1023]($14,$19,$chunk,$20,$21)|0);
 $result = $22;
 $23 = $result;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $result;
  $0 = $25;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $26 = HEAP32[$chunk>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $0 = -13;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $28 = HEAP32[$chunk>>2]|0;
  $29 = (($28) - 1)|0;
  $30 = $3;
  HEAP32[$30>>2] = $29;
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable14GetChunkOffsetEjRy($this,$chunk_index,$offset) {
 $this = $this|0;
 $chunk_index = $chunk_index|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $offset_32 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset_32 = sp + 4|0;
 $1 = $this;
 $2 = $chunk_index;
 $3 = $offset;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($4)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($10) + 1)|0;
  $12 = (__ZN12AP4_StcoAtom14GetChunkOffsetEjRj($9,$11,$offset_32)|0);
  $result = $12;
  $13 = $result;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = HEAP32[$offset_32>>2]|0;
   $16 = $3;
   $17 = $16;
   $18 = $17;
   HEAP32[$18>>2] = $15;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = 0;
  } else {
   $21 = $3;
   $22 = $21;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = 0;
  }
  $26 = $result;
  $0 = $26;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $27 = ((($4)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = ((($4)) + 40|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = (($32) + 1)|0;
   $34 = $3;
   $35 = (__ZN12AP4_Co64Atom14GetChunkOffsetEjRy($31,$33,$34)|0);
   $0 = $35;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  } else {
   $36 = $3;
   $37 = $36;
   $38 = $37;
   HEAP32[$38>>2] = 0;
   $39 = (($37) + 4)|0;
   $40 = $39;
   HEAP32[$40>>2] = 0;
   $0 = -1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable14SetChunkOffsetEjy($this,$chunk_index,$0,$1) {
 $this = $this|0;
 $chunk_index = $chunk_index|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $3 = $this;
 $4 = $chunk_index;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $5;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  $21 = (0)!=(0);
  $22 = $20 | $21;
  if ($22) {
   $2 = -12;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  } else {
   $23 = ((($10)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $4;
   $26 = (($25) + 1)|0;
   $27 = $5;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (__ZN12AP4_StcoAtom14SetChunkOffsetEjj($24,$26,$29)|0);
   $2 = $33;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  }
 } else {
  $34 = ((($10)) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = ((($10)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = (($39) + 1)|0;
   $41 = $5;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (__ZN12AP4_Co64Atom14SetChunkOffsetEjy($38,$40,$43,$46)|0);
   $2 = $47;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  } else {
   $2 = -1;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  }
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable13SetSampleSizeEjj($this,$sample_index,$size) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample_index;
 $3 = $size;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($4)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = (($13) + 1)|0;
  $15 = $3;
  $16 = (FUNCTION_TABLE_iiii[$12 & 2047]($9,$14,$15)|0);
  $0 = $16;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $17 = ((($4)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = ((($4)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $27 = $3;
  $28 = (FUNCTION_TABLE_iiii[$24 & 2047]($21,$26,$27)|0);
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $0 = -1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZN19AP4_AtomSampleTable26GetSampleIndexForTimeStampEyRj($this,$0,$1,$sample_index) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $sample_index = $sample_index|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $sample_index;
 $9 = $2;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $26 = -1;
  STACKTOP = sp;return ($26|0);
 }
 $13 = ((($9)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = (FUNCTION_TABLE_iiiii[$17 & 2047]($14,$20,$23,$24)|0);
 $26 = $25;
 STACKTOP = sp;return ($26|0);
}
function __ZN19AP4_AtomSampleTable25GetNearestSyncSampleIndexEjb($this,$sample_index,$before) {
 $this = $this|0;
 $sample_index = $sample_index|0;
 $before = $before|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0;
 var $cursor = 0, $entry_count = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $sample_index;
 $4 = $before&1;
 $3 = $4;
 $5 = $1;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 $9 = $2;
 if ($8) {
  $0 = $9;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $10 = (($9) + 1)|0;
 $2 = $10;
 $11 = ((($5)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN12AP4_StssAtom10GetEntriesEv($12)|0);
 $14 = (__ZNK9AP4_ArrayIjE9ItemCountEv($13)|0);
 $entry_count = $14;
 $15 = $3;
 $16 = $15&1;
 if ($16) {
  $cursor = 0;
  $i = 0;
  while(1) {
   $17 = $i;
   $18 = $entry_count;
   $19 = ($17>>>0)<($18>>>0);
   if (!($19)) {
    label = 11;
    break;
   }
   $20 = ((($5)) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (__ZN12AP4_StssAtom10GetEntriesEv($21)|0);
   $23 = $i;
   $24 = (__ZNK9AP4_ArrayIjEixEm($22,$23)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = ($25>>>0)>=($26>>>0);
   if ($27) {
    label = 7;
    break;
   }
   $29 = ((($5)) + 36|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (__ZN12AP4_StssAtom10GetEntriesEv($30)|0);
   $32 = $i;
   $33 = (__ZNK9AP4_ArrayIjEixEm($31,$32)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = ((($5)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (__ZN12AP4_StssAtom10GetEntriesEv($37)|0);
    $39 = $i;
    $40 = (__ZNK9AP4_ArrayIjEixEm($38,$39)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) - 1)|0;
    $cursor = $42;
   }
   $43 = $i;
   $44 = (($43) + 1)|0;
   $i = $44;
  }
  if ((label|0) == 7) {
   $28 = $cursor;
   $0 = $28;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
  else if ((label|0) == 11) {
   $45 = $cursor;
   $0 = $45;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
 }
 $i1 = 0;
 while(1) {
  $46 = $i1;
  $47 = $entry_count;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   label = 20;
   break;
  }
  $49 = ((($5)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (__ZN12AP4_StssAtom10GetEntriesEv($50)|0);
  $52 = $i1;
  $53 = (__ZNK9AP4_ArrayIjEixEm($51,$52)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  $56 = ($54>>>0)>=($55>>>0);
  if ($56) {
   break;
  }
  $72 = $i1;
  $73 = (($72) + 1)|0;
  $i1 = $73;
 }
 if ((label|0) == 20) {
  $74 = HEAP32[$5>>2]|0;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_ii[$76 & 2047]($5)|0);
  $0 = $77;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $57 = ((($5)) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (__ZN12AP4_StssAtom10GetEntriesEv($58)|0);
 $60 = $i1;
 $61 = (__ZNK9AP4_ArrayIjEixEm($59,$60)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = ((($5)) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (__ZN12AP4_StssAtom10GetEntriesEv($65)|0);
  $67 = $i1;
  $68 = (__ZNK9AP4_ArrayIjEixEm($66,$67)|0);
  $69 = HEAP32[$68>>2]|0;
  $$sink = $69;
 } else {
  $70 = $2;
  $$sink = $70;
 }
 $71 = (($$sink) - 1)|0;
 $0 = $71;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZN12AP4_TrakAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory($this,$size,$stream,$atom_factory) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $3 = $atom_factory;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($6,1953653099,$7,0,0,$8,$9);
 $10 = 11916;
 HEAP32[$6>>2] = $10;
 $11 = ((($6)) + 36|0);
 $12 = 11992;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 __THREW__ = 0;
 $17 = (invoke_iiiii($16|0,($13|0),(45348|0),0,0)|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = ($17|0)==(0|0);
  if ($20) {
   $27 = 0;
  } else {
   $21 = (___dynamic_cast($17,2392,200,0)|0);
   $27 = $21;
  }
  $26 = ((($6)) + 56|0);
  HEAP32[$26>>2] = $27;
  $28 = ((($6)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  __THREW__ = 0;
  $32 = (invoke_iiiii($31|0,($28|0),(45353|0),0,0)|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $35 = ($32|0)==(0|0);
   if ($35) {
    $38 = 0;
    $37 = ((($6)) + 60|0);
    HEAP32[$37>>2] = $38;
    STACKTOP = sp;return;
   }
   $36 = (___dynamic_cast($32,2392,2048,0)|0);
   $38 = $36;
   $37 = ((($6)) + 60|0);
   HEAP32[$37>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $4 = $22;
 $5 = $23;
 __THREW__ = 0;
 invoke_vi(726,($6|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $4;
  $40 = $5;
  ___resumeException($39|0);
  // unreachable;
 }
}
function __ZN12AP4_TrakAtom5GetIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $8 = 0;
  STACKTOP = sp;return ($8|0);
 }
 $5 = ((($1)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK12AP4_TkhdAtom10GetTrackIdEv($6)|0);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZThn36_N12AP4_TrakAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_TrakAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_TrakAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(696,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TrakAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17AP4_ContainerAtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn36_N12AP4_TrakAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_TrakAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_TencAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1147,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_TencAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1952804451,$8,$9,$10);
 $11 = ((($7)) + 36|0);
 $12 = $4;
 __THREW__ = 0;
 invoke_vii(1148,($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = 12044;
  HEAP32[$7>>2] = $15;
  $16 = ((($7)) + 36|0);
  $17 = 12104;
  HEAP32[$16>>2] = $17;
  STACKTOP = sp;return;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $5 = $18;
 $6 = $19;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $5;
  $23 = $6;
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN12AP4_TencAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = $1;
 $5 = (__ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN12AP4_TencAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = $1;
 $5 = (__ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZThn36_N12AP4_TencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_TencAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_TencAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(700,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TencAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(304,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn36_N12AP4_TencAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN12AP4_TencAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN8AP4_AtomC2Ejj($this,$type,$size) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $0;
 $4 = 12120;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $1;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 $9 = ((($3)) + 16|0);
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($3)) + 24|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($3)) + 25|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($3)) + 32|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_AtomC2Ejyb($this,$type,$0,$1,$force_64) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $force_64&1;
 $5 = $10;
 $11 = $2;
 $12 = 12120;
 HEAP32[$11>>2] = $12;
 $13 = ((($11)) + 4|0);
 $14 = $3;
 HEAP32[$13>>2] = $14;
 $15 = ((($11)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($11)) + 16|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ((($11)) + 24|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($11)) + 25|0);
 HEAP8[$22>>0] = 0;
 $23 = ((($11)) + 28|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($11)) + 32|0);
 HEAP32[$24>>2] = 0;
 $25 = $4;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $5;
 $32 = $31&1;
 __ZN8AP4_Atom7SetSizeEyb($11,$27,$30,$32);
 STACKTOP = sp;return;
}
function __ZN8AP4_Atom7SetSizeEyb($this,$0,$1,$force_64) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $this;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $force_64&1;
 $4 = $9;
 $10 = $2;
 $11 = $4;
 $12 = $11&1;
 if (!($12)) {
  $13 = ((($10)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  if ($15) {
   $16 = ((($10)) + 16|0);
   $17 = $16;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22>>>0)<(0);
   $24 = ($19>>>0)<=(4294967295);
   $25 = ($22|0)==(0);
   $26 = $25 & $24;
   $27 = $23 | $26;
   if ($27) {
    $4 = 1;
   }
  }
 }
 $28 = $3;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 $35 = (0)==(0);
 $36 = $34 & $35;
 if ($36) {
  $37 = $4;
  $38 = $37&1;
  if (!($38)) {
   $39 = $3;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($10)) + 8|0);
   HEAP32[$45>>2] = $41;
   $46 = ((($10)) + 16|0);
   $47 = $46;
   $48 = $47;
   HEAP32[$48>>2] = 0;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $51 = ((($10)) + 8|0);
 HEAP32[$51>>2] = 1;
 $52 = $3;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($10)) + 16|0);
 $59 = $58;
 $60 = $59;
 HEAP32[$60>>2] = $54;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 STACKTOP = sp;return;
}
function __ZN8AP4_AtomC2Ejjhj($this,$type,$size,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $version;
 $4 = $flags;
 $5 = $0;
 $6 = 12120;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($5)) + 8|0);
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $11 = ((($5)) + 16|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 24|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($5)) + 25|0);
 $18 = $3;
 HEAP8[$17>>0] = $18;
 $19 = ((($5)) + 28|0);
 $20 = $4;
 HEAP32[$19>>2] = $20;
 $21 = ((($5)) + 32|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8AP4_AtomC2Ejybhj($this,$type,$0,$1,$force_64,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $version = $version|0;
 $flags = $flags|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $force_64&1;
 $5 = $12;
 $6 = $version;
 $7 = $flags;
 $13 = $2;
 $14 = 12120;
 HEAP32[$13>>2] = $14;
 $15 = ((($13)) + 4|0);
 $16 = $3;
 HEAP32[$15>>2] = $16;
 $17 = ((($13)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($13)) + 16|0);
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = ((($13)) + 24|0);
 HEAP8[$23>>0] = 1;
 $24 = ((($13)) + 25|0);
 $25 = $6;
 HEAP8[$24>>0] = $25;
 $26 = ((($13)) + 28|0);
 $27 = $7;
 HEAP32[$26>>2] = $27;
 $28 = ((($13)) + 32|0);
 HEAP32[$28>>2] = 0;
 $29 = $4;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $5;
 $36 = $35&1;
 __ZN8AP4_Atom7SetSizeEyb($13,$31,$34,$36);
 STACKTOP = sp;return;
}
function __ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($stream,$version,$flags) {
 $stream = $stream|0;
 $version = $version|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_result = 0, $header = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 4|0;
 $1 = $stream;
 $2 = $version;
 $3 = $flags;
 $4 = $1;
 $5 = (__ZN14AP4_ByteStream8ReadUI32ERj($4,$header)|0);
 $_result = $5;
 $6 = $_result;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $_result;
  $0 = $8;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $9 = HEAP32[$header>>2]|0;
  $10 = $9 >>> 24;
  $11 = $10 & 255;
  $12 = $11&255;
  $13 = $2;
  HEAP8[$13>>0] = $12;
  $14 = HEAP32[$header>>2]|0;
  $15 = $14 & 16777215;
  $16 = $3;
  HEAP32[$16>>2] = $15;
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZNK8AP4_Atom13GetHeaderSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 $5 = $4 ? 12 : 8;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 $9 = $8 ? 8 : 0;
 $10 = (($5) + ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN8AP4_Atom11WriteHeaderER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $11 = $2;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN14AP4_ByteStream9WriteUI32Ej($11,$13)|0);
 $result = $14;
 $15 = $result;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $result;
  $0 = $17;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $18 = ((($3)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $2;
  $22 = ((($3)) + 16|0);
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZN14AP4_ByteStream9WriteUI64Ey($21,$25,$28)|0);
  $result = $29;
  $30 = $result;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $result;
   $0 = $32;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 }
 $33 = ((($3)) + 24|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 if ($35) {
  $36 = $2;
  $37 = ((($3)) + 25|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = (__ZN14AP4_ByteStream9WriteUI08Eh($36,$38)|0);
  $result = $39;
  $40 = $result;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $result;
   $0 = $42;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
  $43 = $2;
  $44 = ((($3)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (__ZN14AP4_ByteStream9WriteUI24Ej($43,$45)|0);
  $result = $46;
  $47 = $result;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = $result;
   $0 = $49;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 }
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function __ZN8AP4_Atom5WriteER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = (FUNCTION_TABLE_iii[$6 & 2047]($3,$7)|0);
 $result = $8;
 $9 = $result;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $result;
  $0 = $11;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = (FUNCTION_TABLE_iii[$14 & 2047]($3,$15)|0);
 $result = $16;
 $17 = $result;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $result;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN8AP4_Atom7InspectER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 (FUNCTION_TABLE_iii[$5 & 2047]($2,$6)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 (FUNCTION_TABLE_iii[$9 & 2047]($2,$10)|0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 2047]($11);
 STACKTOP = sp;return 0;
}
function __ZN8AP4_Atom13InspectHeaderER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __Z28AP4_FormatFourCharsPrintablePcj($name,$4);
 $5 = ((($name)) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 25|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($2)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 2047]($2)|0);
 $18 = (__ZNK8AP4_Atom7GetSizeEv($2)|0);
 $19 = tempRet0;
 FUNCTION_TABLE_viiiiiii[$9 & 2047]($6,$name,$11,$13,$17,$18,$19);
 STACKTOP = sp;return 0;
}
function __ZN8AP4_Atom6DetachEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$10 & 2047]($7,$2)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZN8AP4_Atom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clone = 0, $mbs = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $clone = sp + 20|0;
 $size = sp;
 $1 = $this;
 $4 = $1;
 HEAP32[$clone>>2] = 0;
 $5 = (__ZNK8AP4_Atom7GetSizeEv($4)|0);
 $6 = tempRet0;
 $7 = $size;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $size;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)>(0);
 $18 = ($13>>>0)>(1048576);
 $19 = ($16|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 if ($21) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $22 = (__Znwj(32)|0);
 __THREW__ = 0;
 $23 = (invoke_ii(1072,($4|0))|0);
 $24 = tempRet0;
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $2 = $35;
  $3 = $36;
  __ZdlPv($22);
  $37 = $2;
  $38 = $3;
  ___resumeException($37|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(1073,($22|0),($23|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $2 = $35;
  $3 = $36;
  __ZdlPv($22);
  $37 = $2;
  $38 = $3;
  ___resumeException($37|0);
  // unreachable;
 }
 $mbs = $22;
 $29 = HEAP32[$4>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $mbs;
 $33 = (FUNCTION_TABLE_iii[$31 & 2047]($4,$32)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $39 = $mbs;
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  (FUNCTION_TABLE_iiii[$42 & 2047]($39,0,0)|0);
  $43 = $mbs;
  (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom(4320,$43,$clone)|0);
 }
 $44 = $mbs;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 2047]($44);
 $48 = HEAP32[$clone>>2]|0;
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function __ZN15AP4_UnknownAtomC2EjyR14AP4_ByteStream($this,$type,$0,$1,$stream) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $file_size = 0, $or$cond = 0, $payload_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $file_size = sp;
 $2 = $this;
 $3 = $type;
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $5 = $stream;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 __ZN8AP4_AtomC2Ejyb($12,$13,$16,$19,0);
 $20 = 12180;
 HEAP32[$12>>2] = $20;
 $21 = ((($12)) + 36|0);
 $22 = $5;
 HEAP32[$21>>2] = $22;
 $23 = ((($12)) + 48|0);
 __THREW__ = 0;
 invoke_vi(847,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $70 = ___cxa_find_matching_catch()|0;
  $71 = tempRet0;
  $6 = $70;
  $7 = $71;
 } else {
  $26 = $4;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)<(0);
  $33 = ($28>>>0)<=(4096);
  $34 = ($31|0)==(0);
  $35 = $34 & $33;
  $36 = $32 | $35;
  $37 = $3;
  $38 = ($37|0)!=(1835295092);
  $or$cond = $36 & $38;
  L4: do {
   if ($or$cond) {
    $39 = ((($12)) + 40|0);
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = 0;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = 0;
    $44 = ((($12)) + 36|0);
    HEAP32[$44>>2] = 0;
    $45 = $4;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($45) + 4)|0;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$12>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    __THREW__ = 0;
    $54 = (invoke_ii($53|0,($12|0))|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if (!($56)) {
     $57 = (($47) - ($54))|0;
     $payload_size = $57;
     $58 = ((($12)) + 48|0);
     $59 = $payload_size;
     __THREW__ = 0;
     (invoke_iii(848,($58|0),($59|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if (!($61)) {
      $62 = $5;
      $63 = ((($12)) + 48|0);
      __THREW__ = 0;
      $64 = (invoke_ii(849,($63|0))|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if (!($66)) {
       $67 = $payload_size;
       __THREW__ = 0;
       (invoke_iiii(851,($62|0),($64|0),($67|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if (!($69)) {
        STACKTOP = sp;return;
       }
      }
     }
    }
   } else {
    $76 = $5;
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($12)) + 40|0);
    __THREW__ = 0;
    (invoke_iii($79|0,($76|0),($80|0))|0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if (!($82)) {
     $83 = $5;
     $84 = HEAP32[$83>>2]|0;
     $85 = ((($84)) + 32|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_iii($86|0,($83|0),($file_size|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if (!($89)) {
      $90 = ($87|0)==(0);
      do {
       if ($90) {
        $91 = ((($12)) + 40|0);
        $92 = $91;
        $93 = $92;
        $94 = HEAP32[$93>>2]|0;
        $95 = (($92) + 4)|0;
        $96 = $95;
        $97 = HEAP32[$96>>2]|0;
        $98 = HEAP32[$12>>2]|0;
        $99 = ((($98)) + 8|0);
        $100 = HEAP32[$99>>2]|0;
        __THREW__ = 0;
        $101 = (invoke_ii($100|0,($12|0))|0);
        $102 = __THREW__; __THREW__ = 0;
        $103 = $102&1;
        if ($103) {
         break L4;
        }
        $104 = (_i64Subtract(($94|0),($97|0),($101|0),0)|0);
        $105 = tempRet0;
        $106 = $4;
        $107 = $106;
        $108 = HEAP32[$107>>2]|0;
        $109 = (($106) + 4)|0;
        $110 = $109;
        $111 = HEAP32[$110>>2]|0;
        $112 = (_i64Add(($104|0),($105|0),($108|0),($111|0))|0);
        $113 = tempRet0;
        $114 = $file_size;
        $115 = $114;
        $116 = HEAP32[$115>>2]|0;
        $117 = (($114) + 4)|0;
        $118 = $117;
        $119 = HEAP32[$118>>2]|0;
        $120 = ($113>>>0)>($119>>>0);
        $121 = ($112>>>0)>($116>>>0);
        $122 = ($113|0)==($119|0);
        $123 = $122 & $121;
        $124 = $120 | $123;
        if ($124) {
         $125 = ((($12)) + 8|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = ($126|0)==(1);
         if ($127) {
          $128 = $file_size;
          $129 = $128;
          $130 = HEAP32[$129>>2]|0;
          $131 = (($128) + 4)|0;
          $132 = $131;
          $133 = HEAP32[$132>>2]|0;
          $134 = ((($12)) + 40|0);
          $135 = $134;
          $136 = $135;
          $137 = HEAP32[$136>>2]|0;
          $138 = (($135) + 4)|0;
          $139 = $138;
          $140 = HEAP32[$139>>2]|0;
          $141 = (_i64Subtract(($130|0),($133|0),($137|0),($140|0))|0);
          $142 = tempRet0;
          $143 = ((($12)) + 16|0);
          $144 = $143;
          $145 = $144;
          HEAP32[$145>>2] = $141;
          $146 = (($144) + 4)|0;
          $147 = $146;
          HEAP32[$147>>2] = $142;
          break;
         }
         $148 = $4;
         $149 = $148;
         $150 = HEAP32[$149>>2]|0;
         $151 = (($148) + 4)|0;
         $152 = $151;
         $153 = HEAP32[$152>>2]|0;
         $154 = ($153>>>0)<(0);
         $155 = ($150>>>0)<=(4294967295);
         $156 = ($153|0)==(0);
         $157 = $156 & $155;
         $158 = $154 | $157;
         if ($158) {
          $160 = $file_size;
          $161 = $160;
          $162 = HEAP32[$161>>2]|0;
          $163 = (($160) + 4)|0;
          $164 = $163;
          $165 = HEAP32[$164>>2]|0;
          $166 = ((($12)) + 40|0);
          $167 = $166;
          $168 = $167;
          $169 = HEAP32[$168>>2]|0;
          $170 = (($167) + 4)|0;
          $171 = $170;
          $172 = HEAP32[$171>>2]|0;
          $173 = (_i64Subtract(($162|0),($165|0),($169|0),($172|0))|0);
          $174 = tempRet0;
          $175 = ((($12)) + 8|0);
          HEAP32[$175>>2] = $173;
          break;
         } else {
          __THREW__ = 0;
          invoke_viiii(1000,(45475|0),(45494|0),359,(45522|0));
          $159 = __THREW__; __THREW__ = 0;
          break L4;
         }
        }
       }
      } while(0);
      $176 = ((($12)) + 36|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = HEAP32[$177>>2]|0;
      $179 = ((($178)) + 8|0);
      $180 = HEAP32[$179>>2]|0;
      __THREW__ = 0;
      invoke_vi($180|0,($177|0));
      $181 = __THREW__; __THREW__ = 0;
      $182 = $181&1;
      if (!($182)) {
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $72 = ___cxa_find_matching_catch()|0;
  $73 = tempRet0;
  $6 = $72;
  $7 = $73;
  __THREW__ = 0;
  invoke_vi(486,($23|0));
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if ($75) {
   $187 = ___cxa_find_matching_catch(0|0)|0;
   $188 = tempRet0;
   ___clang_call_terminate($187);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($12|0));
 $183 = __THREW__; __THREW__ = 0;
 $184 = $183&1;
 if ($184) {
  $187 = ___cxa_find_matching_catch(0|0)|0;
  $188 = tempRet0;
  ___clang_call_terminate($187);
  // unreachable;
 } else {
  $185 = $6;
  $186 = $7;
  ___resumeException($185|0);
  // unreachable;
 }
}
function __ZN15AP4_UnknownAtomC2ERKS_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN8AP4_AtomC2Ejj($4,$7,0);
 $8 = 12180;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 36|0);
 $10 = $1;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$9>>2] = $12;
 $13 = ((($4)) + 40|0);
 $14 = $1;
 $15 = ((($14)) + 40|0);
 $16 = $15;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $13;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = ((($4)) + 48|0);
 $27 = $1;
 $28 = ((($27)) + 48|0);
 __THREW__ = 0;
 invoke_vii(897,($26|0),($28|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  $2 = $58;
  $3 = $59;
 } else {
  $31 = $1;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($4)) + 8|0);
  HEAP32[$34>>2] = $33;
  $35 = $1;
  $36 = ((($35)) + 16|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($4)) + 16|0);
  $44 = $43;
  $45 = $44;
  HEAP32[$45>>2] = $39;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = $42;
  $48 = ((($4)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if (!($50)) {
   STACKTOP = sp;return;
  }
  $51 = ((($4)) + 36|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  __THREW__ = 0;
  invoke_vi($55|0,($52|0));
  $56 = __THREW__; __THREW__ = 0;
  $57 = $56&1;
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $2 = $60;
  $3 = $61;
  __THREW__ = 0;
  invoke_vi(486,($26|0));
  $62 = __THREW__; __THREW__ = 0;
  $63 = $62&1;
  if ($63) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($4|0));
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 if ($65) {
  $68 = ___cxa_find_matching_catch(0|0)|0;
  $69 = tempRet0;
  ___clang_call_terminate($68);
  // unreachable;
 } else {
  $66 = $2;
  $67 = $3;
  ___resumeException($66|0);
  // unreachable;
 }
}
function __ZN15AP4_UnknownAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 12180;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($3)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  invoke_vi($12|0,($9|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch()|0;
   $16 = tempRet0;
   $1 = $15;
   $2 = $16;
   $17 = ((($3)) + 48|0);
   __THREW__ = 0;
   invoke_vi(486,($17|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $20 = ((($3)) + 48|0);
   __THREW__ = 0;
   invoke_vi(486,($20|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $23 = ___cxa_find_matching_catch()|0;
    $24 = tempRet0;
    $1 = $23;
    $2 = $24;
    break;
   } else {
    __ZN8AP4_AtomD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $29 = ___cxa_find_matching_catch(0|0)|0;
  $30 = tempRet0;
  ___clang_call_terminate($29);
  // unreachable;
 } else {
  $27 = $1;
  $28 = $2;
  ___resumeException($27|0);
  // unreachable;
 }
}
function __ZN15AP4_UnknownAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(708,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15AP4_UnknownAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $payload_size = 0, $position = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $position = sp + 8|0;
 $payload_size = sp;
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($3)) + 48|0);
  $9 = (__ZNK14AP4_DataBuffer7GetDataEv($8)|0);
  $10 = ((($3)) + 48|0);
  $11 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($10)|0);
  $12 = (__ZN14AP4_ByteStream5WriteEPKvj($7,$9,$11)|0);
  $0 = $12;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 $13 = ((($3)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iii[$17 & 2047]($14,$position)|0);
 $18 = ((($3)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 40|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_iiii[$22 & 2047]($19,$26,$29)|0);
 $result = $30;
 $31 = $result;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $result;
  $0 = $33;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 $34 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
 $35 = tempRet0;
 $36 = HEAP32[$3>>2]|0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (FUNCTION_TABLE_ii[$38 & 2047]($3)|0);
 $40 = (_i64Subtract(($34|0),($35|0),($39|0),0)|0);
 $41 = tempRet0;
 $42 = $payload_size;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = ((($3)) + 36|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $2;
 $52 = $payload_size;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_iiiii[$50 & 2047]($47,$51,$54,$57)|0);
 $result = $58;
 $59 = $result;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $result;
  $0 = $61;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 } else {
  $62 = ((($3)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $position;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  (FUNCTION_TABLE_iiii[$66 & 2047]($63,$69,$72)|0);
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function __ZN15AP4_UnknownAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(72)|0);
 __THREW__ = 0;
 invoke_vii(1149,($4|0),($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  __ZdlPv($4);
  $9 = $1;
  $10 = $2;
  ___resumeException($9|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN28AP4_NullTerminatedStringAtomC2EjyR14AP4_ByteStream($this,$type,$0,$1,$stream) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $stream = $stream|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $str_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $5 = $stream;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 __ZN8AP4_AtomC2Ejyb($12,$13,$16,$19,0);
 $20 = 12240;
 HEAP32[$12>>2] = $20;
 $21 = ((($12)) + 36|0);
 __THREW__ = 0;
 invoke_vi(860,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $6 = $48;
  $7 = $49;
 } else {
  $24 = $4;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26) - 8)|0;
  $str_size = $30;
  $31 = $str_size;
  __THREW__ = 0;
  $32 = (invoke_ii(867,($31|0))|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   $str = $32;
   $35 = $5;
   $36 = $str;
   $37 = $str_size;
   __THREW__ = 0;
   (invoke_iiii(851,($35|0),($36|0),($37|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if (!($39)) {
    $40 = $str_size;
    $41 = (($40) - 1)|0;
    $42 = $str;
    $43 = (($42) + ($41)|0);
    HEAP8[$43>>0] = 0;
    $44 = ((($12)) + 36|0);
    $45 = $str;
    __THREW__ = 0;
    (invoke_iii(862,($44|0),($45|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     STACKTOP = sp;return;
    }
   }
  }
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $6 = $50;
  $7 = $51;
  __THREW__ = 0;
  invoke_vi(864,($21|0));
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if ($53) {
   $58 = ___cxa_find_matching_catch(0|0)|0;
   $59 = tempRet0;
   ___clang_call_terminate($58);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($12|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  $56 = $6;
  $57 = $7;
  ___resumeException($56|0);
  // unreachable;
 }
}
function __ZN28AP4_NullTerminatedStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $padding = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>(8);
 L1: do {
  if ($6) {
   $7 = $2;
   $8 = ((($3)) + 36|0);
   $9 = (__ZNK10AP4_String8GetCharsEv($8)|0);
   $10 = ((($3)) + 36|0);
   $11 = (__ZNK10AP4_String9GetLengthEv($10)|0);
   $12 = (($11) + 1)|0;
   $13 = (__ZN14AP4_ByteStream5WriteEPKvj($7,$9,$12)|0);
   $result = $13;
   $14 = $result;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $result;
    $0 = $16;
    $28 = $0;
    STACKTOP = sp;return ($28|0);
   }
   $17 = ((($3)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($3)) + 36|0);
   $20 = (__ZNK10AP4_String9GetLengthEv($19)|0);
   $21 = (8 + ($20))|0;
   $22 = (($21) + 1)|0;
   $23 = (($18) - ($22))|0;
   $padding = $23;
   while(1) {
    $24 = $padding;
    $25 = (($24) + -1)|0;
    $padding = $25;
    $26 = ($24|0)!=(0);
    if (!($26)) {
     break L1;
    }
    $27 = $2;
    (__ZN14AP4_ByteStream9WriteUI08Eh($27,0)|0);
   }
  }
 } while(0);
 $0 = 0;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __ZN28AP4_NullTerminatedStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,45538,$8,0);
 STACKTOP = sp;return 0;
}
function __ZN14AP4_AtomParentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 12300;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 (invoke_ii(1150,($5|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 4|0);
  __ZN8AP4_ListI8AP4_AtomED2Ev($8);
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 $11 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(260,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $16 = ___cxa_find_matching_catch(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  $14 = $1;
  $15 = $2;
  ___resumeException($14|0);
  // unreachable;
 }
}
function __ZN14AP4_AtomParentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(716,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN14AP4_AtomParent8AddChildEP8AP4_Atomi($this,$child,$position) {
 $this = $this|0;
 $child = $child|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $insertion_point = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $child;
 $3 = $position;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 2047]($5)|0);
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $0 = -3;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $11 = $3;
 $12 = ($11|0)==(-1);
 do {
  if ($12) {
   $13 = ((($4)) + 4|0);
   $14 = $2;
   $15 = (__ZN8AP4_ListI8AP4_AtomE3AddEPS0_($13,$14)|0);
   $result = $15;
  } else {
   $16 = $3;
   $17 = ($16|0)==(0);
   $18 = ((($4)) + 4|0);
   if ($17) {
    $19 = $2;
    $20 = (__ZN8AP4_ListI8AP4_AtomE6InsertEPNS1_4ItemEPS0_($18,0,$19)|0);
    $result = $20;
    break;
   }
   $21 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($18)|0);
   $insertion_point = $21;
   $22 = $3;
   $count = $22;
   while(1) {
    $23 = $insertion_point;
    $24 = ($23|0)!=(0|0);
    if ($24) {
     $25 = $count;
     $26 = (($25) + -1)|0;
     $count = $26;
     $27 = ($26|0)!=(0);
     $47 = $27;
    } else {
     $47 = 0;
    }
    $28 = $insertion_point;
    if (!($47)) {
     break;
    }
    $29 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($28)|0);
    $insertion_point = $29;
   }
   $30 = ($28|0)!=(0|0);
   if ($30) {
    $31 = ((($4)) + 4|0);
    $32 = $insertion_point;
    $33 = $2;
    $34 = (__ZN8AP4_ListI8AP4_AtomE6InsertEPNS1_4ItemEPS0_($31,$32,$33)|0);
    $result = $34;
    break;
   } else {
    $result = -12;
    break;
   }
  }
 } while(0);
 $35 = $result;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $result;
  $0 = $37;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $38 = $2;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  (FUNCTION_TABLE_iii[$41 & 2047]($38,$4)|0);
  $42 = HEAP32[$4>>2]|0;
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  FUNCTION_TABLE_vii[$44 & 2047]($4,$45);
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomParent11RemoveChildEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $child;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 2047]($4)|0);
 $9 = ($8|0)!=($3|0);
 if ($9) {
  $0 = -3;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $10 = ((($3)) + 4|0);
 $11 = $2;
 $12 = (__ZN8AP4_ListI8AP4_AtomE6RemoveEPS0_($10,$11)|0);
 $result = $12;
 $13 = $result;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $result;
  $0 = $15;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  (FUNCTION_TABLE_iii[$19 & 2047]($16,0)|0);
  $20 = HEAP32[$3>>2]|0;
  $21 = ((($20)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  FUNCTION_TABLE_vii[$22 & 2047]($3,$23);
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomParent11DeleteChildEjj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $child = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $type;
 $3 = $index;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = $3;
 $10 = (FUNCTION_TABLE_iiii[$7 & 2047]($4,$8,$9)|0);
 $child = $10;
 $11 = $child;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $child;
 $17 = (FUNCTION_TABLE_iii[$15 & 2047]($4,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $result;
  $0 = $20;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $21 = $child;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = HEAP32[$21>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 2047]($21);
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZNK14AP4_AtomParent8GetChildEjj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $atom = sp + 24|0;
 $4 = sp + 8|0;
 $1 = $this;
 $2 = $type;
 $3 = $index;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = $2;
 $10 = $3;
 __ZN14AP4_AtomFinderC2Ejj($4,$9,$10);
 __THREW__ = 0;
 $11 = (invoke_iiii(1151,($8|0),($4|0),($atom|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __THREW__ = 0;
  invoke_vi(723,($4|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $24 = ___cxa_find_matching_catch(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  } else {
   $22 = $5;
   $23 = $6;
   ___resumeException($22|0);
   // unreachable;
  }
 }
 __ZN14AP4_AtomFinderD2Ev($4);
 $result = $11;
 $14 = $result;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[$atom>>2]|0;
  $0 = $16;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNK14AP4_AtomParent8GetChildEPKhj($this,$uuid,$index) {
 $this = $this|0;
 $uuid = $uuid|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $item = 0, $uuid_atom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $uuid;
 $3 = $index;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($5)|0);
 $item = $6;
 while(1) {
  $7 = $item;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = $item;
  $10 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($9)|0);
  $atom = $10;
  $11 = $atom;
  $12 = (__ZNK8AP4_Atom7GetTypeEv($11)|0);
  $13 = ($12|0)==(1970628964);
  if ($13) {
   $14 = $atom;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $17 = 0;
   } else {
    $16 = (___dynamic_cast($14,2392,16,0)|0);
    $17 = $16;
   }
   $uuid_atom = $17;
   $18 = $uuid_atom;
   $19 = (__ZN12AP4_UuidAtom7GetUuidEv($18)|0);
   $20 = $2;
   $21 = (_memcmp($19,$20,16)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $3;
    $24 = ($23|0)==(0);
    if ($24) {
     label = 8;
     break;
    }
    $26 = $3;
    $27 = (($26) + -1)|0;
    $3 = $27;
   }
  }
  $28 = $item;
  $29 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($28)|0);
  $item = $29;
 }
 if ((label|0) == 8) {
  $25 = $atom;
  $0 = $25;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomParent9FindChildEPKcbb($this,$path,$auto_create,$auto_create_full) {
 $this = $this|0;
 $path = $path|0;
 $auto_create = $auto_create|0;
 $auto_create_full = $auto_create_full|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom = 0, $index = 0, $or$cond = 0;
 var $parent = 0, $tail = 0, $type = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $path;
 $7 = $auto_create&1;
 $3 = $7;
 $8 = $auto_create_full&1;
 $4 = $8;
 $9 = $1;
 $parent = $9;
 L1: while(1) {
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   label = 38;
   break;
  }
  $13 = $2;
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  if (!($16)) {
   label = 38;
   break;
  }
  $17 = $2;
  $18 = ((($17)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  if (!($20)) {
   label = 38;
   break;
  }
  $21 = $2;
  $22 = ((($21)) + 3|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = ($23<<24>>24)!=(0);
  if (!($24)) {
   label = 38;
   break;
  }
  $index = 0;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(0);
  do {
   if ($29) {
    $tail = 0;
   } else {
    $30 = $2;
    $31 = ((($30)) + 4|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)==(47);
    $35 = $2;
    if ($34) {
     $36 = ((($35)) + 5|0);
     $tail = $36;
     break;
    }
    $37 = ((($35)) + 4|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = ($39|0)==(91);
    if (!($40)) {
     label = 20;
     break L1;
    }
    $41 = $2;
    $42 = ((($41)) + 5|0);
    $x = $42;
    while(1) {
     $43 = $x;
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = ($45|0)>=(48);
     if (!($46)) {
      break;
     }
     $47 = $x;
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = ($49|0)<=(57);
     if (!($50)) {
      break;
     }
     $51 = $index;
     $52 = ($51*10)|0;
     $53 = $x;
     $54 = ((($53)) + 1|0);
     $x = $54;
     $55 = HEAP8[$53>>0]|0;
     $56 = $55 << 24 >> 24;
     $57 = (($56) - 48)|0;
     $58 = (($52) + ($57))|0;
     $index = $58;
    }
    $59 = $x;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)==(93);
    if (!($62)) {
     label = 19;
     break L1;
    }
    $63 = $x;
    $64 = ((($63)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)==(0);
    if ($67) {
     $tail = 0;
     break;
    } else {
     $68 = $x;
     $69 = ((($68)) + 2|0);
     $tail = $69;
     break;
    }
   }
  } while(0);
  $70 = $2;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = $72 << 24;
  $74 = $2;
  $75 = ((($74)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 << 24 >> 24;
  $78 = $77 << 16;
  $79 = $73 | $78;
  $80 = $2;
  $81 = ((($80)) + 2|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = $83 << 8;
  $85 = $79 | $84;
  $86 = $2;
  $87 = ((($86)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = $85 | $89;
  $type = $90;
  $91 = $parent;
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $type;
  $96 = $index;
  $97 = (FUNCTION_TABLE_iiii[$94 & 2047]($91,$95,$96)|0);
  $atom = $97;
  $98 = $atom;
  $99 = ($98|0)==(0|0);
  if ($99) {
   $100 = $3;
   $101 = $100&1;
   $102 = $index;
   $103 = ($102|0)==(0);
   $or$cond = $101 & $103;
   if (!($or$cond)) {
    label = 31;
    break;
   }
   $104 = $4;
   $105 = $104&1;
   $106 = (__Znwj(56)|0);
   $107 = $type;
   __THREW__ = 0;
   if ($105) {
    __ZN17AP4_ContainerAtomC2Ejhj($106,$107,0,0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 26;
     break;
    }
    $atom = $106;
   } else {
    __ZN17AP4_ContainerAtomC2Ej($106,$107);
    $112 = __THREW__; __THREW__ = 0;
    $113 = $112&1;
    if ($113) {
     label = 29;
     break;
    }
    $atom = $106;
   }
   $116 = $parent;
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $atom;
   (FUNCTION_TABLE_iiii[$119 & 2047]($116,$120,-1)|0);
  }
  $121 = $tail;
  $122 = ($121|0)!=(0|0);
  if (!($122)) {
   label = 37;
   break;
  }
  $123 = $tail;
  $2 = $123;
  $124 = $atom;
  $125 = ($124|0)==(0|0);
  if ($125) {
   $127 = 0;
  } else {
   $126 = (___dynamic_cast($124,2392,2480,0)|0);
   $127 = $126;
  }
  $128 = ($127|0)==(0|0);
  $129 = ((($127)) + 36|0);
  $130 = $128 ? 0 : $129;
  $parent = $130;
  $131 = $parent;
  $132 = ($131|0)==(0|0);
  if ($132) {
   label = 36;
   break;
  }
 }
 if ((label|0) == 19) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 26) {
  $110 = ___cxa_find_matching_catch()|0;
  $111 = tempRet0;
  $5 = $110;
  $6 = $111;
  __ZdlPv($106);
  $135 = $5;
  $136 = $6;
  ___resumeException($135|0);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $114 = ___cxa_find_matching_catch()|0;
  $115 = tempRet0;
  $5 = $114;
  $6 = $115;
  __ZdlPv($106);
  $135 = $5;
  $136 = $6;
  ___resumeException($135|0);
  // unreachable;
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 36) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 37) {
  $133 = $atom;
  $0 = $133;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 38) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function __ZNK18AP4_AtomListWriter6ActionEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $after = 0, $before = 0, $bytes_written = 0, $i = 0, $padding = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $before = sp + 24|0;
 $after = sp + 16|0;
 $bytes_written = sp + 8|0;
 $padding = sp;
 $1 = $this;
 $2 = $atom;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 (FUNCTION_TABLE_iii[$8 & 2047]($5,$before)|0);
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_iii[$12 & 2047]($9,$14)|0);
 $15 = ((($3)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iii[$19 & 2047]($16,$after)|0);
 $20 = $after;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $before;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (_i64Subtract(($22|0),($25|0),($28|0),($31|0))|0);
 $33 = tempRet0;
 $34 = $bytes_written;
 $35 = $34;
 HEAP32[$35>>2] = $32;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = $bytes_written;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $2;
 $45 = (__ZNK8AP4_Atom7GetSizeEv($44)|0);
 $46 = tempRet0;
 $47 = ($43>>>0)<($46>>>0);
 $48 = ($40>>>0)<=($45>>>0);
 $49 = ($43|0)==($46|0);
 $50 = $49 & $48;
 $51 = $47 | $50;
 if (!($51)) {
  ___assert_fail((45551|0),(45494|0),720,(45584|0));
  // unreachable;
 }
 $52 = $bytes_written;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $2;
 $59 = (__ZNK8AP4_Atom7GetSizeEv($58)|0);
 $60 = tempRet0;
 $61 = ($57>>>0)<($60>>>0);
 $62 = ($54>>>0)<($59>>>0);
 $63 = ($57|0)==($60|0);
 $64 = $63 & $62;
 $65 = $61 | $64;
 L4: do {
  if ($65) {
   __Z9AP4_DebugPKcz(45591,$vararg_buffer);
   $66 = $2;
   $67 = (__ZNK8AP4_Atom7GetSizeEv($66)|0);
   $68 = tempRet0;
   $69 = $bytes_written;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = (_i64Subtract(($67|0),($68|0),($71|0),($74|0))|0);
   $76 = tempRet0;
   $77 = $padding;
   $78 = $77;
   HEAP32[$78>>2] = $75;
   $79 = (($77) + 4)|0;
   $80 = $79;
   HEAP32[$80>>2] = $76;
   $81 = $padding;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86>>>0)>(0);
   $88 = ($83>>>0)>(1024);
   $89 = ($86|0)==(0);
   $90 = $89 & $88;
   $91 = $87 | $90;
   if ($91) {
    __Z9AP4_DebugPKcz(45651,$vararg_buffer1);
    $0 = -1;
    $108 = $0;
    STACKTOP = sp;return ($108|0);
   }
   $i = 0;
   while(1) {
    $92 = $i;
    $93 = $padding;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (($93) + 4)|0;
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (0)<($98>>>0);
    $100 = ($92>>>0)<($95>>>0);
    $101 = (0)==($98|0);
    $102 = $101 & $100;
    $103 = $99 | $102;
    if (!($103)) {
     break L4;
    }
    $104 = ((($3)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    (__ZN14AP4_ByteStream9WriteUI08Eh($105,0)|0);
    $106 = $i;
    $107 = (($106) + 1)|0;
    $i = $107;
   }
  }
 } while(0);
 $0 = 0;
 $108 = $0;
 STACKTOP = sp;return ($108|0);
}
function __ZN8AP4_ListI8AP4_AtomE16DeleteReferencesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vi[$16 & 2047]($12);
  }
  $17 = $item;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   invoke_vi(967,($17|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 9;
    break;
   }
   __ZdlPv($17);
  }
  $21 = $next;
  $item = $21;
 }
 if ((label|0) == 9) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $1 = $22;
  $2 = $23;
  __ZdlPv($17);
  $24 = $1;
  $25 = $2;
  ___resumeException($24|0);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $26 = ((($3)) + 12|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($3)) + 8|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($3)) + 4|0);
  HEAP32[$28>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListI8AP4_AtomE6InsertEPNS1_4ItemEPS0_($this,$where,$data) {
 $this = $this|0;
 $where = $where|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $where;
 $3 = $data;
 $6 = $1;
 $7 = (__Znwj(12)|0);
 $8 = $3;
 __THREW__ = 0;
 invoke_vii(882,($7|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $4 = $28;
  $5 = $29;
  __ZdlPv($7);
  $30 = $4;
  $31 = $5;
  ___resumeException($30|0);
  // unreachable;
 }
 $item = $7;
 $11 = $2;
 $12 = ($11|0)==(0|0);
 do {
  if ($12) {
   $13 = ((($6)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   $16 = $item;
   if ($15) {
    $17 = ((($16)) + 8|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($6)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $item;
    $21 = ((($20)) + 4|0);
    HEAP32[$21>>2] = $19;
    $22 = $item;
    $23 = ((($6)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 8|0);
    HEAP32[$25>>2] = $22;
    $26 = $item;
    $27 = ((($6)) + 8|0);
    HEAP32[$27>>2] = $26;
    break;
   } else {
    $32 = ((($6)) + 8|0);
    HEAP32[$32>>2] = $16;
    $33 = $item;
    $34 = ((($6)) + 12|0);
    HEAP32[$34>>2] = $33;
    $35 = $item;
    $36 = ((($35)) + 4|0);
    HEAP32[$36>>2] = 0;
    $37 = $item;
    $38 = ((($37)) + 8|0);
    HEAP32[$38>>2] = 0;
    break;
   }
  } else {
   $39 = $2;
   $40 = ((($6)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if (!($42)) {
    $45 = $2;
    $46 = $item;
    $47 = ((($46)) + 8|0);
    HEAP32[$47>>2] = $45;
    $48 = $2;
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $item;
    $52 = ((($51)) + 4|0);
    HEAP32[$52>>2] = $50;
    $53 = $item;
    $54 = $2;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 8|0);
    HEAP32[$57>>2] = $53;
    $58 = $item;
    $59 = $2;
    $60 = ((($59)) + 4|0);
    HEAP32[$60>>2] = $58;
    break;
   }
   $43 = $item;
   $44 = (__ZN8AP4_ListI8AP4_AtomE3AddEPNS1_4ItemE($6,$43)|0);
   $0 = $44;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $61 = ((($6)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 1)|0;
 HEAP32[$61>>2] = $63;
 $0 = 0;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function __ZN8AP4_ListI8AP4_AtomE6RemoveEPS0_($this,$data) {
 $this = $this|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $data;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $item;
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ($9|0)==($10|0);
  $12 = $item;
  if ($11) {
   label = 4;
   break;
  }
  $14 = ((($12)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $item = $15;
 }
 if ((label|0) == 4) {
  $13 = (__ZN8AP4_ListI8AP4_AtomE6RemoveEPNS1_4ItemE($3,$12)|0);
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = -11;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomFinderC2Ejj($this,$type,$index) {
 $this = $this|0;
 $type = $type|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $index;
 $3 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item6FinderC2Ev($3);
 $4 = 12392;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $1;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNK8AP4_ListI8AP4_AtomE4FindERKNS1_4Item6FinderERPS0_($this,$finder,$data) {
 $this = $this|0;
 $finder = $finder|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $finder;
 $3 = $data;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $item = $6;
 while(1) {
  $7 = $item;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $item;
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$12 & 2047]($9,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $item;
  if ($16) {
   label = 4;
   break;
  }
  $20 = ((($17)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $item = $21;
 }
 if ((label|0) == 4) {
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $22 = $3;
  HEAP32[$22>>2] = 0;
  $0 = -11;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZN14AP4_AtomFinderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_ListI8AP4_AtomE4Item6FinderD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE6RemoveEPNS1_4ItemE($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $item;
 $4 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 do {
  if ($8) {
   $12 = ($11|0)!=(0|0);
   $13 = $1;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   if ($12) {
    $16 = $1;
    $17 = ((($16)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    HEAP32[$19>>2] = $15;
    $20 = $1;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $1;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 4|0);
    HEAP32[$26>>2] = $22;
    break;
   } else {
    $27 = ((($4)) + 12|0);
    HEAP32[$27>>2] = $15;
    $28 = ((($4)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 4|0);
    HEAP32[$30>>2] = 0;
    break;
   }
  } else {
   $31 = ((($4)) + 8|0);
   HEAP32[$31>>2] = $11;
   $32 = ((($4)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = ((($4)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 8|0);
    HEAP32[$37>>2] = 0;
    break;
   } else {
    $38 = ((($4)) + 12|0);
    HEAP32[$38>>2] = 0;
    break;
   }
  }
 } while(0);
 $39 = $1;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $43 = ((($4)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[$43>>2] = $45;
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 invoke_vi(967,($39|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $2 = $46;
  $3 = $47;
  __ZdlPv($39);
  $48 = $2;
  $49 = $3;
  ___resumeException($48|0);
  // unreachable;
 }
 __ZdlPv($39);
 $43 = ((($4)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + -1)|0;
 HEAP32[$43>>2] = $45;
 STACKTOP = sp;return 0;
}
function __ZN28AP4_NullTerminatedStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(712,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN28AP4_NullTerminatedStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 12240;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN18AP4_AtomListWriterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(718,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_AtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK14AP4_AtomFinder4TestEP8AP4_Atom($this,$atom) {
 $this = $this|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $atom;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK8AP4_Atom7GetTypeEv($4)|0);
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 do {
  if ($8) {
   $9 = ((($3)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + -1)|0;
   HEAP32[$9>>2] = $11;
   $12 = ($10|0)==(0);
   if ($12) {
    $0 = 0;
    break;
   } else {
    $0 = -1;
    break;
   }
  } else {
   $0 = -1;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function __ZN14AP4_AtomFinderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(723,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4Item6FinderD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(721,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8AP4_ListI8AP4_AtomE4Item6FinderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListI8AP4_AtomE4Item6FinderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 12372;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($type,$0,$1,$is_full,$force_64,$stream,$atom_factory) {
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $is_full = $is_full|0;
 $force_64 = $force_64|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flags = 0, $or$cond = 0, $peek = 0, $phantom_size = 0, $position = 0, $position1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 16|0;
 $version = sp + 60|0;
 $flags = sp + 40|0;
 $peek = sp + 32|0;
 $position = sp + 8|0;
 $position1 = sp;
 $3 = $type;
 $11 = $4;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = $is_full&1;
 $5 = $15;
 $16 = $force_64&1;
 $6 = $16;
 $7 = $stream;
 $8 = $atom_factory;
 $17 = $5;
 $18 = $17&1;
 if (!($18)) {
  $109 = (__Znwj(56)|0);
  $110 = $3;
  $111 = $4;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = $6;
  $118 = $117&1;
  $119 = $7;
  $120 = $8;
  __THREW__ = 0;
  invoke_viiiiiii(1152,($109|0),($110|0),($113|0),($116|0),($118|0),($119|0),($120|0));
  $121 = __THREW__; __THREW__ = 0;
  $122 = $121&1;
  if ($122) {
   $123 = ___cxa_find_matching_catch()|0;
   $124 = tempRet0;
   $9 = $123;
   $10 = $124;
   __ZdlPv($109);
   $126 = $9;
   $127 = $10;
   ___resumeException($126|0);
   // unreachable;
  } else {
   $2 = $109;
   $125 = $2;
   STACKTOP = sp;return ($125|0);
  }
 }
 $19 = $7;
 $20 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($19,$version,$flags)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $2 = 0;
  $125 = $2;
  STACKTOP = sp;return ($125|0);
 }
 $22 = $3;
 $23 = ($22|0)==(1835365473);
 do {
  if ($23) {
   $24 = HEAP8[$version>>0]|0;
   $25 = $24&255;
   $26 = $25 << 24;
   $27 = HEAP32[$flags>>2]|0;
   $28 = $26 | $27;
   $phantom_size = $28;
   $29 = $phantom_size;
   $30 = ($29>>>0)>=(8);
   $31 = $4;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36>>>0)>(0);
   $38 = ($33>>>0)>=(16);
   $39 = ($36|0)==(0);
   $40 = $39 & $38;
   $41 = $37 | $40;
   $or$cond = $30 & $41;
   if ($or$cond) {
    $42 = $7;
    $43 = (__ZN14AP4_ByteStream8ReadUI32ERj($42,$peek)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     $2 = 0;
     $125 = $2;
     STACKTOP = sp;return ($125|0);
    }
    $45 = HEAP32[$peek>>2]|0;
    $46 = ($45|0)==(1751411826);
    $47 = $7;
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    if (!($46)) {
     (FUNCTION_TABLE_iii[$50 & 2047]($47,$position1)|0);
     $79 = $7;
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80)) + 24|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $position1;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($83) + 4)|0;
     $87 = $86;
     $88 = HEAP32[$87>>2]|0;
     $89 = (_i64Subtract(($85|0),($88|0),4,0)|0);
     $90 = tempRet0;
     (FUNCTION_TABLE_iiii[$82 & 2047]($79,$89,$90)|0);
     break;
    }
    (FUNCTION_TABLE_iii[$50 & 2047]($47,$position)|0);
    $51 = $7;
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $position;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $61 = (_i64Subtract(($57|0),($60|0),8,0)|0);
    $62 = tempRet0;
    (FUNCTION_TABLE_iiii[$54 & 2047]($51,$61,$62)|0);
    $63 = (__Znwj(56)|0);
    $64 = $3;
    $65 = $4;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $6;
    $72 = $71&1;
    $73 = $7;
    $74 = $8;
    __THREW__ = 0;
    invoke_viiiiiii(1152,($63|0),($64|0),($67|0),($70|0),($72|0),($73|0),($74|0));
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    if ($76) {
     $77 = ___cxa_find_matching_catch()|0;
     $78 = tempRet0;
     $9 = $77;
     $10 = $78;
     __ZdlPv($63);
     $126 = $9;
     $127 = $10;
     ___resumeException($126|0);
     // unreachable;
    } else {
     $2 = $63;
     $125 = $2;
     STACKTOP = sp;return ($125|0);
    }
   }
  }
 } while(0);
 $91 = (__Znwj(56)|0);
 $92 = $3;
 $93 = $4;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = $6;
 $100 = $99&1;
 $101 = HEAP8[$version>>0]|0;
 $102 = HEAP32[$flags>>2]|0;
 $103 = $7;
 $104 = $8;
 __THREW__ = 0;
 invoke_viiiiiiiii(1153,($91|0),($92|0),($95|0),($98|0),($100|0),($101|0),($102|0),($103|0),($104|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if ($106) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $9 = $107;
  $10 = $108;
  __ZdlPv($91);
  $126 = $9;
  $127 = $10;
  ___resumeException($126|0);
  // unreachable;
 } else {
  $2 = $91;
  $125 = $2;
  STACKTOP = sp;return ($125|0);
 }
 return (0)|0;
}
function __ZN17AP4_ContainerAtomC2Ej($this,$type) {
 $this = $this|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $4 = $0;
 $5 = $1;
 __ZN8AP4_AtomC2Ejj($4,$5,8);
 $6 = ((($4)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = 12412;
  HEAP32[$4>>2] = $9;
  $10 = ((($4)) + 36|0);
  $11 = 12488;
  HEAP32[$10>>2] = $11;
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $2 = $12;
 $3 = $13;
 __THREW__ = 0;
 invoke_vi(706,($4|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $2;
  $17 = $3;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtomC2Ejhj($this,$type,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $version = $version|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $version;
 $3 = $flags;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 __ZN8AP4_AtomC2Ejjhj($6,$7,12,$8,$9);
 $10 = ((($6)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $13 = 12412;
  HEAP32[$6>>2] = $13;
  $14 = ((($6)) + 36|0);
  $15 = 12488;
  HEAP32[$14>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __THREW__ = 0;
 invoke_vi(706,($6|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $20 = $4;
  $21 = $5;
  ___resumeException($20|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtomC2Ejyb($this,$type,$0,$1,$force_64) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = $force_64&1;
 $5 = $12;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $21&1;
 __ZN8AP4_AtomC2Ejyb($13,$14,$17,$20,$22);
 $23 = ((($13)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $26 = 12412;
  HEAP32[$13>>2] = $26;
  $27 = ((($13)) + 36|0);
  $28 = 12488;
  HEAP32[$27>>2] = $28;
  STACKTOP = sp;return;
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $6 = $29;
 $7 = $30;
 __THREW__ = 0;
 invoke_vi(706,($13|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 } else {
  $33 = $6;
  $34 = $7;
  ___resumeException($33|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtomC2Ejybhj($this,$type,$0,$1,$force_64,$version,$flags) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $version = $version|0;
 $flags = $flags|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $10 = $4;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = $force_64&1;
 $5 = $14;
 $6 = $version;
 $7 = $flags;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = $23&1;
 $25 = $6;
 $26 = $7;
 __ZN8AP4_AtomC2Ejybhj($15,$16,$19,$22,$24,$25,$26);
 $27 = ((($15)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  $30 = 12412;
  HEAP32[$15>>2] = $30;
  $31 = ((($15)) + 36|0);
  $32 = 12488;
  HEAP32[$31>>2] = $32;
  STACKTOP = sp;return;
 }
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $8 = $33;
 $9 = $34;
 __THREW__ = 0;
 invoke_vi(706,($15|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch(0|0)|0;
  $40 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 } else {
  $37 = $8;
  $38 = $9;
  ___resumeException($37|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$0,$1,$force_64,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $10 = $4;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = $force_64&1;
 $5 = $14;
 $6 = $stream;
 $7 = $atom_factory;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = $23&1;
 __ZN8AP4_AtomC2Ejyb($15,$16,$19,$22,$24);
 $25 = ((($15)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($25|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $49 = ___cxa_find_matching_catch()|0;
  $50 = tempRet0;
  $8 = $49;
  $9 = $50;
 } else {
  $28 = 12412;
  HEAP32[$15>>2] = $28;
  $29 = ((($15)) + 36|0);
  $30 = 12488;
  HEAP32[$29>>2] = $30;
  $31 = $7;
  $32 = $6;
  $33 = $4;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$15>>2]|0;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  __THREW__ = 0;
  $42 = (invoke_ii($41|0,($15|0))|0);
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if (!($44)) {
   $45 = (_i64Subtract(($35|0),($38|0),($42|0),0)|0);
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_viiiii(961,($15|0),($31|0),($32|0),($45|0),($46|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    STACKTOP = sp;return;
   }
  }
  $51 = ___cxa_find_matching_catch()|0;
  $52 = tempRet0;
  $8 = $51;
  $9 = $52;
  $53 = ((($15)) + 36|0);
  __THREW__ = 0;
  invoke_vi(716,($53|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $60 = ___cxa_find_matching_catch(0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($15|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $60 = ___cxa_find_matching_catch(0|0)|0;
  $61 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable;
 } else {
  $58 = $8;
  $59 = $9;
  ___resumeException($58|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy($this,$atom_factory,$stream,$0,$1) {
 $this = $this|0;
 $atom_factory = $atom_factory|0;
 $stream = $stream|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atom = 0, $bytes_available = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $atom = sp + 16|0;
 $bytes_available = sp;
 $2 = $this;
 $3 = $atom_factory;
 $4 = $stream;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $2;
 $11 = $5;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $bytes_available;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = $3;
 $22 = ((($10)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 __ZN15AP4_AtomFactory11PushContextEj($21,$23);
 while(1) {
  $24 = $3;
  $25 = $4;
  $26 = (__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom($24,$25,$bytes_available,$atom)|0);
  $27 = ($26|0)==(0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$atom>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($10)) + 36|0);
  (FUNCTION_TABLE_iii[$31 & 2047]($28,$32)|0);
  $33 = ((($10)) + 36|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$atom>>2]|0;
  (__ZN8AP4_ListI8AP4_AtomE3AddEPS0_($34,$35)|0);
 }
 $36 = $3;
 __ZN15AP4_AtomFactory10PopContextEv($36);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtomC2EjybhjR14AP4_ByteStreamR15AP4_AtomFactory($this,$type,$0,$1,$force_64,$version,$flags,$stream,$atom_factory) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 $1 = $1|0;
 $force_64 = $force_64|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 $atom_factory = $atom_factory|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $2 = $this;
 $3 = $type;
 $12 = $4;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = $force_64&1;
 $5 = $16;
 $6 = $version;
 $7 = $flags;
 $8 = $stream;
 $9 = $atom_factory;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $5;
 $26 = $25&1;
 $27 = $6;
 $28 = $7;
 __ZN8AP4_AtomC2Ejybhj($17,$18,$21,$24,$26,$27,$28);
 $29 = ((($17)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1154,($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $10 = $53;
  $11 = $54;
 } else {
  $32 = 12412;
  HEAP32[$17>>2] = $32;
  $33 = ((($17)) + 36|0);
  $34 = 12488;
  HEAP32[$33>>2] = $34;
  $35 = $9;
  $36 = $8;
  $37 = $4;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$17>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  __THREW__ = 0;
  $46 = (invoke_ii($45|0,($17|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if (!($48)) {
   $49 = (_i64Subtract(($39|0),($42|0),($46|0),0)|0);
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_viiiii(961,($17|0),($35|0),($36|0),($49|0),($50|0));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if (!($52)) {
    STACKTOP = sp;return;
   }
  }
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $10 = $55;
  $11 = $56;
  $57 = ((($17)) + 36|0);
  __THREW__ = 0;
  invoke_vi(716,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $64 = ___cxa_find_matching_catch(0|0)|0;
   $65 = tempRet0;
   ___clang_call_terminate($64);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($17|0));
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $64 = ___cxa_find_matching_catch(0|0)|0;
  $65 = tempRet0;
  ___clang_call_terminate($64);
  // unreachable;
 } else {
  $62 = $10;
  $63 = $11;
  ___resumeException($62|0);
  // unreachable;
 }
}
function __ZN17AP4_ContainerAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $child_clone = 0, $child_item = 0, $clone = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = (__Znwj(56)|0);
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 do {
  if ($6) {
   $10 = ((($3)) + 25|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ((($3)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_viiii(1155,($7|0),($9|0),($11|0),($13|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $clone = $7;
    break;
   }
   $16 = ___cxa_find_matching_catch()|0;
   $17 = tempRet0;
   $1 = $16;
   $2 = $17;
   __ZdlPv($7);
   $44 = $1;
   $45 = $2;
   ___resumeException($44|0);
   // unreachable;
  } else {
   __THREW__ = 0;
   invoke_vii(983,($7|0),($9|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $clone = $7;
    break;
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   $1 = $20;
   $2 = $21;
   __ZdlPv($7);
   $44 = $1;
   $45 = $2;
   ___resumeException($44|0);
   // unreachable;
  }
 } while(0);
 $22 = ((($3)) + 36|0);
 $23 = ((($22)) + 4|0);
 $24 = (__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv($23)|0);
 $child_item = $24;
 while(1) {
  $25 = $child_item;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $child_item;
  $28 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv($27)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (FUNCTION_TABLE_ii[$31 & 2047]($28)|0);
  $child_clone = $32;
  $33 = $child_clone;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $clone;
   $36 = ((($35)) + 36|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $child_clone;
   (FUNCTION_TABLE_iiii[$39 & 2047]($36,$40,-1)|0);
  }
  $41 = $child_item;
  $42 = (__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv($41)|0);
  $child_item = $42;
 }
 $43 = $clone;
 STACKTOP = sp;return ($43|0);
}
function __ZN17AP4_ContainerAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (FUNCTION_TABLE_iii[$5 & 2047]($2,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN17AP4_ContainerAtom15InspectChildrenER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $inspector;
 $5 = $0;
 $6 = ((($5)) + 36|0);
 $7 = ((($6)) + 4|0);
 $8 = $1;
 __ZN21AP4_AtomListInspectorC2ER17AP4_AtomInspector($2,$8);
 __THREW__ = 0;
 (invoke_iii(881,($7|0),($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __ZN21AP4_AtomListInspectorD2Ev($2);
  STACKTOP = sp;return 0;
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $3 = $11;
 $4 = $12;
 __THREW__ = 0;
 invoke_vi(89,($2|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  $15 = $3;
  $16 = $4;
  ___resumeException($15|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN17AP4_ContainerAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $this;
 $1 = $stream;
 $5 = $0;
 $6 = ((($5)) + 36|0);
 $7 = ((($6)) + 4|0);
 $8 = $1;
 __ZN18AP4_AtomListWriterC2ER14AP4_ByteStream($2,$8);
 __THREW__ = 0;
 $9 = (invoke_iii(881,($7|0),($2|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __ZN18AP4_AtomListWriterD2Ev($2);
  STACKTOP = sp;return ($9|0);
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __THREW__ = 0;
 invoke_vi(718,($2|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $3;
  $17 = $4;
  ___resumeException($16|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 2047]($6)|0);
 $11 = $size;
 $12 = $11;
 HEAP32[$12>>2] = $10;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 36|0);
 $16 = ((($15)) + 4|0);
 __ZN17AP4_AtomSizeAdderC2ERy($3,$size);
 __THREW__ = 0;
 (invoke_iii(881,($16|0),($3|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $4 = $33;
  $5 = $34;
  __THREW__ = 0;
  invoke_vi(262,($3|0));
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   $39 = ___cxa_find_matching_catch(0|0)|0;
   $40 = tempRet0;
   ___clang_call_terminate($39);
   // unreachable;
  } else {
   $37 = $4;
   $38 = $5;
   ___resumeException($37|0);
   // unreachable;
  }
 }
 __ZN17AP4_AtomSizeAdderD2Ev($3);
 $19 = $size;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 __ZN8AP4_Atom7SetSizeEyb($6,$21,$24,0);
 $25 = ((($6)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($6)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vii[$32 & 2047]($29,$6);
 STACKTOP = sp;return;
}
function __ZThn36_N17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + -36|0);
 $5 = $2;
 __ZN17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom($4,$5);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = (__ZNK8AP4_Atom7GetSizeEv($2)|0);
 $4 = tempRet0;
 $5 = $1;
 $6 = (__ZNK8AP4_Atom7GetSizeEv($5)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($3|0),($4|0),($6|0),($7|0))|0);
 $9 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($2,$8,$9,0);
 $10 = ((($2)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ((($2)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vii[$17 & 2047]($14,$2);
 STACKTOP = sp;return;
}
function __ZThn36_N17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = ((($2)) + -36|0);
 $4 = $1;
 __ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom($3,$4);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = (__ZNK8AP4_Atom7GetSizeEv($2)|0);
 $4 = tempRet0;
 $5 = $1;
 $6 = (__ZNK8AP4_Atom7GetSizeEv($5)|0);
 $7 = tempRet0;
 $8 = (_i64Subtract(($3|0),($4|0),($6|0),($7|0))|0);
 $9 = tempRet0;
 __ZN8AP4_Atom7SetSizeEyb($2,$8,$9,0);
 $10 = ((($2)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ((($2)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vii[$17 & 2047]($14,$2);
 STACKTOP = sp;return;
}
function __ZThn36_N17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = ((($2)) + -36|0);
 $4 = $1;
 __ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom($3,$4);
 STACKTOP = sp;return;
}
function __ZThn36_N17AP4_ContainerAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN17AP4_ContainerAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN17AP4_ContainerAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(726,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZThn36_N17AP4_ContainerAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -36|0);
 __ZN17AP4_ContainerAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12AP4_SttsAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(72)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1156,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_SttsAtomC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8AP4_AtomC2Ejjhj($3,1937011827,16,0,0);
 $4 = 12540;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1157,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 56|0);
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 56|0);
  $12 = ((($11)) + 8|0);
  $13 = $12;
  $14 = $13;
  HEAP32[$14>>2] = 0;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 }
 $17 = ___cxa_find_matching_catch()|0;
 $18 = tempRet0;
 $1 = $17;
 $2 = $18;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $23 = ___cxa_find_matching_catch(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  $21 = $1;
  $22 = $2;
  ___resumeException($21|0);
  // unreachable;
 }
}
function __ZN12AP4_SttsAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $entry_count = 0, $sample_count = 0, $sample_duration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry_count = sp + 16|0;
 $sample_count = sp + 12|0;
 $sample_duration = sp + 8|0;
 $7 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN8AP4_AtomC2Ejjhj($8,1937011827,$9,$10,$11);
 $12 = 12540;
 HEAP32[$8>>2] = $12;
 $13 = ((($8)) + 36|0);
 __THREW__ = 0;
 invoke_vi(1157,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $5 = $48;
  $6 = $49;
 } else {
  $16 = ((($8)) + 56|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($8)) + 56|0);
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($8)) + 56|0);
  $20 = ((($19)) + 8|0);
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = 0;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($25|0),($entry_count|0))|0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  L4: do {
   if (!($27)) {
    while(1) {
     $28 = HEAP32[$entry_count>>2]|0;
     $29 = (($28) + -1)|0;
     HEAP32[$entry_count>>2] = $29;
     $30 = ($28|0)!=(0);
     if (!($30)) {
      break;
     }
     $31 = $4;
     __THREW__ = 0;
     $32 = (invoke_iii(854,($31|0),($sample_count|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      break L4;
     }
     $35 = ($32|0)==(0);
     if (!($35)) {
      continue;
     }
     $36 = $4;
     __THREW__ = 0;
     $37 = (invoke_iii(854,($36|0),($sample_duration|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break L4;
     }
     $40 = ($37|0)==(0);
     if (!($40)) {
      continue;
     }
     $41 = ((($8)) + 36|0);
     $42 = HEAP32[$sample_count>>2]|0;
     $43 = HEAP32[$sample_duration>>2]|0;
     __THREW__ = 0;
     invoke_viii(1158,($7|0),($42|0),($43|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break L4;
     }
     __THREW__ = 0;
     (invoke_iii(1159,($41|0),($7|0))|0);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      break L4;
     }
    }
    STACKTOP = sp;return;
   }
  } while(0);
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $5 = $50;
  $6 = $51;
  __THREW__ = 0;
  invoke_vi(737,($13|0));
  $52 = __THREW__; __THREW__ = 0;
  $53 = $52&1;
  if ($53) {
   $58 = ___cxa_find_matching_catch(0|0)|0;
   $59 = tempRet0;
   ___clang_call_terminate($58);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($8|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 } else {
  $56 = $5;
  $57 = $6;
  ___resumeException($56|0);
  // unreachable;
 }
}
function __ZN12AP4_SttsAtom6GetDtsEjRyPj($this,$sample,$dts,$duration) {
 $this = $this|0;
 $sample = $sample|0;
 $dts = $dts|0;
 $duration = $duration|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dts_start = 0, $entry = 0, $i = 0, $lookup_start = 0, $sample_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dts_start = sp;
 $1 = $this;
 $2 = $sample;
 $3 = $dts;
 $4 = $duration;
 $5 = $1;
 $6 = $3;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $4;
  HEAP32[$13>>2] = 0;
 }
 $14 = $2;
 $15 = ($14|0)==(0);
 if ($15) {
  $0 = -12;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 $16 = $2;
 $17 = (($16) + -1)|0;
 $2 = $17;
 $lookup_start = 0;
 $sample_start = 0;
 $18 = $dts_start;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = $2;
 $23 = ((($5)) + 56|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>=($25>>>0);
 if ($26) {
  $27 = ((($5)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $lookup_start = $28;
  $29 = ((($5)) + 56|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $sample_start = $31;
  $32 = ((($5)) + 56|0);
  $33 = ((($32)) + 8|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $dts_start;
  $41 = $40;
  HEAP32[$41>>2] = $36;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
 }
 $44 = $lookup_start;
 $i = $44;
 while(1) {
  $45 = $i;
  $46 = ((($5)) + 36|0);
  $47 = (__ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($46)|0);
  $48 = ($45>>>0)<($47>>>0);
  if (!($48)) {
   label = 14;
   break;
  }
  $49 = ((($5)) + 36|0);
  $50 = $i;
  $51 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($49,$50)|0);
  $entry = $51;
  $52 = $2;
  $53 = $sample_start;
  $54 = $entry;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + ($55))|0;
  $57 = ($52>>>0)<($56>>>0);
  if ($57) {
   break;
  }
  $102 = $entry;
  $103 = HEAP32[$102>>2]|0;
  $104 = $sample_start;
  $105 = (($104) + ($103))|0;
  $sample_start = $105;
  $106 = $entry;
  $107 = HEAP32[$106>>2]|0;
  $108 = $entry;
  $109 = ((($108)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = Math_imul($107, $110)|0;
  $112 = $dts_start;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $118 = (_i64Add(($114|0),($117|0),($111|0),0)|0);
  $119 = tempRet0;
  $120 = $dts_start;
  $121 = $120;
  HEAP32[$121>>2] = $118;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $119;
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 if ((label|0) == 14) {
  $0 = -12;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 $58 = $dts_start;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = $2;
 $65 = $sample_start;
 $66 = (($64) - ($65))|0;
 $67 = $entry;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (___muldi3(($66|0),0,($69|0),0)|0);
 $71 = tempRet0;
 $72 = (_i64Add(($60|0),($63|0),($70|0),($71|0))|0);
 $73 = tempRet0;
 $74 = $3;
 $75 = $74;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = $4;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = $entry;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $4;
  HEAP32[$84>>2] = $83;
 }
 $85 = $i;
 $86 = ((($5)) + 56|0);
 HEAP32[$86>>2] = $85;
 $87 = $sample_start;
 $88 = ((($5)) + 56|0);
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = $87;
 $90 = $dts_start;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($5)) + 56|0);
 $97 = ((($96)) + 8|0);
 $98 = $97;
 $99 = $98;
 HEAP32[$99>>2] = $92;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $95;
 $0 = 0;
 $126 = $0;
 STACKTOP = sp;return ($126|0);
}
function __ZN12AP4_SttsAtom8AddEntryEjj($this,$sample_count,$sample_duration) {
 $this = $this|0;
 $sample_count = $sample_count|0;
 $sample_duration = $sample_duration|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $sample_count;
 $2 = $sample_duration;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = $1;
 $7 = $2;
 __ZN18AP4_SttsTableEntryC2Ejj($3,$6,$7);
 (__ZN9AP4_ArrayI18AP4_SttsTableEntryE6AppendERKS0_($5,$3)|0);
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 8)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return 0;
}
function __ZN12AP4_SttsAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry_count = 0, $i = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = (__ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($4)|0);
 $entry_count = $5;
 $6 = $2;
 $7 = $entry_count;
 $8 = (__ZN14AP4_ByteStream9WriteUI32Ej($6,$7)|0);
 $result = $8;
 $9 = $result;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $result;
  $0 = $11;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $entry_count;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 10;
   break;
  }
  $15 = $2;
  $16 = ((($3)) + 36|0);
  $17 = $i;
  $18 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($16,$17)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$19)|0);
  $result = $20;
  $21 = $result;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 6;
   break;
  }
  $24 = $2;
  $25 = ((($3)) + 36|0);
  $26 = $i;
  $27 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($25,$26)|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (__ZN14AP4_ByteStream9WriteUI32Ej($24,$29)|0);
  $result = $30;
  $31 = $result;
  $32 = ($31|0)!=(0);
  if ($32) {
   label = 8;
   break;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 6) {
  $23 = $result;
  $0 = $23;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 8) {
  $33 = $result;
  $0 = $33;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function __ZN12AP4_SttsAtom26GetSampleIndexForTimeStampEyRj($this,$0,$1,$sample_index) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $sample_index = $sample_index|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $accumulated = 0, $entry_count = 0, $i = 0, $next_accumulated = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 16|0;
 $accumulated = sp + 8|0;
 $next_accumulated = sp;
 $3 = $this;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $5 = $sample_index;
 $10 = $3;
 $11 = ((($10)) + 36|0);
 $12 = (__ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($11)|0);
 $entry_count = $12;
 $13 = $accumulated;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = $5;
 HEAP32[$17>>2] = 0;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $entry_count;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $accumulated;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($10)) + 36|0);
  $28 = $i;
  $29 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($27,$28)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($10)) + 36|0);
  $32 = $i;
  $33 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($31,$32)|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (___muldi3(($30|0),0,($35|0),0)|0);
  $37 = tempRet0;
  $38 = (_i64Add(($23|0),($26|0),($36|0),($37|0))|0);
  $39 = tempRet0;
  $40 = $next_accumulated;
  $41 = $40;
  HEAP32[$41>>2] = $38;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = $4;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $next_accumulated;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($49>>>0)<($55>>>0);
  $57 = ($46>>>0)<($52>>>0);
  $58 = ($49|0)==($55|0);
  $59 = $58 & $57;
  $60 = $56 | $59;
  if ($60) {
   label = 4;
   break;
  }
  $85 = $next_accumulated;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = $accumulated;
  $92 = $91;
  HEAP32[$92>>2] = $87;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
  $95 = ((($10)) + 36|0);
  $96 = $i;
  $97 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($95,$96)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $5;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($98))|0;
  HEAP32[$99>>2] = $101;
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
 }
 if ((label|0) == 4) {
  $61 = $4;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $accumulated;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  $72 = HEAP32[$71>>2]|0;
  $73 = (_i64Subtract(($63|0),($66|0),($69|0),($72|0))|0);
  $74 = tempRet0;
  $75 = ((($10)) + 36|0);
  $76 = $i;
  $77 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($75,$76)|0);
  $78 = ((($77)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (___udivdi3(($73|0),($74|0),($79|0),0)|0);
  $81 = tempRet0;
  $82 = $5;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($80))|0;
  HEAP32[$82>>2] = $84;
  $2 = 0;
  $104 = $2;
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 6) {
  $2 = -1;
  $104 = $2;
  STACKTOP = sp;return ($104|0);
 }
 return (0)|0;
}
function __ZN12AP4_SttsAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $i = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 288|0;
 $value = sp + 32|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45775,$8,0,0);
 $9 = $1;
 $10 = (__ZN17AP4_AtomInspector12GetVerbosityEv($9)|0);
 $11 = ($10>>>0)>=(1);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($2)) + 36|0);
  $14 = (__ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($13)|0);
  $15 = ($12>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  HEAP32[$vararg_buffer>>2] = $16;
  (_snprintf($header,32,45787,$vararg_buffer)|0);
  $17 = ((($2)) + 36|0);
  $18 = $i;
  $19 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($17,$18)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 36|0);
  $22 = $i;
  $23 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($21,$22)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $25;
  (_snprintf($value,256,45797,$vararg_buffer1)|0);
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_viiii[$29 & 2047]($26,$header,$value,0);
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 12612;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN18AP4_SttsTableEntryC2Ejj($this,$sample_count,$sample_duration) {
 $this = $this|0;
 $sample_count = $sample_count|0;
 $sample_duration = $sample_duration|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sample_count;
 $2 = $sample_duration;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryE6AppendERKS0_($this,$item) {
 $this = $this|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_count = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $item;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($5>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($3)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14<<1;
   $16 = $15;
  } else {
   $16 = 64;
  }
  $new_count = $16;
  $17 = $new_count;
  $18 = ((($3)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = ($17>>>0)<($20>>>0);
  if ($21) {
   $22 = ((($3)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   $new_count = $24;
  }
  $25 = $new_count;
  $26 = (__ZN9AP4_ArrayI18AP4_SttsTableEntryE14EnsureCapacityEj($3,$25)|0);
  $result = $26;
  $27 = $result;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $result;
   $0 = $29;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<3)|0);
 $36 = $2;
 ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;
 $0 = 0;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 12612;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayI18AP4_SttsTableEntryE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNK9AP4_ArrayI18AP4_SttsTableEntryE9ItemCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryEixEm($this,$idx) {
 $this = $this|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<3)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryE14EnsureCapacityEj($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $new_items = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $count;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<=($6>>>0);
 if ($7) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $2;
 $9 = $8<<3;
 $10 = (__Znwj($9)|0);
 $new_items = $10;
 $11 = $new_items;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -2;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $i = 0;
   while(1) {
    $19 = $i;
    $20 = ((($3)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $new_items;
    $25 = (($24) + ($23<<3)|0);
    $26 = $i;
    $27 = ((($3)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($26<<3)|0);
    ;HEAP32[$25>>2]=HEAP32[$29>>2]|0;HEAP32[$25+4>>2]=HEAP32[$29+4>>2]|0;
    $30 = $i;
    $31 = (($30) + 1)|0;
    $i = $31;
   }
   $32 = ((($3)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   __ZdlPv($33);
  }
 }
 $34 = $new_items;
 $35 = ((($3)) + 12|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($3)) + 4|0);
 HEAP32[$37>>2] = $36;
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN9AP4_ArrayI18AP4_SttsTableEntryED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(737,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SttsAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(730,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_SttsAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 12540;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(737,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN27AP4_PiffTrackEncryptionAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $result = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 12|0;
 $1 = $size;
 $2 = $stream;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $12 = (__Znwj(80)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 __THREW__ = 0;
 invoke_viiiii(1160,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
  __ZdlPv($12);
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 $0 = $12;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN27AP4_PiffTrackEncryptionAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN12AP4_UuidAtomC2EyPKhhj($7,$8,0,45866,$9,$10);
 $11 = ((($7)) + 52|0);
 $12 = $4;
 __THREW__ = 0;
 invoke_vii(1148,($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = 12628;
  HEAP32[$7>>2] = $15;
  $16 = ((($7)) + 52|0);
  $17 = 12688;
  HEAP32[$16>>2] = $17;
  STACKTOP = sp;return;
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $5 = $18;
 $6 = $19;
 __THREW__ = 0;
 invoke_vi(3,($7|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $24 = ___cxa_find_matching_catch(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  $22 = $5;
  $23 = $6;
  ___resumeException($22|0);
  // unreachable;
 }
}
function __ZN27AP4_PiffTrackEncryptionAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 $4 = $1;
 $5 = (__ZN23AP4_CencTrackEncryption15DoInspectFieldsER17AP4_AtomInspector($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN27AP4_PiffTrackEncryptionAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 $4 = $1;
 $5 = (__ZN23AP4_CencTrackEncryption13DoWriteFieldsER14AP4_ByteStream($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN28AP4_PiffSampleEncryptionAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $result = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 12|0;
 $1 = $size;
 $2 = $stream;
 HEAP8[$version>>0] = 0;
 HEAP32[$flags>>2] = 0;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $result = $6;
 $7 = $result;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $12 = (__Znwj(112)|0);
 $13 = $1;
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 __THREW__ = 0;
 invoke_viiiii(1161,($12|0),($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
  __ZdlPv($12);
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 $0 = $12;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN28AP4_PiffSampleEncryptionAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN12AP4_UuidAtomC2EyPKhhj($7,$8,0,45882,$9,$10);
 $11 = 12704;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 52|0);
 $13 = 12764;
 HEAP32[$12>>2] = $13;
 $14 = ((($7)) + 52|0);
 $15 = $1;
 $16 = $4;
 __THREW__ = 0;
 invoke_viiii(896,($14|0),($7|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  $19 = 12704;
  HEAP32[$7>>2] = $19;
  $20 = ((($7)) + 52|0);
  $21 = 12764;
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $5 = $22;
 $6 = $23;
 __THREW__ = 0;
 invoke_vi(3,($7|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $28 = ___cxa_find_matching_catch(0|0)|0;
  $29 = tempRet0;
  ___clang_call_terminate($28);
  // unreachable;
 } else {
  $26 = $5;
  $27 = $6;
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZN28AP4_PiffSampleEncryptionAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 $4 = $1;
 $5 = (__ZN24AP4_CencSampleEncryption15DoInspectFieldsER17AP4_AtomInspector($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN28AP4_PiffSampleEncryptionAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 52|0);
 $4 = $1;
 $5 = (__ZN24AP4_CencSampleEncryption13DoWriteFieldsER14AP4_ByteStream($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZThn52_N28AP4_PiffSampleEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -52|0);
 __ZN28AP4_PiffSampleEncryptionAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN28AP4_PiffSampleEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(745,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN28AP4_PiffSampleEncryptionAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(117,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN12AP4_UuidAtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn52_N28AP4_PiffSampleEncryptionAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -52|0);
 __ZN28AP4_PiffSampleEncryptionAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZThn52_N27AP4_PiffTrackEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -52|0);
 __ZN27AP4_PiffTrackEncryptionAtomD0Ev($2);
 STACKTOP = sp;return;
}
function __ZN27AP4_PiffTrackEncryptionAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(739,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN27AP4_PiffTrackEncryptionAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 52|0);
 __THREW__ = 0;
 invoke_vi(304,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN12AP4_UuidAtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZThn52_N27AP4_PiffTrackEncryptionAtomD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -52|0);
 __ZN27AP4_PiffTrackEncryptionAtomD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN21AP4_DescriptorFactory26CreateDescriptorFromStreamER14AP4_ByteStreamRP14AP4_Descriptor($stream,$descriptor) {
 $stream = $stream|0;
 $descriptor = $descriptor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ext = 0, $header_size = 0;
 var $max = 0, $offset = 0, $payload_size = 0, $result = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp;
 $tag = sp + 45|0;
 $ext = sp + 44|0;
 $1 = $stream;
 $2 = $descriptor;
 $5 = $2;
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iii[$9 & 2047]($6,$offset)|0);
 $10 = $1;
 $11 = (__ZN14AP4_ByteStream8ReadUI08ERh($10,$tag)|0);
 $result = $11;
 $12 = $result;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $offset;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiii[$17 & 2047]($14,$20,$23)|0);
  $24 = $result;
  $0 = $24;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $payload_size = 0;
 $header_size = 1;
 $max = 4;
 HEAP8[$ext>>0] = 0;
 while(1) {
  $25 = $header_size;
  $26 = (($25) + 1)|0;
  $header_size = $26;
  $27 = $1;
  $28 = (__ZN14AP4_ByteStream8ReadUI08ERh($27,$ext)|0);
  $result = $28;
  $29 = $result;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 5;
   break;
  }
  $42 = $payload_size;
  $43 = $42 << 7;
  $44 = HEAP8[$ext>>0]|0;
  $45 = $44&255;
  $46 = $45 & 127;
  $47 = (($43) + ($46))|0;
  $payload_size = $47;
  $48 = $max;
  $49 = (($48) + -1)|0;
  $max = $49;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   break;
  }
  $51 = HEAP8[$ext>>0]|0;
  $52 = $51&255;
  $53 = $52 & 128;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   break;
  }
 }
 if ((label|0) == 5) {
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $offset;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  (FUNCTION_TABLE_iiii[$34 & 2047]($31,$37,$40)|0);
  $41 = $result;
  $0 = $41;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $55 = HEAP8[$tag>>0]|0;
 $56 = $55&255;
 L13: do {
  switch ($56|0) {
  case 17: case 1:  {
   $57 = (__Znwj(48)|0);
   $58 = $1;
   $59 = HEAP8[$tag>>0]|0;
   $60 = $header_size;
   $61 = $payload_size;
   __THREW__ = 0;
   invoke_viiiii(1162,($57|0),($58|0),($59|0),($60|0),($61|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if (!($63)) {
    $64 = $2;
    HEAP32[$64>>2] = $57;
    break L13;
   }
   $65 = ___cxa_find_matching_catch()|0;
   $66 = tempRet0;
   $3 = $65;
   $4 = $66;
   __ZdlPv($57);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 16: case 2:  {
   $67 = (__Znwj(56)|0);
   $68 = $1;
   $69 = HEAP8[$tag>>0]|0;
   $70 = $header_size;
   $71 = $payload_size;
   __THREW__ = 0;
   invoke_viiiii(1163,($67|0),($68|0),($69|0),($70|0),($71|0));
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if (!($73)) {
    $74 = $2;
    HEAP32[$74>>2] = $67;
    break L13;
   }
   $75 = ___cxa_find_matching_catch()|0;
   $76 = tempRet0;
   $3 = $75;
   $4 = $76;
   __ZdlPv($67);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 14:  {
   $77 = (__Znwj(24)|0);
   $78 = $1;
   $79 = $header_size;
   $80 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1164,($77|0),($78|0),($79|0),($80|0));
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if (!($82)) {
    $83 = $2;
    HEAP32[$83>>2] = $77;
    break L13;
   }
   $84 = ___cxa_find_matching_catch()|0;
   $85 = tempRet0;
   $3 = $84;
   $4 = $85;
   __ZdlPv($77);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 15:  {
   $86 = (__Znwj(24)|0);
   $87 = $1;
   $88 = $header_size;
   $89 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1165,($86|0),($87|0),($88|0),($89|0));
   $90 = __THREW__; __THREW__ = 0;
   $91 = $90&1;
   if (!($91)) {
    $92 = $2;
    HEAP32[$92>>2] = $86;
    break L13;
   }
   $93 = ___cxa_find_matching_catch()|0;
   $94 = tempRet0;
   $3 = $93;
   $4 = $94;
   __ZdlPv($86);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 3:  {
   $95 = (__Znwj(56)|0);
   $96 = $1;
   $97 = $header_size;
   $98 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1166,($95|0),($96|0),($97|0),($98|0));
   $99 = __THREW__; __THREW__ = 0;
   $100 = $99&1;
   if (!($100)) {
    $101 = $2;
    HEAP32[$101>>2] = $95;
    break L13;
   }
   $102 = ___cxa_find_matching_catch()|0;
   $103 = tempRet0;
   $3 = $102;
   $4 = $103;
   __ZdlPv($95);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 4:  {
   $104 = (__Znwj(52)|0);
   $105 = $1;
   $106 = $header_size;
   $107 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1167,($104|0),($105|0),($106|0),($107|0));
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if (!($109)) {
    $110 = $2;
    HEAP32[$110>>2] = $104;
    break L13;
   }
   $111 = ___cxa_find_matching_catch()|0;
   $112 = tempRet0;
   $3 = $111;
   $4 = $112;
   __ZdlPv($104);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 5:  {
   $113 = (__Znwj(40)|0);
   $114 = $1;
   $115 = $header_size;
   $116 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1168,($113|0),($114|0),($115|0),($116|0));
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if (!($118)) {
    $119 = $2;
    HEAP32[$119>>2] = $113;
    break L13;
   }
   $120 = ___cxa_find_matching_catch()|0;
   $121 = tempRet0;
   $3 = $120;
   $4 = $121;
   __ZdlPv($113);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 6:  {
   $122 = $payload_size;
   $123 = ($122|0)!=(1);
   if ($123) {
    $0 = -10;
    $175 = $0;
    STACKTOP = sp;return ($175|0);
   }
   $124 = (__Znwj(24)|0);
   $125 = $header_size;
   __THREW__ = 0;
   invoke_vii(1086,($124|0),($125|0));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $2;
    HEAP32[$128>>2] = $124;
    break L13;
   }
   $129 = ___cxa_find_matching_catch()|0;
   $130 = tempRet0;
   $3 = $129;
   $4 = $130;
   __ZdlPv($124);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 10:  {
   $131 = (__Znwj(28)|0);
   $132 = $1;
   $133 = $header_size;
   $134 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1169,($131|0),($132|0),($133|0),($134|0));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if (!($136)) {
    $137 = $2;
    HEAP32[$137>>2] = $131;
    break L13;
   }
   $138 = ___cxa_find_matching_catch()|0;
   $139 = tempRet0;
   $3 = $138;
   $4 = $139;
   __ZdlPv($131);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  case 11:  {
   $140 = (__Znwj(72)|0);
   $141 = $1;
   $142 = $header_size;
   $143 = $payload_size;
   __THREW__ = 0;
   invoke_viiii(1170,($140|0),($141|0),($142|0),($143|0));
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   if (!($145)) {
    $146 = $2;
    HEAP32[$146>>2] = $140;
    break L13;
   }
   $147 = ___cxa_find_matching_catch()|0;
   $148 = tempRet0;
   $3 = $147;
   $4 = $148;
   __ZdlPv($140);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
   break;
  }
  default: {
   $149 = (__Znwj(40)|0);
   $150 = $1;
   $151 = HEAP8[$tag>>0]|0;
   $152 = $header_size;
   $153 = $payload_size;
   __THREW__ = 0;
   invoke_viiiii(1171,($149|0),($150|0),($151|0),($152|0),($153|0));
   $154 = __THREW__; __THREW__ = 0;
   $155 = $154&1;
   if (!($155)) {
    $156 = $2;
    HEAP32[$156>>2] = $149;
    break L13;
   }
   $157 = ___cxa_find_matching_catch()|0;
   $158 = tempRet0;
   $3 = $157;
   $4 = $158;
   __ZdlPv($149);
   $176 = $3;
   $177 = $4;
   ___resumeException($176|0);
   // unreachable;
  }
  }
 } while(0);
 $159 = $1;
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($160)) + 24|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $offset;
 $164 = $163;
 $165 = HEAP32[$164>>2]|0;
 $166 = (($163) + 4)|0;
 $167 = $166;
 $168 = HEAP32[$167>>2]|0;
 $169 = $header_size;
 $170 = (_i64Add(($165|0),($168|0),($169|0),0)|0);
 $171 = tempRet0;
 $172 = $payload_size;
 $173 = (_i64Add(($170|0),($171|0),($172|0),0)|0);
 $174 = tempRet0;
 (FUNCTION_TABLE_iiii[$162 & 2047]($159,$173,$174)|0);
 $0 = 0;
 $175 = $0;
 STACKTOP = sp;return ($175|0);
}
function __ZN12AP4_TrexAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(56)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1172,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_TrexAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1953654136,$8,$9,$10);
 $11 = 12780;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = $4;
  $17 = ((($7)) + 40|0);
  __THREW__ = 0;
  (invoke_iii(854,($16|0),($17|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = $4;
   $21 = ((($7)) + 44|0);
   __THREW__ = 0;
   (invoke_iii(854,($20|0),($21|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = $4;
    $25 = ((($7)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(854,($24|0),($25|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     $28 = $4;
     $29 = ((($7)) + 52|0);
     __THREW__ = 0;
     (invoke_iii(854,($28|0),($29|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $5 = $32;
 $6 = $33;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $38 = ___cxa_find_matching_catch(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  $36 = $5;
  $37 = $6;
  ___resumeException($36|0);
  // unreachable;
 }
}
function __ZN12AP4_TrexAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($6,$8)|0);
 $9 = $1;
 $10 = ((($2)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($9,$11)|0);
 $12 = $1;
 $13 = ((($2)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($12,$14)|0);
 $15 = $1;
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TrexAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,45974,$8,0,0);
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$12 & 2047]($9,45983,$14,0,0);
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_viiiii[$18 & 2047]($15,46016,$20,0,0);
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$24 & 2047]($21,46040,$26,0,0);
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($2)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_viiiii[$30 & 2047]($27,46060,$32,0,1);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TrexAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(751,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TrexAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_TrunAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(1);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(64)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1173,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_TrunAtom24ComputeRecordFieldsCountEj($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flags;
 $count = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(8);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  $5 = (($4) + 8)|0;
  $6 = 1 << $5;
  $7 = $3 & $6;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $count;
   $10 = (($9) + 1)|0;
   $count = $10;
  }
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $13 = $count;
 STACKTOP = sp;return ($13|0);
}
function __ZN12AP4_TrunAtom26ComputeOptionalFieldsCountEj($flags) {
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flags;
 $count = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(8);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  $5 = 1 << $4;
  $6 = $3 & $5;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $count;
   $9 = (($8) + 1)|0;
   $count = $9;
  }
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $count;
 STACKTOP = sp;return ($12|0);
}
function __ZN12AP4_TrunAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $discard = 0, $discard2 = 0, $i = 0;
 var $i1 = 0, $j = 0, $offset = 0, $optional_fields_count = 0, $record_fields_count = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample_count = sp + 32|0;
 $offset = sp + 24|0;
 $discard = sp + 16|0;
 $discard2 = sp;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1953658222,$8,$9,$10);
 $11 = 12840;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 44|0);
 __THREW__ = 0;
 invoke_vi(1174,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $5 = $32;
  $6 = $33;
 } else {
  HEAP32[$sample_count>>2] = 0;
  $15 = $4;
  __THREW__ = 0;
  (invoke_iii(854,($15|0),($sample_count|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  L4: do {
   if (!($17)) {
    $18 = $3;
    __THREW__ = 0;
    $19 = (invoke_ii(1175,($18|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $optional_fields_count = $19;
     $22 = $3;
     $23 = $22 & 1;
     $24 = ($23|0)!=(0);
     if ($24) {
      HEAP32[$offset>>2] = 0;
      $25 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($25|0),($offset|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break;
      }
      $28 = HEAP32[$offset>>2]|0;
      $29 = ((($7)) + 36|0);
      HEAP32[$29>>2] = $28;
      $30 = $optional_fields_count;
      $31 = (($30) + -1)|0;
      $optional_fields_count = $31;
     }
     $38 = $3;
     $39 = $38 & 4;
     $40 = ($39|0)!=(0);
     if ($40) {
      $41 = $4;
      $42 = ((($7)) + 40|0);
      __THREW__ = 0;
      (invoke_iii(854,($41|0),($42|0))|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = $optional_fields_count;
      $46 = (($45) + -1)|0;
      $optional_fields_count = $46;
     }
     $i = 0;
     while(1) {
      $47 = $i;
      $48 = $optional_fields_count;
      $49 = ($47|0)<($48|0);
      if (!($49)) {
       break;
      }
      $50 = $4;
      __THREW__ = 0;
      (invoke_iii(854,($50|0),($discard|0))|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       break L4;
      }
      $53 = $i;
      $54 = (($53) + 1)|0;
      $i = $54;
     }
     $55 = $3;
     __THREW__ = 0;
     $56 = (invoke_ii(1176,($55|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $record_fields_count = $56;
      $59 = ((($7)) + 44|0);
      $60 = HEAP32[$sample_count>>2]|0;
      __THREW__ = 0;
      (invoke_iii(1177,($59|0),($60|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if (!($62)) {
       $i1 = 0;
       while(1) {
        $63 = $i1;
        $64 = HEAP32[$sample_count>>2]|0;
        $65 = ($63>>>0)<($64>>>0);
        if (!($65)) {
         break;
        }
        $66 = $3;
        $67 = $66 & 256;
        $68 = ($67|0)!=(0);
        if ($68) {
         $69 = $4;
         $70 = ((($7)) + 44|0);
         $71 = $i1;
         __THREW__ = 0;
         $72 = (invoke_iii(1178,($70|0),($71|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L4;
         }
         __THREW__ = 0;
         (invoke_iii(854,($69|0),($72|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          break L4;
         }
         $77 = $record_fields_count;
         $78 = (($77) + -1)|0;
         $record_fields_count = $78;
        }
        $79 = $3;
        $80 = $79 & 512;
        $81 = ($80|0)!=(0);
        if ($81) {
         $82 = $4;
         $83 = ((($7)) + 44|0);
         $84 = $i1;
         __THREW__ = 0;
         $85 = (invoke_iii(1178,($83|0),($84|0))|0);
         $86 = __THREW__; __THREW__ = 0;
         $87 = $86&1;
         if ($87) {
          break L4;
         }
         $88 = ((($85)) + 4|0);
         __THREW__ = 0;
         (invoke_iii(854,($82|0),($88|0))|0);
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if ($90) {
          break L4;
         }
         $91 = $record_fields_count;
         $92 = (($91) + -1)|0;
         $record_fields_count = $92;
        }
        $93 = $3;
        $94 = $93 & 1024;
        $95 = ($94|0)!=(0);
        if ($95) {
         $96 = $4;
         $97 = ((($7)) + 44|0);
         $98 = $i1;
         __THREW__ = 0;
         $99 = (invoke_iii(1178,($97|0),($98|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          break L4;
         }
         $102 = ((($99)) + 8|0);
         __THREW__ = 0;
         (invoke_iii(854,($96|0),($102|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          break L4;
         }
         $105 = $record_fields_count;
         $106 = (($105) + -1)|0;
         $record_fields_count = $106;
        }
        $107 = $3;
        $108 = $107 & 2048;
        $109 = ($108|0)!=(0);
        if ($109) {
         $110 = $4;
         $111 = ((($7)) + 44|0);
         $112 = $i1;
         __THREW__ = 0;
         $113 = (invoke_iii(1178,($111|0),($112|0))|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if ($115) {
          break L4;
         }
         $116 = ((($113)) + 12|0);
         __THREW__ = 0;
         (invoke_iii(854,($110|0),($116|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          break L4;
         }
         $119 = $record_fields_count;
         $120 = (($119) + -1)|0;
         $record_fields_count = $120;
        }
        $j = 0;
        while(1) {
         $121 = $j;
         $122 = $record_fields_count;
         $123 = ($121|0)<($122|0);
         if (!($123)) {
          break;
         }
         $124 = $4;
         __THREW__ = 0;
         (invoke_iii(854,($124|0),($discard2|0))|0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          break L4;
         }
         $127 = $j;
         $128 = (($127) + 1)|0;
         $j = $128;
        }
        $129 = $i1;
        $130 = (($129) + 1)|0;
        $i1 = $130;
       }
       STACKTOP = sp;return;
      }
     }
    }
   }
  } while(0);
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $5 = $34;
  $6 = $35;
  __THREW__ = 0;
  invoke_vi(250,($12|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $135 = ___cxa_find_matching_catch(0|0)|0;
   $136 = tempRet0;
   ___clang_call_terminate($135);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $135 = ___cxa_find_matching_catch(0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $133 = $5;
  $134 = $6;
  ___resumeException($133|0);
  // unreachable;
 }
}
function __ZN12AP4_TrunAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $i = 0, $result = 0, $sample_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 44|0);
 $6 = (__ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($5)|0);
 $7 = (__ZN14AP4_ByteStream9WriteUI32Ej($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $2;
  $16 = ((($3)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN14AP4_ByteStream9WriteUI32Ej($15,$17)|0);
  $result = $18;
  $19 = $result;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $result;
   $0 = $21;
   $94 = $0;
   STACKTOP = sp;return ($94|0);
  }
 }
 $22 = ((($3)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 4;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $2;
  $27 = ((($3)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZN14AP4_ByteStream9WriteUI32Ej($26,$28)|0);
  $result = $29;
  $30 = $result;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $result;
   $0 = $32;
   $94 = $0;
   STACKTOP = sp;return ($94|0);
  }
 }
 $33 = ((($3)) + 44|0);
 $34 = (__ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($33)|0);
 $sample_count = $34;
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = $sample_count;
  $37 = ($35>>>0)<($36>>>0);
  if (!($37)) {
   label = 24;
   break;
  }
  $38 = ((($3)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39 & 256;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $2;
   $43 = ((($3)) + 44|0);
   $44 = $i;
   $45 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($43,$44)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (__ZN14AP4_ByteStream9WriteUI32Ej($42,$46)|0);
   $result = $47;
   $48 = $result;
   $49 = ($48|0)!=(0);
   if ($49) {
    label = 13;
    break;
   }
  }
  $51 = ((($3)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 512;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $2;
   $56 = ((($3)) + 44|0);
   $57 = $i;
   $58 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($56,$57)|0);
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__ZN14AP4_ByteStream9WriteUI32Ej($55,$60)|0);
   $result = $61;
   $62 = $result;
   $63 = ($62|0)!=(0);
   if ($63) {
    label = 16;
    break;
   }
  }
  $65 = ((($3)) + 28|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 1024;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $2;
   $70 = ((($3)) + 44|0);
   $71 = $i;
   $72 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($70,$71)|0);
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (__ZN14AP4_ByteStream9WriteUI32Ej($69,$74)|0);
   $result = $75;
   $76 = $result;
   $77 = ($76|0)!=(0);
   if ($77) {
    label = 19;
    break;
   }
  }
  $79 = ((($3)) + 28|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80 & 2048;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $2;
   $84 = ((($3)) + 44|0);
   $85 = $i;
   $86 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($84,$85)|0);
   $87 = ((($86)) + 12|0);
   $88 = HEAP32[$87>>2]|0;
   (__ZN14AP4_ByteStream9WriteUI32Ej($83,$88)|0);
   $89 = $result;
   $90 = ($89|0)!=(0);
   if ($90) {
    label = 22;
    break;
   }
  }
  $92 = $i;
  $93 = (($92) + 1)|0;
  $i = $93;
 }
 if ((label|0) == 13) {
  $50 = $result;
  $0 = $50;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 16) {
  $64 = $result;
  $0 = $64;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 19) {
  $78 = $result;
  $0 = $78;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 22) {
  $91 = $result;
  $0 = $91;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 24) {
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 return (0)|0;
}
function __ZN12AP4_TrunAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $header = 0, $header3 = 0, $i = 0, $i2 = 0, $s0 = 0, $s08 = 0, $s1 = 0, $s19 = 0, $s2 = 0, $s210 = 0, $s3 = 0, $s311 = 0, $sample_count = 0, $sample_count1 = 0, $sep = 0;
 var $sep12 = 0, $v0 = 0, $v04 = 0, $v1 = 0, $v15 = 0, $v2 = 0, $v26 = 0, $v3 = 0, $v37 = 0, $value = 0, $value13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 96|0;
 $vararg_buffer36 = sp + 88|0;
 $vararg_buffer32 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 784|0;
 $v0 = sp + 752|0;
 $v1 = sp + 720|0;
 $v2 = sp + 688|0;
 $v3 = sp + 624|0;
 $value = sp + 496|0;
 $header3 = sp + 464|0;
 $v04 = sp + 432|0;
 $v15 = sp + 400|0;
 $v26 = sp + 368|0;
 $v37 = sp + 304|0;
 $value13 = sp + 176|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 44|0);
 $8 = (__ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($7)|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46096,$8,0,0);
 $9 = ((($2)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(0);
  $20 = $19 << 31 >> 31;
  FUNCTION_TABLE_viiiii[$16 & 2047]($13,46109,$18,$20,0);
 }
 $21 = ((($2)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 4;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $1;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($2)) + 40|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_viiiii[$28 & 2047]($25,46121,$30,0,1);
 }
 $31 = $1;
 $32 = (__ZN17AP4_AtomInspector12GetVerbosityEv($31)|0);
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = ((($2)) + 44|0);
  $35 = (__ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($34)|0);
  $sample_count = $35;
  $i = 0;
  while(1) {
   $36 = $i;
   $37 = $sample_count;
   $38 = ($36>>>0)<($37>>>0);
   if (!($38)) {
    break;
   }
   $39 = $i;
   HEAP32[$vararg_buffer>>2] = $39;
   (_snprintf($header,32,46140,$vararg_buffer)|0);
   $s0 = 46145;
   $s1 = 46145;
   $s2 = 46145;
   $s3 = 46145;
   $sep = 46145;
   $40 = ((($2)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & 256;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = ((($2)) + 44|0);
    $45 = $i;
    $46 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($44,$45)|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $47;
    (_snprintf($v0,32,46146,$vararg_buffer1)|0);
    $s0 = $v0;
    $sep = 46151;
   }
   $48 = ((($2)) + 28|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 512;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $sep;
    $53 = ((($2)) + 44|0);
    $54 = $i;
    $55 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($53,$54)|0);
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $52;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $57;
    (_snprintf($v1,32,46153,$vararg_buffer4)|0);
    $s1 = $v1;
    $sep = 46151;
   }
   $58 = ((($2)) + 28|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 1024;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $sep;
    $63 = ((($2)) + 44|0);
    $64 = $i;
    $65 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($63,$64)|0);
    $66 = ((($65)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $62;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $67;
    (_snprintf($v2,32,46160,$vararg_buffer8)|0);
    $s2 = $v2;
    $sep = 46151;
   }
   $68 = ((($2)) + 28|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & 2048;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $sep;
    $73 = ((($2)) + 44|0);
    $74 = $i;
    $75 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($73,$74)|0);
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $72;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $77;
    (_snprintf($v3,64,46167,$vararg_buffer12)|0);
    $s3 = $v3;
   }
   $78 = $s0;
   $79 = $s1;
   $80 = $s2;
   $81 = $s3;
   HEAP32[$vararg_buffer16>>2] = $78;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $79;
   $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
   HEAP32[$vararg_ptr20>>2] = $80;
   $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
   HEAP32[$vararg_ptr21>>2] = $81;
   (_snprintf($value,128,46174,$vararg_buffer16)|0);
   $82 = $1;
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 32|0);
   $85 = HEAP32[$84>>2]|0;
   FUNCTION_TABLE_viiii[$85 & 2047]($82,$header,$value,0);
   $86 = $i;
   $87 = (($86) + 1)|0;
   $i = $87;
  }
  STACKTOP = sp;return 0;
 }
 $88 = $1;
 $89 = (__ZN17AP4_AtomInspector12GetVerbosityEv($88)|0);
 $90 = ($89>>>0)>=(2);
 if (!($90)) {
  STACKTOP = sp;return 0;
 }
 $91 = ((($2)) + 44|0);
 $92 = (__ZNK9AP4_ArrayIN12AP4_TrunAtom5EntryEE9ItemCountEv($91)|0);
 $sample_count1 = $92;
 $i2 = 0;
 while(1) {
  $93 = $i2;
  $94 = $sample_count1;
  $95 = ($93>>>0)<($94>>>0);
  if (!($95)) {
   break;
  }
  $96 = $i2;
  HEAP32[$vararg_buffer22>>2] = $96;
  (_snprintf($header3,32,46183,$vararg_buffer22)|0);
  $s08 = 46145;
  $s19 = 46145;
  $s210 = 46145;
  $s311 = 46145;
  $sep12 = 46145;
  $97 = ((($2)) + 28|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 & 256;
  $100 = ($99|0)!=(0);
  if ($100) {
   $101 = ((($2)) + 44|0);
   $102 = $i2;
   $103 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($101,$102)|0);
   $104 = HEAP32[$103>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $104;
   (_snprintf($v04,32,46194,$vararg_buffer25)|0);
   $s08 = $v04;
   $sep12 = 46213;
  }
  $105 = ((($2)) + 28|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & 512;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $sep12;
   $110 = ((($2)) + 44|0);
   $111 = $i2;
   $112 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($110,$111)|0);
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$vararg_buffer28>>2] = $109;
   $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
   HEAP32[$vararg_ptr31>>2] = $114;
   (_snprintf($v15,32,46216,$vararg_buffer28)|0);
   $s19 = $v15;
   $sep12 = 46213;
  }
  $115 = ((($2)) + 28|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & 1024;
  $118 = ($117|0)!=(0);
  if ($118) {
   $119 = $sep12;
   $120 = ((($2)) + 44|0);
   $121 = $i2;
   $122 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($120,$121)|0);
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$vararg_buffer32>>2] = $119;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $124;
   (_snprintf($v26,32,46233,$vararg_buffer32)|0);
   $s210 = $v26;
   $sep12 = 46213;
  }
  $125 = ((($2)) + 28|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $126 & 2048;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $sep12;
   $130 = ((($2)) + 44|0);
   $131 = $i2;
   $132 = (__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm($130,$131)|0);
   $133 = ((($132)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   HEAP32[$vararg_buffer36>>2] = $129;
   $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
   HEAP32[$vararg_ptr39>>2] = $134;
   (_snprintf($v37,64,46251,$vararg_buffer36)|0);
   $s311 = $v37;
  }
  $135 = $s08;
  $136 = $s19;
  $137 = $s210;
  $138 = $s311;
  HEAP32[$vararg_buffer40>>2] = $135;
  $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
  HEAP32[$vararg_ptr43>>2] = $136;
  $vararg_ptr44 = ((($vararg_buffer40)) + 8|0);
  HEAP32[$vararg_ptr44>>2] = $137;
  $vararg_ptr45 = ((($vararg_buffer40)) + 12|0);
  HEAP32[$vararg_ptr45>>2] = $138;
  (_snprintf($value13,128,46174,$vararg_buffer40)|0);
  $139 = $1;
  $140 = HEAP32[$139>>2]|0;
  $141 = ((($140)) + 32|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_viiii[$142 & 2047]($139,$header3,$value13,0);
  $143 = $i2;
  $144 = (($143) + 1)|0;
  $i2 = $144;
 }
 STACKTOP = sp;return 0;
}
function __ZN12AP4_TrunAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(755,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_TrunAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 12840;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 __THREW__ = 0;
 invoke_vi(250,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN12AP4_IsfmAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(40)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1179,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_IsfmAtomC2Ebhh($this,$selective_encryption,$key_length_indicator,$iv_length) {
 $this = $this|0;
 $selective_encryption = $selective_encryption|0;
 $key_length_indicator = $key_length_indicator|0;
 $iv_length = $iv_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $4 = $selective_encryption&1;
 $1 = $4;
 $2 = $key_length_indicator;
 $3 = $iv_length;
 $5 = $0;
 __ZN8AP4_AtomC2Ejjhj($5,1767065165,15,0,0);
 $6 = 12900;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 36|0);
 $8 = $1;
 $9 = $8&1;
 $10 = $9&1;
 HEAP8[$7>>0] = $10;
 $11 = ((($5)) + 37|0);
 $12 = $2;
 HEAP8[$11>>0] = $12;
 $13 = ((($5)) + 38|0);
 $14 = $3;
 HEAP8[$13>>0] = $14;
 STACKTOP = sp;return;
}
function __ZN12AP4_IsfmAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 24|0;
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1767065165,$8,$9,$10);
 $11 = 12900;
 HEAP32[$7>>2] = $11;
 $12 = ((($7)) + 37|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($7)) + 38|0);
 HEAP8[$13>>0] = 0;
 $14 = $4;
 __THREW__ = 0;
 (invoke_iii(940,($14|0),($s|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = HEAP8[$s>>0]|0;
  $18 = $17&255;
  $19 = $18 & 128;
  $20 = ($19|0)!=(0);
  $21 = ((($7)) + 36|0);
  $22 = $20&1;
  HEAP8[$21>>0] = $22;
  $23 = $4;
  $24 = ((($7)) + 37|0);
  __THREW__ = 0;
  (invoke_iii(940,($23|0),($24|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = $4;
   $28 = ((($7)) + 38|0);
   __THREW__ = 0;
   (invoke_iii(940,($27|0),($28|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    STACKTOP = sp;return;
   }
  }
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $5 = $31;
 $6 = $32;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  ___clang_call_terminate($37);
  // unreachable;
 } else {
  $35 = $5;
  $36 = $6;
  ___resumeException($35|0);
  // unreachable;
 }
}
function __ZN12AP4_IsfmAtom5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(40)|0);
 $5 = ((($3)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 $8 = ((($3)) + 37|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($3)) + 38|0);
 $11 = HEAP8[$10>>0]|0;
 __THREW__ = 0;
 invoke_viiii(1180,($4|0),($7|0),($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $1 = $14;
  $2 = $15;
  __ZdlPv($4);
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN12AP4_IsfmAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 $8 = $7 ? 128 : 0;
 $9 = $8&255;
 $10 = (__ZN14AP4_ByteStream9WriteUI08Eh($4,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $result;
  $0 = $13;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $14 = $2;
 $15 = ((($3)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = (__ZN14AP4_ByteStream9WriteUI08Eh($14,$16)|0);
 $result = $17;
 $18 = $result;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $result;
  $0 = $20;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $21 = $2;
 $22 = ((($3)) + 38|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (__ZN14AP4_ByteStream9WriteUI08Eh($21,$23)|0);
 $result = $24;
 $25 = $result;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $result;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN12AP4_IsfmAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9&1;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46302,$10,0,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 37|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,46323,$17,0,0);
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 38|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 FUNCTION_TABLE_viiiii[$21 & 2047]($18,46344,$24,0,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_IsfmAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(759,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IsfmAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_IsltAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1767066708,$6);
 $7 = 12960;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 36|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
 $9 = $2;
 $10 = ((($5)) + 36|0);
 __THREW__ = 0;
 (invoke_iiii(851,($9|0),($10|0),8)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $3;
  $18 = $4;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_IsltAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = (__ZN14AP4_ByteStream5WriteEPKvj($3,$4,8)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN12AP4_IsltAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46369,$7,8,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_IsltAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(764,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_IsltAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AP4_VmhdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (__Znwj(48)|0);
 $12 = $1;
 $13 = HEAP8[$version>>0]|0;
 $14 = HEAP32[$flags>>2]|0;
 $15 = $2;
 __THREW__ = 0;
 invoke_viiiii(1181,($11|0),($12|0),($13|0),($14|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $3 = $18;
  $4 = $19;
  __ZdlPv($11);
  $20 = $3;
  $21 = $4;
  ___resumeException($20|0);
  // unreachable;
 }
 $0 = $11;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __ZN12AP4_VmhdAtomC2EjhjR14AP4_ByteStream($this,$size,$version,$flags,$stream) {
 $this = $this|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $version;
 $3 = $flags;
 $4 = $stream;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 __ZN8AP4_AtomC2Ejjhj($7,1986881636,$8,$9,$10);
 $11 = 13020;
 HEAP32[$7>>2] = $11;
 $12 = $4;
 $13 = ((($7)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(866,($12|0),($13|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = $4;
  $17 = ((($7)) + 38|0);
  __THREW__ = 0;
  (invoke_iiii(851,($16|0),($17|0),6)|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __THREW__ = 0;
 invoke_vi(706,($7|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $26 = ___cxa_find_matching_catch(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 }
}
function __ZN12AP4_VmhdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = $2;
 $5 = ((($3)) + 36|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (__ZN14AP4_ByteStream9WriteUI16Et($4,$6)|0);
 $result = $7;
 $8 = $result;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $result;
  $0 = $10;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = $2;
 $12 = ((($3)) + 38|0);
 $13 = (__ZN14AP4_ByteStream5WriteEPKvj($11,$12,6)|0);
 $result = $13;
 $14 = $result;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $result;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN12AP4_VmhdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $formatted = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $formatted = sp + 24|0;
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46389,$9,0,0);
 $10 = ((($2)) + 38|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ((($2)) + 38|0);
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ((($2)) + 38|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $20;
 (_snprintf($formatted,16,46403,$vararg_buffer)|0);
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viiii[$24 & 2047]($21,46418,$formatted,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_VmhdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(768,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_VmhdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_AesCbcBlockCipher7ProcessEPKhjPhS1_($this,$input,$input_size,$output,$iv) {
 $this = $this|0;
 $input = $input|0;
 $input_size = $input_size|0;
 $output = $output|0;
 $iv = $iv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $block = 0, $block_count = 0;
 var $chaining_block = 0, $i = 0, $i1 = 0, $j = 0, $j2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chaining_block = sp + 64|0;
 $block = sp + 48|0;
 $1 = $this;
 $2 = $input;
 $3 = $input_size;
 $4 = $output;
 $5 = $iv;
 $6 = $1;
 $7 = $3;
 $8 = (($7>>>0) % 16)&-1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -3;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $5;
  dest=$chaining_block; src=$12; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 } else {
  dest=$chaining_block; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 }
 $13 = $3;
 $14 = (($13>>>0) / 16)&-1;
 $block_count = $14;
 $15 = ((($6)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 L9: do {
  if ($17) {
   $i = 0;
   while(1) {
    $18 = $i;
    $19 = $block_count;
    $20 = ($18>>>0)<($19>>>0);
    if (!($20)) {
     break L9;
    }
    $j = 0;
    while(1) {
     $21 = $j;
     $22 = ($21>>>0)<(16);
     if (!($22)) {
      break;
     }
     $23 = $j;
     $24 = $2;
     $25 = (($24) + ($23)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $j;
     $29 = (($chaining_block) + ($28)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = $27 ^ $31;
     $33 = $32&255;
     $34 = $j;
     $35 = (($block) + ($34)|0);
     HEAP8[$35>>0] = $33;
     $36 = $j;
     $37 = (($36) + 1)|0;
     $j = $37;
    }
    $38 = $4;
    $39 = ((($6)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    (__ZL11aes_enc_blkPKhPhPK7aes_ctx($block,$38,$40)|0);
    $41 = $4;
    dest=$chaining_block; src=$41; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $42 = $2;
    $43 = ((($42)) + 16|0);
    $2 = $43;
    $44 = $4;
    $45 = ((($44)) + 16|0);
    $4 = $45;
    $46 = $i;
    $47 = (($46) + 1)|0;
    $i = $47;
   }
  } else {
   $i1 = 0;
   while(1) {
    $48 = $i1;
    $49 = $block_count;
    $50 = ($48>>>0)<($49>>>0);
    if (!($50)) {
     break L9;
    }
    $51 = $2;
    $52 = $4;
    $53 = ((($6)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    (__ZL11aes_dec_blkPKhPhPK7aes_ctx($51,$52,$54)|0);
    $j2 = 0;
    while(1) {
     $55 = $j2;
     $56 = ($55>>>0)<(16);
     if (!($56)) {
      break;
     }
     $57 = $j2;
     $58 = (($chaining_block) + ($57)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $j2;
     $62 = $4;
     $63 = (($62) + ($61)|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = $65 ^ $60;
     $67 = $66&255;
     HEAP8[$63>>0] = $67;
     $68 = $j2;
     $69 = (($68) + 1)|0;
     $j2 = $69;
    }
    $70 = $2;
    dest=$chaining_block; src=$70; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $71 = $2;
    $72 = ((($71)) + 16|0);
    $2 = $72;
    $73 = $4;
    $74 = ((($73)) + 16|0);
    $4 = $74;
    $75 = $i1;
    $76 = (($75) + 1)|0;
    $i1 = $76;
   }
  }
 } while(0);
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function __ZN21AP4_AesCtrBlockCipher7ProcessEPKhjPhS1_($this,$input,$input_size,$output,$iv) {
 $this = $this|0;
 $input = $input|0;
 $input_size = $input_size|0;
 $output = $output|0;
 $iv = $iv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $chunk = 0;
 var $counter = 0, $j = 0, $x = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $counter = sp + 48|0;
 $block = sp + 32|0;
 $0 = $this;
 $1 = $input;
 $2 = $input_size;
 $3 = $output;
 $4 = $iv;
 $5 = $0;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $4;
  dest=$counter; src=$8; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 } else {
  dest=$counter; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 }
 while(1) {
  $9 = $2;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = ((($5)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  (__ZL11aes_enc_blkPKhPhPK7aes_ctx($counter,$block,$12)|0);
  $13 = $2;
  $14 = ($13>>>0)>=(16);
  $15 = $2;
  $16 = $14 ? 16 : $15;
  $chunk = $16;
  $j = 0;
  while(1) {
   $17 = $j;
   $18 = $chunk;
   $19 = ($17>>>0)<($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $j;
   $21 = $1;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $j;
   $26 = (($block) + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $24 ^ $28;
   $30 = $29&255;
   $31 = $j;
   $32 = $3;
   $33 = (($32) + ($31)|0);
   HEAP8[$33>>0] = $30;
   $34 = $j;
   $35 = (($34) + 1)|0;
   $j = $35;
  }
  $36 = $chunk;
  $37 = $2;
  $38 = (($37) - ($36))|0;
  $2 = $38;
  $39 = $2;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   continue;
  }
  $x = 15;
  while(1) {
   $41 = $x;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
   $43 = $x;
   $44 = (($counter) + ($43)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)==(255);
   $48 = $x;
   $49 = (($counter) + ($48)|0);
   if (!($47)) {
    label = 13;
    break;
   }
   HEAP8[$49>>0] = 0;
   $50 = $x;
   $51 = (($50) + -1)|0;
   $x = $51;
  }
  if ((label|0) == 13) {
   label = 0;
   $52 = HEAP8[$49>>0]|0;
   $53 = (($52) + 1)<<24>>24;
   HEAP8[$49>>0] = $53;
  }
  $54 = $1;
  $55 = ((($54)) + 16|0);
  $1 = $55;
  $56 = $3;
  $57 = ((($56)) + 16|0);
  $3 = $57;
 }
 STACKTOP = sp;return 0;
}
function __ZN18AP4_AesBlockCipher6CreateEPKhN15AP4_BlockCipher15CipherDirectionENS2_10CipherModeEPKvRPS_($key,$direction,$mode,$mode_params,$cipher) {
 $key = $key|0;
 $direction = $direction|0;
 $mode = $mode|0;
 $mode_params = $mode_params|0;
 $cipher = $cipher|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $context = 0, $counter_size = 0, $ctr_params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $key;
 $2 = $direction;
 $3 = $mode;
 $4 = $mode_params;
 $5 = $cipher;
 $8 = $5;
 HEAP32[$8>>2] = 0;
 $9 = (__Znwj(264)|0);
 _memset(($9|0),0,264)|0;
 $context = $9;
 $10 = $3;
 L1: do {
  switch ($10|0) {
  case 0:  {
   $11 = $2;
   $12 = ($11|0)==(0);
   $13 = $1;
   $14 = $context;
   if ($12) {
    (__ZL11aes_enc_keyPKhjP7aes_ctx($13,16,$14)|0);
   } else {
    (__ZL11aes_dec_keyPKhjP7aes_ctx($13,16,$14)|0);
   }
   $15 = (__Znwj(16)|0);
   $16 = $2;
   $17 = $context;
   __THREW__ = 0;
   invoke_viii(1182,($15|0),($16|0),($17|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    $20 = $5;
    HEAP32[$20>>2] = $15;
    break L1;
   }
   $21 = ___cxa_find_matching_catch()|0;
   $22 = tempRet0;
   $6 = $21;
   $7 = $22;
   __ZdlPv($15);
   $40 = $6;
   $41 = $7;
   ___resumeException($40|0);
   // unreachable;
   break;
  }
  case 1:  {
   $23 = $1;
   $24 = $context;
   (__ZL11aes_enc_keyPKhjP7aes_ctx($23,16,$24)|0);
   $25 = $4;
   $ctr_params = $25;
   $counter_size = 16;
   $26 = $ctr_params;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $ctr_params;
    $29 = HEAP32[$28>>2]|0;
    $counter_size = $29;
   }
   $30 = (__Znwj(16)|0);
   $31 = $2;
   $32 = $counter_size;
   $33 = $context;
   __THREW__ = 0;
   invoke_viiii(1183,($30|0),($31|0),($32|0),($33|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $36 = $5;
    HEAP32[$36>>2] = $30;
    break L1;
   }
   $37 = ___cxa_find_matching_catch()|0;
   $38 = tempRet0;
   $6 = $37;
   $7 = $38;
   __ZdlPv($30);
   $40 = $6;
   $41 = $7;
   ___resumeException($40|0);
   // unreachable;
   break;
  }
  default: {
   $0 = -3;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
  }
 } while(0);
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN18AP4_AesBlockCipherD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 13080;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZdlPv($4);
 }
 __ZN15AP4_BlockCipherD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN18AP4_AesBlockCipherD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(772,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZL11aes_enc_blkPKhPhPK7aes_ctx($in_blk,$out_blk,$cx) {
 $in_blk = $in_blk|0;
 $out_blk = $out_blk|0;
 $cx = $cx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b0 = 0, $b1 = 0, $kp = 0, $p0 = 0, $p1 = 0, $pt = 0, $rnd = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b1 = sp + 40|0;
 $b0 = sp + 24|0;
 $1 = $in_blk;
 $2 = $out_blk;
 $3 = $cx;
 $4 = $3;
 $kp = $4;
 $5 = $3;
 $6 = ((($5)) + 260|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $0 = 0;
  $531 = $0;
  STACKTOP = sp;return ($531|0);
 }
 $10 = $1;
 $11 = ((($10)) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 24;
 $15 = $1;
 $16 = ((($15)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 16;
 $20 = $14 | $19;
 $21 = $1;
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $26 = $20 | $25;
 $27 = $1;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $kp;
 $32 = HEAP32[$31>>2]|0;
 $33 = $30 ^ $32;
 HEAP32[$b0>>2] = $33;
 $34 = $1;
 $35 = ((($34)) + 4|0);
 $36 = ((($35)) + 3|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 << 24;
 $40 = $1;
 $41 = ((($40)) + 4|0);
 $42 = ((($41)) + 2|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 << 16;
 $46 = $39 | $45;
 $47 = $1;
 $48 = ((($47)) + 4|0);
 $49 = ((($48)) + 1|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 8;
 $53 = $46 | $52;
 $54 = $1;
 $55 = ((($54)) + 4|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $53 | $57;
 $59 = $kp;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58 ^ $61;
 $63 = ((($b0)) + 4|0);
 HEAP32[$63>>2] = $62;
 $64 = $1;
 $65 = ((($64)) + 8|0);
 $66 = ((($65)) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 << 24;
 $70 = $1;
 $71 = ((($70)) + 8|0);
 $72 = ((($71)) + 2|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 << 16;
 $76 = $69 | $75;
 $77 = $1;
 $78 = ((($77)) + 8|0);
 $79 = ((($78)) + 1|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 << 8;
 $83 = $76 | $82;
 $84 = $1;
 $85 = ((($84)) + 8|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = $83 | $87;
 $89 = $kp;
 $90 = ((($89)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $88 ^ $91;
 $93 = ((($b0)) + 8|0);
 HEAP32[$93>>2] = $92;
 $94 = $1;
 $95 = ((($94)) + 12|0);
 $96 = ((($95)) + 3|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $98 << 24;
 $100 = $1;
 $101 = ((($100)) + 12|0);
 $102 = ((($101)) + 2|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 << 16;
 $106 = $99 | $105;
 $107 = $1;
 $108 = ((($107)) + 12|0);
 $109 = ((($108)) + 1|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $111 << 8;
 $113 = $106 | $112;
 $114 = $1;
 $115 = ((($114)) + 12|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $113 | $117;
 $119 = $kp;
 $120 = ((($119)) + 12|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $118 ^ $121;
 $123 = ((($b0)) + 12|0);
 HEAP32[$123>>2] = $122;
 $p0 = $b0;
 $p1 = $b1;
 $rnd = 0;
 while(1) {
  $124 = $rnd;
  $125 = $3;
  $126 = ((($125)) + 256|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) - 1)|0;
  $129 = ($124>>>0)<($128>>>0);
  $130 = $kp;
  $131 = ((($130)) + 16|0);
  $kp = $131;
  $132 = $kp;
  $133 = HEAP32[$132>>2]|0;
  if (!($129)) {
   break;
  }
  $134 = $p0;
  $135 = HEAP32[$134>>2]|0;
  $136 = $135 >>> 0;
  $137 = $136&255;
  $138 = $137&255;
  $139 = (13144 + ($138<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $p0;
  $142 = ((($141)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $143 >>> 8;
  $145 = $144&255;
  $146 = $145&255;
  $147 = ((14168) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $140 ^ $148;
  $150 = $p0;
  $151 = ((($150)) + 8|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $152 >>> 16;
  $154 = $153&255;
  $155 = $154&255;
  $156 = ((15192) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $149 ^ $157;
  $159 = $p0;
  $160 = ((($159)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161 >>> 24;
  $163 = $162&255;
  $164 = $163&255;
  $165 = ((16216) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $158 ^ $166;
  $168 = $133 ^ $167;
  $169 = $p1;
  HEAP32[$169>>2] = $168;
  $170 = $kp;
  $171 = ((($170)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $p0;
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $175 >>> 0;
  $177 = $176&255;
  $178 = $177&255;
  $179 = (13144 + ($178<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $p0;
  $182 = ((($181)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183 >>> 8;
  $185 = $184&255;
  $186 = $185&255;
  $187 = ((14168) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $180 ^ $188;
  $190 = $p0;
  $191 = ((($190)) + 12|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $192 >>> 16;
  $194 = $193&255;
  $195 = $194&255;
  $196 = ((15192) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $189 ^ $197;
  $199 = $p0;
  $200 = HEAP32[$199>>2]|0;
  $201 = $200 >>> 24;
  $202 = $201&255;
  $203 = $202&255;
  $204 = ((16216) + ($203<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $198 ^ $205;
  $207 = $172 ^ $206;
  $208 = $p1;
  $209 = ((($208)) + 4|0);
  HEAP32[$209>>2] = $207;
  $210 = $kp;
  $211 = ((($210)) + 8|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $p0;
  $214 = ((($213)) + 8|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $215 >>> 0;
  $217 = $216&255;
  $218 = $217&255;
  $219 = (13144 + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $p0;
  $222 = ((($221)) + 12|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $223 >>> 8;
  $225 = $224&255;
  $226 = $225&255;
  $227 = ((14168) + ($226<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $220 ^ $228;
  $230 = $p0;
  $231 = HEAP32[$230>>2]|0;
  $232 = $231 >>> 16;
  $233 = $232&255;
  $234 = $233&255;
  $235 = ((15192) + ($234<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = $229 ^ $236;
  $238 = $p0;
  $239 = ((($238)) + 4|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $240 >>> 24;
  $242 = $241&255;
  $243 = $242&255;
  $244 = ((16216) + ($243<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $237 ^ $245;
  $247 = $212 ^ $246;
  $248 = $p1;
  $249 = ((($248)) + 8|0);
  HEAP32[$249>>2] = $247;
  $250 = $kp;
  $251 = ((($250)) + 12|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $p0;
  $254 = ((($253)) + 12|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $255 >>> 0;
  $257 = $256&255;
  $258 = $257&255;
  $259 = (13144 + ($258<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $p0;
  $262 = HEAP32[$261>>2]|0;
  $263 = $262 >>> 8;
  $264 = $263&255;
  $265 = $264&255;
  $266 = ((14168) + ($265<<2)|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $260 ^ $267;
  $269 = $p0;
  $270 = ((($269)) + 4|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $271 >>> 16;
  $273 = $272&255;
  $274 = $273&255;
  $275 = ((15192) + ($274<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $268 ^ $276;
  $278 = $p0;
  $279 = ((($278)) + 8|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $280 >>> 24;
  $282 = $281&255;
  $283 = $282&255;
  $284 = ((16216) + ($283<<2)|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $277 ^ $285;
  $287 = $252 ^ $286;
  $288 = $p1;
  $289 = ((($288)) + 12|0);
  HEAP32[$289>>2] = $287;
  $290 = $p0;
  $pt = $290;
  $291 = $p1;
  $p0 = $291;
  $292 = $pt;
  $p1 = $292;
  $293 = $rnd;
  $294 = (($293) + 1)|0;
  $rnd = $294;
 }
 $295 = HEAP32[$b1>>2]|0;
 $296 = $295 >>> 0;
 $297 = $296&255;
 $298 = $297&255;
 $299 = (17240 + ($298<<2)|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = ((($b1)) + 4|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = $302 >>> 8;
 $304 = $303&255;
 $305 = $304&255;
 $306 = ((18264) + ($305<<2)|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $300 ^ $307;
 $309 = ((($b1)) + 8|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = $310 >>> 16;
 $312 = $311&255;
 $313 = $312&255;
 $314 = ((19288) + ($313<<2)|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = $308 ^ $315;
 $317 = ((($b1)) + 12|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = $318 >>> 24;
 $320 = $319&255;
 $321 = $320&255;
 $322 = ((20312) + ($321<<2)|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = $316 ^ $323;
 $325 = $133 ^ $324;
 HEAP32[$b0>>2] = $325;
 $326 = $kp;
 $327 = ((($326)) + 4|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = ((($b1)) + 4|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = $330 >>> 0;
 $332 = $331&255;
 $333 = $332&255;
 $334 = (17240 + ($333<<2)|0);
 $335 = HEAP32[$334>>2]|0;
 $336 = ((($b1)) + 8|0);
 $337 = HEAP32[$336>>2]|0;
 $338 = $337 >>> 8;
 $339 = $338&255;
 $340 = $339&255;
 $341 = ((18264) + ($340<<2)|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = $335 ^ $342;
 $344 = ((($b1)) + 12|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = $345 >>> 16;
 $347 = $346&255;
 $348 = $347&255;
 $349 = ((19288) + ($348<<2)|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = $343 ^ $350;
 $352 = HEAP32[$b1>>2]|0;
 $353 = $352 >>> 24;
 $354 = $353&255;
 $355 = $354&255;
 $356 = ((20312) + ($355<<2)|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = $351 ^ $357;
 $359 = $328 ^ $358;
 $360 = ((($b0)) + 4|0);
 HEAP32[$360>>2] = $359;
 $361 = $kp;
 $362 = ((($361)) + 8|0);
 $363 = HEAP32[$362>>2]|0;
 $364 = ((($b1)) + 8|0);
 $365 = HEAP32[$364>>2]|0;
 $366 = $365 >>> 0;
 $367 = $366&255;
 $368 = $367&255;
 $369 = (17240 + ($368<<2)|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = ((($b1)) + 12|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = $372 >>> 8;
 $374 = $373&255;
 $375 = $374&255;
 $376 = ((18264) + ($375<<2)|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = $370 ^ $377;
 $379 = HEAP32[$b1>>2]|0;
 $380 = $379 >>> 16;
 $381 = $380&255;
 $382 = $381&255;
 $383 = ((19288) + ($382<<2)|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = $378 ^ $384;
 $386 = ((($b1)) + 4|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = $387 >>> 24;
 $389 = $388&255;
 $390 = $389&255;
 $391 = ((20312) + ($390<<2)|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = $385 ^ $392;
 $394 = $363 ^ $393;
 $395 = ((($b0)) + 8|0);
 HEAP32[$395>>2] = $394;
 $396 = $kp;
 $397 = ((($396)) + 12|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = ((($b1)) + 12|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $400 >>> 0;
 $402 = $401&255;
 $403 = $402&255;
 $404 = (17240 + ($403<<2)|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = HEAP32[$b1>>2]|0;
 $407 = $406 >>> 8;
 $408 = $407&255;
 $409 = $408&255;
 $410 = ((18264) + ($409<<2)|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = $405 ^ $411;
 $413 = ((($b1)) + 4|0);
 $414 = HEAP32[$413>>2]|0;
 $415 = $414 >>> 16;
 $416 = $415&255;
 $417 = $416&255;
 $418 = ((19288) + ($417<<2)|0);
 $419 = HEAP32[$418>>2]|0;
 $420 = $412 ^ $419;
 $421 = ((($b1)) + 8|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = $422 >>> 24;
 $424 = $423&255;
 $425 = $424&255;
 $426 = ((20312) + ($425<<2)|0);
 $427 = HEAP32[$426>>2]|0;
 $428 = $420 ^ $427;
 $429 = $398 ^ $428;
 $430 = ((($b0)) + 12|0);
 HEAP32[$430>>2] = $429;
 $431 = HEAP32[$b0>>2]|0;
 $432 = $431 >>> 0;
 $433 = $432&255;
 $434 = $2;
 HEAP8[$434>>0] = $433;
 $435 = HEAP32[$b0>>2]|0;
 $436 = $435 >>> 8;
 $437 = $436&255;
 $438 = $2;
 $439 = ((($438)) + 1|0);
 HEAP8[$439>>0] = $437;
 $440 = HEAP32[$b0>>2]|0;
 $441 = $440 >>> 16;
 $442 = $441&255;
 $443 = $2;
 $444 = ((($443)) + 2|0);
 HEAP8[$444>>0] = $442;
 $445 = HEAP32[$b0>>2]|0;
 $446 = $445 >>> 24;
 $447 = $446&255;
 $448 = $2;
 $449 = ((($448)) + 3|0);
 HEAP8[$449>>0] = $447;
 $450 = ((($b0)) + 4|0);
 $451 = HEAP32[$450>>2]|0;
 $452 = $451 >>> 0;
 $453 = $452&255;
 $454 = $2;
 $455 = ((($454)) + 4|0);
 HEAP8[$455>>0] = $453;
 $456 = ((($b0)) + 4|0);
 $457 = HEAP32[$456>>2]|0;
 $458 = $457 >>> 8;
 $459 = $458&255;
 $460 = $2;
 $461 = ((($460)) + 4|0);
 $462 = ((($461)) + 1|0);
 HEAP8[$462>>0] = $459;
 $463 = ((($b0)) + 4|0);
 $464 = HEAP32[$463>>2]|0;
 $465 = $464 >>> 16;
 $466 = $465&255;
 $467 = $2;
 $468 = ((($467)) + 4|0);
 $469 = ((($468)) + 2|0);
 HEAP8[$469>>0] = $466;
 $470 = ((($b0)) + 4|0);
 $471 = HEAP32[$470>>2]|0;
 $472 = $471 >>> 24;
 $473 = $472&255;
 $474 = $2;
 $475 = ((($474)) + 4|0);
 $476 = ((($475)) + 3|0);
 HEAP8[$476>>0] = $473;
 $477 = ((($b0)) + 8|0);
 $478 = HEAP32[$477>>2]|0;
 $479 = $478 >>> 0;
 $480 = $479&255;
 $481 = $2;
 $482 = ((($481)) + 8|0);
 HEAP8[$482>>0] = $480;
 $483 = ((($b0)) + 8|0);
 $484 = HEAP32[$483>>2]|0;
 $485 = $484 >>> 8;
 $486 = $485&255;
 $487 = $2;
 $488 = ((($487)) + 8|0);
 $489 = ((($488)) + 1|0);
 HEAP8[$489>>0] = $486;
 $490 = ((($b0)) + 8|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = $491 >>> 16;
 $493 = $492&255;
 $494 = $2;
 $495 = ((($494)) + 8|0);
 $496 = ((($495)) + 2|0);
 HEAP8[$496>>0] = $493;
 $497 = ((($b0)) + 8|0);
 $498 = HEAP32[$497>>2]|0;
 $499 = $498 >>> 24;
 $500 = $499&255;
 $501 = $2;
 $502 = ((($501)) + 8|0);
 $503 = ((($502)) + 3|0);
 HEAP8[$503>>0] = $500;
 $504 = ((($b0)) + 12|0);
 $505 = HEAP32[$504>>2]|0;
 $506 = $505 >>> 0;
 $507 = $506&255;
 $508 = $2;
 $509 = ((($508)) + 12|0);
 HEAP8[$509>>0] = $507;
 $510 = ((($b0)) + 12|0);
 $511 = HEAP32[$510>>2]|0;
 $512 = $511 >>> 8;
 $513 = $512&255;
 $514 = $2;
 $515 = ((($514)) + 12|0);
 $516 = ((($515)) + 1|0);
 HEAP8[$516>>0] = $513;
 $517 = ((($b0)) + 12|0);
 $518 = HEAP32[$517>>2]|0;
 $519 = $518 >>> 16;
 $520 = $519&255;
 $521 = $2;
 $522 = ((($521)) + 12|0);
 $523 = ((($522)) + 2|0);
 HEAP8[$523>>0] = $520;
 $524 = ((($b0)) + 12|0);
 $525 = HEAP32[$524>>2]|0;
 $526 = $525 >>> 24;
 $527 = $526&255;
 $528 = $2;
 $529 = ((($528)) + 12|0);
 $530 = ((($529)) + 3|0);
 HEAP8[$530>>0] = $527;
 $0 = 1;
 $531 = $0;
 STACKTOP = sp;return ($531|0);
}
function __ZL11aes_dec_blkPKhPhPK7aes_ctx($in_blk,$out_blk,$cx) {
 $in_blk = $in_blk|0;
 $out_blk = $out_blk|0;
 $cx = $cx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b0 = 0, $b1 = 0, $kp = 0;
 var $p0 = 0, $p1 = 0, $pt = 0, $rnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b1 = sp + 40|0;
 $b0 = sp + 24|0;
 $1 = $in_blk;
 $2 = $out_blk;
 $3 = $cx;
 $4 = $3;
 $5 = $3;
 $6 = ((($5)) + 256|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7<<2;
 $9 = (($4) + ($8<<2)|0);
 $kp = $9;
 $10 = $3;
 $11 = ((($10)) + 260|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $0 = 0;
  $536 = $0;
  STACKTOP = sp;return ($536|0);
 }
 $15 = $1;
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 24;
 $20 = $1;
 $21 = ((($20)) + 2|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 16;
 $25 = $19 | $24;
 $26 = $1;
 $27 = ((($26)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $25 | $30;
 $32 = $1;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $31 | $34;
 $36 = $kp;
 $37 = HEAP32[$36>>2]|0;
 $38 = $35 ^ $37;
 HEAP32[$b0>>2] = $38;
 $39 = $1;
 $40 = ((($39)) + 4|0);
 $41 = ((($40)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 24;
 $45 = $1;
 $46 = ((($45)) + 4|0);
 $47 = ((($46)) + 2|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49 << 16;
 $51 = $44 | $50;
 $52 = $1;
 $53 = ((($52)) + 4|0);
 $54 = ((($53)) + 1|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 << 8;
 $58 = $51 | $57;
 $59 = $1;
 $60 = ((($59)) + 4|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $58 | $62;
 $64 = $kp;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $63 ^ $66;
 $68 = ((($b0)) + 4|0);
 HEAP32[$68>>2] = $67;
 $69 = $1;
 $70 = ((($69)) + 8|0);
 $71 = ((($70)) + 3|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 << 24;
 $75 = $1;
 $76 = ((($75)) + 8|0);
 $77 = ((($76)) + 2|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 << 16;
 $81 = $74 | $80;
 $82 = $1;
 $83 = ((($82)) + 8|0);
 $84 = ((($83)) + 1|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $86 << 8;
 $88 = $81 | $87;
 $89 = $1;
 $90 = ((($89)) + 8|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $88 | $92;
 $94 = $kp;
 $95 = ((($94)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $93 ^ $96;
 $98 = ((($b0)) + 8|0);
 HEAP32[$98>>2] = $97;
 $99 = $1;
 $100 = ((($99)) + 12|0);
 $101 = ((($100)) + 3|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 << 24;
 $105 = $1;
 $106 = ((($105)) + 12|0);
 $107 = ((($106)) + 2|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = $109 << 16;
 $111 = $104 | $110;
 $112 = $1;
 $113 = ((($112)) + 12|0);
 $114 = ((($113)) + 1|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = $116 << 8;
 $118 = $111 | $117;
 $119 = $1;
 $120 = ((($119)) + 12|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $118 | $122;
 $124 = $kp;
 $125 = ((($124)) + 12|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $123 ^ $126;
 $128 = ((($b0)) + 12|0);
 HEAP32[$128>>2] = $127;
 $p0 = $b0;
 $p1 = $b1;
 $rnd = 0;
 while(1) {
  $129 = $rnd;
  $130 = $3;
  $131 = ((($130)) + 256|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) - 1)|0;
  $134 = ($129>>>0)<($133>>>0);
  $135 = $kp;
  $136 = ((($135)) + -16|0);
  $kp = $136;
  $137 = $kp;
  $138 = HEAP32[$137>>2]|0;
  if (!($134)) {
   break;
  }
  $139 = $p0;
  $140 = HEAP32[$139>>2]|0;
  $141 = $140 >>> 0;
  $142 = $141&255;
  $143 = $142&255;
  $144 = (21336 + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $p0;
  $147 = ((($146)) + 12|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 >>> 8;
  $150 = $149&255;
  $151 = $150&255;
  $152 = ((22360) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $145 ^ $153;
  $155 = $p0;
  $156 = ((($155)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $157 >>> 16;
  $159 = $158&255;
  $160 = $159&255;
  $161 = ((23384) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $154 ^ $162;
  $164 = $p0;
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 >>> 24;
  $168 = $167&255;
  $169 = $168&255;
  $170 = ((24408) + ($169<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $163 ^ $171;
  $173 = $138 ^ $172;
  $174 = $p1;
  HEAP32[$174>>2] = $173;
  $175 = $kp;
  $176 = ((($175)) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $p0;
  $179 = ((($178)) + 4|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $180 >>> 0;
  $182 = $181&255;
  $183 = $182&255;
  $184 = (21336 + ($183<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $p0;
  $187 = HEAP32[$186>>2]|0;
  $188 = $187 >>> 8;
  $189 = $188&255;
  $190 = $189&255;
  $191 = ((22360) + ($190<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $185 ^ $192;
  $194 = $p0;
  $195 = ((($194)) + 12|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $196 >>> 16;
  $198 = $197&255;
  $199 = $198&255;
  $200 = ((23384) + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $193 ^ $201;
  $203 = $p0;
  $204 = ((($203)) + 8|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 >>> 24;
  $207 = $206&255;
  $208 = $207&255;
  $209 = ((24408) + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $202 ^ $210;
  $212 = $177 ^ $211;
  $213 = $p1;
  $214 = ((($213)) + 4|0);
  HEAP32[$214>>2] = $212;
  $215 = $kp;
  $216 = ((($215)) + 8|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $p0;
  $219 = ((($218)) + 8|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 >>> 0;
  $222 = $221&255;
  $223 = $222&255;
  $224 = (21336 + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $p0;
  $227 = ((($226)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 >>> 8;
  $230 = $229&255;
  $231 = $230&255;
  $232 = ((22360) + ($231<<2)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $225 ^ $233;
  $235 = $p0;
  $236 = HEAP32[$235>>2]|0;
  $237 = $236 >>> 16;
  $238 = $237&255;
  $239 = $238&255;
  $240 = ((23384) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $234 ^ $241;
  $243 = $p0;
  $244 = ((($243)) + 12|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $245 >>> 24;
  $247 = $246&255;
  $248 = $247&255;
  $249 = ((24408) + ($248<<2)|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = $242 ^ $250;
  $252 = $217 ^ $251;
  $253 = $p1;
  $254 = ((($253)) + 8|0);
  HEAP32[$254>>2] = $252;
  $255 = $kp;
  $256 = ((($255)) + 12|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $p0;
  $259 = ((($258)) + 12|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $260 >>> 0;
  $262 = $261&255;
  $263 = $262&255;
  $264 = (21336 + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $p0;
  $267 = ((($266)) + 8|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $268 >>> 8;
  $270 = $269&255;
  $271 = $270&255;
  $272 = ((22360) + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $265 ^ $273;
  $275 = $p0;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $277 >>> 16;
  $279 = $278&255;
  $280 = $279&255;
  $281 = ((23384) + ($280<<2)|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $274 ^ $282;
  $284 = $p0;
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 >>> 24;
  $287 = $286&255;
  $288 = $287&255;
  $289 = ((24408) + ($288<<2)|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $283 ^ $290;
  $292 = $257 ^ $291;
  $293 = $p1;
  $294 = ((($293)) + 12|0);
  HEAP32[$294>>2] = $292;
  $295 = $p0;
  $pt = $295;
  $296 = $p1;
  $p0 = $296;
  $297 = $pt;
  $p1 = $297;
  $298 = $rnd;
  $299 = (($298) + 1)|0;
  $rnd = $299;
 }
 $300 = HEAP32[$b1>>2]|0;
 $301 = $300 >>> 0;
 $302 = $301&255;
 $303 = $302&255;
 $304 = (25432 + ($303<<2)|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = ((($b1)) + 12|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $307 >>> 8;
 $309 = $308&255;
 $310 = $309&255;
 $311 = ((26456) + ($310<<2)|0);
 $312 = HEAP32[$311>>2]|0;
 $313 = $305 ^ $312;
 $314 = ((($b1)) + 8|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = $315 >>> 16;
 $317 = $316&255;
 $318 = $317&255;
 $319 = ((27480) + ($318<<2)|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = $313 ^ $320;
 $322 = ((($b1)) + 4|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = $323 >>> 24;
 $325 = $324&255;
 $326 = $325&255;
 $327 = ((28504) + ($326<<2)|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = $321 ^ $328;
 $330 = $138 ^ $329;
 HEAP32[$b0>>2] = $330;
 $331 = $kp;
 $332 = ((($331)) + 4|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = ((($b1)) + 4|0);
 $335 = HEAP32[$334>>2]|0;
 $336 = $335 >>> 0;
 $337 = $336&255;
 $338 = $337&255;
 $339 = (25432 + ($338<<2)|0);
 $340 = HEAP32[$339>>2]|0;
 $341 = HEAP32[$b1>>2]|0;
 $342 = $341 >>> 8;
 $343 = $342&255;
 $344 = $343&255;
 $345 = ((26456) + ($344<<2)|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = $340 ^ $346;
 $348 = ((($b1)) + 12|0);
 $349 = HEAP32[$348>>2]|0;
 $350 = $349 >>> 16;
 $351 = $350&255;
 $352 = $351&255;
 $353 = ((27480) + ($352<<2)|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = $347 ^ $354;
 $356 = ((($b1)) + 8|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = $357 >>> 24;
 $359 = $358&255;
 $360 = $359&255;
 $361 = ((28504) + ($360<<2)|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = $355 ^ $362;
 $364 = $333 ^ $363;
 $365 = ((($b0)) + 4|0);
 HEAP32[$365>>2] = $364;
 $366 = $kp;
 $367 = ((($366)) + 8|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = ((($b1)) + 8|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = $370 >>> 0;
 $372 = $371&255;
 $373 = $372&255;
 $374 = (25432 + ($373<<2)|0);
 $375 = HEAP32[$374>>2]|0;
 $376 = ((($b1)) + 4|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = $377 >>> 8;
 $379 = $378&255;
 $380 = $379&255;
 $381 = ((26456) + ($380<<2)|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = $375 ^ $382;
 $384 = HEAP32[$b1>>2]|0;
 $385 = $384 >>> 16;
 $386 = $385&255;
 $387 = $386&255;
 $388 = ((27480) + ($387<<2)|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = $383 ^ $389;
 $391 = ((($b1)) + 12|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = $392 >>> 24;
 $394 = $393&255;
 $395 = $394&255;
 $396 = ((28504) + ($395<<2)|0);
 $397 = HEAP32[$396>>2]|0;
 $398 = $390 ^ $397;
 $399 = $368 ^ $398;
 $400 = ((($b0)) + 8|0);
 HEAP32[$400>>2] = $399;
 $401 = $kp;
 $402 = ((($401)) + 12|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = ((($b1)) + 12|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = $405 >>> 0;
 $407 = $406&255;
 $408 = $407&255;
 $409 = (25432 + ($408<<2)|0);
 $410 = HEAP32[$409>>2]|0;
 $411 = ((($b1)) + 8|0);
 $412 = HEAP32[$411>>2]|0;
 $413 = $412 >>> 8;
 $414 = $413&255;
 $415 = $414&255;
 $416 = ((26456) + ($415<<2)|0);
 $417 = HEAP32[$416>>2]|0;
 $418 = $410 ^ $417;
 $419 = ((($b1)) + 4|0);
 $420 = HEAP32[$419>>2]|0;
 $421 = $420 >>> 16;
 $422 = $421&255;
 $423 = $422&255;
 $424 = ((27480) + ($423<<2)|0);
 $425 = HEAP32[$424>>2]|0;
 $426 = $418 ^ $425;
 $427 = HEAP32[$b1>>2]|0;
 $428 = $427 >>> 24;
 $429 = $428&255;
 $430 = $429&255;
 $431 = ((28504) + ($430<<2)|0);
 $432 = HEAP32[$431>>2]|0;
 $433 = $426 ^ $432;
 $434 = $403 ^ $433;
 $435 = ((($b0)) + 12|0);
 HEAP32[$435>>2] = $434;
 $436 = HEAP32[$b0>>2]|0;
 $437 = $436 >>> 0;
 $438 = $437&255;
 $439 = $2;
 HEAP8[$439>>0] = $438;
 $440 = HEAP32[$b0>>2]|0;
 $441 = $440 >>> 8;
 $442 = $441&255;
 $443 = $2;
 $444 = ((($443)) + 1|0);
 HEAP8[$444>>0] = $442;
 $445 = HEAP32[$b0>>2]|0;
 $446 = $445 >>> 16;
 $447 = $446&255;
 $448 = $2;
 $449 = ((($448)) + 2|0);
 HEAP8[$449>>0] = $447;
 $450 = HEAP32[$b0>>2]|0;
 $451 = $450 >>> 24;
 $452 = $451&255;
 $453 = $2;
 $454 = ((($453)) + 3|0);
 HEAP8[$454>>0] = $452;
 $455 = ((($b0)) + 4|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = $456 >>> 0;
 $458 = $457&255;
 $459 = $2;
 $460 = ((($459)) + 4|0);
 HEAP8[$460>>0] = $458;
 $461 = ((($b0)) + 4|0);
 $462 = HEAP32[$461>>2]|0;
 $463 = $462 >>> 8;
 $464 = $463&255;
 $465 = $2;
 $466 = ((($465)) + 4|0);
 $467 = ((($466)) + 1|0);
 HEAP8[$467>>0] = $464;
 $468 = ((($b0)) + 4|0);
 $469 = HEAP32[$468>>2]|0;
 $470 = $469 >>> 16;
 $471 = $470&255;
 $472 = $2;
 $473 = ((($472)) + 4|0);
 $474 = ((($473)) + 2|0);
 HEAP8[$474>>0] = $471;
 $475 = ((($b0)) + 4|0);
 $476 = HEAP32[$475>>2]|0;
 $477 = $476 >>> 24;
 $478 = $477&255;
 $479 = $2;
 $480 = ((($479)) + 4|0);
 $481 = ((($480)) + 3|0);
 HEAP8[$481>>0] = $478;
 $482 = ((($b0)) + 8|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = $483 >>> 0;
 $485 = $484&255;
 $486 = $2;
 $487 = ((($486)) + 8|0);
 HEAP8[$487>>0] = $485;
 $488 = ((($b0)) + 8|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = $489 >>> 8;
 $491 = $490&255;
 $492 = $2;
 $493 = ((($492)) + 8|0);
 $494 = ((($493)) + 1|0);
 HEAP8[$494>>0] = $491;
 $495 = ((($b0)) + 8|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = $496 >>> 16;
 $498 = $497&255;
 $499 = $2;
 $500 = ((($499)) + 8|0);
 $501 = ((($500)) + 2|0);
 HEAP8[$501>>0] = $498;
 $502 = ((($b0)) + 8|0);
 $503 = HEAP32[$502>>2]|0;
 $504 = $503 >>> 24;
 $505 = $504&255;
 $506 = $2;
 $507 = ((($506)) + 8|0);
 $508 = ((($507)) + 3|0);
 HEAP8[$508>>0] = $505;
 $509 = ((($b0)) + 12|0);
 $510 = HEAP32[$509>>2]|0;
 $511 = $510 >>> 0;
 $512 = $511&255;
 $513 = $2;
 $514 = ((($513)) + 12|0);
 HEAP8[$514>>0] = $512;
 $515 = ((($b0)) + 12|0);
 $516 = HEAP32[$515>>2]|0;
 $517 = $516 >>> 8;
 $518 = $517&255;
 $519 = $2;
 $520 = ((($519)) + 12|0);
 $521 = ((($520)) + 1|0);
 HEAP8[$521>>0] = $518;
 $522 = ((($b0)) + 12|0);
 $523 = HEAP32[$522>>2]|0;
 $524 = $523 >>> 16;
 $525 = $524&255;
 $526 = $2;
 $527 = ((($526)) + 12|0);
 $528 = ((($527)) + 2|0);
 HEAP8[$528>>0] = $525;
 $529 = ((($b0)) + 12|0);
 $530 = HEAP32[$529>>2]|0;
 $531 = $530 >>> 24;
 $532 = $531&255;
 $533 = $2;
 $534 = ((($533)) + 12|0);
 $535 = ((($534)) + 3|0);
 HEAP8[$535>>0] = $532;
 $0 = 1;
 $536 = $0;
 STACKTOP = sp;return ($536|0);
}
function __ZL11aes_enc_keyPKhjP7aes_ctx($in_key,$klen,$cx) {
 $in_key = $in_key|0;
 $klen = $klen|0;
 $cx = $cx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $l = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ss = sp + 8|0;
 $1 = $in_key;
 $2 = $klen;
 $3 = $cx;
 $4 = $3;
 $5 = ((($4)) + 260|0);
 HEAP32[$5>>2] = 16;
 $6 = $3;
 $7 = ((($6)) + 260|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -4;
 $10 = $9 | 1;
 $11 = $3;
 $12 = ((($11)) + 260|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $1;
 $19 = ((($18)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 16;
 $23 = $17 | $22;
 $24 = $1;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = $23 | $28;
 $30 = $1;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $29 | $32;
 HEAP32[$ss>>2] = $33;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $1;
 $36 = ((($35)) + 4|0);
 $37 = ((($36)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 24;
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = ((($42)) + 2|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $45 << 16;
 $47 = $40 | $46;
 $48 = $1;
 $49 = ((($48)) + 4|0);
 $50 = ((($49)) + 1|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52 << 8;
 $54 = $47 | $53;
 $55 = $1;
 $56 = ((($55)) + 4|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $54 | $58;
 $60 = ((($ss)) + 4|0);
 HEAP32[$60>>2] = $59;
 $61 = $3;
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $59;
 $63 = $1;
 $64 = ((($63)) + 8|0);
 $65 = ((($64)) + 3|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 << 24;
 $69 = $1;
 $70 = ((($69)) + 8|0);
 $71 = ((($70)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 << 16;
 $75 = $68 | $74;
 $76 = $1;
 $77 = ((($76)) + 8|0);
 $78 = ((($77)) + 1|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 << 8;
 $82 = $75 | $81;
 $83 = $1;
 $84 = ((($83)) + 8|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $82 | $86;
 $88 = ((($ss)) + 8|0);
 HEAP32[$88>>2] = $87;
 $89 = $3;
 $90 = ((($89)) + 8|0);
 HEAP32[$90>>2] = $87;
 $91 = $1;
 $92 = ((($91)) + 12|0);
 $93 = ((($92)) + 3|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 << 24;
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = ((($98)) + 2|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = $101 << 16;
 $103 = $96 | $102;
 $104 = $1;
 $105 = ((($104)) + 12|0);
 $106 = ((($105)) + 1|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $108 << 8;
 $110 = $103 | $109;
 $111 = $1;
 $112 = ((($111)) + 12|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $110 | $114;
 $116 = ((($ss)) + 12|0);
 HEAP32[$116>>2] = $115;
 $117 = $3;
 $118 = ((($117)) + 12|0);
 HEAP32[$118>>2] = $115;
 $119 = $2;
 $120 = $119 >>> 2;
 $121 = ($120>>>0)>(4);
 $122 = $2;
 $123 = $122 >>> 2;
 $124 = $121 ? $123 : 4;
 $125 = (($124) + 6)|0;
 $126 = $3;
 $127 = ((($126)) + 256|0);
 HEAP32[$127>>2] = $125;
 $128 = $3;
 $129 = ((($128)) + 256|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $130<<2;
 $132 = (($131) + 4)|0;
 $133 = (($132) - 1)|0;
 $134 = $2;
 $135 = $134 >>> 2;
 $136 = (($133>>>0) / ($135>>>0))&-1;
 $l = $136;
 $137 = $2;
 L1: do {
  switch ($137|0) {
  case 16:  {
   $i = 0;
   while(1) {
    $138 = $i;
    $139 = $l;
    $140 = ($138>>>0)<($139>>>0);
    if (!($140)) {
     break L1;
    }
    $141 = ((($ss)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142 >>> 8;
    $144 = $143&255;
    $145 = $144&255;
    $146 = (17240 + ($145<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ((($ss)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $149 >>> 16;
    $151 = $150&255;
    $152 = $151&255;
    $153 = ((18264) + ($152<<2)|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $147 ^ $154;
    $156 = ((($ss)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 >>> 24;
    $159 = $158&255;
    $160 = $159&255;
    $161 = ((19288) + ($160<<2)|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = $155 ^ $162;
    $164 = ((($ss)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $165 >>> 0;
    $167 = $166&255;
    $168 = $167&255;
    $169 = ((20312) + ($168<<2)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $163 ^ $170;
    $172 = $i;
    $173 = (29528 + ($172<<2)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $171 ^ $174;
    $176 = HEAP32[$ss>>2]|0;
    $177 = $176 ^ $175;
    HEAP32[$ss>>2] = $177;
    $178 = $i;
    $179 = $178<<2;
    $180 = (($179) + 4)|0;
    $181 = $3;
    $182 = (($181) + ($180<<2)|0);
    HEAP32[$182>>2] = $177;
    $183 = HEAP32[$ss>>2]|0;
    $184 = ((($ss)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $185 ^ $183;
    HEAP32[$184>>2] = $186;
    $187 = $i;
    $188 = $187<<2;
    $189 = (($188) + 5)|0;
    $190 = $3;
    $191 = (($190) + ($189<<2)|0);
    HEAP32[$191>>2] = $186;
    $192 = ((($ss)) + 4|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ((($ss)) + 8|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $195 ^ $193;
    HEAP32[$194>>2] = $196;
    $197 = $i;
    $198 = $197<<2;
    $199 = (($198) + 6)|0;
    $200 = $3;
    $201 = (($200) + ($199<<2)|0);
    HEAP32[$201>>2] = $196;
    $202 = ((($ss)) + 8|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ((($ss)) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $205 ^ $203;
    HEAP32[$204>>2] = $206;
    $207 = $i;
    $208 = $207<<2;
    $209 = (($208) + 7)|0;
    $210 = $3;
    $211 = (($210) + ($209<<2)|0);
    HEAP32[$211>>2] = $206;
    $212 = $i;
    $213 = (($212) + 1)|0;
    $i = $213;
   }
   break;
  }
  case 24:  {
   $214 = $1;
   $215 = ((($214)) + 16|0);
   $216 = ((($215)) + 3|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = $218 << 24;
   $220 = $1;
   $221 = ((($220)) + 16|0);
   $222 = ((($221)) + 2|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $224 << 16;
   $226 = $219 | $225;
   $227 = $1;
   $228 = ((($227)) + 16|0);
   $229 = ((($228)) + 1|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = $231 << 8;
   $233 = $226 | $232;
   $234 = $1;
   $235 = ((($234)) + 16|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = $233 | $237;
   $239 = ((($ss)) + 16|0);
   HEAP32[$239>>2] = $238;
   $240 = $3;
   $241 = ((($240)) + 16|0);
   HEAP32[$241>>2] = $238;
   $242 = $1;
   $243 = ((($242)) + 20|0);
   $244 = ((($243)) + 3|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245&255;
   $247 = $246 << 24;
   $248 = $1;
   $249 = ((($248)) + 20|0);
   $250 = ((($249)) + 2|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = $251&255;
   $253 = $252 << 16;
   $254 = $247 | $253;
   $255 = $1;
   $256 = ((($255)) + 20|0);
   $257 = ((($256)) + 1|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = $258&255;
   $260 = $259 << 8;
   $261 = $254 | $260;
   $262 = $1;
   $263 = ((($262)) + 20|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $266 = $261 | $265;
   $267 = ((($ss)) + 20|0);
   HEAP32[$267>>2] = $266;
   $268 = $3;
   $269 = ((($268)) + 20|0);
   HEAP32[$269>>2] = $266;
   $i = 0;
   while(1) {
    $270 = $i;
    $271 = $l;
    $272 = ($270>>>0)<($271>>>0);
    if (!($272)) {
     break L1;
    }
    $273 = ((($ss)) + 20|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $274 >>> 8;
    $276 = $275&255;
    $277 = $276&255;
    $278 = (17240 + ($277<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($ss)) + 20|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $281 >>> 16;
    $283 = $282&255;
    $284 = $283&255;
    $285 = ((18264) + ($284<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $279 ^ $286;
    $288 = ((($ss)) + 20|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = $289 >>> 24;
    $291 = $290&255;
    $292 = $291&255;
    $293 = ((19288) + ($292<<2)|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $287 ^ $294;
    $296 = ((($ss)) + 20|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = $297 >>> 0;
    $299 = $298&255;
    $300 = $299&255;
    $301 = ((20312) + ($300<<2)|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $295 ^ $302;
    $304 = $i;
    $305 = (29528 + ($304<<2)|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $303 ^ $306;
    $308 = HEAP32[$ss>>2]|0;
    $309 = $308 ^ $307;
    HEAP32[$ss>>2] = $309;
    $310 = $i;
    $311 = ($310*6)|0;
    $312 = (($311) + 6)|0;
    $313 = $3;
    $314 = (($313) + ($312<<2)|0);
    HEAP32[$314>>2] = $309;
    $315 = HEAP32[$ss>>2]|0;
    $316 = ((($ss)) + 4|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = $317 ^ $315;
    HEAP32[$316>>2] = $318;
    $319 = $i;
    $320 = ($319*6)|0;
    $321 = (($320) + 7)|0;
    $322 = $3;
    $323 = (($322) + ($321<<2)|0);
    HEAP32[$323>>2] = $318;
    $324 = ((($ss)) + 4|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ((($ss)) + 8|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327 ^ $325;
    HEAP32[$326>>2] = $328;
    $329 = $i;
    $330 = ($329*6)|0;
    $331 = (($330) + 8)|0;
    $332 = $3;
    $333 = (($332) + ($331<<2)|0);
    HEAP32[$333>>2] = $328;
    $334 = ((($ss)) + 8|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ((($ss)) + 12|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 ^ $335;
    HEAP32[$336>>2] = $338;
    $339 = $i;
    $340 = ($339*6)|0;
    $341 = (($340) + 9)|0;
    $342 = $3;
    $343 = (($342) + ($341<<2)|0);
    HEAP32[$343>>2] = $338;
    $344 = ((($ss)) + 12|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = ((($ss)) + 16|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $347 ^ $345;
    HEAP32[$346>>2] = $348;
    $349 = $i;
    $350 = ($349*6)|0;
    $351 = (($350) + 10)|0;
    $352 = $3;
    $353 = (($352) + ($351<<2)|0);
    HEAP32[$353>>2] = $348;
    $354 = ((($ss)) + 16|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ((($ss)) + 20|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $357 ^ $355;
    HEAP32[$356>>2] = $358;
    $359 = $i;
    $360 = ($359*6)|0;
    $361 = (($360) + 11)|0;
    $362 = $3;
    $363 = (($362) + ($361<<2)|0);
    HEAP32[$363>>2] = $358;
    $364 = $i;
    $365 = (($364) + 1)|0;
    $i = $365;
   }
   break;
  }
  case 32:  {
   $366 = $1;
   $367 = ((($366)) + 16|0);
   $368 = ((($367)) + 3|0);
   $369 = HEAP8[$368>>0]|0;
   $370 = $369&255;
   $371 = $370 << 24;
   $372 = $1;
   $373 = ((($372)) + 16|0);
   $374 = ((($373)) + 2|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375&255;
   $377 = $376 << 16;
   $378 = $371 | $377;
   $379 = $1;
   $380 = ((($379)) + 16|0);
   $381 = ((($380)) + 1|0);
   $382 = HEAP8[$381>>0]|0;
   $383 = $382&255;
   $384 = $383 << 8;
   $385 = $378 | $384;
   $386 = $1;
   $387 = ((($386)) + 16|0);
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = $385 | $389;
   $391 = ((($ss)) + 16|0);
   HEAP32[$391>>2] = $390;
   $392 = $3;
   $393 = ((($392)) + 16|0);
   HEAP32[$393>>2] = $390;
   $394 = $1;
   $395 = ((($394)) + 20|0);
   $396 = ((($395)) + 3|0);
   $397 = HEAP8[$396>>0]|0;
   $398 = $397&255;
   $399 = $398 << 24;
   $400 = $1;
   $401 = ((($400)) + 20|0);
   $402 = ((($401)) + 2|0);
   $403 = HEAP8[$402>>0]|0;
   $404 = $403&255;
   $405 = $404 << 16;
   $406 = $399 | $405;
   $407 = $1;
   $408 = ((($407)) + 20|0);
   $409 = ((($408)) + 1|0);
   $410 = HEAP8[$409>>0]|0;
   $411 = $410&255;
   $412 = $411 << 8;
   $413 = $406 | $412;
   $414 = $1;
   $415 = ((($414)) + 20|0);
   $416 = HEAP8[$415>>0]|0;
   $417 = $416&255;
   $418 = $413 | $417;
   $419 = ((($ss)) + 20|0);
   HEAP32[$419>>2] = $418;
   $420 = $3;
   $421 = ((($420)) + 20|0);
   HEAP32[$421>>2] = $418;
   $422 = $1;
   $423 = ((($422)) + 24|0);
   $424 = ((($423)) + 3|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   $427 = $426 << 24;
   $428 = $1;
   $429 = ((($428)) + 24|0);
   $430 = ((($429)) + 2|0);
   $431 = HEAP8[$430>>0]|0;
   $432 = $431&255;
   $433 = $432 << 16;
   $434 = $427 | $433;
   $435 = $1;
   $436 = ((($435)) + 24|0);
   $437 = ((($436)) + 1|0);
   $438 = HEAP8[$437>>0]|0;
   $439 = $438&255;
   $440 = $439 << 8;
   $441 = $434 | $440;
   $442 = $1;
   $443 = ((($442)) + 24|0);
   $444 = HEAP8[$443>>0]|0;
   $445 = $444&255;
   $446 = $441 | $445;
   $447 = ((($ss)) + 24|0);
   HEAP32[$447>>2] = $446;
   $448 = $3;
   $449 = ((($448)) + 24|0);
   HEAP32[$449>>2] = $446;
   $450 = $1;
   $451 = ((($450)) + 28|0);
   $452 = ((($451)) + 3|0);
   $453 = HEAP8[$452>>0]|0;
   $454 = $453&255;
   $455 = $454 << 24;
   $456 = $1;
   $457 = ((($456)) + 28|0);
   $458 = ((($457)) + 2|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = $459&255;
   $461 = $460 << 16;
   $462 = $455 | $461;
   $463 = $1;
   $464 = ((($463)) + 28|0);
   $465 = ((($464)) + 1|0);
   $466 = HEAP8[$465>>0]|0;
   $467 = $466&255;
   $468 = $467 << 8;
   $469 = $462 | $468;
   $470 = $1;
   $471 = ((($470)) + 28|0);
   $472 = HEAP8[$471>>0]|0;
   $473 = $472&255;
   $474 = $469 | $473;
   $475 = ((($ss)) + 28|0);
   HEAP32[$475>>2] = $474;
   $476 = $3;
   $477 = ((($476)) + 28|0);
   HEAP32[$477>>2] = $474;
   $i = 0;
   while(1) {
    $478 = $i;
    $479 = $l;
    $480 = ($478>>>0)<($479>>>0);
    if (!($480)) {
     break L1;
    }
    $481 = ((($ss)) + 28|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = $482 >>> 8;
    $484 = $483&255;
    $485 = $484&255;
    $486 = (17240 + ($485<<2)|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = ((($ss)) + 28|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $489 >>> 16;
    $491 = $490&255;
    $492 = $491&255;
    $493 = ((18264) + ($492<<2)|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = $487 ^ $494;
    $496 = ((($ss)) + 28|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = $497 >>> 24;
    $499 = $498&255;
    $500 = $499&255;
    $501 = ((19288) + ($500<<2)|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = $495 ^ $502;
    $504 = ((($ss)) + 28|0);
    $505 = HEAP32[$504>>2]|0;
    $506 = $505 >>> 0;
    $507 = $506&255;
    $508 = $507&255;
    $509 = ((20312) + ($508<<2)|0);
    $510 = HEAP32[$509>>2]|0;
    $511 = $503 ^ $510;
    $512 = $i;
    $513 = (29528 + ($512<<2)|0);
    $514 = HEAP32[$513>>2]|0;
    $515 = $511 ^ $514;
    $516 = HEAP32[$ss>>2]|0;
    $517 = $516 ^ $515;
    HEAP32[$ss>>2] = $517;
    $518 = $i;
    $519 = $518<<3;
    $520 = (($519) + 8)|0;
    $521 = $3;
    $522 = (($521) + ($520<<2)|0);
    HEAP32[$522>>2] = $517;
    $523 = HEAP32[$ss>>2]|0;
    $524 = ((($ss)) + 4|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = $525 ^ $523;
    HEAP32[$524>>2] = $526;
    $527 = $i;
    $528 = $527<<3;
    $529 = (($528) + 9)|0;
    $530 = $3;
    $531 = (($530) + ($529<<2)|0);
    HEAP32[$531>>2] = $526;
    $532 = ((($ss)) + 4|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = ((($ss)) + 8|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = $535 ^ $533;
    HEAP32[$534>>2] = $536;
    $537 = $i;
    $538 = $537<<3;
    $539 = (($538) + 10)|0;
    $540 = $3;
    $541 = (($540) + ($539<<2)|0);
    HEAP32[$541>>2] = $536;
    $542 = ((($ss)) + 8|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = ((($ss)) + 12|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $545 ^ $543;
    HEAP32[$544>>2] = $546;
    $547 = $i;
    $548 = $547<<3;
    $549 = (($548) + 11)|0;
    $550 = $3;
    $551 = (($550) + ($549<<2)|0);
    HEAP32[$551>>2] = $546;
    $552 = ((($ss)) + 12|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $553 >>> 0;
    $555 = $554&255;
    $556 = $555&255;
    $557 = (17240 + ($556<<2)|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = ((($ss)) + 12|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = $560 >>> 8;
    $562 = $561&255;
    $563 = $562&255;
    $564 = ((18264) + ($563<<2)|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = $558 ^ $565;
    $567 = ((($ss)) + 12|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = $568 >>> 16;
    $570 = $569&255;
    $571 = $570&255;
    $572 = ((19288) + ($571<<2)|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $566 ^ $573;
    $575 = ((($ss)) + 12|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = $576 >>> 24;
    $578 = $577&255;
    $579 = $578&255;
    $580 = ((20312) + ($579<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = $574 ^ $581;
    $583 = ((($ss)) + 16|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = $584 ^ $582;
    HEAP32[$583>>2] = $585;
    $586 = $i;
    $587 = $586<<3;
    $588 = (($587) + 12)|0;
    $589 = $3;
    $590 = (($589) + ($588<<2)|0);
    HEAP32[$590>>2] = $585;
    $591 = ((($ss)) + 16|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ((($ss)) + 20|0);
    $594 = HEAP32[$593>>2]|0;
    $595 = $594 ^ $592;
    HEAP32[$593>>2] = $595;
    $596 = $i;
    $597 = $596<<3;
    $598 = (($597) + 13)|0;
    $599 = $3;
    $600 = (($599) + ($598<<2)|0);
    HEAP32[$600>>2] = $595;
    $601 = ((($ss)) + 20|0);
    $602 = HEAP32[$601>>2]|0;
    $603 = ((($ss)) + 24|0);
    $604 = HEAP32[$603>>2]|0;
    $605 = $604 ^ $602;
    HEAP32[$603>>2] = $605;
    $606 = $i;
    $607 = $606<<3;
    $608 = (($607) + 14)|0;
    $609 = $3;
    $610 = (($609) + ($608<<2)|0);
    HEAP32[$610>>2] = $605;
    $611 = ((($ss)) + 24|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = ((($ss)) + 28|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = $614 ^ $612;
    HEAP32[$613>>2] = $615;
    $616 = $i;
    $617 = $616<<3;
    $618 = (($617) + 15)|0;
    $619 = $3;
    $620 = (($619) + ($618<<2)|0);
    HEAP32[$620>>2] = $615;
    $621 = $i;
    $622 = (($621) + 1)|0;
    $i = $622;
   }
   break;
  }
  default: {
   $623 = $3;
   $624 = ((($623)) + 256|0);
   HEAP32[$624>>2] = 0;
   $0 = 0;
   $625 = $0;
   STACKTOP = sp;return ($625|0);
  }
  }
 } while(0);
 $0 = 1;
 $625 = $0;
 STACKTOP = sp;return ($625|0);
}
function __ZL11aes_dec_keyPKhjP7aes_ctx($in_key,$klen,$cx) {
 $in_key = $in_key|0;
 $klen = $klen|0;
 $cx = $cx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $l = 0, $ss = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ss = sp + 8|0;
 $1 = $in_key;
 $2 = $klen;
 $3 = $cx;
 $4 = $3;
 $5 = ((($4)) + 260|0);
 HEAP32[$5>>2] = 16;
 $6 = $3;
 $7 = ((($6)) + 260|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -4;
 $10 = $9 | 2;
 $11 = $3;
 $12 = ((($11)) + 260|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $1;
 $19 = ((($18)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 16;
 $23 = $17 | $22;
 $24 = $1;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = $23 | $28;
 $30 = $1;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $29 | $32;
 HEAP32[$ss>>2] = $33;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $1;
 $36 = ((($35)) + 4|0);
 $37 = ((($36)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 24;
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = ((($42)) + 2|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $45 << 16;
 $47 = $40 | $46;
 $48 = $1;
 $49 = ((($48)) + 4|0);
 $50 = ((($49)) + 1|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52 << 8;
 $54 = $47 | $53;
 $55 = $1;
 $56 = ((($55)) + 4|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $54 | $58;
 $60 = ((($ss)) + 4|0);
 HEAP32[$60>>2] = $59;
 $61 = $3;
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $59;
 $63 = $1;
 $64 = ((($63)) + 8|0);
 $65 = ((($64)) + 3|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 << 24;
 $69 = $1;
 $70 = ((($69)) + 8|0);
 $71 = ((($70)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 << 16;
 $75 = $68 | $74;
 $76 = $1;
 $77 = ((($76)) + 8|0);
 $78 = ((($77)) + 1|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 << 8;
 $82 = $75 | $81;
 $83 = $1;
 $84 = ((($83)) + 8|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $82 | $86;
 $88 = ((($ss)) + 8|0);
 HEAP32[$88>>2] = $87;
 $89 = $3;
 $90 = ((($89)) + 8|0);
 HEAP32[$90>>2] = $87;
 $91 = $1;
 $92 = ((($91)) + 12|0);
 $93 = ((($92)) + 3|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 << 24;
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = ((($98)) + 2|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = $101 << 16;
 $103 = $96 | $102;
 $104 = $1;
 $105 = ((($104)) + 12|0);
 $106 = ((($105)) + 1|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $108 << 8;
 $110 = $103 | $109;
 $111 = $1;
 $112 = ((($111)) + 12|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $110 | $114;
 $116 = ((($ss)) + 12|0);
 HEAP32[$116>>2] = $115;
 $117 = $3;
 $118 = ((($117)) + 12|0);
 HEAP32[$118>>2] = $115;
 $119 = $2;
 $120 = $119 >>> 2;
 $121 = ($120>>>0)>(4);
 $122 = $2;
 $123 = $122 >>> 2;
 $124 = $121 ? $123 : 4;
 $125 = (($124) + 6)|0;
 $126 = $3;
 $127 = ((($126)) + 256|0);
 HEAP32[$127>>2] = $125;
 $128 = $3;
 $129 = ((($128)) + 256|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = $130<<2;
 $132 = (($131) + 4)|0;
 $133 = (($132) - 1)|0;
 $134 = $2;
 $135 = $134 >>> 2;
 $136 = (($133>>>0) / ($135>>>0))&-1;
 $l = $136;
 $137 = $2;
 L1: do {
  switch ($137|0) {
  case 16:  {
   $i = 0;
   while(1) {
    $138 = $i;
    $139 = $l;
    $140 = ($138>>>0)<($139>>>0);
    if (!($140)) {
     break L1;
    }
    $141 = ((($ss)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142 >>> 8;
    $144 = $143&255;
    $145 = $144&255;
    $146 = (17240 + ($145<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ((($ss)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = $149 >>> 16;
    $151 = $150&255;
    $152 = $151&255;
    $153 = ((18264) + ($152<<2)|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $147 ^ $154;
    $156 = ((($ss)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 >>> 24;
    $159 = $158&255;
    $160 = $159&255;
    $161 = ((19288) + ($160<<2)|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = $155 ^ $162;
    $164 = ((($ss)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $165 >>> 0;
    $167 = $166&255;
    $168 = $167&255;
    $169 = ((20312) + ($168<<2)|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $163 ^ $170;
    $172 = $i;
    $173 = (29528 + ($172<<2)|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $171 ^ $174;
    $176 = HEAP32[$ss>>2]|0;
    $177 = $176 ^ $175;
    HEAP32[$ss>>2] = $177;
    $178 = $i;
    $179 = $178<<2;
    $180 = (($179) + 4)|0;
    $181 = $3;
    $182 = (($181) + ($180<<2)|0);
    HEAP32[$182>>2] = $177;
    $183 = HEAP32[$ss>>2]|0;
    $184 = ((($ss)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $185 ^ $183;
    HEAP32[$184>>2] = $186;
    $187 = $i;
    $188 = $187<<2;
    $189 = (($188) + 5)|0;
    $190 = $3;
    $191 = (($190) + ($189<<2)|0);
    HEAP32[$191>>2] = $186;
    $192 = ((($ss)) + 4|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ((($ss)) + 8|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $195 ^ $193;
    HEAP32[$194>>2] = $196;
    $197 = $i;
    $198 = $197<<2;
    $199 = (($198) + 6)|0;
    $200 = $3;
    $201 = (($200) + ($199<<2)|0);
    HEAP32[$201>>2] = $196;
    $202 = ((($ss)) + 8|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ((($ss)) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $205 ^ $203;
    HEAP32[$204>>2] = $206;
    $207 = $i;
    $208 = $207<<2;
    $209 = (($208) + 7)|0;
    $210 = $3;
    $211 = (($210) + ($209<<2)|0);
    HEAP32[$211>>2] = $206;
    $212 = $i;
    $213 = (($212) + 1)|0;
    $i = $213;
   }
   break;
  }
  case 24:  {
   $214 = $1;
   $215 = ((($214)) + 16|0);
   $216 = ((($215)) + 3|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = $218 << 24;
   $220 = $1;
   $221 = ((($220)) + 16|0);
   $222 = ((($221)) + 2|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $224 << 16;
   $226 = $219 | $225;
   $227 = $1;
   $228 = ((($227)) + 16|0);
   $229 = ((($228)) + 1|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = $231 << 8;
   $233 = $226 | $232;
   $234 = $1;
   $235 = ((($234)) + 16|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = $233 | $237;
   $239 = ((($ss)) + 16|0);
   HEAP32[$239>>2] = $238;
   $240 = $3;
   $241 = ((($240)) + 16|0);
   HEAP32[$241>>2] = $238;
   $242 = $1;
   $243 = ((($242)) + 20|0);
   $244 = ((($243)) + 3|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245&255;
   $247 = $246 << 24;
   $248 = $1;
   $249 = ((($248)) + 20|0);
   $250 = ((($249)) + 2|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = $251&255;
   $253 = $252 << 16;
   $254 = $247 | $253;
   $255 = $1;
   $256 = ((($255)) + 20|0);
   $257 = ((($256)) + 1|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = $258&255;
   $260 = $259 << 8;
   $261 = $254 | $260;
   $262 = $1;
   $263 = ((($262)) + 20|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $266 = $261 | $265;
   $267 = ((($ss)) + 20|0);
   HEAP32[$267>>2] = $266;
   $268 = $3;
   $269 = ((($268)) + 20|0);
   HEAP32[$269>>2] = $266;
   $i = 0;
   while(1) {
    $270 = $i;
    $271 = $l;
    $272 = ($270>>>0)<($271>>>0);
    if (!($272)) {
     break L1;
    }
    $273 = ((($ss)) + 20|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $274 >>> 8;
    $276 = $275&255;
    $277 = $276&255;
    $278 = (17240 + ($277<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($ss)) + 20|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = $281 >>> 16;
    $283 = $282&255;
    $284 = $283&255;
    $285 = ((18264) + ($284<<2)|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $279 ^ $286;
    $288 = ((($ss)) + 20|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = $289 >>> 24;
    $291 = $290&255;
    $292 = $291&255;
    $293 = ((19288) + ($292<<2)|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $287 ^ $294;
    $296 = ((($ss)) + 20|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = $297 >>> 0;
    $299 = $298&255;
    $300 = $299&255;
    $301 = ((20312) + ($300<<2)|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $295 ^ $302;
    $304 = $i;
    $305 = (29528 + ($304<<2)|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $303 ^ $306;
    $308 = HEAP32[$ss>>2]|0;
    $309 = $308 ^ $307;
    HEAP32[$ss>>2] = $309;
    $310 = $i;
    $311 = ($310*6)|0;
    $312 = (($311) + 6)|0;
    $313 = $3;
    $314 = (($313) + ($312<<2)|0);
    HEAP32[$314>>2] = $309;
    $315 = HEAP32[$ss>>2]|0;
    $316 = ((($ss)) + 4|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = $317 ^ $315;
    HEAP32[$316>>2] = $318;
    $319 = $i;
    $320 = ($319*6)|0;
    $321 = (($320) + 7)|0;
    $322 = $3;
    $323 = (($322) + ($321<<2)|0);
    HEAP32[$323>>2] = $318;
    $324 = ((($ss)) + 4|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ((($ss)) + 8|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327 ^ $325;
    HEAP32[$326>>2] = $328;
    $329 = $i;
    $330 = ($329*6)|0;
    $331 = (($330) + 8)|0;
    $332 = $3;
    $333 = (($332) + ($331<<2)|0);
    HEAP32[$333>>2] = $328;
    $334 = ((($ss)) + 8|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ((($ss)) + 12|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $337 ^ $335;
    HEAP32[$336>>2] = $338;
    $339 = $i;
    $340 = ($339*6)|0;
    $341 = (($340) + 9)|0;
    $342 = $3;
    $343 = (($342) + ($341<<2)|0);
    HEAP32[$343>>2] = $338;
    $344 = ((($ss)) + 12|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = ((($ss)) + 16|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $347 ^ $345;
    HEAP32[$346>>2] = $348;
    $349 = $i;
    $350 = ($349*6)|0;
    $351 = (($350) + 10)|0;
    $352 = $3;
    $353 = (($352) + ($351<<2)|0);
    HEAP32[$353>>2] = $348;
    $354 = ((($ss)) + 16|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ((($ss)) + 20|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $357 ^ $355;
    HEAP32[$356>>2] = $358;
    $359 = $i;
    $360 = ($359*6)|0;
    $361 = (($360) + 11)|0;
    $362 = $3;
    $363 = (($362) + ($361<<2)|0);
    HEAP32[$363>>2] = $358;
    $364 = $i;
    $365 = (($364) + 1)|0;
    $i = $365;
   }
   break;
  }
  case 32:  {
   $366 = $1;
   $367 = ((($366)) + 16|0);
   $368 = ((($367)) + 3|0);
   $369 = HEAP8[$368>>0]|0;
   $370 = $369&255;
   $371 = $370 << 24;
   $372 = $1;
   $373 = ((($372)) + 16|0);
   $374 = ((($373)) + 2|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375&255;
   $377 = $376 << 16;
   $378 = $371 | $377;
   $379 = $1;
   $380 = ((($379)) + 16|0);
   $381 = ((($380)) + 1|0);
   $382 = HEAP8[$381>>0]|0;
   $383 = $382&255;
   $384 = $383 << 8;
   $385 = $378 | $384;
   $386 = $1;
   $387 = ((($386)) + 16|0);
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = $385 | $389;
   $391 = ((($ss)) + 16|0);
   HEAP32[$391>>2] = $390;
   $392 = $3;
   $393 = ((($392)) + 16|0);
   HEAP32[$393>>2] = $390;
   $394 = $1;
   $395 = ((($394)) + 20|0);
   $396 = ((($395)) + 3|0);
   $397 = HEAP8[$396>>0]|0;
   $398 = $397&255;
   $399 = $398 << 24;
   $400 = $1;
   $401 = ((($400)) + 20|0);
   $402 = ((($401)) + 2|0);
   $403 = HEAP8[$402>>0]|0;
   $404 = $403&255;
   $405 = $404 << 16;
   $406 = $399 | $405;
   $407 = $1;
   $408 = ((($407)) + 20|0);
   $409 = ((($408)) + 1|0);
   $410 = HEAP8[$409>>0]|0;
   $411 = $410&255;
   $412 = $411 << 8;
   $413 = $406 | $412;
   $414 = $1;
   $415 = ((($414)) + 20|0);
   $416 = HEAP8[$415>>0]|0;
   $417 = $416&255;
   $418 = $413 | $417;
   $419 = ((($ss)) + 20|0);
   HEAP32[$419>>2] = $418;
   $420 = $3;
   $421 = ((($420)) + 20|0);
   HEAP32[$421>>2] = $418;
   $422 = $1;
   $423 = ((($422)) + 24|0);
   $424 = ((($423)) + 3|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   $427 = $426 << 24;
   $428 = $1;
   $429 = ((($428)) + 24|0);
   $430 = ((($429)) + 2|0);
   $431 = HEAP8[$430>>0]|0;
   $432 = $431&255;
   $433 = $432 << 16;
   $434 = $427 | $433;
   $435 = $1;
   $436 = ((($435)) + 24|0);
   $437 = ((($436)) + 1|0);
   $438 = HEAP8[$437>>0]|0;
   $439 = $438&255;
   $440 = $439 << 8;
   $441 = $434 | $440;
   $442 = $1;
   $443 = ((($442)) + 24|0);
   $444 = HEAP8[$443>>0]|0;
   $445 = $444&255;
   $446 = $441 | $445;
   $447 = ((($ss)) + 24|0);
   HEAP32[$447>>2] = $446;
   $448 = $3;
   $449 = ((($448)) + 24|0);
   HEAP32[$449>>2] = $446;
   $450 = $1;
   $451 = ((($450)) + 28|0);
   $452 = ((($451)) + 3|0);
   $453 = HEAP8[$452>>0]|0;
   $454 = $453&255;
   $455 = $454 << 24;
   $456 = $1;
   $457 = ((($456)) + 28|0);
   $458 = ((($457)) + 2|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = $459&255;
   $461 = $460 << 16;
   $462 = $455 | $461;
   $463 = $1;
   $464 = ((($463)) + 28|0);
   $465 = ((($464)) + 1|0);
   $466 = HEAP8[$465>>0]|0;
   $467 = $466&255;
   $468 = $467 << 8;
   $469 = $462 | $468;
   $470 = $1;
   $471 = ((($470)) + 28|0);
   $472 = HEAP8[$471>>0]|0;
   $473 = $472&255;
   $474 = $469 | $473;
   $475 = ((($ss)) + 28|0);
   HEAP32[$475>>2] = $474;
   $476 = $3;
   $477 = ((($476)) + 28|0);
   HEAP32[$477>>2] = $474;
   $i = 0;
   while(1) {
    $478 = $i;
    $479 = $l;
    $480 = ($478>>>0)<($479>>>0);
    if (!($480)) {
     break L1;
    }
    $481 = ((($ss)) + 28|0);
    $482 = HEAP32[$481>>2]|0;
    $483 = $482 >>> 8;
    $484 = $483&255;
    $485 = $484&255;
    $486 = (17240 + ($485<<2)|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = ((($ss)) + 28|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $489 >>> 16;
    $491 = $490&255;
    $492 = $491&255;
    $493 = ((18264) + ($492<<2)|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = $487 ^ $494;
    $496 = ((($ss)) + 28|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = $497 >>> 24;
    $499 = $498&255;
    $500 = $499&255;
    $501 = ((19288) + ($500<<2)|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = $495 ^ $502;
    $504 = ((($ss)) + 28|0);
    $505 = HEAP32[$504>>2]|0;
    $506 = $505 >>> 0;
    $507 = $506&255;
    $508 = $507&255;
    $509 = ((20312) + ($508<<2)|0);
    $510 = HEAP32[$509>>2]|0;
    $511 = $503 ^ $510;
    $512 = $i;
    $513 = (29528 + ($512<<2)|0);
    $514 = HEAP32[$513>>2]|0;
    $515 = $511 ^ $514;
    $516 = HEAP32[$ss>>2]|0;
    $517 = $516 ^ $515;
    HEAP32[$ss>>2] = $517;
    $518 = $i;
    $519 = $518<<3;
    $520 = (($519) + 8)|0;
    $521 = $3;
    $522 = (($521) + ($520<<2)|0);
    HEAP32[$522>>2] = $517;
    $523 = HEAP32[$ss>>2]|0;
    $524 = ((($ss)) + 4|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = $525 ^ $523;
    HEAP32[$524>>2] = $526;
    $527 = $i;
    $528 = $527<<3;
    $529 = (($528) + 9)|0;
    $530 = $3;
    $531 = (($530) + ($529<<2)|0);
    HEAP32[$531>>2] = $526;
    $532 = ((($ss)) + 4|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = ((($ss)) + 8|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = $535 ^ $533;
    HEAP32[$534>>2] = $536;
    $537 = $i;
    $538 = $537<<3;
    $539 = (($538) + 10)|0;
    $540 = $3;
    $541 = (($540) + ($539<<2)|0);
    HEAP32[$541>>2] = $536;
    $542 = ((($ss)) + 8|0);
    $543 = HEAP32[$542>>2]|0;
    $544 = ((($ss)) + 12|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $545 ^ $543;
    HEAP32[$544>>2] = $546;
    $547 = $i;
    $548 = $547<<3;
    $549 = (($548) + 11)|0;
    $550 = $3;
    $551 = (($550) + ($549<<2)|0);
    HEAP32[$551>>2] = $546;
    $552 = ((($ss)) + 12|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $553 >>> 0;
    $555 = $554&255;
    $556 = $555&255;
    $557 = (17240 + ($556<<2)|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = ((($ss)) + 12|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = $560 >>> 8;
    $562 = $561&255;
    $563 = $562&255;
    $564 = ((18264) + ($563<<2)|0);
    $565 = HEAP32[$564>>2]|0;
    $566 = $558 ^ $565;
    $567 = ((($ss)) + 12|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = $568 >>> 16;
    $570 = $569&255;
    $571 = $570&255;
    $572 = ((19288) + ($571<<2)|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $566 ^ $573;
    $575 = ((($ss)) + 12|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = $576 >>> 24;
    $578 = $577&255;
    $579 = $578&255;
    $580 = ((20312) + ($579<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = $574 ^ $581;
    $583 = ((($ss)) + 16|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = $584 ^ $582;
    HEAP32[$583>>2] = $585;
    $586 = $i;
    $587 = $586<<3;
    $588 = (($587) + 12)|0;
    $589 = $3;
    $590 = (($589) + ($588<<2)|0);
    HEAP32[$590>>2] = $585;
    $591 = ((($ss)) + 16|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ((($ss)) + 20|0);
    $594 = HEAP32[$593>>2]|0;
    $595 = $594 ^ $592;
    HEAP32[$593>>2] = $595;
    $596 = $i;
    $597 = $596<<3;
    $598 = (($597) + 13)|0;
    $599 = $3;
    $600 = (($599) + ($598<<2)|0);
    HEAP32[$600>>2] = $595;
    $601 = ((($ss)) + 20|0);
    $602 = HEAP32[$601>>2]|0;
    $603 = ((($ss)) + 24|0);
    $604 = HEAP32[$603>>2]|0;
    $605 = $604 ^ $602;
    HEAP32[$603>>2] = $605;
    $606 = $i;
    $607 = $606<<3;
    $608 = (($607) + 14)|0;
    $609 = $3;
    $610 = (($609) + ($608<<2)|0);
    HEAP32[$610>>2] = $605;
    $611 = ((($ss)) + 24|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = ((($ss)) + 28|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = $614 ^ $612;
    HEAP32[$613>>2] = $615;
    $616 = $i;
    $617 = $616<<3;
    $618 = (($617) + 15)|0;
    $619 = $3;
    $620 = (($619) + ($618<<2)|0);
    HEAP32[$620>>2] = $615;
    $621 = $i;
    $622 = (($621) + 1)|0;
    $i = $622;
   }
   break;
  }
  default: {
   $623 = $3;
   $624 = ((($623)) + 256|0);
   HEAP32[$624>>2] = 0;
   $0 = 0;
   $675 = $0;
   STACKTOP = sp;return ($675|0);
  }
  }
 } while(0);
 $i = 4;
 while(1) {
  $625 = $i;
  $626 = $3;
  $627 = ((($626)) + 256|0);
  $628 = HEAP32[$627>>2]|0;
  $629 = $628<<2;
  $630 = ($625>>>0)<($629>>>0);
  if (!($630)) {
   break;
  }
  $631 = $i;
  $632 = $3;
  $633 = (($632) + ($631<<2)|0);
  $634 = HEAP32[$633>>2]|0;
  $635 = $634 >>> 0;
  $636 = $635&255;
  $637 = $636&255;
  $638 = (29644 + ($637<<2)|0);
  $639 = HEAP32[$638>>2]|0;
  $640 = $i;
  $641 = $3;
  $642 = (($641) + ($640<<2)|0);
  $643 = HEAP32[$642>>2]|0;
  $644 = $643 >>> 8;
  $645 = $644&255;
  $646 = $645&255;
  $647 = ((30668) + ($646<<2)|0);
  $648 = HEAP32[$647>>2]|0;
  $649 = $639 ^ $648;
  $650 = $i;
  $651 = $3;
  $652 = (($651) + ($650<<2)|0);
  $653 = HEAP32[$652>>2]|0;
  $654 = $653 >>> 16;
  $655 = $654&255;
  $656 = $655&255;
  $657 = ((31692) + ($656<<2)|0);
  $658 = HEAP32[$657>>2]|0;
  $659 = $649 ^ $658;
  $660 = $i;
  $661 = $3;
  $662 = (($661) + ($660<<2)|0);
  $663 = HEAP32[$662>>2]|0;
  $664 = $663 >>> 24;
  $665 = $664&255;
  $666 = $665&255;
  $667 = ((32716) + ($666<<2)|0);
  $668 = HEAP32[$667>>2]|0;
  $669 = $659 ^ $668;
  $670 = $i;
  $671 = $3;
  $672 = (($671) + ($670<<2)|0);
  HEAP32[$672>>2] = $669;
  $673 = $i;
  $674 = (($673) + 1)|0;
  $i = $674;
 }
 $0 = 1;
 $675 = $0;
 STACKTOP = sp;return ($675|0);
}
function __ZN21AP4_AesCbcBlockCipherC2EN15AP4_BlockCipher15CipherDirectionEP7aes_ctx($this,$direction,$context) {
 $this = $this|0;
 $direction = $direction|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $direction;
 $2 = $context;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN18AP4_AesBlockCipherC2EN15AP4_BlockCipher15CipherDirectionENS0_10CipherModeEP7aes_ctx($3,$4,0,$5);
 $6 = 13104;
 HEAP32[$3>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN21AP4_AesCtrBlockCipherC2EN15AP4_BlockCipher15CipherDirectionEjP7aes_ctx($this,$direction,$0,$context) {
 $this = $this|0;
 $direction = $direction|0;
 $0 = $0|0;
 $context = $context|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $direction;
 $3 = $0;
 $4 = $context;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 __ZN18AP4_AesBlockCipherC2EN15AP4_BlockCipher15CipherDirectionENS0_10CipherModeEP7aes_ctx($5,$6,1,$7);
 $8 = 13128;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN15AP4_BlockCipherD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN21AP4_AesCtrBlockCipherD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(778,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_AesCtrBlockCipherD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN18AP4_AesBlockCipherD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN21AP4_AesCbcBlockCipherD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(775,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21AP4_AesCbcBlockCipherD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN18AP4_AesBlockCipherD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN18AP4_AesBlockCipher12GetDirectionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN15AP4_BlockCipherD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(781,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15AP4_BlockCipherC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 33748;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN18AP4_AesBlockCipherC2EN15AP4_BlockCipher15CipherDirectionENS0_10CipherModeEP7aes_ctx($this,$direction,$mode,$context) {
 $this = $this|0;
 $direction = $direction|0;
 $mode = $mode|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $direction;
 $2 = $mode;
 $3 = $context;
 $4 = $0;
 __ZN15AP4_BlockCipherC2Ev($4);
 $5 = 13080;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($4)) + 8|0);
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = ((($4)) + 12|0);
 $11 = $3;
 HEAP32[$10>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN27AP4_MetaDataAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom($this,$type,$size,$stream,$context,$atom) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 $context = $context|0;
 $atom = $atom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $4 = $context;
 $5 = $atom;
 $8 = $0;
 $9 = $5;
 HEAP32[$9>>2] = 0;
 $10 = $4;
 $11 = ($10|0)==(1768715124);
 $12 = $1;
 do {
  if ($11) {
   $13 = (__ZN27AP4_MetaDataAtomTypeHandler12IsTypeInListEjRKNS_8TypeListE($12,34020)|0);
   if ($13) {
    $14 = ((($8)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $1;
    __ZN15AP4_AtomFactory11PushContextEj($15,$16);
    $17 = $1;
    $18 = $2;
    $19 = $3;
    $20 = ((($8)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (__ZN17AP4_ContainerAtom6CreateEjybbR14AP4_ByteStreamR15AP4_AtomFactory($17,$18,0,0,0,$19,$21)|0);
    $23 = $5;
    HEAP32[$23>>2] = $22;
    $24 = ((($8)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    __ZN15AP4_AtomFactory10PopContextEv($25);
   }
  } else {
   $26 = ($12|0)==(1684108385);
   $27 = $4;
   if ($26) {
    $28 = (__ZN27AP4_MetaDataAtomTypeHandler12IsTypeInListEjRKNS_8TypeListE($27,34020)|0);
    if (!($28)) {
     break;
    }
    $29 = (__Znwj(48)|0);
    $30 = $2;
    $31 = $3;
    __THREW__ = 0;
    invoke_viii(1184,($29|0),($30|0),($31|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $34 = $5;
     HEAP32[$34>>2] = $29;
     break;
    }
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $6 = $35;
    $7 = $36;
    __ZdlPv($29);
    $75 = $6;
    $76 = $7;
    ___resumeException($75|0);
    // unreachable;
   }
   $37 = ($27|0)==(757935405);
   if ($37) {
    $38 = $1;
    $39 = ($38|0)==(1835360622);
    $40 = $1;
    $41 = ($40|0)==(1851878757);
    $or$cond = $39 | $41;
    if (!($or$cond)) {
     break;
    }
    $42 = (__Znwj(48)|0);
    $43 = $1;
    $44 = $2;
    $45 = $3;
    __THREW__ = 0;
    invoke_viiii(1185,($42|0),($43|0),($44|0),($45|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $48 = $5;
     HEAP32[$48>>2] = $42;
     break;
    }
    $49 = ___cxa_find_matching_catch()|0;
    $50 = tempRet0;
    $6 = $49;
    $7 = $50;
    __ZdlPv($42);
    $75 = $6;
    $76 = $7;
    ___resumeException($75|0);
    // unreachable;
   }
   $51 = $4;
   $52 = ($51|0)==(1969517665);
   if ($52) {
    $53 = $1;
    $54 = (__ZN27AP4_MetaDataAtomTypeHandler12IsTypeInListEjRKNS_8TypeListE($53,33804)|0);
    $55 = $1;
    if ($54) {
     $56 = $2;
     $57 = $3;
     $58 = (__ZN27AP4_3GppLocalizedStringAtom6CreateEjjR14AP4_ByteStream($55,$56,$57)|0);
     $59 = $5;
     HEAP32[$59>>2] = $58;
     break;
    }
    $60 = (__ZN27AP4_MetaDataAtomTypeHandler12IsTypeInListEjRKNS_8TypeListE($55,33828)|0);
    $61 = $1;
    if ($60) {
     $62 = $2;
     $63 = $3;
     $64 = (__ZN17AP4_DcfStringAtom6CreateEjjR14AP4_ByteStream($61,$62,$63)|0);
     $65 = $5;
     HEAP32[$65>>2] = $64;
     break;
    }
    $66 = ($61|0)==(1684235844);
    if ($66) {
     $67 = $2;
     $68 = $3;
     $69 = (__ZN12AP4_DcfdAtom6CreateEjR14AP4_ByteStream($67,$68)|0);
     $70 = $5;
     HEAP32[$70>>2] = $69;
    }
   }
  }
 } while(0);
 $71 = $5;
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0|0);
 $74 = $73 ? 0 : -1;
 STACKTOP = sp;return ($74|0);
}
function __ZN27AP4_MetaDataAtomTypeHandler12IsTypeInListEjRKNS_8TypeListE($type,$list) {
 $type = $type|0;
 $list = $list|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $type;
 $2 = $list;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $1;
  $9 = $i;
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($8|0)==($13|0);
  if ($14) {
   label = 4;
   break;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZN27AP4_3GppLocalizedStringAtom6CreateEjjR14AP4_ByteStream($type,$size,$stream) {
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $6 = $3;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(48)|0);
 $13 = $1;
 $14 = $2;
 $15 = HEAP8[$version>>0]|0;
 $16 = HEAP32[$flags>>2]|0;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(1186,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN17AP4_DcfStringAtom6CreateEjjR14AP4_ByteStream($type,$size,$stream) {
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 28|0;
 $flags = sp + 8|0;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $6 = $3;
 $7 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($6,$version,$flags)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = HEAP8[$version>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (__Znwj(48)|0);
 $13 = $1;
 $14 = $2;
 $15 = HEAP8[$version>>0]|0;
 $16 = HEAP32[$flags>>2]|0;
 $17 = $3;
 __THREW__ = 0;
 invoke_viiiiii(1187,($12|0),($13|0),($14|0),($15|0),($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $4 = $20;
  $5 = $21;
  __ZdlPv($12);
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 }
 $0 = $12;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZN12AP4_DcfdAtom6CreateEjR14AP4_ByteStream($size,$stream) {
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $version = sp + 24|0;
 $flags = sp + 8|0;
 $1 = $size;
 $2 = $stream;
 $5 = $2;
 $6 = (__ZN8AP4_Atom14ReadFullHeaderER14AP4_ByteStreamRhRj($5,$version,$flags)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $8 = HEAP8[$version>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $11 = $1;
 $12 = ($11|0)!=(16);
 if ($12) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $13 = (__Znwj(40)|0);
 $14 = HEAP8[$version>>0]|0;
 $15 = HEAP32[$flags>>2]|0;
 $16 = $2;
 __THREW__ = 0;
 invoke_viiii(1188,($13|0),($14|0),($15|0),($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  $3 = $19;
  $4 = $20;
  __ZdlPv($13);
  $21 = $3;
  $22 = $4;
  ___resumeException($21|0);
  // unreachable;
 }
 $0 = $13;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN12AP4_MetaDataD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 (invoke_ii(1189,($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZN8AP4_ListIN12AP4_MetaData5EntryEED2Ev($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __THREW__ = 0;
 invoke_vi(808,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 }
}
function __ZN12AP4_DataAtom11LoadIntegerERl($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $cond = 0;
 var $cond3 = 0, $cond4 = 0, $result = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $bytes = sp + 24|0;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $result = -1;
 $4 = $2;
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $8 = $size;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = ((($3)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 (FUNCTION_TABLE_iii[$16 & 2047]($13,$size)|0);
 $17 = $size;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)>(0);
 $24 = ($19>>>0)>(4);
 $25 = ($22|0)==(0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 if ($27) {
  $0 = -12;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $28 = ((($3)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 (FUNCTION_TABLE_iiii[$32 & 2047]($29,0,0)|0);
 $33 = ((($3)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $size;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 (__ZN14AP4_ByteStream4ReadEPvj($34,$bytes,$37)|0);
 $result = 0;
 $41 = $size;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 switch ($43|0) {
 case 1:  {
  $cond4 = ($46|0)==(0);
  if ($cond4) {
   $47 = HEAP8[$bytes>>0]|0;
   $48 = $47&255;
   $49 = $2;
   HEAP32[$49>>2] = $48;
  } else {
   label = 12;
  }
  break;
 }
 case 2:  {
  $cond3 = ($46|0)==(0);
  if ($cond3) {
   $50 = (__Z18AP4_BytesToInt16BEPKh($bytes)|0);
   $51 = $50 << 16 >> 16;
   $52 = $2;
   HEAP32[$52>>2] = $51;
  } else {
   label = 12;
  }
  break;
 }
 case 4:  {
  $cond = ($46|0)==(0);
  if ($cond) {
   $53 = (__Z18AP4_BytesToInt32BEPKh($bytes)|0);
   $54 = $2;
   HEAP32[$54>>2] = $53;
  } else {
   label = 12;
  }
  break;
 }
 default: {
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $55 = $2;
  HEAP32[$55>>2] = 0;
  $result = -10;
 }
 $56 = $result;
 $0 = $56;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function __ZN12AP4_DataAtom10LoadStringERP10AP4_String($this,$string) {
 $this = $this|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $result = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $1 = $this;
 $2 = $string;
 $5 = $1;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (__Znwj(8)|0);
  __THREW__ = 0;
  invoke_vi(860,($9|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $3 = $13;
   $4 = $14;
   __ZdlPv($9);
   $76 = $3;
   $77 = $4;
   ___resumeException($76|0);
   // unreachable;
  } else {
   $12 = $2;
   HEAP32[$12>>2] = $9;
   $0 = 0;
   $75 = $0;
   STACKTOP = sp;return ($75|0);
  }
 }
 $15 = $size;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = ((($5)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 (FUNCTION_TABLE_iii[$23 & 2047]($20,$size)|0);
 $24 = $size;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29>>>0)>(0);
 $31 = ($26>>>0)>(1073741824);
 $32 = ($29|0)==(0);
 $33 = $32 & $31;
 $34 = $30 | $33;
 if ($34) {
  $0 = -12;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $35 = (__Znwj(8)|0);
 $36 = $size;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 __THREW__ = 0;
 invoke_vii(1190,($35|0),($38|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $70 = ___cxa_find_matching_catch()|0;
  $71 = tempRet0;
  $3 = $70;
  $4 = $71;
  __ZdlPv($35);
  $76 = $3;
  $77 = $4;
  ___resumeException($76|0);
  // unreachable;
 }
 $44 = $2;
 HEAP32[$44>>2] = $35;
 $45 = ((($5)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 (FUNCTION_TABLE_iiii[$49 & 2047]($46,0,0)|0);
 $50 = ((($5)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 $54 = (__ZN10AP4_String8UseCharsEv($53)|0);
 $55 = $size;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (__ZN14AP4_ByteStream4ReadEPvj($51,$54,$57)|0);
 $result = $61;
 $62 = $result;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $2;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0|0);
  do {
   if (!($66)) {
    __THREW__ = 0;
    invoke_vi(864,($65|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if (!($68)) {
     __ZdlPv($65);
     break;
    }
    $72 = ___cxa_find_matching_catch()|0;
    $73 = tempRet0;
    $3 = $72;
    $4 = $73;
    __ZdlPv($65);
    $76 = $3;
    $77 = $4;
    ___resumeException($76|0);
    // unreachable;
   }
  } while(0);
  $69 = $2;
  HEAP32[$69>>2] = 0;
 }
 $74 = $result;
 $0 = $74;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function __ZN12AP4_DataAtomC2EjR14AP4_ByteStream($this,$size,$stream) {
 $this = $this|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data_offset = 0, $data_size = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 20|0;
 $data_offset = sp;
 $0 = $this;
 $1 = $size;
 $2 = $stream;
 $5 = $0;
 $6 = $1;
 __ZN8AP4_AtomC2Ejj($5,1684108385,$6);
 $7 = 34036;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $9 = ($8>>>0)<(16);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 __THREW__ = 0;
 (invoke_iii(854,($10|0),($i|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 9;
  } else {
   $13 = HEAP32[$i>>2]|0;
   $14 = ((($5)) + 36|0);
   HEAP32[$14>>2] = $13;
   $15 = $2;
   __THREW__ = 0;
   (invoke_iii(854,($15|0),($i|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    label = 9;
   } else {
    $18 = HEAP32[$i>>2]|0;
    $19 = ((($5)) + 40|0);
    HEAP32[$19>>2] = $18;
    $20 = $2;
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 28|0);
    $23 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    (invoke_iii($23|0,($20|0),($data_offset|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     label = 9;
    } else {
     $26 = $1;
     $27 = (($26) - 8)|0;
     $28 = (($27) - 8)|0;
     $data_size = $28;
     __THREW__ = 0;
     $29 = (invoke_ii(883,40)|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 9;
     } else {
      $32 = $2;
      $33 = $data_offset;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = (($33) + 4)|0;
      $37 = $36;
      $38 = HEAP32[$37>>2]|0;
      $39 = $data_size;
      __THREW__ = 0;
      invoke_viiiiii(942,($29|0),($32|0),($35|0),($38|0),($39|0),0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $45 = ___cxa_find_matching_catch()|0;
       $46 = tempRet0;
       $3 = $45;
       $4 = $46;
       __ZdlPv($29);
       break;
      }
      $42 = ((($5)) + 44|0);
      HEAP32[$42>>2] = $29;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $3 = $43;
  $4 = $44;
 }
 __THREW__ = 0;
 invoke_vi(706,($5|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $51 = ___cxa_find_matching_catch(0|0)|0;
  $52 = tempRet0;
  ___clang_call_terminate($51);
  // unreachable;
 } else {
  $49 = $3;
  $50 = $4;
  ___resumeException($49|0);
  // unreachable;
 }
}
function __ZN12AP4_DataAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 34036;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_vi($10|0,($6|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN12AP4_DataAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(783,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_DataAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($6,$8)|0);
 $9 = ((($2)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = $size;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($2)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 (FUNCTION_TABLE_iii[$20 & 2047]($17,$size)|0);
 $21 = ((($2)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 (FUNCTION_TABLE_iiii[$25 & 2047]($22,0,0)|0);
 $26 = ((($2)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $1;
 $32 = $size;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 (FUNCTION_TABLE_iiiii[$30 & 2047]($27,$31,$34,$37)|0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_DataAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 12|0;
 $value = sp;
 $0 = $this;
 $1 = $inspector;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($4)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiiii[$8 & 2047]($5,46649,$10,0,0);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($4)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiiii[$14 & 2047]($11,46654,$16,0,0);
 $17 = ((($4)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if (!($19)) {
  $36 = ((($4)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(21);
  if (!($38)) {
   STACKTOP = sp;return 0;
  }
  $39 = (__ZN12AP4_DataAtom11LoadIntegerERl($4,$value)|0);
  $40 = ($39|0)==(0);
  if (!($40)) {
   STACKTOP = sp;return 0;
  }
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$value>>2]|0;
  $46 = ($45|0)<(0);
  $47 = $46 << 31 >> 31;
  FUNCTION_TABLE_viiiii[$44 & 2047]($41,46659,$45,$47,0);
  STACKTOP = sp;return 0;
 }
 $20 = (__ZN12AP4_DataAtom10LoadStringERP10AP4_String($4,$str)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$str>>2]|0;
 $27 = (__ZNK10AP4_String8GetCharsEv($26)|0);
 FUNCTION_TABLE_viiii[$25 & 2047]($22,46659,$27,0);
 $28 = HEAP32[$str>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 invoke_vi(864,($28|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $2 = $32;
  $3 = $33;
  __ZdlPv($28);
  $34 = $2;
  $35 = $3;
  ___resumeException($34|0);
  // unreachable;
 }
 __ZdlPv($28);
 STACKTOP = sp;return 0;
}
function __ZN22AP4_MetaDataStringAtomC2EjjR14AP4_ByteStream($this,$type,$size,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $stream;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __ZN8AP4_AtomC2Ejj($6,$7,$8);
 $9 = 34096;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($6)) + 40|0);
 $12 = $2;
 $13 = (($12) - 8)|0;
 $14 = (($13) - 4)|0;
 __THREW__ = 0;
 invoke_vii(1190,($11|0),($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $4 = $32;
  $5 = $33;
 } else {
  $17 = $3;
  $18 = ((($6)) + 36|0);
  __THREW__ = 0;
  (invoke_iii(854,($17|0),($18|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   $21 = $3;
   $22 = ((($6)) + 40|0);
   __THREW__ = 0;
   $23 = (invoke_ii(1191,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ((($6)) + 40|0);
    __THREW__ = 0;
    $27 = (invoke_ii(863,($26|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     (invoke_iiii(851,($21|0),($23|0),($27|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $4 = $34;
  $5 = $35;
  __THREW__ = 0;
  invoke_vi(864,($11|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $42 = ___cxa_find_matching_catch(0|0)|0;
   $43 = tempRet0;
   ___clang_call_terminate($42);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($6|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $42 = ___cxa_find_matching_catch(0|0)|0;
  $43 = tempRet0;
  ___clang_call_terminate($42);
  // unreachable;
 } else {
  $40 = $4;
  $41 = $5;
  ___resumeException($40|0);
  // unreachable;
 }
}
function __ZN22AP4_MetaDataStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 $6 = $1;
 $7 = ((($2)) + 40|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 $9 = ((($2)) + 40|0);
 $10 = (__ZNK10AP4_String9GetLengthEv($9)|0);
 $11 = (__ZN14AP4_ByteStream5WriteEPKvj($6,$8,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN22AP4_MetaDataStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 40|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,46659,$8,0);
 STACKTOP = sp;return 0;
}
function __ZN27AP4_3GppLocalizedStringAtomC2EjjhjR14AP4_ByteStream($this,$type,$size,$version,$flags,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $packed_language = 0, $value = 0, $value_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $packed_language = sp + 36|0;
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $version;
 $4 = $flags;
 $5 = $stream;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 __ZN8AP4_AtomC2Ejjhj($8,$9,$10,$11,$12);
 $13 = 34156;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 40|0);
 __THREW__ = 0;
 invoke_vi(860,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  $6 = $64;
  $7 = $65;
 } else {
  $17 = $5;
  __THREW__ = 0;
  (invoke_iii(866,($17|0),($packed_language|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = HEAP16[$packed_language>>1]|0;
   $21 = $20&65535;
   $22 = $21 >> 10;
   $23 = $22 & 31;
   $24 = (96 + ($23))|0;
   $25 = $24&255;
   $26 = ((($8)) + 36|0);
   HEAP8[$26>>0] = $25;
   $27 = HEAP16[$packed_language>>1]|0;
   $28 = $27&65535;
   $29 = $28 >> 5;
   $30 = $29 & 31;
   $31 = (96 + ($30))|0;
   $32 = $31&255;
   $33 = ((($8)) + 36|0);
   $34 = ((($33)) + 1|0);
   HEAP8[$34>>0] = $32;
   $35 = HEAP16[$packed_language>>1]|0;
   $36 = $35&65535;
   $37 = $36 & 31;
   $38 = (96 + ($37))|0;
   $39 = $38&255;
   $40 = ((($8)) + 36|0);
   $41 = ((($40)) + 2|0);
   HEAP8[$41>>0] = $39;
   $42 = ((($8)) + 36|0);
   $43 = ((($42)) + 3|0);
   HEAP8[$43>>0] = 0;
   $44 = $2;
   $45 = ($44>>>0)>(14);
   if (!($45)) {
    STACKTOP = sp;return;
   }
   $46 = $2;
   $47 = (($46) - 14)|0;
   $value_size = $47;
   $48 = $value_size;
   __THREW__ = 0;
   $49 = (invoke_ii(867,($48|0))|0);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    $value = $49;
    $52 = $5;
    $53 = $value;
    $54 = $value_size;
    __THREW__ = 0;
    (invoke_iiii(851,($52|0),($53|0),($54|0))|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if (!($56)) {
     $57 = ((($8)) + 40|0);
     $58 = $value;
     $59 = $value_size;
     __THREW__ = 0;
     invoke_viii(948,($57|0),($58|0),($59|0));
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if (!($61)) {
      $62 = $value;
      $63 = ($62|0)==(0|0);
      if ($63) {
       STACKTOP = sp;return;
      }
      __ZdaPv($62);
      STACKTOP = sp;return;
     }
    }
   }
  }
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $6 = $66;
  $7 = $67;
  __THREW__ = 0;
  invoke_vi(864,($14|0));
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   $74 = ___cxa_find_matching_catch(0|0)|0;
   $75 = tempRet0;
   ___clang_call_terminate($74);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($8|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $74 = ___cxa_find_matching_catch(0|0)|0;
  $75 = tempRet0;
  ___clang_call_terminate($74);
  // unreachable;
 } else {
  $72 = $6;
  $73 = $7;
  ___resumeException($72|0);
  // unreachable;
 }
}
function __ZN27AP4_3GppLocalizedStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $packed_language = 0, $payload_size = 0, $value_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $stream;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = (($6) - 96)|0;
 $8 = $7 << 10;
 $9 = ((($3)) + 36|0);
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) - 96)|0;
 $14 = $13 << 5;
 $15 = $8 | $14;
 $16 = ((($3)) + 36|0);
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = (($19) - 96)|0;
 $21 = $15 | $20;
 $22 = $21&65535;
 $packed_language = $22;
 $23 = $2;
 $24 = $packed_language;
 (__ZN14AP4_ByteStream9WriteUI16Et($23,$24)|0);
 $25 = (__ZNK8AP4_Atom7GetSizeEv($3)|0);
 $26 = tempRet0;
 $27 = HEAP32[$3>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_ii[$29 & 2047]($3)|0);
 $31 = (($25) - ($30))|0;
 $payload_size = $31;
 $32 = $payload_size;
 $33 = ($32>>>0)<(2);
 if ($33) {
  $0 = -10;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $34 = ((($3)) + 40|0);
 $35 = (__ZNK10AP4_String9GetLengthEv($34)|0);
 $36 = (($35) + 1)|0;
 $value_size = $36;
 $37 = $value_size;
 $38 = $payload_size;
 $39 = (($38) - 2)|0;
 $40 = ($37>>>0)>($39>>>0);
 if ($40) {
  $41 = $payload_size;
  $42 = (($41) - 2)|0;
  $value_size = $42;
 }
 $43 = $2;
 $44 = ((($3)) + 40|0);
 $45 = (__ZNK10AP4_String8GetCharsEv($44)|0);
 $46 = $value_size;
 (__ZN14AP4_ByteStream5WriteEPKvj($43,$45,$46)|0);
 $47 = $value_size;
 $i = $47;
 while(1) {
  $48 = $i;
  $49 = $payload_size;
  $50 = (($49) - 2)|0;
  $51 = ($48>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $2;
  (__ZN14AP4_ByteStream9WriteUI08Eh($52,0)|0);
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function __ZN27AP4_3GppLocalizedStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK27AP4_3GppLocalizedStringAtom11GetLanguageEv($2)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,46665,$7,0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 40|0);
 $13 = (__ZNK10AP4_String8GetCharsEv($12)|0);
 FUNCTION_TABLE_viiii[$11 & 2047]($8,46659,$13,0);
 STACKTOP = sp;return 0;
}
function __ZN17AP4_DcfStringAtomC2EjjhjR14AP4_ByteStream($this,$type,$size,$version,$flags,$stream) {
 $this = $this|0;
 $type = $type|0;
 $size = $size|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, $value_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $size;
 $3 = $version;
 $4 = $flags;
 $5 = $stream;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 __ZN8AP4_AtomC2Ejjhj($8,$9,$10,$11,$12);
 $13 = 34216;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 36|0);
 __THREW__ = 0;
 invoke_vi(860,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $6 = $37;
  $7 = $38;
 } else {
  $17 = $2;
  $18 = ($17>>>0)>(12);
  if (!($18)) {
   STACKTOP = sp;return;
  }
  $19 = $2;
  $20 = (($19) - 12)|0;
  $value_size = $20;
  $21 = $value_size;
  __THREW__ = 0;
  $22 = (invoke_ii(867,($21|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if (!($24)) {
   $value = $22;
   $25 = $5;
   $26 = $value;
   $27 = $value_size;
   __THREW__ = 0;
   (invoke_iiii(851,($25|0),($26|0),($27|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $30 = ((($8)) + 36|0);
    $31 = $value;
    $32 = $value_size;
    __THREW__ = 0;
    invoke_viii(948,($30|0),($31|0),($32|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     $35 = $value;
     $36 = ($35|0)==(0|0);
     if ($36) {
      STACKTOP = sp;return;
     }
     __ZdaPv($35);
     STACKTOP = sp;return;
    }
   }
  }
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $6 = $39;
  $7 = $40;
  __THREW__ = 0;
  invoke_vi(864,($14|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $47 = ___cxa_find_matching_catch(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(706,($8|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  $45 = $6;
  $46 = $7;
  ___resumeException($45|0);
  // unreachable;
 }
}
function __ZN17AP4_DcfStringAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = ((($2)) + 36|0);
 $4 = (__ZNK10AP4_String9GetLengthEv($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = $1;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 $9 = ((($2)) + 36|0);
 $10 = (__ZNK10AP4_String9GetLengthEv($9)|0);
 (__ZN14AP4_ByteStream5WriteEPKvj($6,$8,$10)|0);
 STACKTOP = sp;return 0;
}
function __ZN17AP4_DcfStringAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = (__ZNK10AP4_String8GetCharsEv($7)|0);
 FUNCTION_TABLE_viiii[$6 & 2047]($3,46659,$8,0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_DcfdAtomC2EhjR14AP4_ByteStream($this,$version,$flags,$stream) {
 $this = $this|0;
 $version = $version|0;
 $flags = $flags|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $version;
 $2 = $flags;
 $3 = $stream;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __ZN8AP4_AtomC2Ejjhj($6,1684235844,16,$7,$8);
 $9 = 34276;
 HEAP32[$6>>2] = $9;
 $10 = ((($6)) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = ((($6)) + 36|0);
 __THREW__ = 0;
 (invoke_iii(854,($11|0),($12|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ___cxa_find_matching_catch()|0;
 $16 = tempRet0;
 $4 = $15;
 $5 = $16;
 __THREW__ = 0;
 invoke_vi(706,($6|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $19 = $4;
  $20 = $5;
  ___resumeException($19|0);
  // unreachable;
 }
}
function __ZN12AP4_DcfdAtom11WriteFieldsER14AP4_ByteStream($this,$stream) {
 $this = $this|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stream;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 (__ZN14AP4_ByteStream9WriteUI32Ej($3,$5)|0);
 STACKTOP = sp;return 0;
}
function __ZN12AP4_DcfdAtom13InspectFieldsER17AP4_AtomInspector($this,$inspector) {
 $this = $this|0;
 $inspector = $inspector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $inspector;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$6 & 2047]($3,46674,$8,0,0);
 STACKTOP = sp;return 0;
}
function __GLOBAL__sub_I_Ap4MetaData_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_1201();
 return;
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return 0;
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 35076;
 HEAP32[$1>>2] = $2;
 (__ZN8AP4_ListIN12AP4_MetaData5EntryEE5ClearEv($1)|0);
 STACKTOP = sp;return;
}
function __ZNK27AP4_3GppLocalizedStringAtom11GetLanguageEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEE16DeleteReferencesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 12;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(1192,($12|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 10;
    break;
   }
   __ZdlPv($12);
  }
  $16 = $item;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __THREW__ = 0;
   invoke_vi(1193,($16|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 11;
    break;
   }
   __ZdlPv($16);
  }
  $20 = $next;
  $item = $20;
 }
 if ((label|0) == 10) {
  $21 = ___cxa_find_matching_catch()|0;
  $22 = tempRet0;
  $1 = $21;
  $2 = $22;
  __ZdlPv($12);
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $1 = $23;
  $2 = $24;
  __ZdlPv($16);
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $25 = ((($3)) + 12|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($3)) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($3)) + 4|0);
  HEAP32[$27>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN10AP4_String8UseCharsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN12AP4_MetaData3KeyD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(864,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZN10AP4_StringD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(864,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 }
}
function __ZN12AP4_MetaData5EntryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  __ZN12AP4_MetaData3KeyD2Ev($3);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_vi($9|0,($5|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __ZN12AP4_MetaData3KeyD2Ev($3);
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __THREW__ = 0;
 invoke_vi(1194,($3|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $16 = $1;
  $17 = $2;
  ___resumeException($16|0);
  // unreachable;
 }
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEE4ItemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $item = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $item = $5;
 while(1) {
  $6 = $item;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $item;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $item;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(1193,($11|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 7;
    break;
   }
   __ZdlPv($11);
  }
  $15 = $next;
  $item = $15;
 }
 if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $1 = $16;
  $2 = $17;
  __ZdlPv($11);
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $20 = ((($3)) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($3)) + 12|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($3)) + 8|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZN8AP4_ListIN12AP4_MetaData5EntryEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(808,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 35060;
 HEAP32[$1>>2] = $2;
 (__ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEE5ClearEv($1)|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(806,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEEC2EPKS1_j($this,$items,$count) {
 $this = $this|0;
 $items = $items|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $items;
 $2 = $count;
 $3 = $0;
 $4 = 35060;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = $2;
 HEAP32[$7>>2] = $8;
 $9 = ((($3)) + 12|0);
 $10 = $2;
 $11 = $10<<4;
 $12 = (__Znwj($11)|0);
 HEAP32[$9>>2] = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $2;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = ((($3)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  $20 = $i;
  $21 = $1;
  $22 = (($21) + ($20<<4)|0);
  ;HEAP32[$19>>2]=HEAP32[$22>>2]|0;HEAP32[$19+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$22+12>>2]|0;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 STACKTOP = sp;return;
}
function __ZN12AP4_DcfdAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(799,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN12AP4_DcfdAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8AP4_AtomD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN17AP4_DcfStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(795,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN17AP4_DcfStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 34216;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 36|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN27AP4_3GppLocalizedStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(791,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN27AP4_3GppLocalizedStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 34156;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 40|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN22AP4_MetaDataStringAtomD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(787,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_MetaDataStringAtomD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 34096;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 40|0);
 __THREW__ = 0;
 invoke_vi(864,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8AP4_AtomD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(706,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $12 = $1;
  $13 = $2;
  ___resumeException($12|0);
  // unreachable;
 }
}
function __ZN27AP4_MetaDataAtomTypeHandlerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(803,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN27AP4_MetaDataAtomTypeHandlerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15AP4_AtomFactory11TypeHandlerD2Ev($1);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_1201() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEEC2EPKS1_j(33764,34348,44);
 (___cxa_atexit((806|0),(33764|0),(___dso_handle|0))|0);
 return;
}
function __ZN22AP4_StdcFileByteStream6CreateEP18AP4_FileByteStreamPKcNS0_4ModeERP14AP4_ByteStream($delegator,$name,$mode,$stream) {
 $delegator = $delegator|0;
 $name = $name|0;
 $mode = $mode|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $file = 0, $open_result = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $file = sp + 20|0;
 $size = sp;
 $1 = $delegator;
 $2 = $name;
 $3 = $mode;
 $4 = $stream;
 $7 = $4;
 HEAP32[$7>>2] = 0;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -3;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 HEAP32[$file>>2] = 0;
 $10 = $size;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = $2;
 $15 = (_strcmp($14,47480)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $18 = $2;
   $19 = (_strcmp($18,47487)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $21 = HEAP32[8838]|0;
    HEAP32[$file>>2] = $21;
    break;
   }
   $22 = $2;
   $23 = (_strcmp($22,47495)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $25 = HEAP32[8837]|0;
    HEAP32[$file>>2] = $25;
    break;
   }
   $26 = $3;
   switch ($26|0) {
   case 0:  {
    $27 = $2;
    $28 = (__ZL7fopen_sPP8_IO_FILEPKcS3_($file,$27,47503)|0);
    $open_result = $28;
    break;
   }
   case 1:  {
    $29 = $2;
    $30 = (__ZL7fopen_sPP8_IO_FILEPKcS3_($file,$29,47506)|0);
    $open_result = $30;
    break;
   }
   case 2:  {
    $31 = $2;
    $32 = (__ZL7fopen_sPP8_IO_FILEPKcS3_($file,$31,47510)|0);
    $open_result = $32;
    break;
   }
   default: {
    $0 = -3;
    $67 = $0;
    STACKTOP = sp;return ($67|0);
   }
   }
   $33 = $open_result;
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $39 = HEAP32[$file>>2]|0;
    $40 = (___fseeko($39,0,2)|0);
    $41 = ($40|0)>=(0);
    if (!($41)) {
     break;
    }
    $42 = HEAP32[$file>>2]|0;
    $43 = (___ftello($42)|0);
    $44 = ($43|0)<(0);
    $45 = $44 << 31 >> 31;
    $46 = $size;
    $47 = $46;
    HEAP32[$47>>2] = $43;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP32[$49>>2] = $45;
    $50 = HEAP32[$file>>2]|0;
    (___fseeko($50,0,0)|0);
    break;
   }
   $35 = $open_result;
   $36 = ($35|0)==(2);
   if ($36) {
    $0 = -4;
    $67 = $0;
    STACKTOP = sp;return ($67|0);
   }
   $37 = $open_result;
   $38 = ($37|0)==(13);
   if ($38) {
    $0 = -5;
    $67 = $0;
    STACKTOP = sp;return ($67|0);
   } else {
    $0 = -6;
    $67 = $0;
    STACKTOP = sp;return ($67|0);
   }
  } else {
   $17 = HEAP32[8840]|0;
   HEAP32[$file>>2] = $17;
  }
 } while(0);
 $51 = (__Znwj(32)|0);
 $52 = $1;
 $53 = HEAP32[$file>>2]|0;
 $54 = $size;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 __THREW__ = 0;
 invoke_viiiii(1195,($51|0),($52|0),($53|0),($56|0),($59|0));
 $60 = __THREW__; __THREW__ = 0;
 $61 = $60&1;
 if ($61) {
  $63 = ___cxa_find_matching_catch()|0;
  $64 = tempRet0;
  $5 = $63;
  $6 = $64;
  __ZdlPv($51);
  $65 = $5;
  $66 = $6;
  ___resumeException($65|0);
  // unreachable;
 }
 $62 = $4;
 HEAP32[$62>>2] = $51;
 $0 = 0;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function __ZN22AP4_StdcFileByteStreamC2EP18AP4_FileByteStreamP8_IO_FILEy($this,$delegator,$file,$0,$1) {
 $this = $this|0;
 $delegator = $delegator|0;
 $file = $file|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $2 = $this;
 $3 = $delegator;
 $4 = $file;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $2;
 __ZN14AP4_ByteStreamC2Ev($10);
 $11 = 35092;
 HEAP32[$10>>2] = $11;
 $12 = ((($10)) + 4|0);
 $13 = $3;
 HEAP32[$12>>2] = $13;
 $14 = ((($10)) + 8|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($10)) + 12|0);
 $16 = $4;
 HEAP32[$15>>2] = $16;
 $17 = ((($10)) + 16|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = ((($10)) + 24|0);
 $23 = $5;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $22;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 STACKTOP = sp;return;
}
function __ZN22AP4_StdcFileByteStreamD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 35092;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($3)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[8840]|0;
  $11 = ($9|0)!=($10|0);
  if ($11) {
   $12 = ((($3)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[8838]|0;
   $15 = ($13|0)!=($14|0);
   if ($15) {
    $16 = ((($3)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[8837]|0;
    $19 = ($17|0)!=($18|0);
    if ($19) {
     $20 = ((($3)) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     (invoke_ii(1196,($21|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $24 = ___cxa_find_matching_catch()|0;
      $25 = tempRet0;
      $1 = $24;
      $2 = $25;
      __THREW__ = 0;
      invoke_vi(207,($3|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       $30 = ___cxa_find_matching_catch(0|0)|0;
       $31 = tempRet0;
       ___clang_call_terminate($30);
       // unreachable;
      } else {
       $28 = $1;
       $29 = $2;
       ___resumeException($28|0);
       // unreachable;
      }
     }
    }
   }
  }
 }
 __ZN14AP4_ByteStreamD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN22AP4_StdcFileByteStreamD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(810,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_StdcFileByteStream12AddReferenceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN22AP4_StdcFileByteStream7ReleaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = ((($1)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$10>>2]|0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 2047]($10);
  STACKTOP = sp;return;
 } else {
  $15 = ($1|0)==(0|0);
  if ($15) {
   STACKTOP = sp;return;
  }
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 2047]($1);
  STACKTOP = sp;return;
 }
}
function __ZN22AP4_StdcFileByteStream11ReadPartialEPvjRj($this,$buffer,$bytesToRead,$bytesRead) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytesToRead = $bytesToRead|0;
 $bytesRead = $bytesRead|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbRead = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytesToRead;
 $4 = $bytesRead;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = ((($5)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fread($6,1,$7,$9)|0);
 $nbRead = $10;
 $11 = $nbRead;
 $12 = ($11>>>0)>(0);
 if ($12) {
  $13 = $nbRead;
  $14 = $4;
  HEAP32[$14>>2] = $13;
  $15 = $nbRead;
  $16 = ((($5)) + 16|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_i64Add(($19|0),($22|0),($15|0),0)|0);
  $24 = tempRet0;
  $25 = $16;
  $26 = $25;
  HEAP32[$26>>2] = $23;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $24;
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $29 = ((($5)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_feof($30)|0);
 $32 = ($31|0)!=(0);
 $33 = $4;
 HEAP32[$33>>2] = 0;
 if ($32) {
  $0 = -7;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $0 = -9;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function __ZN22AP4_StdcFileByteStream12WritePartialEPKvjRj($this,$buffer,$bytesToWrite,$bytesWritten) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bytesToWrite = $bytesToWrite|0;
 $bytesWritten = $bytesWritten|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbWritten = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $buffer;
 $3 = $bytesToWrite;
 $4 = $bytesWritten;
 $5 = $1;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $8 = $2;
 $9 = $3;
 $10 = ((($5)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_fwrite($8,1,$9,$11)|0);
 $nbWritten = $12;
 $13 = $nbWritten;
 $14 = ($13>>>0)>(0);
 if ($14) {
  $15 = $nbWritten;
  $16 = $4;
  HEAP32[$16>>2] = $15;
  $17 = $nbWritten;
  $18 = ((($5)) + 16|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_i64Add(($21|0),($24|0),($17|0),0)|0);
  $26 = tempRet0;
  $27 = $18;
  $28 = $27;
  HEAP32[$28>>2] = $25;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $31 = $4;
  HEAP32[$31>>2] = 0;
  $0 = -8;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZN22AP4_StdcFileByteStream4SeekEy($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $3 = $this;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $3;
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($9)) + 16|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($12|0)==($19|0);
 $24 = ($15|0)==($22|0);
 $25 = $23 & $24;
 if ($25) {
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 $26 = ((($9)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (___fseeko($27,$30,0)|0);
 $result = $34;
 $35 = $result;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $4;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($9)) + 16|0);
  $44 = $43;
  $45 = $44;
  HEAP32[$45>>2] = $39;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = $42;
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 } else {
  $2 = -1;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function __ZN22AP4_StdcFileByteStream4TellERy($this,$position) {
 $this = $this|0;
 $position = $position|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $position;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN22AP4_StdcFileByteStream7GetSizeERy($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 STACKTOP = sp;return 0;
}
function __ZN22AP4_StdcFileByteStream5FlushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ret_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fflush($3)|0);
 $ret_val = $4;
 $5 = $ret_val;
 $6 = ($5|0)>(0);
 $7 = $6 ? -1 : 0;
 STACKTOP = sp;return ($7|0);
}
function __ZN18AP4_FileByteStream6CreateEPKcNS_4ModeERP14AP4_ByteStream($name,$mode,$stream) {
 $name = $name|0;
 $mode = $mode|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $mode;
 $2 = $stream;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN22AP4_StdcFileByteStream6CreateEP18AP4_FileByteStreamPKcNS0_4ModeERP14AP4_ByteStream(0,$3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL7fopen_sPP8_IO_FILEPKcS3_($file,$filename,$mode) {
 $file = $file|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $file;
 $2 = $filename;
 $3 = $mode;
 $4 = $2;
 $5 = $3;
 $6 = (_fopen($4,$5)|0);
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (___errno_location()|0);
  $12 = HEAP32[$11>>2]|0;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN25AP4_Mp4AudioDecoderConfigC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN25AP4_Mp4AudioDecoderConfig5ResetEv($1);
 STACKTOP = sp;return;
}
function __ZN25AP4_Mp4AudioDecoderConfig5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP8[$1>>0] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($1)) + 21|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($1)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 28|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($1)) + 28|0);
 $11 = ((($10)) + 1|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($1)) + 28|0);
 $13 = ((($12)) + 2|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($1)) + 28|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($1)) + 28|0);
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN25AP4_Mp4AudioDecoderConfig20ParseAudioObjectTypeER21AP4_Mp4AudioDsiParserRh($this,$parser,$object_type) {
 $this = $this|0;
 $parser = $parser|0;
 $object_type = $object_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $parser;
 $3 = $object_type;
 $4 = $2;
 $5 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($4)|0);
 $6 = ($5>>>0)<(5);
 if ($6) {
  $0 = -10;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $7 = $2;
 $8 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($7,5)|0);
 $9 = $8&255;
 $10 = $3;
 HEAP8[$10>>0] = $9;
 $11 = $3;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(31);
 do {
  if ($14) {
   $15 = $2;
   $16 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($15)|0);
   $17 = ($16>>>0)<(6);
   if (!($17)) {
    $18 = $2;
    $19 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($18,6)|0);
    $20 = (32 + ($19))|0;
    $21 = $20&255;
    $22 = $3;
    HEAP8[$22>>0] = $21;
    break;
   }
   $0 = -10;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 } while(0);
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function __ZN25AP4_Mp4AudioDecoderConfig14ParseExtensionER21AP4_Mp4AudioDsiParser($this,$parser) {
 $this = $this|0;
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $result = 0, $sync_extension_type = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $parser;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($4)|0);
 $6 = ($5>>>0)<(16);
 if ($6) {
  $0 = -10;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $7 = $2;
 $8 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($7,11)|0);
 $sync_extension_type = $8;
 $9 = $sync_extension_type;
 $10 = ($9|0)==(695);
 do {
  if ($10) {
   $11 = $2;
   $12 = ((($3)) + 28|0);
   $13 = ((($12)) + 2|0);
   $14 = (__ZN25AP4_Mp4AudioDecoderConfig20ParseAudioObjectTypeER21AP4_Mp4AudioDsiParserRh($3,$11,$13)|0);
   $result = $14;
   $15 = $result;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $result;
    $0 = $17;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
   $18 = ((($3)) + 28|0);
   $19 = ((($18)) + 2|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)==(5);
   if (!($22)) {
    $53 = ((($3)) + 28|0);
    $54 = ((($53)) + 2|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)==(22);
    if (!($57)) {
     break;
    }
    $58 = $2;
    $59 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($58,1)|0);
    $60 = ($59|0)==(1);
    $61 = ((($3)) + 28|0);
    $62 = $60&1;
    HEAP8[$61>>0] = $62;
    $63 = ((($3)) + 28|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&1;
    if ($65) {
     $66 = $2;
     $67 = ((($3)) + 28|0);
     $68 = ((($67)) + 4|0);
     $69 = ((($3)) + 28|0);
     $70 = ((($69)) + 8|0);
     $71 = (__ZN25AP4_Mp4AudioDecoderConfig22ParseSamplingFrequencyER21AP4_Mp4AudioDsiParserRjS2_($3,$66,$68,$70)|0);
     $result = $71;
     $72 = $result;
     $73 = ($72|0)!=(0);
     if ($73) {
      $74 = $result;
      $0 = $74;
      $76 = $0;
      STACKTOP = sp;return ($76|0);
     }
    }
    $75 = $2;
    (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($75,4)|0);
    break;
   }
   $23 = $2;
   $24 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($23,1)|0);
   $25 = ($24|0)==(1);
   $26 = ((($3)) + 28|0);
   $27 = $25&1;
   HEAP8[$26>>0] = $27;
   $28 = ((($3)) + 28|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&1;
   if ($30) {
    $31 = $2;
    $32 = ((($3)) + 28|0);
    $33 = ((($32)) + 4|0);
    $34 = ((($3)) + 28|0);
    $35 = ((($34)) + 8|0);
    $36 = (__ZN25AP4_Mp4AudioDecoderConfig22ParseSamplingFrequencyER21AP4_Mp4AudioDsiParserRjS2_($3,$31,$33,$35)|0);
    $result = $36;
    $37 = $result;
    $38 = ($37|0)!=(0);
    if ($38) {
     $39 = $result;
     $0 = $39;
     $76 = $0;
     STACKTOP = sp;return ($76|0);
    }
    $40 = $2;
    $41 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($40)|0);
    $42 = ($41>>>0)>=(12);
    if ($42) {
     $43 = $2;
     $44 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($43,11)|0);
     $sync_extension_type = $44;
     $45 = $sync_extension_type;
     $46 = ($45|0)==(1352);
     if ($46) {
      $47 = $2;
      $48 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($47,1)|0);
      $49 = ($48|0)==(1);
      $50 = ((($3)) + 28|0);
      $51 = ((($50)) + 1|0);
      $52 = $49&1;
      HEAP8[$51>>0] = $52;
     }
    }
   }
  }
 } while(0);
 $0 = 0;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function __ZN25AP4_Mp4AudioDecoderConfig22ParseSamplingFrequencyER21AP4_Mp4AudioDsiParserRjS2_($this,$parser,$sampling_frequency_index,$sampling_frequency) {
 $this = $this|0;
 $parser = $parser|0;
 $sampling_frequency_index = $sampling_frequency_index|0;
 $sampling_frequency = $sampling_frequency|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $parser;
 $3 = $sampling_frequency_index;
 $4 = $sampling_frequency;
 $5 = $2;
 $6 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($5)|0);
 $7 = ($6>>>0)<(4);
 if ($7) {
  $0 = -10;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $8 = $2;
 $9 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($8,4)|0);
 $10 = $3;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(15);
 do {
  if ($13) {
   $14 = $2;
   $15 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($14)|0);
   $16 = ($15>>>0)<(24);
   if (!($16)) {
    $17 = $2;
    $18 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($17,24)|0);
    $19 = $4;
    HEAP32[$19>>2] = $18;
    break;
   }
   $0 = -10;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  } else {
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21>>>0)<=(12);
   if ($22) {
    $23 = $3;
    $24 = HEAP32[$23>>2]|0;
    $25 = (35136 + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $4;
    HEAP32[$27>>2] = $26;
    break;
   }
   $28 = $4;
   HEAP32[$28>>2] = 0;
   $0 = -10;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 } while(0);
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZN25AP4_Mp4AudioDecoderConfig19ParseGASpecificInfoER21AP4_Mp4AudioDsiParser($this,$parser) {
 $this = $this|0;
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $extensionFlag = 0, $extensionFlag3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $parser;
 $3 = $1;
 $4 = $2;
 $5 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($4)|0);
 $6 = ($5>>>0)<(2);
 if ($6) {
  $0 = -10;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $7 = $2;
 $8 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($7,1)|0);
 $9 = ($8|0)==(1);
 $10 = ((($3)) + 20|0);
 $11 = $9&1;
 HEAP8[$10>>0] = $11;
 $12 = $2;
 $13 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($12,1)|0);
 $14 = ($13|0)==(1);
 $15 = ((($3)) + 21|0);
 $16 = $14&1;
 HEAP8[$15>>0] = $16;
 $17 = ((($3)) + 21|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&1;
 do {
  if ($19) {
   $20 = $2;
   $21 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($20)|0);
   $22 = ($21>>>0)<(14);
   if (!($22)) {
    $23 = $2;
    $24 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($23,14)|0);
    $25 = ((($3)) + 24|0);
    HEAP32[$25>>2] = $24;
    break;
   }
   $0 = -10;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  } else {
   $26 = ((($3)) + 24|0);
   HEAP32[$26>>2] = 0;
  }
 } while(0);
 $27 = $2;
 $28 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($27)|0);
 $29 = ($28>>>0)<(1);
 if ($29) {
  $0 = -10;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $30 = $2;
 $31 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($30,1)|0);
 $extensionFlag = $31;
 $32 = ((($3)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $0 = -18;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $35 = HEAP8[$3>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)==(6);
 if ($37) {
  label = 14;
 } else {
  $38 = HEAP8[$3>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)==(20);
  if ($40) {
   label = 14;
  }
 }
 do {
  if ((label|0) == 14) {
   $41 = $2;
   $42 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($41)|0);
   $43 = ($42>>>0)<(3);
   if (!($43)) {
    $44 = $2;
    (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($44,3)|0);
    break;
   }
   $0 = -10;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $45 = $extensionFlag;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP8[$3>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)==(22);
  do {
   if ($49) {
    $50 = $2;
    $51 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($50)|0);
    $52 = ($51>>>0)<(16);
    if (!($52)) {
     $53 = $2;
     (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($53,16)|0);
     break;
    }
    $0 = -10;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
  } while(0);
  $54 = HEAP8[$3>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)==(17);
  if ($56) {
   label = 25;
  } else {
   $57 = HEAP8[$3>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)==(20);
   if ($59) {
    label = 25;
   } else {
    $60 = HEAP8[$3>>0]|0;
    $61 = $60&255;
    $62 = ($61|0)==(23);
    if ($62) {
     label = 25;
    }
   }
  }
  do {
   if ((label|0) == 25) {
    $63 = $2;
    $64 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($63)|0);
    $65 = ($64>>>0)<(3);
    if (!($65)) {
     $66 = $2;
     (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($66,3)|0);
     break;
    }
    $0 = -10;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
  } while(0);
  $67 = $2;
  $68 = (__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($67)|0);
  $69 = ($68>>>0)<(1);
  if ($69) {
   $0 = -10;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
  $70 = $2;
  $71 = (__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($70,1)|0);
  $extensionFlag3 = $71;
  $72 = $extensionFlag3;
  $73 = ($72|0)!=(0);
  if ($73) {
   $0 = -18;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 }
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZN25AP4_Mp4AudioDecoderConfig5ParseEPKhj($this,$data,$data_size) {
 $this = $this|0;
 $data = $data|0;
 $data_size = $data_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bits = sp + 16|0;
 $1 = $this;
 $2 = $data;
 $3 = $data_size;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 __ZN21AP4_Mp4AudioDsiParserC2EPKhj($bits,$8,$9);
 __THREW__ = 0;
 invoke_vi(1197,($7|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_iiii(1198,($7|0),($bits|0),($7|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $result = $12;
    $15 = $result;
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $result;
     $0 = $17;
     $6 = 1;
     __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
     $121 = $0;
     STACKTOP = sp;return ($121|0);
    }
    $22 = ((($7)) + 4|0);
    $23 = ((($7)) + 8|0);
    __THREW__ = 0;
    $24 = (invoke_iiiii(1200,($7|0),($bits|0),($22|0),($23|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $result = $24;
     $27 = $result;
     $28 = ($27|0)!=(0);
     if ($28) {
      $29 = $result;
      $0 = $29;
      $6 = 1;
      __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
      $121 = $0;
      STACKTOP = sp;return ($121|0);
     }
     __THREW__ = 0;
     $30 = (invoke_ii(1201,($bits|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $33 = ($30>>>0)<(4);
      if ($33) {
       $0 = -10;
       $6 = 1;
       __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
       $121 = $0;
       STACKTOP = sp;return ($121|0);
      }
      __THREW__ = 0;
      $34 = (invoke_iii(1202,($bits|0),4)|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if (!($36)) {
       $37 = ((($7)) + 16|0);
       HEAP32[$37>>2] = $34;
       $38 = ((($7)) + 16|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ((($7)) + 12|0);
       HEAP32[$40>>2] = $39;
       $41 = ((($7)) + 12|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(7);
       $44 = ((($7)) + 12|0);
       if ($43) {
        HEAP32[$44>>2] = 8;
       } else {
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45>>>0)>(7);
        if ($46) {
         $47 = ((($7)) + 12|0);
         HEAP32[$47>>2] = 0;
        }
       }
       $48 = HEAP8[$7>>0]|0;
       $49 = $48&255;
       $50 = ($49|0)==(5);
       if ($50) {
        label = 19;
       } else {
        $51 = HEAP8[$7>>0]|0;
        $52 = $51&255;
        $53 = ($52|0)==(29);
        if ($53) {
         label = 19;
        } else {
         $88 = ((($7)) + 28|0);
         $89 = ((($88)) + 2|0);
         HEAP8[$89>>0] = 0;
         $90 = ((($7)) + 28|0);
         $91 = ((($90)) + 8|0);
         HEAP32[$91>>2] = 0;
         $92 = ((($7)) + 28|0);
         $93 = ((($92)) + 4|0);
         HEAP32[$93>>2] = 0;
         $94 = ((($7)) + 28|0);
         HEAP8[$94>>0] = 0;
         $95 = ((($7)) + 28|0);
         $96 = ((($95)) + 1|0);
         HEAP8[$96>>0] = 0;
        }
       }
       do {
        if ((label|0) == 19) {
         $54 = ((($7)) + 28|0);
         $55 = ((($54)) + 2|0);
         HEAP8[$55>>0] = 5;
         $56 = ((($7)) + 28|0);
         HEAP8[$56>>0] = 1;
         $57 = HEAP8[$7>>0]|0;
         $58 = $57&255;
         $59 = ($58|0)==(29);
         $60 = ((($7)) + 28|0);
         $61 = ((($60)) + 1|0);
         $62 = $59&1;
         HEAP8[$61>>0] = $62;
         $63 = ((($7)) + 28|0);
         $64 = ((($63)) + 4|0);
         $65 = ((($7)) + 28|0);
         $66 = ((($65)) + 8|0);
         __THREW__ = 0;
         $67 = (invoke_iiiii(1200,($7|0),($bits|0),($64|0),($66|0))|0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          break L1;
         }
         $result = $67;
         $70 = $result;
         $71 = ($70|0)!=(0);
         if ($71) {
          $72 = $result;
          $0 = $72;
          $6 = 1;
          __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
          $121 = $0;
          STACKTOP = sp;return ($121|0);
         }
         __THREW__ = 0;
         $73 = (invoke_iiii(1198,($7|0),($bits|0),($7|0))|0);
         $74 = __THREW__; __THREW__ = 0;
         $75 = $74&1;
         if ($75) {
          break L1;
         }
         $result = $73;
         $76 = $result;
         $77 = ($76|0)!=(0);
         if ($77) {
          $78 = $result;
          $0 = $78;
          $6 = 1;
          __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
          $121 = $0;
          STACKTOP = sp;return ($121|0);
         }
         $79 = HEAP8[$7>>0]|0;
         $80 = $79&255;
         $81 = ($80|0)==(22);
         if ($81) {
          __THREW__ = 0;
          $82 = (invoke_ii(1201,($bits|0))|0);
          $83 = __THREW__; __THREW__ = 0;
          $84 = $83&1;
          if ($84) {
           break L1;
          }
          $85 = ($82>>>0)<(4);
          if (!($85)) {
           __THREW__ = 0;
           (invoke_iii(1202,($bits|0),4)|0);
           $86 = __THREW__; __THREW__ = 0;
           $87 = $86&1;
           if ($87) {
            break L1;
           } else {
            break;
           }
          }
          $0 = -10;
          $6 = 1;
          __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
          $121 = $0;
          STACKTOP = sp;return ($121|0);
         }
        }
       } while(0);
       $97 = HEAP8[$7>>0]|0;
       $98 = $97&255;
       switch ($98|0) {
       case 22: case 21: case 23: case 20: case 19: case 17: case 7: case 6: case 4: case 3: case 2: case 1:  {
        break;
       }
       default: {
        $0 = -18;
        $6 = 1;
        __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
        $121 = $0;
        STACKTOP = sp;return ($121|0);
       }
       }
       __THREW__ = 0;
       $99 = (invoke_iii(1203,($7|0),($bits|0))|0);
       $100 = __THREW__; __THREW__ = 0;
       $101 = $100&1;
       if (!($101)) {
        $result = $99;
        $102 = $result;
        $103 = ($102|0)==(0);
        if ($103) {
         $104 = ((($7)) + 28|0);
         $105 = ((($104)) + 2|0);
         $106 = HEAP8[$105>>0]|0;
         $107 = $106&255;
         $108 = ($107|0)!=(5);
         if ($108) {
          __THREW__ = 0;
          $109 = (invoke_ii(1201,($bits|0))|0);
          $110 = __THREW__; __THREW__ = 0;
          $111 = $110&1;
          if ($111) {
           break;
          }
          $112 = ($109>>>0)>=(16);
          if ($112) {
           __THREW__ = 0;
           $113 = (invoke_iii(1204,($7|0),($bits|0))|0);
           $114 = __THREW__; __THREW__ = 0;
           $115 = $114&1;
           if ($115) {
            break;
           }
           $result = $113;
          }
         }
        }
        $116 = $result;
        $117 = ($116|0)==(-18);
        if ($117) {
         $result = 0;
        }
        $118 = $result;
        $119 = ($118|0)!=(0);
        if ($119) {
         $120 = $result;
         $0 = $120;
         $6 = 1;
         __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
         $121 = $0;
         STACKTOP = sp;return ($121|0);
        } else {
         $0 = 0;
         $6 = 1;
         __ZN21AP4_Mp4AudioDsiParserD2Ev($bits);
         $121 = $0;
         STACKTOP = sp;return ($121|0);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $4 = $18;
 $5 = $19;
 __THREW__ = 0;
 invoke_vi(1199,($bits|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $124 = ___cxa_find_matching_catch(0|0)|0;
  $125 = tempRet0;
  ___clang_call_terminate($124);
  // unreachable;
 } else {
  $122 = $4;
  $123 = $5;
  ___resumeException($122|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN21AP4_Mp4AudioDsiParser8BitsLeftEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK14AP4_DataBuffer11GetDataSizeEv($1)|0);
 $3 = $2<<3;
 $4 = ((($1)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN21AP4_Mp4AudioDsiParser8ReadBitsEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits_avail = 0, $chunk_bits = 0, $chunk_size = 0, $data = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $result = 0;
 $3 = (__ZNK14AP4_DataBuffer7GetDataEv($2)|0);
 $data = $3;
 while(1) {
  $4 = $1;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = ((($2)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7>>>0) % 8)&-1;
  $9 = (8 - ($8))|0;
  $bits_avail = $9;
  $10 = $bits_avail;
  $11 = $1;
  $12 = ($10>>>0)>=($11>>>0);
  $13 = $1;
  $14 = $bits_avail;
  $15 = $12 ? $13 : $14;
  $chunk_size = $15;
  $16 = ((($2)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17>>>0) / 8)&-1;
  $19 = $data;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $bits_avail;
  $24 = $chunk_size;
  $25 = (($23) - ($24))|0;
  $26 = $22 >>> $25;
  $27 = $chunk_size;
  $28 = 1 << $27;
  $29 = (($28) - 1)|0;
  $30 = $26 & $29;
  $chunk_bits = $30;
  $31 = $result;
  $32 = $chunk_size;
  $33 = $31 << $32;
  $34 = $chunk_bits;
  $35 = $33 | $34;
  $result = $35;
  $36 = $chunk_size;
  $37 = $1;
  $38 = (($37) - ($36))|0;
  $1 = $38;
  $39 = $chunk_size;
  $40 = ((($2)) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($39))|0;
  HEAP32[$40>>2] = $42;
 }
 $43 = $result;
 STACKTOP = sp;return ($43|0);
}
function __ZN21AP4_Mp4AudioDsiParserC2EPKhj($this,$data,$data_size) {
 $this = $this|0;
 $data = $data|0;
 $data_size = $data_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data;
 $2 = $data_size;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN14AP4_DataBufferC2EPKvj($3,$4,$5);
 $6 = ((($3)) + 20|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN21AP4_Mp4AudioDsiParserD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14AP4_DataBufferD2Ev($1);
 STACKTOP = sp;return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[8837]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((35340|0),(1205|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[8834]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(47765,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 2047]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (35200);
  ___cxa_throw(($5|0),(2864|0),(821|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (47814|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(1206,(47829|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(1206,(47869|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(1207);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(1208)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[8797]|0;HEAP32[8797] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8803]|0;HEAP32[8803] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,2896,2912,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 2047]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 2047]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 2047]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 2047]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 2047]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $is_dst_type_derived_from_static_type$2$off09 = 0, $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $56 = ((($this)) + 16|0);
    $57 = ((($this)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($this)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$info,$current_ptr,$path_below,$use_strcmp);
    $60 = ((($this)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($this)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($info)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = ((($info)) + 54|0);
       $p2$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $91 = ((($p2$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $p2$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($info)) + 24|0);
      $77 = ((($info)) + 54|0);
      $p2$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $85 = ((($p2$1)) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $p2$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($info)) + 54|0);
    $p2$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $72 = ((($p2$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $p2$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 16|0);
     $24 = ((($this)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (((($this)) + 16|0) + ($25<<3)|0);
     $27 = ((($info)) + 52|0);
     $28 = ((($info)) + 53|0);
     $29 = ((($info)) + 54|0);
     $30 = ((($this)) + 8|0);
     $31 = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type$0$off0 = 0;$p$0 = $23;
     L34: while(1) {
      $32 = ($p$0>>>0)<($26>>>0);
      if (!($32)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      HEAP8[$27>>0] = 0;
      HEAP8[$28>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$29>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      $35 = HEAP8[$28>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
       } else {
        $37 = HEAP8[$27>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$30>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = 1;
          label = 20;
          break L34;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$31>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         $is_dst_type_derived_from_static_type$2$off09 = 1;
         break L34;
        }
        $41 = HEAP32[$30>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         $is_dst_type_derived_from_static_type$2$off09 = 1;
         break L34;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;$p$0 = $47;
     }
     if ((label|0) == 20) {
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
      } else {
       HEAP32[$14>>2] = $current_ptr;
       $48 = ((($info)) + 40|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($49) + 1)|0;
       HEAP32[$48>>2] = $50;
       $51 = ((($info)) + 36|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(1);
       if ($53) {
        $54 = HEAP32[$31>>2]|0;
        $55 = ($54|0)==(2);
        if ($55) {
         HEAP8[$29>>0] = 1;
         $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
        } else {
         $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
        }
       } else {
        $is_dst_type_derived_from_static_type$2$off09 = $is_dst_type_derived_from_static_type$2$off0;
       }
      }
     }
     $$ = $is_dst_type_derived_from_static_type$2$off09 ? 3 : 4;
     HEAP32[$20>>2] = $$;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 2047]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 2047]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $is_dst_type_derived_from_static_type$0$off03 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 2047]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 2047]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       $is_dst_type_derived_from_static_type$0$off03 = 1;
      }
     }
     if ((label|0) == 13) {
      HEAP32[$14>>2] = $current_ptr;
      $33 = ((($info)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($info)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($info)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($info)) + 54|0);
        HEAP8[$42>>0] = 1;
        $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
       } else {
        $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
       }
      } else {
       $is_dst_type_derived_from_static_type$0$off03 = $is_dst_type_derived_from_static_type$0$off02;
      }
     }
     $$1 = $is_dst_type_derived_from_static_type$0$off03 ? 3 : 4;
     HEAP32[$20>>2] = $$1;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&255;
  $6 = ((($info)) + 53|0);
  $7 = ($4&65535) >>> 8;
  $8 = $7&255;
  $9 = ((($this)) + 16|0);
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($this)) + 16|0) + ($11<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$6>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($9,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $13 = ($11|0)>(1);
  L4: do {
   if ($13) {
    $14 = ((($this)) + 24|0);
    $15 = ((($info)) + 24|0);
    $16 = ((($this)) + 8|0);
    $17 = ((($info)) + 54|0);
    $p$0 = $14;
    while(1) {
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      break L4;
     }
     $20 = HEAP16[$3>>1]|0;
     $21 = $20&255;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $28 = ($20&65535)<(256);
      if (!($28)) {
       $29 = HEAP32[$16>>2]|0;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        break L4;
       }
      }
     } else {
      $23 = HEAP32[$15>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       break L4;
      }
      $25 = HEAP32[$16>>2]|0;
      $26 = $25 & 2;
      $27 = ($26|0)==(0);
      if ($27) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$6>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $32 = ((($p$0)) + 8|0);
     $33 = ($32>>>0)<($12>>>0);
     if ($33) {
      $p$0 = $32;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $5;
  HEAP8[$6>>0] = $8;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 2047]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 2047]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,2896,2944,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[8836]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(48108,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[720]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 2047](2880,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[8836]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 2047]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(48022,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[8836]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(48067,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(48146,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((35336|0),(1209|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(47919,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[8834]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(47969,$vararg_buffer);
  // unreachable;
 }
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8841]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 35408;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (48167 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 48255;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 48255;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 48255;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 2047]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(50059,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 845;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 842;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 843;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 841;
   $34 = HEAP32[(35368)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((35392)|0));
   $37 = HEAP32[(35388)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(35388)>>2] = $4;
   ___unlock(((35392)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$01$2 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[8839]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[8839]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((35392)|0));
   $$01$2 = HEAP32[(35388)>>2]|0;
   $11 = ($$01$2|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$01$2;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((35392)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 2047]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[8841]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((1210|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit$1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit$1 = $4 & 1;
  $$lobit2 = $$lobit$1;
 }
 return ($$lobit2|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(50059,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=35412; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 2047]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((35392)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(35388)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(35388)>>2] = $14;
  }
  ___unlock(((35392)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 2047]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 2047]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 2047]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[8838]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[8841]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((1211|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 842;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 2047]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 2047]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 2047]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 2047]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 2047]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond$18 = $4 & $3;
 L1: do {
  if ($or$cond$18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond$3 = $3 | $2;
 if ($or$cond$3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn$15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn$15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn$15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn$15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond$31 = 0, $or$cond12 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((50064) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((50064) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (50320 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((50064) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((50064) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond$31 = $153 | $160;
      if ($or$cond$31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((50064) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((50064) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((50064) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((50064) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((50064) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((50064) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 2047]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 2047]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup_346($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i$33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$191$i = 0, $$a$3$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa293 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0;
 var $$lcssa302 = 0, $$lcssa304 = 0, $$lcssa314 = 0, $$lcssa317 = 0.0, $$lcssa319 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$141$i = 0, $d$0$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i$25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$2$i = 0, $isdigit$2$i$23 = 0, $isdigit$i = 0, $isdigit$i$27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$1$i = 0, $isdigittmp$1$i$22 = 0, $isdigittmp$i = 0, $isdigittmp$i$26 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i$24 = 0, $isdigittmp9 = 0, $j$0$117$i = 0;
 var $j$0$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa296 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa297 = 0, $storemerge = 0, $storemerge$13 = 0, $storemerge$851 = 0, $storemerge$899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge$899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge$851 = $storemerge$899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge$899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge$899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge$851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge$851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge$851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge$851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge$851)) + 3|0);
      $l10n$2 = 1;$storemerge$13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge$13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge$13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge$13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp$1$i = (($97) + -48)|0;
    $isdigit$2$i = ($isdigittmp$1$i>>>0)<(10);
    if ($isdigit$2$i) {
     $101 = $storemerge$851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp$1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa293 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa293;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge$851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp$1$i$22 = (($136) + -48)|0;
     $isdigit$2$i$23 = ($isdigittmp$1$i$22>>>0)<(10);
     if ($isdigit$2$i$23) {
      $140 = $107;$i$03$i$25 = 0;$isdigittmp4$i$24 = $isdigittmp$1$i$22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i$25*10)|0;
      $138 = (($137) + ($isdigittmp4$i$24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i$26 = (($142) + -48)|0;
      $isdigit$i$27 = ($isdigittmp$i$26>>>0)<(10);
      if ($isdigit$i$27) {
       $140 = $139;$i$03$i$25 = $138;$isdigittmp4$i$24 = $isdigittmp$i$26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((52401 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa298 = $147;$$lcssa299 = $149;$$lcssa300 = $150;$s$7$lcssa296 = $s$7;$st$0$lcssa297 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa299<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa299<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa300;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa300,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa296>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa297|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa297|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i$33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i$33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i$33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 52881;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 52881;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 52881;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 52881 : (52883);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (52882);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 52881;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 52881;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 52891;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 52898;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (52899) : (52904);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (52901);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa317 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa317;
          $412 = $$lcssa317 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa317;
          $415 = $414 - $$lcssa317;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (52865 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa301 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa301;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0$141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0$141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0$141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa302 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa302|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa302;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa301;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa304 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa304|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa304;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3$191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3$191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0$117$i = (($576) + 1)|0;
       $577 = ($j$0$117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0$117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa314 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(52933,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa314>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa314;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(52933,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 52917 : 52921;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 52925 : 52929;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 52881;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 52881;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (52865 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa319 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa319;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 52881;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (52881 + ($242)|0);
      $a$0 = $$lcssa319;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 52881;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa298;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtox($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$13 = 0, $$pre$i$16$i = 0, $$pre$i$i = 0, $$pre$phi$i$14Z2D = 0, $$pre$phi$i$17$iZ2D = 0, $$pre$phi$i$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$9 = 0, $R$1$i$9$lcssa = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$3$i = 0, $R$3$i$11 = 0, $R$3$i$i = 0, $RP$1$i = 0, $RP$1$i$8 = 0, $RP$1$i$8$lcssa = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $T$0$i = 0, $T$0$i$18$i = 0;
 var $T$0$i$18$i$lcssa = 0, $T$0$i$18$i$lcssa139 = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$12 = 0, $cond$i$i = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$20$i = 0, $not$$i$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i$17 = 0, $or$cond1$i = 0, $or$cond1$i$16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$5 = 0, $rsize$0$i$lcssa = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i$4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$6 = 0, $v$0$i$lcssa = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[8965]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (35900 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[8965] = $22;
     } else {
      $23 = HEAP32[(35876)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(35868)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (35900 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[8965] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(35876)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(35868)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(35880)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (35900 + ($93<<2)|0);
      $95 = HEAP32[8965]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[8965] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(35876)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(35868)>>2] = $82;
     HEAP32[(35880)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(35864)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (36164 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(35876)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (36164 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(35864)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(35864)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(35876)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(35876)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(35876)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(35868)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(35880)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (35900 + ($231<<2)|0);
       $233 = HEAP32[8965]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[8965] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(35876)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(35868)>>2] = $rsize$0$i$lcssa;
      HEAP32[(35880)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(35864)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (36164 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i$5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i$4 = $278;$v$0$i$6 = 0;
       while(1) {
        $285 = ((($t$0$i$4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i$5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i$4;$v$413$i = $t$0$i$4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i$4;
         }
        } else {
         $rsize$1$i = $rsize$0$i$5;$v$1$i = $v$0$i$6;
        }
        $291 = ((($t$0$i$4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i$4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i$5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i$4 = $295;$v$0$i$6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (36164 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(35868)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(35876)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i$11 = 0;
           break;
          } else {
           $R$1$i$9 = $371;$RP$1$i$8 = $370;
          }
         } else {
          $R$1$i$9 = $368;$RP$1$i$8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i$9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i$9 = $374;$RP$1$i$8 = $373;
           continue;
          }
          $376 = ((($R$1$i$9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i$9$lcssa = $R$1$i$9;$RP$1$i$8$lcssa = $RP$1$i$8;
           break;
          } else {
           $R$1$i$9 = $377;$RP$1$i$8 = $376;
          }
         }
         $379 = ($RP$1$i$8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i$8$lcssa>>2] = 0;
          $R$3$i$11 = $R$1$i$9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i$11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (36164 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i$11;
          $cond$i$12 = ($R$3$i$11|0)==(0|0);
          if ($cond$i$12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(35864)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(35864)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(35876)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i$11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i$11;
          }
          $396 = ($R$3$i$11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(35876)>>2]|0;
         $398 = ($R$3$i$11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i$11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i$11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i$11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(35876)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i$11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i$11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (35900 + ($428<<2)|0);
          $430 = HEAP32[8965]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[8965] = $434;
           $$pre$i$13 = ((($429)) + 8|0);
           $$pre$phi$i$14Z2D = $$pre$i$13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(35876)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i$14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i$14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (36164 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(35864)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(35864)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(35876)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(35876)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(35868)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(35880)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(35880)>>2] = $514;
   HEAP32[(35868)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(35868)>>2] = 0;
   HEAP32[(35880)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(35872)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(35872)>>2] = $529;
  $530 = HEAP32[(35884)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(35884)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[9083]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(36340)>>2] = $539;
    HEAP32[(36336)>>2] = $539;
    HEAP32[(36344)>>2] = -1;
    HEAP32[(36348)>>2] = -1;
    HEAP32[(36352)>>2] = 0;
    HEAP32[(36304)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[9083] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(36340)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(36300)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(36292)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i$16 = $557 | $558;
  if ($or$cond1$i$16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(36304)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(35884)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (36308);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(35872)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(36336)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(36292)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i$17 = $587 & $588;
      if ($or$cond$i$17) {
       $589 = HEAP32[(36300)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(36340)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(36304)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(36304)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(36292)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(36292)>>2] = $632;
  $633 = HEAP32[(36296)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(36296)>>2] = $632;
  }
  $635 = HEAP32[(35884)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(35876)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(35876)>>2] = $tbase$746$i;
    }
    HEAP32[(36308)>>2] = $tbase$746$i;
    HEAP32[(36312)>>2] = $tsize$745$i;
    HEAP32[(36320)>>2] = 0;
    $640 = HEAP32[9083]|0;
    HEAP32[(35896)>>2] = $640;
    HEAP32[(35892)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (35900 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(35884)>>2] = $654;
    HEAP32[(35872)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(36348)>>2]|0;
    HEAP32[(35888)>>2] = $660;
   } else {
    $sp$068$i = (36308);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(35872)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(35884)>>2] = $684;
       HEAP32[(35872)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(36348)>>2]|0;
       HEAP32[(35888)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(35876)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(35876)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (36308);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (36308);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(35872)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(35872)>>2] = $732;
        HEAP32[(35884)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(35880)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(35868)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(35868)>>2] = $738;
         HEAP32[(35880)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (35900 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[8965]|0;
            $765 = $764 & $763;
            HEAP32[8965] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (36164 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(35864)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(35864)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(35876)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(35876)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(35876)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (35900 + ($842<<2)|0);
         $844 = HEAP32[8965]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[8965] = $848;
           $$pre$i$16$i = ((($843)) + 8|0);
           $$pre$phi$i$17$iZ2D = $$pre$i$16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(35876)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i$17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i$17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (36164 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(35864)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(35864)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i$18$i = $893;
        while(1) {
         $899 = ((($T$0$i$18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i$18$i$lcssa = $T$0$i$18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i$18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i$18$i$lcssa139 = $T$0$i$18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i$18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(35876)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i$18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i$18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(35876)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i$20$i = ($T$0$i$18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i$20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i$18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (36308);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(35884)>>2] = $952;
    HEAP32[(35872)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(36348)>>2]|0;
    HEAP32[(35888)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(36308)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(36308)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(36308)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(36308)+12>>2]|0;
    HEAP32[(36308)>>2] = $tbase$746$i;
    HEAP32[(36312)>>2] = $tsize$745$i;
    HEAP32[(36320)>>2] = 0;
    HEAP32[(36316)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (35900 + ($973<<2)|0);
      $975 = HEAP32[8965]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[8965] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(35876)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (36164 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(35864)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(35864)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(35876)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(35876)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(35872)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(35872)>>2] = $1055;
   $1056 = HEAP32[(35884)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(35884)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(35876)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(35880)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(35868)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (35900 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[8965]|0;
     $37 = $36 & $35;
     HEAP32[8965] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (36164 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(35864)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(35864)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(35876)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(35876)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(35876)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(35884)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(35872)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(35872)>>2] = $122;
   HEAP32[(35884)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(35880)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(35880)>>2] = 0;
   HEAP32[(35868)>>2] = 0;
   return;
  }
  $127 = HEAP32[(35880)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(35868)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(35868)>>2] = $130;
   HEAP32[(35880)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (35900 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(35876)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[8965]|0;
     $154 = $153 & $152;
     HEAP32[8965] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(35876)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(35876)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(35876)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (36164 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(35864)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(35864)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(35876)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(35876)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(35876)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(35880)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(35868)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (35900 + ($235<<2)|0);
  $237 = HEAP32[8965]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[8965] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(35876)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (36164 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(35864)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(35864)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(35876)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(35876)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(35892)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(35892)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (36316);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(35892)>>2] = -1;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&2047](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&2047](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&2047](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&2047]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&2047](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&2047](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&2047](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&2047](a1|0)|0;
}


function dynCall_viidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_viidi[index&0](a1|0,a2|0,+a3,a4|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&2047](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&2047]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&2047](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&2047](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&2047](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&2047](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(2);
}
function b3(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function b4() {
 ; nullFunc_i(4);return 0;
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(8);
}
function b9(p0) {
 p0 = p0|0; nullFunc_ii(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_viidi(10);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function b12() {
 ; nullFunc_v(12);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b13(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(13);return 0;
}
function b14(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(14);return 0;
}
function b15(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b16(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function b17(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(17);return 0;
}
function b18(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(18);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamjjyRP8AP4_Atom,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN14AP4_AtomParent8AddChildEP8AP4_Atomi,b1,__ZN14AP4_AtomParent11DeleteChildEjj,__ZNK14AP4_AtomParent8GetChildEjj,__ZNK14AP4_AtomParent8GetChildEPKhj,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_StszAtom13GetSampleSizeEjRj,__ZN12AP4_StszAtom13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN13AP4_SubStream4SeekEy,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN20AP4_MemoryByteStream4SeekEy,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_Stz2Atom13GetSampleSizeEjRj,__ZN12AP4_Stz2Atom13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN19AP4_AtomSampleTable9GetSampleEjR10AP4_Sample,b1,b1
,b1,b1,__ZN19AP4_AtomSampleTable25GetNearestSyncSampleIndexEjb,b1,__ZN19AP4_AtomSampleTable14GetChunkOffsetEjRy,b1,__ZN19AP4_AtomSampleTable13SetSampleSizeEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN12AP4_SttsAtom8AddEntryEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN22AP4_StdcFileByteStream4SeekEy,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,_sn_write,b1,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,b1,b1,b1,b1,b1,__ZN14AP4_ByteStream4ReadEPvj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN14AP4_DataBuffer7SetDataEPKhj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK8AP4_ListI14AP4_DescriptorE4FindERKNS1_4Item6FinderERPS0_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN12AP4_CttsAtom8AddEntryEjj,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK8AP4_ListI9AP4_TrackE4FindERKNS1_4Item6FinderERPS0_,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRP8AP4_Atom,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK8AP4_ListI8AP4_AtomE4FindERKNS1_4Item6FinderERPS0_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN25AP4_Mp4AudioDecoderConfig20ParseAudioObjectTypeER21AP4_Mp4AudioDsiParserRh
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,__ZN33AP4_GenericVideoSampleDescriptionC2EjtttPKcP14AP4_AtomParent,b2,b2,b2,__ZN24AP4_AvcSampleDescriptionC2EjtttPKcPK12AP4_AvccAtom,__ZN25AP4_HevcSampleDescriptionC2EjtttPKcPK12AP4_HvccAtom,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN24AP4_AvcSampleDescriptionC2EjtttPKcP14AP4_AtomParent,__ZN25AP4_HevcSampleDescriptionC2EjtttPKcP14AP4_AtomParent,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN18AP4_AvcSampleEntryC2EjtttPKcRK12AP4_AvccAtom,b2,__ZN19AP4_HevcSampleEntryC2EjtttPKcRK12AP4_HvccAtom,b2,b2,b2,__ZN27AP4_DecoderConfigDescriptorC2EhhjjjP33AP4_DecoderSpecificInfoDescriptor,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN17AP4_ContainerAtomC2EjybR14AP4_ByteStreamR15AP4_AtomFactory,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_SaioAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,__ZN12AP4_SthdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_AinfAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_IkmsAtomC2EjhjR14AP4_ByteStream
,b3,b3,b3,__ZN12AP4_NmhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_TkhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_PdinAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_TfhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_StszAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,__ZN12AP4_SencAtomC2EjhjR14AP4_ByteStream,b3,b3,b3
,__ZN15AP4_UnknownAtomC2EjyR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,__ZN18AP4_AvcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_HevcSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN20AP4_AudioSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,b3,__ZN23AP4_SubtitleSampleEntryC2EjjR14AP4_ByteStreamR15AP4_AtomFactory,b3,__ZN19AP4_UnknownUuidAtomC2EyPKhR14AP4_ByteStream,__ZN28AP4_NullTerminatedStringAtomC2EjyR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN12AP4_Co64AtomC2EjhjR14AP4_ByteStream,__ZN12AP4_BlocAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_PsshAtomC2EjhjR14AP4_ByteStream,b3,b3,__ZN12AP4_EsdsAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN17AP4_ContainerAtom12ReadChildrenER15AP4_AtomFactoryR14AP4_ByteStreamy,b3,b3,b3,__ZN12AP4_IodsAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_OdafAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_Stz2AtomC2EjhjR14AP4_ByteStream,__ZN12AP4_StssAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZN30AP4_MpegAudioSampleDescriptionC2EjttP12AP4_EsdsAtom,b3,b3,b3,b3,b3,b3,b3,__ZN29AP4_SubtitleSampleDescriptionC2EjPKcS1_S1_,b3,__ZN26AP4_VideoSampleDescriptionC2EtttPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZN12AP4_SchmAtomC2EjjPKcb,__ZN12AP4_ElstAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,__ZN12AP4_MvhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_HmhdAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN20AP4_AudioSampleEntryC2Ejjtt,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN19AP4_Mp4aSampleEntryC2EjttP16AP4_EsDescriptor,b3,__ZN23AP4_SubtitleSampleEntryC2EjPKcS1_S1_,__ZN12AP4_SaizAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_StcoAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_TfdtAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_TfraAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_SgpdAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN12AP4_CttsAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_MdhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_GrpiAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_GrpiAtomC2EhPKcPKhj,__ZN12AP4_MfhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_HdlrAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_SmhdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_MehdAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_StscAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,__ZN12AP4_MfroAtomC2EjhjR14AP4_ByteStream,__ZN11AP4_UrlAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_MkidAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN12AP4_SidxAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_SbgpAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN12AP4_TencAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12AP4_SttsAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,__ZN27AP4_PiffTrackEncryptionAtomC2EjhjR14AP4_ByteStream,__ZN28AP4_PiffSampleEncryptionAtomC2EjhjR14AP4_ByteStream,__ZN20AP4_ObjectDescriptorC2ER14AP4_ByteStreamhjj,__ZN27AP4_InitialObjectDescriptorC2ER14AP4_ByteStreamhjj,b3,b3,b3,b3,b3
,b3,b3,__ZN21AP4_UnknownDescriptorC2ER14AP4_ByteStreamhjj,__ZN12AP4_TrexAtomC2EjhjR14AP4_ByteStream,__ZN12AP4_TrunAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,__ZN12AP4_IsfmAtomC2EjhjR14AP4_ByteStream,b3,__ZN12AP4_VmhdAtomC2EjhjR14AP4_ByteStream,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN22AP4_StdcFileByteStreamC2EP18AP4_FileByteStreamP8_IO_FILEy,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_i = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,___cxa_get_globals_fast,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,__ZN9AP4_ArrayIjED2Ev,__ZN9AP4_ArrayIjED0Ev,__ZN12AP4_UuidAtomD2Ev,__ZN12AP4_UuidAtomD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN19AP4_UnknownUuidAtomD2Ev,__ZN19AP4_UnknownUuidAtomD0Ev,b5,__ZN12AP4_SaioAtomD2Ev,__ZN12AP4_SaioAtomD0Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIyED2Ev,__ZN9AP4_ArrayIyED0Ev,__ZN12AP4_SthdAtomD2Ev
,__ZN12AP4_SthdAtomD0Ev,b5,__ZN12AP4_AinfAtomD2Ev,__ZN12AP4_AinfAtomD0Ev,b5,b5,__ZN21AP4_UnknownDescriptorD2Ev,__ZN21AP4_UnknownDescriptorD0Ev,b5,b5,b5,__ZN14AP4_DescriptorD2Ev,__ZN14AP4_DescriptorD0Ev,__ZN12AP4_SchmAtomD2Ev,__ZN12AP4_SchmAtomD0Ev,b5,b5,__ZN22AP4_SLConfigDescriptorD2Ev,__ZN22AP4_SLConfigDescriptorD0Ev,b5,__ZN12AP4_IkmsAtomD2Ev,__ZN12AP4_IkmsAtomD0Ev,b5,b5,b5,__ZN12AP4_NmhdAtomD2Ev,__ZN12AP4_NmhdAtomD0Ev,b5,__ZN12AP4_TkhdAtomD2Ev,__ZN12AP4_TkhdAtomD0Ev
,b5,b5,__ZN12AP4_PdinAtomD2Ev,__ZN12AP4_PdinAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEED0Ev,__ZN12AP4_IproAtomD2Ev,__ZN12AP4_IproAtomD0Ev,b5,b5,b5,b5,b5,b5,b5,__ZThn36_N12AP4_IproAtomD1Ev,__ZThn36_N12AP4_IproAtomD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI8AP4_AtomE4Item8OperatorD2Ev,__ZN8AP4_ListI8AP4_AtomE4Item8OperatorD0Ev
,__ZN21AP4_AtomListInspectorD2Ev,__ZN21AP4_AtomListInspectorD0Ev,b5,__ZN12AP4_Dec3AtomD2Ev,__ZN12AP4_Dec3AtomD0Ev,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED2Ev,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEED0Ev,__ZN12AP4_TfhdAtomD2Ev,__ZN12AP4_TfhdAtomD0Ev,b5,b5,__ZN12AP4_StszAtomD2Ev,__ZN12AP4_StszAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZN12AP4_SencAtomD2Ev,__ZN12AP4_SencAtomD0Ev,b5,b5,__ZThn36_N12AP4_SencAtomD1Ev,__ZThn36_N12AP4_SencAtomD0Ev,__ZN24AP4_CencSampleEncryptionD2Ev,__ZN24AP4_CencSampleEncryptionD0Ev
,__ZN33AP4_DecoderSpecificInfoDescriptorD2Ev,__ZN33AP4_DecoderSpecificInfoDescriptorD0Ev,b5,b5,b5,__ZN15AP4_AtomFactoryD2Ev,__ZN15AP4_AtomFactoryD0Ev,b5,__ZN22AP4_DefaultAtomFactoryD2Ev,__ZN22AP4_DefaultAtomFactoryD0Ev,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED2Ev,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEED0Ev,__ZN15AP4_AtomFactory11TypeHandlerD2Ev,__ZN15AP4_AtomFactory11TypeHandlerD0Ev,__ZN12AP4_Co64AtomD2Ev,__ZN12AP4_Co64AtomD0Ev,b5,b5,__ZN12AP4_BlocAtomD2Ev,__ZN12AP4_BlocAtomD0Ev,b5,b5,__ZN12AP4_PsshAtomD2Ev,__ZN12AP4_PsshAtomD0Ev,b5,b5,__ZN12AP4_TimsAtomD2Ev,__ZN12AP4_TimsAtomD0Ev,b5,b5
,b5,__ZN12AP4_EsdsAtomD2Ev,__ZN12AP4_EsdsAtomD0Ev,b5,b5,__ZN27AP4_DecoderConfigDescriptorD2Ev,__ZN27AP4_DecoderConfigDescriptorD0Ev,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD2Ev,__ZN8AP4_ListI14AP4_DescriptorE4Item8OperatorD0Ev,__ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD2Ev,__ZN8AP4_ListI14AP4_DescriptorE4Item6FinderD0Ev,__ZN20AP4_DescriptorFinderD2Ev,__ZN20AP4_DescriptorFinderD0Ev,b5,__ZN27AP4_DescriptorListInspectorD2Ev,__ZN27AP4_DescriptorListInspectorD0Ev,b5,__ZN24AP4_DescriptorListWriterD2Ev,__ZN24AP4_DescriptorListWriterD0Ev,b5,__ZN8AP4_ListI14AP4_DescriptorED2Ev,__ZN8AP4_ListI14AP4_DescriptorED0Ev
,__ZN25AP4_IpmpDescriptorPointerD2Ev,__ZN25AP4_IpmpDescriptorPointerD0Ev,b5,b5,__ZN18AP4_IpmpDescriptorD2Ev,__ZN18AP4_IpmpDescriptorD0Ev,b5,b5,__ZN13AP4_SubStreamD2Ev,__ZN13AP4_SubStreamD0Ev,__ZN13AP4_SubStream12AddReferenceEv,__ZN13AP4_SubStream7ReleaseEv,b5,b5,b5,b5,b5,b5,b5,__ZN20AP4_MemoryByteStreamD2Ev,__ZN20AP4_MemoryByteStreamD0Ev,__ZN20AP4_MemoryByteStream12AddReferenceEv,__ZN20AP4_MemoryByteStream7ReleaseEv,b5,b5,b5,b5,b5,__ZN14AP4_ByteStreamD2Ev,__ZN14AP4_ByteStreamD0Ev
,__ZN17AP4_ReferenceableD2Ev,__ZN17AP4_ReferenceableD0Ev,__ZN12AP4_AvccAtomD2Ev,__ZN12AP4_AvccAtomD0Ev,b5,b5,__ZN9AP4_ArrayI14AP4_DataBufferED2Ev,__ZN9AP4_ArrayI14AP4_DataBufferED0Ev,__ZN20AP4_ObjectDescriptorD2Ev,__ZN20AP4_ObjectDescriptorD0Ev,b5,b5,b5,b5,__ZN27AP4_InitialObjectDescriptorD2Ev,__ZN27AP4_InitialObjectDescriptorD0Ev,b5,b5,__ZN12AP4_OhdrAtomD2Ev,__ZN12AP4_OhdrAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZThn36_N12AP4_OhdrAtomD1Ev,__ZThn36_N12AP4_OhdrAtomD0Ev,__ZThn56_N12AP4_OhdrAtomD1Ev,__ZThn56_N12AP4_OhdrAtomD0Ev
,b5,b5,b5,__ZN14AP4_OmaDrmInfoD2Ev,__ZN14AP4_OmaDrmInfoD0Ev,__ZN12AP4_DrefAtomD2Ev,__ZN12AP4_DrefAtomD0Ev,b5,b5,__ZThn36_N12AP4_DrefAtomD1Ev,__ZThn36_N12AP4_DrefAtomD0Ev,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEED0Ev,__ZN12AP4_IodsAtomD2Ev,__ZN12AP4_IodsAtomD0Ev,b5,b5,__ZN12AP4_OdafAtomD2Ev,__ZN12AP4_OdafAtomD0Ev,b5,b5,__ZN8AP4_ListI8AP4_AtomED2Ev,__ZN8AP4_ListI8AP4_AtomED0Ev,__ZN17AP4_AtomSizeAdderD2Ev,__ZN17AP4_AtomSizeAdderD0Ev,b5,__ZN12AP4_FrmaAtomD2Ev,__ZN12AP4_FrmaAtomD0Ev,b5,b5
,__ZN16AP4_TrefTypeAtomD2Ev,__ZN16AP4_TrefTypeAtomD0Ev,b5,b5,__ZN12AP4_MoovAtomD2Ev,__ZN12AP4_MoovAtomD0Ev,b5,b5,b5,__ZThn36_N12AP4_MoovAtomD1Ev,__ZThn36_N12AP4_MoovAtomD0Ev,b5,b5,__ZN8AP4_ListI12AP4_TrakAtomED2Ev,__ZN8AP4_ListI12AP4_TrakAtomED0Ev,__ZN21AP4_TrakAtomCollectorD2Ev,__ZN21AP4_TrakAtomCollectorD0Ev,b5,__ZN12AP4_HvccAtomD2Ev,__ZN12AP4_HvccAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED2Ev,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEED0Ev,__ZN15AP4_SampleTableD2Ev,__ZN15AP4_SampleTableD0Ev,b5,__ZN12AP4_8bdlAtomD2Ev,__ZN12AP4_8bdlAtomD0Ev,b5
,b5,__ZN11AP4_SdpAtomD2Ev,__ZN11AP4_SdpAtomD0Ev,b5,b5,__ZN23AP4_CencTrackEncryptionD2Ev,__ZN23AP4_CencTrackEncryptionD0Ev,__ZN12AP4_Stz2AtomD2Ev,__ZN12AP4_Stz2AtomD0Ev,b5,b5,b5,b5,b5,b5,__ZN12AP4_StssAtomD2Ev,__ZN12AP4_StssAtomD0Ev,b5,b5,b5,__ZN15AP4_SampleEntryD2Ev,__ZN15AP4_SampleEntryD0Ev,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZThn36_N15AP4_SampleEntryD1Ev,__ZThn36_N15AP4_SampleEntryD0Ev,b5,__ZN22AP4_UnknownSampleEntryD2Ev,__ZN22AP4_UnknownSampleEntryD0Ev,b5,b5,b5,b5,b5,__ZThn36_N22AP4_UnknownSampleEntryD1Ev,__ZThn36_N22AP4_UnknownSampleEntryD0Ev,__ZN25AP4_MpegSystemSampleEntryD2Ev,__ZN25AP4_MpegSystemSampleEntryD0Ev,b5,__ZThn36_N25AP4_MpegSystemSampleEntryD1Ev,__ZThn36_N25AP4_MpegSystemSampleEntryD0Ev,__ZN19AP4_Mp4sSampleEntryD2Ev,__ZN19AP4_Mp4sSampleEntryD0Ev,b5,__ZThn36_N19AP4_Mp4sSampleEntryD1Ev,__ZThn36_N19AP4_Mp4sSampleEntryD0Ev,__ZN20AP4_AudioSampleEntryD2Ev,__ZN20AP4_AudioSampleEntryD0Ev,b5,b5,b5,b5
,b5,__ZThn36_N20AP4_AudioSampleEntryD1Ev,__ZThn36_N20AP4_AudioSampleEntryD0Ev,__ZN24AP4_MpegAudioSampleEntryD2Ev,__ZN24AP4_MpegAudioSampleEntryD0Ev,b5,__ZThn36_N24AP4_MpegAudioSampleEntryD1Ev,__ZThn36_N24AP4_MpegAudioSampleEntryD0Ev,__ZN21AP4_VisualSampleEntryD2Ev,__ZN21AP4_VisualSampleEntryD0Ev,b5,b5,b5,b5,b5,__ZThn36_N21AP4_VisualSampleEntryD1Ev,__ZThn36_N21AP4_VisualSampleEntryD0Ev,__ZN24AP4_MpegVideoSampleEntryD2Ev,__ZN24AP4_MpegVideoSampleEntryD0Ev,b5,__ZThn36_N24AP4_MpegVideoSampleEntryD1Ev,__ZThn36_N24AP4_MpegVideoSampleEntryD0Ev,__ZN18AP4_AvcSampleEntryD2Ev,__ZN18AP4_AvcSampleEntryD0Ev,b5,__ZThn36_N18AP4_AvcSampleEntryD1Ev,__ZThn36_N18AP4_AvcSampleEntryD0Ev,__ZN19AP4_HevcSampleEntryD2Ev,__ZN19AP4_HevcSampleEntryD0Ev,b5
,__ZThn36_N19AP4_HevcSampleEntryD1Ev,__ZThn36_N19AP4_HevcSampleEntryD0Ev,__ZN22AP4_RtpHintSampleEntryD2Ev,__ZN22AP4_RtpHintSampleEntryD0Ev,b5,b5,b5,b5,__ZThn36_N22AP4_RtpHintSampleEntryD1Ev,__ZThn36_N22AP4_RtpHintSampleEntryD0Ev,__ZN23AP4_SubtitleSampleEntryD2Ev,__ZN23AP4_SubtitleSampleEntryD0Ev,b5,b5,b5,b5,b5,__ZThn36_N23AP4_SubtitleSampleEntryD1Ev,__ZThn36_N23AP4_SubtitleSampleEntryD0Ev,__ZN19AP4_Mp4aSampleEntryD2Ev,__ZN19AP4_Mp4aSampleEntryD0Ev,__ZThn36_N19AP4_Mp4aSampleEntryD1Ev,__ZThn36_N19AP4_Mp4aSampleEntryD0Ev,__ZN19AP4_Mp4vSampleEntryD2Ev,__ZN19AP4_Mp4vSampleEntryD0Ev,__ZThn36_N19AP4_Mp4vSampleEntryD1Ev,__ZThn36_N19AP4_Mp4vSampleEntryD0Ev,__ZN26AP4_AudioSampleDescriptionD2Ev,__ZN26AP4_AudioSampleDescriptionD0Ev,__ZN26AP4_VideoSampleDescriptionD2Ev
,__ZN26AP4_VideoSampleDescriptionD0Ev,__ZN9AP4_MovieD2Ev,__ZN9AP4_MovieD0Ev,__ZN8AP4_ListI9AP4_TrackE4Item6FinderD2Ev,__ZN8AP4_ListI9AP4_TrackE4Item6FinderD0Ev,__ZN21AP4_TrackFinderByTypeD2Ev,__ZN21AP4_TrackFinderByTypeD0Ev,b5,__ZN19AP4_TrackFinderByIdD2Ev,__ZN19AP4_TrackFinderByIdD0Ev,b5,__ZN8AP4_ListI9AP4_TrackED2Ev,__ZN8AP4_ListI9AP4_TrackED0Ev,__ZN19AP4_EncaSampleEntryD2Ev,__ZN19AP4_EncaSampleEntryD0Ev,b5,b5,__ZThn36_N19AP4_EncaSampleEntryD1Ev,__ZThn36_N19AP4_EncaSampleEntryD0Ev,__ZN19AP4_EncvSampleEntryD2Ev,__ZN19AP4_EncvSampleEntryD0Ev,b5,b5,__ZThn36_N19AP4_EncvSampleEntryD1Ev,__ZThn36_N19AP4_EncvSampleEntryD0Ev,__ZN24AP4_ProtectionSchemeInfoD2Ev,__ZN24AP4_ProtectionSchemeInfoD0Ev,__ZN30AP4_ProtectedSampleDescriptionD2Ev,__ZN30AP4_ProtectedSampleDescriptionD0Ev,b5
,b5,b5,__ZN29AP4_DefaultBlockCipherFactoryD2Ev,__ZN29AP4_DefaultBlockCipherFactoryD0Ev,b5,__ZN19AP4_DrmsSampleEntryD2Ev,__ZN19AP4_DrmsSampleEntryD0Ev,__ZThn36_N19AP4_DrmsSampleEntryD1Ev,__ZThn36_N19AP4_DrmsSampleEntryD0Ev,__ZN19AP4_DrmiSampleEntryD2Ev,__ZN19AP4_DrmiSampleEntryD0Ev,__ZThn36_N19AP4_DrmiSampleEntryD1Ev,__ZThn36_N19AP4_DrmiSampleEntryD0Ev,__ZN22AP4_BlockCipherFactoryD2Ev,__ZN22AP4_BlockCipherFactoryD0Ev,__ZN12AP4_ElstAtomD2Ev,__ZN12AP4_ElstAtomD0Ev,b5,b5,__ZN9AP4_ArrayI13AP4_ElstEntryED2Ev,__ZN9AP4_ArrayI13AP4_ElstEntryED0Ev,__ZN12AP4_MvhdAtomD2Ev,__ZN12AP4_MvhdAtomD0Ev,b5,b5,__ZN12AP4_HmhdAtomD2Ev,__ZN12AP4_HmhdAtomD0Ev,b5,b5,__ZN12AP4_OdheAtomD2Ev
,__ZN12AP4_OdheAtomD0Ev,b5,b5,b5,__ZThn36_N12AP4_OdheAtomD1Ev,__ZThn36_N12AP4_OdheAtomD0Ev,b5,__ZN14AP4_DataBufferD2Ev,__ZN14AP4_DataBufferD0Ev,__ZN12AP4_StsdAtomD2Ev,__ZN12AP4_StsdAtomD0Ev,b5,b5,b5,b5,b5,b5,__ZThn36_N12AP4_StsdAtomD1Ev,__ZThn36_N12AP4_StsdAtomD0Ev,b5,__ZN9AP4_ArrayIP21AP4_SampleDescriptionED2Ev,__ZN9AP4_ArrayIP21AP4_SampleDescriptionED0Ev,__ZN21AP4_SampleDescriptionD2Ev,__ZN21AP4_SampleDescriptionD0Ev,b5,__ZN28AP4_UnknownSampleDescriptionD2Ev,__ZN28AP4_UnknownSampleDescriptionD0Ev,b5,b5,__ZN24AP4_AvcSampleDescriptionD2Ev
,__ZN24AP4_AvcSampleDescriptionD0Ev,b5,b5,__ZThn32_N24AP4_AvcSampleDescriptionD1Ev,__ZThn32_N24AP4_AvcSampleDescriptionD0Ev,__ZN25AP4_HevcSampleDescriptionD2Ev,__ZN25AP4_HevcSampleDescriptionD0Ev,b5,b5,__ZThn32_N25AP4_HevcSampleDescriptionD1Ev,__ZThn32_N25AP4_HevcSampleDescriptionD0Ev,__ZN31AP4_MpegSystemSampleDescriptionD2Ev,__ZN31AP4_MpegSystemSampleDescriptionD0Ev,b5,__ZN30AP4_MpegAudioSampleDescriptionD2Ev,__ZN30AP4_MpegAudioSampleDescriptionD0Ev,b5,b5,__ZThn72_N30AP4_MpegAudioSampleDescriptionD1Ev,__ZThn72_N30AP4_MpegAudioSampleDescriptionD0Ev,__ZN30AP4_MpegVideoSampleDescriptionD2Ev,__ZN30AP4_MpegVideoSampleDescriptionD0Ev,b5,__ZThn72_N30AP4_MpegVideoSampleDescriptionD1Ev,__ZThn72_N30AP4_MpegVideoSampleDescriptionD0Ev,__ZN29AP4_SubtitleSampleDescriptionD2Ev,__ZN29AP4_SubtitleSampleDescriptionD0Ev,b5,b5,__ZN33AP4_GenericAudioSampleDescriptionD2Ev
,__ZN33AP4_GenericAudioSampleDescriptionD0Ev,b5,__ZThn32_N33AP4_GenericAudioSampleDescriptionD1Ev,__ZThn32_N33AP4_GenericAudioSampleDescriptionD0Ev,__ZN33AP4_GenericVideoSampleDescriptionD2Ev,__ZN33AP4_GenericVideoSampleDescriptionD0Ev,b5,__ZThn32_N33AP4_GenericVideoSampleDescriptionD1Ev,__ZThn32_N33AP4_GenericVideoSampleDescriptionD0Ev,__ZN25AP4_MpegSampleDescriptionD2Ev,__ZN25AP4_MpegSampleDescriptionD0Ev,__ZN16AP4_EsDescriptorD2Ev,__ZN16AP4_EsDescriptorD0Ev,b5,b5,b5,b5,__ZN21AP4_EsIdIncDescriptorD2Ev,__ZN21AP4_EsIdIncDescriptorD0Ev,b5,b5,__ZN21AP4_EsIdRefDescriptorD2Ev,__ZN21AP4_EsIdRefDescriptorD0Ev,b5,b5,__ZN12AP4_SaizAtomD2Ev,__ZN12AP4_SaizAtomD0Ev,b5,b5,__ZN9AP4_ArrayIhED2Ev
,__ZN9AP4_ArrayIhED0Ev,__ZN12AP4_FtypAtomD2Ev,__ZN12AP4_FtypAtomD0Ev,b5,b5,__ZN12AP4_StcoAtomD2Ev,__ZN12AP4_StcoAtomD0Ev,b5,b5,__ZN12AP4_TfdtAtomD2Ev,__ZN12AP4_TfdtAtomD0Ev,b5,b5,__ZN12AP4_TfraAtomD2Ev,__ZN12AP4_TfraAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEED0Ev,__ZN11AP4_RtpAtomD2Ev,__ZN11AP4_RtpAtomD0Ev,b5,b5,__ZN12AP4_SgpdAtomD2Ev,__ZN12AP4_SgpdAtomD0Ev,b5,b5,__ZN8AP4_ListI14AP4_DataBufferED2Ev,__ZN8AP4_ListI14AP4_DataBufferED0Ev,__ZN9AP4_TrackD2Ev
,__ZN9AP4_TrackD0Ev,__ZN12AP4_CttsAtomD2Ev,__ZN12AP4_CttsAtomD0Ev,b5,b5,__ZN9AP4_ArrayI18AP4_CttsTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_CttsTableEntryED0Ev,__ZN12AP4_MdhdAtomD2Ev,__ZN12AP4_MdhdAtomD0Ev,b5,b5,__ZN12AP4_GrpiAtomD2Ev,__ZN12AP4_GrpiAtomD0Ev,b5,b5,b5,__ZN12AP4_MfhdAtomD2Ev,__ZN12AP4_MfhdAtomD0Ev,b5,b5,__ZN12AP4_HdlrAtomD2Ev,__ZN12AP4_HdlrAtomD0Ev,b5,b5,__ZN12AP4_SmhdAtomD2Ev,__ZN12AP4_SmhdAtomD0Ev,b5,b5,__ZN12AP4_MehdAtomD2Ev,__ZN12AP4_MehdAtomD0Ev
,b5,b5,__ZN12AP4_StscAtomD2Ev,__ZN12AP4_StscAtomD0Ev,b5,b5,b5,b5,__ZN9AP4_ArrayI18AP4_StscTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_StscTableEntryED0Ev,__ZN12AP4_OddaAtomD2Ev,__ZN12AP4_OddaAtomD0Ev,b5,b5,__ZN12AP4_MfroAtomD2Ev,__ZN12AP4_MfroAtomD0Ev,b5,b5,__ZN14AP4_ExpandableD2Ev,__ZN14AP4_ExpandableD0Ev,b5,__ZN11AP4_UrlAtomD2Ev,__ZN11AP4_UrlAtomD0Ev,b5,b5,__ZN12AP4_MkidAtomD2Ev,__ZN12AP4_MkidAtomD0Ev,b5,b5,__ZN29AP4_MarlinIpmpAtomTypeHandlerD2Ev
,__ZN29AP4_MarlinIpmpAtomTypeHandlerD0Ev,b5,__ZN25AP4_MarlinIpmpAtomFactoryD2Ev,__ZN25AP4_MarlinIpmpAtomFactoryD0Ev,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEED0Ev,__ZN8AP4_FileD2Ev,__ZN8AP4_FileD0Ev,b5,b5,b5,b5,__ZN12AP4_SidxAtomD2Ev,__ZN12AP4_SidxAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED2Ev,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEED0Ev,__ZN12AP4_SbgpAtomD2Ev,__ZN12AP4_SbgpAtomD0Ev,b5,b5,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED2Ev,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEED0Ev,__ZN19AP4_AtomSampleTableD2Ev,__ZN19AP4_AtomSampleTableD0Ev,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_TrakAtomD2Ev,__ZN12AP4_TrakAtomD0Ev,__ZThn36_N12AP4_TrakAtomD1Ev,__ZThn36_N12AP4_TrakAtomD0Ev,__ZN12AP4_TencAtomD2Ev,__ZN12AP4_TencAtomD0Ev,b5,b5,__ZThn36_N12AP4_TencAtomD1Ev,__ZThn36_N12AP4_TencAtomD0Ev,__ZN8AP4_AtomD2Ev,__ZN8AP4_AtomD0Ev,__ZN15AP4_UnknownAtomD2Ev,__ZN15AP4_UnknownAtomD0Ev,b5,b5,__ZN28AP4_NullTerminatedStringAtomD2Ev,__ZN28AP4_NullTerminatedStringAtomD0Ev,b5,b5,__ZN14AP4_AtomParentD2Ev,__ZN14AP4_AtomParentD0Ev,__ZN18AP4_AtomListWriterD2Ev
,__ZN18AP4_AtomListWriterD0Ev,b5,__ZN8AP4_ListI8AP4_AtomE4Item6FinderD2Ev,__ZN8AP4_ListI8AP4_AtomE4Item6FinderD0Ev,__ZN14AP4_AtomFinderD2Ev,__ZN14AP4_AtomFinderD0Ev,b5,__ZN17AP4_ContainerAtomD2Ev,__ZN17AP4_ContainerAtomD0Ev,__ZThn36_N17AP4_ContainerAtomD1Ev,__ZThn36_N17AP4_ContainerAtomD0Ev,__ZN12AP4_SttsAtomD2Ev,__ZN12AP4_SttsAtomD0Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayI18AP4_SttsTableEntryED2Ev,__ZN9AP4_ArrayI18AP4_SttsTableEntryED0Ev,__ZN27AP4_PiffTrackEncryptionAtomD2Ev,__ZN27AP4_PiffTrackEncryptionAtomD0Ev,b5,b5,__ZThn52_N27AP4_PiffTrackEncryptionAtomD1Ev,__ZThn52_N27AP4_PiffTrackEncryptionAtomD0Ev,__ZN28AP4_PiffSampleEncryptionAtomD2Ev,__ZN28AP4_PiffSampleEncryptionAtomD0Ev,b5,b5
,__ZThn52_N28AP4_PiffSampleEncryptionAtomD1Ev,__ZThn52_N28AP4_PiffSampleEncryptionAtomD0Ev,__ZN12AP4_TrexAtomD2Ev,__ZN12AP4_TrexAtomD0Ev,b5,b5,__ZN12AP4_TrunAtomD2Ev,__ZN12AP4_TrunAtomD0Ev,b5,b5,__ZN12AP4_IsfmAtomD2Ev,__ZN12AP4_IsfmAtomD0Ev,b5,b5,b5,__ZN12AP4_IsltAtomD2Ev,__ZN12AP4_IsltAtomD0Ev,b5,b5,__ZN12AP4_VmhdAtomD2Ev,__ZN12AP4_VmhdAtomD0Ev,b5,b5,__ZN18AP4_AesBlockCipherD2Ev,__ZN18AP4_AesBlockCipherD0Ev,b5,__ZN21AP4_AesCbcBlockCipherD2Ev,__ZN21AP4_AesCbcBlockCipherD0Ev,b5,__ZN21AP4_AesCtrBlockCipherD2Ev
,__ZN21AP4_AesCtrBlockCipherD0Ev,b5,__ZN15AP4_BlockCipherD2Ev,__ZN15AP4_BlockCipherD0Ev,__ZN12AP4_DataAtomD2Ev,__ZN12AP4_DataAtomD0Ev,b5,b5,__ZN22AP4_MetaDataStringAtomD2Ev,__ZN22AP4_MetaDataStringAtomD0Ev,b5,b5,__ZN27AP4_3GppLocalizedStringAtomD2Ev,__ZN27AP4_3GppLocalizedStringAtomD0Ev,b5,b5,__ZN17AP4_DcfStringAtomD2Ev,__ZN17AP4_DcfStringAtomD0Ev,b5,b5,__ZN12AP4_DcfdAtomD2Ev,__ZN12AP4_DcfdAtomD0Ev,b5,b5,__ZN27AP4_MetaDataAtomTypeHandlerD2Ev,__ZN27AP4_MetaDataAtomTypeHandlerD0Ev,b5,__ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED2Ev,__ZN9AP4_ArrayIN12AP4_MetaData7KeyInfoEED0Ev,__ZN8AP4_ListIN12AP4_MetaData5EntryEED2Ev
,__ZN8AP4_ListIN12AP4_MetaData5EntryEED0Ev,__ZN22AP4_StdcFileByteStreamD2Ev,__ZN22AP4_StdcFileByteStreamD0Ev,__ZN22AP4_StdcFileByteStream12AddReferenceEv,__ZN22AP4_StdcFileByteStream7ReleaseEv,b5,b5,b5,b5,b5,b5,b5,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b5,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b5,b5,b5,b5,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b5,b5,b5,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN14AP4_DataBufferC2Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIyEC2Ev,b5,b5,b5,b5,b5,b5,__ZN10AP4_StringC2Ev,b5,b5,b5,__ZN10AP4_StringD2Ev,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEC2Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIjEC2Ev,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4ItemD2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEEC2Ev
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI14AP4_DescriptorEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI14AP4_DescriptorE4ItemD2Ev,b5,b5,b5,b5,__ZN9AP4_ArrayI14AP4_DataBufferEC2Ev,__ZN12AP4_AvccAtom14UpdateRawBytesEv,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI8AP4_AtomE4ItemD2Ev,b5,__ZN8AP4_ListI12AP4_TrakAtomEC2Ev,b5,b5,__ZN8AP4_ListI12AP4_TrakAtomE4ItemD2Ev,b5,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEEC2Ev,__ZN12AP4_HvccAtom14UpdateRawBytesEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_StszAtomC2Ev,__ZN12AP4_StscAtomC2Ev,__ZN12AP4_SttsAtomC2Ev,__ZN12AP4_StssAtomC2Ev
,__ZN10AP4_SampleC2Ev,b5,b5,__ZN12AP4_CttsAtomC2Ev,b5,b5,b5,b5,b5,b5,__ZN10AP4_SampleD2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI9AP4_TrackE4ItemD2Ev,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN9AP4_ArrayI13AP4_ElstEntryEC2Ev,b5,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIP21AP4_SampleDescriptionEC2Ev,b5,b5,b5,__ZN15AP4_AtomFactory10PopContextEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN15AP4_AtomFactoryC2Ev,b5,b5,b5,__ZN12AP4_AvccAtomC2Ev
,b5,__ZN12AP4_HvccAtomC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIhEC2Ev,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEC2Ev,b5,b5,b5,b5,b5,b5,__ZN8AP4_ListI14AP4_DataBufferEC2Ev,b5,b5
,__ZN8AP4_ListI14AP4_DataBufferE4ItemD2Ev,b5,b5,__ZN9AP4_ArrayI18AP4_CttsTableEntryEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayI18AP4_StscTableEntryEC2Ev,b5,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEC2Ev,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_MetaDataD2Ev
,b5,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEC2Ev,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN14AP4_AtomParentC2Ev,b5,b5,__ZN9AP4_ArrayI18AP4_SttsTableEntryEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEC2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN12AP4_MetaData5EntryD2Ev,__ZN8AP4_ListIN12AP4_MetaData5EntryEE4ItemD2Ev,__ZN12AP4_MetaData3KeyD2Ev,b5,b5,__ZN25AP4_Mp4AudioDecoderConfig5ResetEv,b5
,__ZN21AP4_Mp4AudioDsiParserD2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup,_cleanup_346,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom,__ZN17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom,__ZN17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,__ZThn36_N17AP4_ContainerAtom14OnChildChangedEP8AP4_Atom,__ZThn36_N17AP4_ContainerAtom12OnChildAddedEP8AP4_Atom,__ZThn36_N17AP4_ContainerAtom14OnChildRemovedEP8AP4_Atom,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZN12AP4_MoovAtom12OnChildAddedEP8AP4_Atom,__ZN12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom,b6,b6,__ZThn36_N12AP4_MoovAtom12OnChildAddedEP8AP4_Atom,__ZThn36_N12AP4_MoovAtom14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN15AP4_SampleEntry14OnChildChangedEP8AP4_Atom,b6,b6
,b6,b6,b6,b6,__ZThn36_N15AP4_SampleEntry14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZN12AP4_OdheAtom14OnChildChangedEP8AP4_Atom,b6,b6,__ZThn36_N12AP4_OdheAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,__ZN12AP4_StsdAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,__ZThn36_N12AP4_StsdAtom14OnChildChangedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZN14AP4_AtomParent14OnChildChangedEP8AP4_Atom,__ZN14AP4_AtomParent12OnChildAddedEP8AP4_Atom,__ZN14AP4_AtomParent14OnChildRemovedEP8AP4_Atom,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN10AP4_StringC2EPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8AP4_ListI8AP4_AtomE4ItemC2EPS0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN14AP4_DataBufferC2ERKS_,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN27AP4_MetaDataAtomTypeHandlerC2EP15AP4_AtomFactory,b6,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE4ItemC2EPS1_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZN20AP4_MemoryByteStreamC2ER14AP4_DataBuffer,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8AP4_ListI14AP4_DescriptorE4ItemC2EPS0_,b6,b6,__ZN14AP4_DataBufferC2Ej,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN21AP4_TrakAtomCollectorC2EP8AP4_ListI12AP4_TrakAtomE,__ZN8AP4_ListI12AP4_TrakAtomE4ItemC2EPS0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN17AP4_ContainerAtomC2Ej,__ZN12AP4_StsdAtomC2EP15AP4_SampleTable,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN28AP4_UnknownSampleDescriptionC2EP8AP4_Atom,__ZN12AP4_EsdsAtomC2EP16AP4_EsDescriptor,__ZN31AP4_MpegSystemSampleDescriptionC2EP12AP4_EsdsAtom,b6,b6,b6
,b6,b6,b6,b6,__ZN12AP4_AvccAtomC2ERKS_,__ZN12AP4_HvccAtomC2ERKS_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8AP4_ListI9AP4_TrackE4ItemC2EPS0_,b6,b6,b6,b6,b6,b6,b6,__ZN24AP4_ProtectionSchemeInfoC2EP17AP4_ContainerAtom
,__ZN12AP4_FrmaAtomC2Ej,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN15AP4_AtomFactory11PushContextEj,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN20AP4_MemoryByteStreamC2Ej,b6,__ZN15AP4_SampleEntryC2Ej,b6,b6,b6
,b6,b6,b6,b6,__ZN16AP4_EsDescriptorC2Et,__ZN33AP4_DecoderSpecificInfoDescriptorC2ERK14AP4_DataBuffer,b6,__ZN22AP4_SLConfigDescriptorC2Ej,b6,__ZN19AP4_Mp4sSampleEntryC2EP16AP4_EsDescriptor,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8AP4_ListI14AP4_DataBufferE4ItemC2EPS0_
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN29AP4_MarlinIpmpAtomTypeHandlerC2EP15AP4_AtomFactory,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN23AP4_CencTrackEncryptionC2ER14AP4_ByteStream,__ZN15AP4_UnknownAtomC2ERKS_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10AP4_StringC2Ej,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,_abort_message,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZN29AP4_MarlinIpmpAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN27AP4_MetaDataAtomTypeHandler10CreateAtomEjjR14AP4_ByteStreamjRP8AP4_Atom,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZN12AP4_OhdrAtomC2EhhyPKcS1_PKhj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN30AP4_ProtectedSampleDescriptionC2EjP21AP4_SampleDescriptionjjjPKcP17AP4_ContainerAtomb,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN17AP4_ContainerAtomC2EjybhjR14AP4_ByteStreamR15AP4_AtomFactory,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_ii = [b9,b9,b9,b9,b9,__ZNK12AP4_UuidAtom13GetHeaderSizeEv,b9,b9,b9,b9,b9,b9,b9,__ZN8AP4_Atom9GetParentEv,__ZN8AP4_Atom6DetachEv,__ZN8AP4_Atom5CloneEv,b9,b9,b9,b9,b9,__ZNK8AP4_Atom13GetHeaderSizeEv,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_IkmsAtom5CloneEv,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN17AP4_ContainerAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_Dec3Atom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_StszAtom14GetSampleCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZNK33AP4_DecoderSpecificInfoDescriptor22GetDecoderSpecificInfoEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,__ZN12AP4_TimsAtom12GetTimeScaleEv,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK27AP4_DecoderConfigDescriptor32GetDecoderSpecificInfoDescriptorEv,__ZNK27AP4_DecoderConfigDescriptor23GetObjectTypeIndicationEv,__ZNK27AP4_DecoderConfigDescriptor13GetStreamTypeEv,__ZNK27AP4_DecoderConfigDescriptor13GetBufferSizeEv,__ZNK27AP4_DecoderConfigDescriptor13GetMaxBitrateEv,__ZNK27AP4_DecoderConfigDescriptor13GetAvgBitrateEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN14AP4_ByteStream5FlushEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_OhdrAtom5CloneEv,__ZNK12AP4_OhdrAtom12GetContentIdEv,__ZNK12AP4_OhdrAtom18GetRightsIssuerUrlEv,__ZNK12AP4_OhdrAtom17GetTextualHeadersEv,b9,b9,b9,b9
,__ZThn56_NK12AP4_OhdrAtom12GetContentIdEv,__ZThn56_NK12AP4_OhdrAtom18GetRightsIssuerUrlEv,__ZThn56_NK12AP4_OhdrAtom17GetTextualHeadersEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_Stz2Atom14GetSampleCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN15AP4_SampleEntry5CloneEv,b9,__ZN15AP4_SampleEntry19ToSampleDescriptionEv,b9
,__ZN15AP4_SampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,b9,__ZN22AP4_UnknownSampleEntry5CloneEv,__ZN22AP4_UnknownSampleEntry19ToSampleDescriptionEv,__ZN22AP4_UnknownSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,__ZN25AP4_MpegSystemSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,__ZN19AP4_Mp4sSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,b9,b9,__ZN20AP4_AudioSampleEntry19ToSampleDescriptionEv,__ZN20AP4_AudioSampleEntry13GetFieldsSizeEv
,b9,b9,b9,b9,b9,__ZN24AP4_MpegAudioSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,b9,b9,__ZN21AP4_VisualSampleEntry19ToSampleDescriptionEv,__ZN21AP4_VisualSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,__ZN24AP4_MpegVideoSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,__ZN18AP4_AvcSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,__ZN19AP4_HevcSampleEntry19ToSampleDescriptionEv
,b9,b9,b9,b9,b9,b9,__ZN22AP4_RtpHintSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,b9,__ZN23AP4_SubtitleSampleEntry19ToSampleDescriptionEv,__ZN23AP4_SubtitleSampleEntry13GetFieldsSizeEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN19AP4_EncaSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,b9,__ZN19AP4_EncvSampleEntry19ToSampleDescriptionEv,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZNK30AP4_ProtectedSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_StsdAtom25GetSampleDescriptionCountEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK21AP4_SampleDescription6ToAtomEv,b9,b9,b9,__ZNK28AP4_UnknownSampleDescription6ToAtomEv,b9
,b9,b9,__ZNK24AP4_AvcSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,__ZNK25AP4_HevcSampleDescription6ToAtomEv,b9,b9,b9,b9,__ZNK31AP4_MpegSystemSampleDescription6ToAtomEv,b9,b9,b9,__ZNK30AP4_MpegAudioSampleDescription6ToAtomEv,b9,b9,b9,b9,__ZNK30AP4_MpegVideoSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,__ZNK29AP4_SubtitleSampleDescription6ToAtomEv,b9
,b9,__ZNK33AP4_GenericAudioSampleDescription6ToAtomEv,b9,b9,b9,b9,__ZNK33AP4_GenericVideoSampleDescription6ToAtomEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK16AP4_EsDescriptor26GetDecoderConfigDescriptorEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_GrpiAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN19AP4_AtomSampleTable14GetSampleCountEv,b9,b9,__ZN19AP4_AtomSampleTable25GetSampleDescriptionCountEv
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN15AP4_UnknownAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_IsfmAtom5CloneEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN18AP4_AesBlockCipher12GetDirectionEv,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN22AP4_StdcFileByteStream5FlushEv,b9,b9,b9,__ZNKSt9bad_alloc4whatEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,___stdio_close,b9,b9,b9,b9,b9,b9,b9,__ZN14AP4_DataBuffer7UseDataEv,__ZNK14AP4_DataBuffer11GetDataSizeEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK14AP4_DataBuffer7GetDataEv,b9,__ZNK10AP4_String9GetLengthEv,b9,b9,b9,__Znaj,b9
,b9,__ZNK10AP4_String8GetCharsEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Znwj,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z19AP4_BytesToUInt32BEPKh,b9,b9,b9,b9,__ZN8AP4_ListIN15AP4_AtomFactory11TypeHandlerEE16DeleteReferencesEv
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN22AP4_DefaultAtomFactory10InitializeEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,__ZN12AP4_PsshAtom15GetComputedSizeEv,b9,b9,__ZN14AP4_Expandable7GetSizeEv,b9,b9,b9,__ZN14AP4_Expandable13MinHeaderSizeEj,b9,b9,b9,__ZN8AP4_ListI14AP4_DescriptorE16DeleteReferencesEv,b9,b9,b9,b9,b9,b9,__Z18AP4_BytesToInt16BEPKh,b9,b9,b9,__ZNK9AP4_ArrayI14AP4_DataBufferE9ItemCountEv,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK9AP4_ArrayIN12AP4_HvccAtom8SequenceEE9ItemCountEv,b9,b9,__Z19AP4_BytesToUInt16BEPKh,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZNK10AP4_Sample11GetDurationEv,__ZNK10AP4_Sample11GetCtsDeltaEv,b9,b9,__ZN10AP4_Sample7GetSizeEv,__ZNK10AP4_Sample6IsSyncEv,b9,b9,__ZNK10AP4_Sample19GetDescriptionIndexEv,b9,b9,__ZN12AP4_StssAtom10GetEntriesEv,__ZNK9AP4_ArrayIjE9ItemCountEv,__ZNK9AP4_ArrayIyE9ItemCountEv,b9,b9,b9,__ZNK14AP4_DataBuffer13GetBufferSizeEv,__ZNK8AP4_Atom8GetFlagsEv,b9,b9,b9,b9,b9,b9,b9,__ZN20AP4_AudioSampleEntry13GetSampleRateEv,__ZN20AP4_AudioSampleEntry13GetSampleSizeEv,__ZN20AP4_AudioSampleEntry15GetChannelCountEv
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12AP4_MvhdAtom12GetTimeScaleEv,__ZN12AP4_MoovAtom12GetTrakAtomsEv,__ZNK8AP4_ListI12AP4_TrakAtomE9FirstItemEv,__ZN8AP4_ListI12AP4_TrakAtomE4Item7GetDataEv,b9,b9,__ZN8AP4_ListI12AP4_TrakAtomE4Item7GetNextEv,__ZN8AP4_ListI9AP4_TrackE16DeleteReferencesEv,b9,b9,b9,__ZN12AP4_SchmAtom13GetSchemeTypeEv,__ZN12AP4_SchmAtom16GetSchemeVersionEv,__ZN12AP4_SchmAtom12GetSchemeUriEv,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK8AP4_ListI8AP4_AtomE9ItemCountEv,__ZNK9AP4_ArrayIP21AP4_SampleDescriptionE9ItemCountEv,b9,__ZN14AP4_AtomParent11GetChildrenEv,__ZNK8AP4_ListI8AP4_AtomE9FirstItemEv,__ZN8AP4_ListI8AP4_AtomE4Item7GetDataEv,__ZN8AP4_ListI8AP4_AtomE4Item7GetNextEv,__ZNK8AP4_Atom7GetSizeEv,b9,b9,b9,b9,b9,b9
,b9,b9,b9,__ZNK12AP4_EsdsAtom15GetEsDescriptorEv,b9,b9,b9,b9,__ZNK25AP4_MpegSampleDescription18CreateEsDescriptorEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK8AP4_ListI14AP4_DataBufferE9FirstItemEv,__ZN8AP4_ListI14AP4_DataBufferE4Item7GetDataEv,__ZN8AP4_ListI14AP4_DataBufferE4Item7GetNextEv,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK8AP4_Atom7GetTypeEv,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN8AP4_ListI8AP4_AtomE16DeleteReferencesEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZN12AP4_TrunAtom26ComputeOptionalFieldsCountEj,__ZN12AP4_TrunAtom24ComputeRecordFieldsCountEj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN8AP4_ListIN12AP4_MetaData5EntryEE16DeleteReferencesEv,b9,__ZN10AP4_String8UseCharsEv,b9,b9,b9,b9,_fclose,b9,b9
,b9,b9,__ZN21AP4_Mp4AudioDsiParser8BitsLeftEv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viidi = [b10];
var FUNCTION_TABLE_viii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN15AP4_SampleEntry4ReadER14AP4_ByteStreamR15AP4_AtomFactory
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN12AP4_Dec3AtomC2EjPKh,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN12AP4_FrmaAtomC2EjR14AP4_ByteStream,__ZN12AP4_FtypAtomC2EjR14AP4_ByteStream,__ZN12AP4_TimsAtomC2EjR14AP4_ByteStream,__ZN11AP4_SdpAtomC2EjR14AP4_ByteStream,__ZN12AP4_IsltAtomC2EjR14AP4_ByteStream,__ZN11AP4_RtpAtomC2EjR14AP4_ByteStream,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10AP4_String6AssignEPKcj,b11,b11,__ZN12AP4_AvccAtomC2EjPKh,b11,b11,b11,b11,b11,b11,b11
,b11,__ZN14AP4_DataBufferC2EPKvj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN12AP4_HvccAtomC2EjPKh,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN12AP4_StcoAtomC2EPjj,__ZN12AP4_Co64AtomC2EPyj,__ZN12AP4_8bdlAtomC2EjR14AP4_ByteStream,b11,b11,b11,b11,b11,__ZN22AP4_UnknownSampleEntryC2EjR14AP4_DataBuffer,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,__ZN19AP4_AtomSampleTableC2EP17AP4_ContainerAtomR14AP4_ByteStream,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN18AP4_SttsTableEntryC2Ejj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN21AP4_AesCbcBlockCipherC2EN15AP4_BlockCipher15CipherDirectionEP7aes_ctx,b11,__ZN12AP4_DataAtomC2EjR14AP4_ByteStream,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_v = [b12,b12,b12,b12,b12,b12,b12,b12,___cxa_pure_virtual__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZL25default_terminate_handlerv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b12,___cxa_end_catch__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZN29AP4_DefaultBlockCipherFactory12CreateCipherEN15AP4_BlockCipher10CipherTypeENS0_15CipherDirectionENS0_10CipherModeEPKvPKhjRPS0_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN14AP4_AtomParent9FindChildEPKcbb,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN13AP4_SubStream11ReadPartialEPvjRj,__ZN13AP4_SubStream12WritePartialEPKvjRj,b14,b14,b14,__ZN14AP4_ByteStream6CopyToERS_y,b14,b14,b14,b14,b14,__ZN20AP4_MemoryByteStream11ReadPartialEPvjRj,__ZN20AP4_MemoryByteStream12WritePartialEPKvjRj,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,__ZN12AP4_StscAtom8AddEntryEjjj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN19AP4_AtomSampleTable22GetSampleChunkPositionEjRjS0_,b14
,b14,__ZN19AP4_AtomSampleTable26GetSampleIndexForTimeStampEyRj,b14,b14,b14,__ZN19AP4_AtomSampleTable14SetChunkOffsetEjy,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN12AP4_SttsAtom6GetDtsEjRyPj,b14,__ZN12AP4_SttsAtom26GetSampleIndexForTimeStampEyRj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,__ZN22AP4_StdcFileByteStream11ReadPartialEPvjRj,__ZN22AP4_StdcFileByteStream12WritePartialEPKvjRj,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN15AP4_AtomFactory20CreateAtomFromStreamER14AP4_ByteStreamRyRP8AP4_Atom,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,__ZN25AP4_Mp4AudioDecoderConfig22ParseSamplingFrequencyER21AP4_Mp4AudioDsiParserRjS2_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15,b15,b15,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_SchmAtomC2EjhjbR14AP4_ByteStream,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_IproAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN13AP4_SubStreamC2ER14AP4_ByteStreamyy,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,__ZN12AP4_OhdrAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b15,b15,b15,b15,__ZN12AP4_DrefAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,__ZN33AP4_GenericAudioSampleDescriptionC2EjjttP14AP4_AtomParent,b15,b15,__ZN30AP4_MpegVideoSampleDescriptionC2EtttPKcP12AP4_EsdsAtom,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,__ZN13AP4_ElstEntryC2Eyxt,b15,b15,b15,__ZN12AP4_OdheAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN12AP4_StsdAtomC2EjhjR14AP4_ByteStreamR15AP4_AtomFactory,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN21AP4_VisualSampleEntryC2EjtttPKc,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN19AP4_Mp4vSampleEntryC2EtttPKcP16AP4_EsDescriptor,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN12AP4_OddaAtomC2EyhjR14AP4_ByteStream,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN27AP4_3GppLocalizedStringAtomC2EjjhjR14AP4_ByteStream,__ZN17AP4_DcfStringAtomC2EjjhjR14AP4_ByteStream,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iii = [b16,b16,b16,b16,b16,b16,__ZN8AP4_Atom5WriteER14AP4_ByteStream,__ZN12AP4_UuidAtom11WriteHeaderER14AP4_ByteStream,b16,__ZN8AP4_Atom7InspectER17AP4_AtomInspector,__ZN12AP4_UuidAtom13InspectHeaderER17AP4_AtomInspector,__ZN8AP4_Atom13InspectFieldsER17AP4_AtomInspector,__ZN8AP4_Atom9SetParentEP14AP4_AtomParent,b16,b16,b16,b16,b16,__ZN19AP4_UnknownUuidAtom11WriteFieldsER14AP4_ByteStream,b16,b16,b16,__ZN8AP4_Atom11WriteHeaderER14AP4_ByteStream,__ZN12AP4_SaioAtom11WriteFieldsER14AP4_ByteStream,__ZN8AP4_Atom13InspectHeaderER17AP4_AtomInspector,__ZN12AP4_SaioAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16
,b16,__ZN12AP4_SthdAtom11WriteFieldsER14AP4_ByteStream,b16,b16,__ZN12AP4_AinfAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_AinfAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN14AP4_Expandable5WriteER14AP4_ByteStream,__ZN21AP4_UnknownDescriptor11WriteFieldsER14AP4_ByteStream,__ZN14AP4_Descriptor7InspectER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_SchmAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SchmAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN22AP4_SLConfigDescriptor11WriteFieldsER14AP4_ByteStream,b16,b16,__ZN12AP4_IkmsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IkmsAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,__ZN12AP4_NmhdAtom11WriteFieldsER14AP4_ByteStream,b16,b16
,__ZN12AP4_TkhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TkhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_PdinAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_PdinAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_IproAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IproAtom13InspectFieldsER17AP4_AtomInspector,b16,__ZN17AP4_ContainerAtom15InspectChildrenER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,__ZN14AP4_AtomParent11RemoveChildEP8AP4_Atom,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,__ZNK21AP4_AtomListInspector6ActionEP8AP4_Atom,b16,b16,__ZN12AP4_Dec3Atom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_Dec3Atom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,__ZN12AP4_TfhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_StszAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StszAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,__ZN12AP4_StszAtom8AddEntryEj,b16,b16,__ZN12AP4_SencAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SencAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16
,b16,b16,__ZN33AP4_DecoderSpecificInfoDescriptor11WriteFieldsER14AP4_ByteStream,__ZN33AP4_DecoderSpecificInfoDescriptor7InspectER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_Co64Atom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_Co64Atom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_BlocAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_BlocAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_PsshAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_PsshAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_TimsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TimsAtom13InspectFieldsER17AP4_AtomInspector
,b16,b16,b16,__ZN12AP4_EsdsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_EsdsAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN27AP4_DecoderConfigDescriptor11WriteFieldsER14AP4_ByteStream,__ZN27AP4_DecoderConfigDescriptor7InspectER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK20AP4_DescriptorFinder4TestEP14AP4_Descriptor,b16,b16,__ZNK27AP4_DescriptorListInspector6ActionEP14AP4_Descriptor,b16,b16,__ZNK24AP4_DescriptorListWriter6ActionEP14AP4_Descriptor,b16,b16
,b16,b16,__ZN25AP4_IpmpDescriptorPointer11WriteFieldsER14AP4_ByteStream,__ZN25AP4_IpmpDescriptorPointer7InspectER17AP4_AtomInspector,b16,b16,__ZN18AP4_IpmpDescriptor11WriteFieldsER14AP4_ByteStream,__ZN18AP4_IpmpDescriptor7InspectER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,__ZN13AP4_SubStream4TellERy,__ZN13AP4_SubStream7GetSizeERy,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN20AP4_MemoryByteStream4TellERy,__ZN20AP4_MemoryByteStream7GetSizeERy,b16,b16
,b16,b16,b16,b16,__ZN12AP4_AvccAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_AvccAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN20AP4_ObjectDescriptor11WriteFieldsER14AP4_ByteStream,__ZN20AP4_ObjectDescriptor7InspectER17AP4_AtomInspector,__ZN20AP4_ObjectDescriptor16AddSubDescriptorEP14AP4_Descriptor,__ZNK20AP4_ObjectDescriptor17FindSubDescriptorEh,b16,b16,__ZN27AP4_InitialObjectDescriptor11WriteFieldsER14AP4_ByteStream,__ZN27AP4_InitialObjectDescriptor7InspectER17AP4_AtomInspector,b16,b16,__ZN12AP4_OhdrAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OhdrAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_DrefAtom11WriteFieldsER14AP4_ByteStream,__ZN17AP4_ContainerAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,__ZN12AP4_IodsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IodsAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_OdafAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OdafAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZNK17AP4_AtomSizeAdder6ActionEP8AP4_Atom,b16,b16,__ZN12AP4_FrmaAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_FrmaAtom13InspectFieldsER17AP4_AtomInspector
,b16,b16,__ZN16AP4_TrefTypeAtom11WriteFieldsER14AP4_ByteStream,__ZN16AP4_TrefTypeAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN17AP4_ContainerAtom11WriteFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK21AP4_TrakAtomCollector6ActionEP8AP4_Atom,b16,b16,__ZN12AP4_HvccAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HvccAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN15AP4_SampleTable16GenerateStblAtomERP17AP4_ContainerAtom,b16,b16,__ZN12AP4_8bdlAtom11WriteFieldsER14AP4_ByteStream
,__ZN12AP4_8bdlAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN11AP4_SdpAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_SdpAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_Stz2Atom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_Stz2Atom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,__ZN12AP4_Stz2Atom8AddEntryEj,b16,b16,__ZN12AP4_StssAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StssAtom13InspectFieldsER17AP4_AtomInspector,__ZN12AP4_StssAtom12IsSampleSyncEj,b16,b16,__ZN15AP4_SampleEntry5WriteER14AP4_ByteStream,__ZN15AP4_SampleEntry11WriteFieldsER14AP4_ByteStream,__ZN15AP4_SampleEntry7InspectER17AP4_AtomInspector,__ZN15AP4_SampleEntry13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16
,b16,__ZN15AP4_SampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,__ZN22AP4_UnknownSampleEntry11WriteFieldsER14AP4_ByteStream,b16,b16,b16,__ZN22AP4_UnknownSampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN20AP4_AudioSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN20AP4_AudioSampleEntry13InspectFieldsER17AP4_AtomInspector,b16,b16
,__ZN20AP4_AudioSampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN21AP4_VisualSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN21AP4_VisualSampleEntry13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN21AP4_VisualSampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,__ZN22AP4_RtpHintSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN22AP4_RtpHintSampleEntry13InspectFieldsER17AP4_AtomInspector,b16,__ZN22AP4_RtpHintSampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,__ZN23AP4_SubtitleSampleEntry11WriteFieldsER14AP4_ByteStream,__ZN23AP4_SubtitleSampleEntry13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN23AP4_SubtitleSampleEntry10ReadFieldsER14AP4_ByteStream,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,__ZNK21AP4_TrackFinderByType4TestEP9AP4_Track,b16,b16,__ZNK19AP4_TrackFinderById4TestEP9AP4_Track,b16,b16,b16,b16,b16,__ZN19AP4_EncaSampleEntry25ToTargetSampleDescriptionEj,b16,b16,b16,b16,b16,__ZN19AP4_EncvSampleEntry25ToTargetSampleDescriptionEj,b16,b16,b16,b16,b16,b16,__ZN21AP4_SampleDescription5CloneEPi
,__ZN21AP4_SampleDescription14GetCodecStringER10AP4_String,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_ElstAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_ElstAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_MvhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MvhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_HmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HmhdAtom13InspectFieldsER17AP4_AtomInspector,b16
,b16,__ZN12AP4_OdheAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OdheAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_StsdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StsdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_StsdAtom20GetSampleDescriptionEj,__ZN12AP4_StsdAtom14GetSampleEntryEj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN28AP4_UnknownSampleDescription5CloneEPi,b16,b16
,b16,__ZN24AP4_AvcSampleDescription14GetCodecStringER10AP4_String,b16,b16,b16,b16,b16,__ZN25AP4_HevcSampleDescription14GetCodecStringER10AP4_String,b16,b16,b16,b16,b16,b16,b16,b16,__ZN30AP4_MpegAudioSampleDescription14GetCodecStringER10AP4_String,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN29AP4_SubtitleSampleDescription5CloneEPi,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN16AP4_EsDescriptor11WriteFieldsER14AP4_ByteStream,__ZN16AP4_EsDescriptor7InspectER17AP4_AtomInspector,__ZN16AP4_EsDescriptor16AddSubDescriptorEP14AP4_Descriptor,b16,b16,b16,__ZN21AP4_EsIdIncDescriptor11WriteFieldsER14AP4_ByteStream,__ZN21AP4_EsIdIncDescriptor7InspectER17AP4_AtomInspector,b16,b16,__ZN21AP4_EsIdRefDescriptor11WriteFieldsER14AP4_ByteStream,__ZN21AP4_EsIdRefDescriptor7InspectER17AP4_AtomInspector,b16,b16,__ZN12AP4_SaizAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SaizAtom13InspectFieldsER17AP4_AtomInspector,b16
,b16,b16,b16,__ZN12AP4_FtypAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_FtypAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_StcoAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StcoAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_TfdtAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfdtAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_TfraAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TfraAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN11AP4_RtpAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_RtpAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_SgpdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SgpdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16
,b16,b16,b16,__ZN12AP4_CttsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_CttsAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_MdhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MdhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_GrpiAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_GrpiAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,__ZN12AP4_MfhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MfhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_HdlrAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_HdlrAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_SmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SmhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16
,__ZN12AP4_MehdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MehdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_StscAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_StscAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,__ZN12AP4_OddaAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_OddaAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_MfroAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MfroAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN14AP4_Expandable7InspectER17AP4_AtomInspector,b16,b16,__ZN11AP4_UrlAtom11WriteFieldsER14AP4_ByteStream,__ZN11AP4_UrlAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_MkidAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_MkidAtom13InspectFieldsER17AP4_AtomInspector,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN8AP4_File7InspectER17AP4_AtomInspector,b16,b16,__ZN12AP4_SidxAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SidxAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN12AP4_SbgpAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SbgpAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,b16
,__ZN19AP4_AtomSampleTable20GetSampleDescriptionEj,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_TencAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TencAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,__ZN15AP4_UnknownAtom11WriteFieldsER14AP4_ByteStream,b16,b16,b16,__ZN28AP4_NullTerminatedStringAtom11WriteFieldsER14AP4_ByteStream,__ZN28AP4_NullTerminatedStringAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16
,b16,__ZNK18AP4_AtomListWriter6ActionEP8AP4_Atom,b16,b16,b16,b16,__ZNK14AP4_AtomFinder4TestEP8AP4_Atom,b16,b16,b16,b16,b16,b16,__ZN12AP4_SttsAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_SttsAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16,__ZN27AP4_PiffTrackEncryptionAtom11WriteFieldsER14AP4_ByteStream,__ZN27AP4_PiffTrackEncryptionAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,__ZN28AP4_PiffSampleEncryptionAtom11WriteFieldsER14AP4_ByteStream,__ZN28AP4_PiffSampleEncryptionAtom13InspectFieldsER17AP4_AtomInspector
,b16,b16,b16,b16,__ZN12AP4_TrexAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TrexAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_TrunAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_TrunAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_IsfmAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IsfmAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,__ZN12AP4_IsltAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_IsltAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_VmhdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_VmhdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,__ZN12AP4_DataAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_DataAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN22AP4_MetaDataStringAtom11WriteFieldsER14AP4_ByteStream,__ZN22AP4_MetaDataStringAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN27AP4_3GppLocalizedStringAtom11WriteFieldsER14AP4_ByteStream,__ZN27AP4_3GppLocalizedStringAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN17AP4_DcfStringAtom11WriteFieldsER14AP4_ByteStream,__ZN17AP4_DcfStringAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,__ZN12AP4_DcfdAtom11WriteFieldsER14AP4_ByteStream,__ZN12AP4_DcfdAtom13InspectFieldsER17AP4_AtomInspector,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,__ZN22AP4_StdcFileByteStream4TellERy,__ZN22AP4_StdcFileByteStream7GetSizeERy,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN14AP4_DataBuffer11SetDataSizeEj,b16,b16,b16,b16,b16,__ZN14AP4_ByteStream8ReadUI32ERj,__ZN9AP4_ArrayIyE12SetItemCountEj,__ZN9AP4_ArrayIyEixEm,__ZN14AP4_ByteStream8ReadUI64ERy,b16,b16,b16,b16,__ZN10AP4_StringaSEPKc,b16,b16,b16,__ZN14AP4_ByteStream8ReadUI16ERt,b16,b16
,b16,b16,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_PdinAtom5EntryEEixEm,b16,b16,__ZN8AP4_ListI8AP4_AtomE3AddEPS0_,__ZNK8AP4_ListI8AP4_AtomE5ApplyERKNS1_4Item8OperatorE,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_Dec3Atom9SubStreamEEixEm,b16,b16,b16,__ZN9AP4_ArrayIjE12SetItemCountEj,b16,__ZN9AP4_ArrayIjEixEm,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,__ZN21AP4_DescriptorFactory26CreateDescriptorFromStreamER14AP4_ByteStreamRP14AP4_Descriptor,b16,__ZN8AP4_ListI14AP4_DescriptorE3AddEPS0_,b16,__ZN14AP4_ByteStream8ReadUI08ERh,__ZN14AP4_ByteStream8ReadUI24ERj,b16,b16,__ZNK8AP4_ListI14AP4_DescriptorE5ApplyERKNS1_4Item8OperatorE,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK9AP4_ArrayI14AP4_DataBufferEixEm,__ZN9AP4_ArrayI14AP4_DataBufferE6AppendERKS0_,__ZN9AP4_ArrayI14AP4_DataBufferE14EnsureCapacityEj,__ZN9AP4_ArrayI14AP4_DataBufferEixEm
,b16,b16,b16,__ZN14AP4_DataBuffer7ReserveEj,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIjE6AppendERKj,b16,b16,b16,b16,b16,b16,b16,b16,__ZNK9AP4_ArrayIN12AP4_HvccAtom8SequenceEEixEm,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE6AppendERKS1_,b16,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_HvccAtom8SequenceEEixEm,__ZN9AP4_ArrayI14AP4_DataBufferE12SetItemCountEj,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,__ZN12AP4_StssAtom8AddEntryEj,__ZN9AP4_ArrayIyE6AppendERKy,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN8AP4_ListI9AP4_TrackE3AddEPS0_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,__ZN9AP4_ArrayI13AP4_ElstEntryE14EnsureCapacityEj,b16,__ZN9AP4_ArrayI13AP4_ElstEntryE6AppendERKS0_,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIP21AP4_SampleDescriptionE14EnsureCapacityEj,__ZN9AP4_ArrayIP21AP4_SampleDescriptionE6AppendERKS1_,b16,b16,b16,b16,__ZN9AP4_ArrayIP21AP4_SampleDescriptionEixEm,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIhE12SetItemCountEj,__ZN9AP4_ArrayIhEixEm,b16,b16,b16,b16,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_TfraAtom5EntryEEixEm,b16,b16,b16,b16,b16,__ZN8AP4_ListI14AP4_DataBufferE3AddEPS0_,b16
,b16,b16,b16,b16,__ZN9AP4_ArrayI18AP4_CttsTableEntryE12SetItemCountEj,__ZN9AP4_ArrayI18AP4_CttsTableEntryEixEm,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN9AP4_ArrayI18AP4_StscTableEntryE12SetItemCountEj,__ZN9AP4_ArrayI18AP4_StscTableEntryEixEm,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_MkidAtom5EntryEEixEm,b16,__ZN15AP4_AtomFactory14AddTypeHandlerEPNS_11TypeHandlerE,b16,b16,b16,b16
,b16,b16,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_SidxAtom9ReferenceEEixEm,b16,b16,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_SbgpAtom5EntryEEixEm,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN9AP4_ArrayI18AP4_SttsTableEntryE6AppendERKS0_,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEE12SetItemCountEj,__ZN9AP4_ArrayIN12AP4_TrunAtom5EntryEEixEm,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,__ZN21AP4_Mp4AudioDsiParser8ReadBitsEj,__ZN25AP4_Mp4AudioDecoderConfig19ParseGASpecificInfoER21AP4_Mp4AudioDsiParser,__ZN25AP4_Mp4AudioDecoderConfig14ParseExtensionER21AP4_Mp4AudioDsiParser,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,__ZN12AP4_StscAtom17GetChunkForSampleEjRjS0_S0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,__ZN19AP4_AtomSampleTable17GetChunkForSampleEjRjS0_S0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN21AP4_AesCbcBlockCipher7ProcessEPKhjPhS1_,b17
,b17,__ZN21AP4_AesCtrBlockCipher7ProcessEPKhjPhS1_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b18,b18,b18,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b18,b18,b18
,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b18,b18,b18,b18,b18,b18,__ZN8AP4_FileC2ER14AP4_ByteStreamR15AP4_AtomFactoryb,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,__ZN12AP4_IkmsAtomC2EPKcjj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN24AP4_CencSampleEncryptionC2ER8AP4_AtomjR14AP4_ByteStream,b18,b18
,b18,__ZN19AP4_Mp4aSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_Mp4vSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_Mp4sSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_EncaSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_EncvSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_DrmsSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN19AP4_DrmiSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b18,b18,b18,__ZN22AP4_RtpHintSampleEntryC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b18,__ZN22AP4_UnknownSampleEntryC2EjjR14AP4_ByteStream,b18,b18,b18,b18,b18,b18,__ZN12AP4_MoovAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory,__ZN12AP4_TrakAtomC2EjR14AP4_ByteStreamR15AP4_AtomFactory,b18,b18,b18,b18,b18,b18,__ZN16AP4_TrefTypeAtomC2EjjR14AP4_ByteStream,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,___assert_fail__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN21AP4_SampleDescriptionC2ENS_4TypeEjP14AP4_AtomParent,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,__ZN8AP4_Atom7SetSizeEyb,b18,__ZN26AP4_AudioSampleDescriptionC2Ejtt,b18,b18,b18,b18,b18,__ZN9AP4_TrackC2ER12AP4_TrakAtomR14AP4_ByteStreamj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN9AP4_MovieC2EP12AP4_MoovAtomR14AP4_ByteStreamb,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN17AP4_ContainerAtomC2Ejhj,b18,b18,b18,b18,b18,b18,b18,b18,__ZN21AP4_EsIdIncDescriptorC2ER14AP4_ByteStreamjj,__ZN21AP4_EsIdRefDescriptorC2ER14AP4_ByteStreamjj,__ZN16AP4_EsDescriptorC2ER14AP4_ByteStreamjj,__ZN27AP4_DecoderConfigDescriptorC2ER14AP4_ByteStreamjj,__ZN33AP4_DecoderSpecificInfoDescriptorC2ER14AP4_ByteStreamjj
,__ZN25AP4_IpmpDescriptorPointerC2ER14AP4_ByteStreamjj,__ZN18AP4_IpmpDescriptorC2ER14AP4_ByteStreamjj,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN12AP4_IsfmAtomC2Ebhh,b18,b18,__ZN21AP4_AesCtrBlockCipherC2EN15AP4_BlockCipher15CipherDirectionEjP7aes_ctx,b18,__ZN22AP4_MetaDataStringAtomC2EjjR14AP4_ByteStream,b18,b18,__ZN12AP4_DcfdAtomC2EhjR14AP4_ByteStream,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_Mp4Split_cpp: __GLOBAL__sub_I_Mp4Split_cpp, __GLOBAL__sub_I_Ap4_cpp: __GLOBAL__sub_I_Ap4_cpp, __GLOBAL__sub_I_Ap4AtomFactory_cpp: __GLOBAL__sub_I_Ap4AtomFactory_cpp, __GLOBAL__sub_I_Ap4Protection_cpp: __GLOBAL__sub_I_Ap4Protection_cpp, __GLOBAL__sub_I_Ap4Marlin_cpp: __GLOBAL__sub_I_Ap4Marlin_cpp, __GLOBAL__sub_I_Ap4MetaData_cpp: __GLOBAL__sub_I_Ap4MetaData_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viidi: dynCall_viidi, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real___GLOBAL__sub_I_Ap4AtomFactory_cpp = asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"]; asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4AtomFactory_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_Mp4Split_cpp = asm["__GLOBAL__sub_I_Mp4Split_cpp"]; asm["__GLOBAL__sub_I_Mp4Split_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Mp4Split_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4MetaData_cpp = asm["__GLOBAL__sub_I_Ap4MetaData_cpp"]; asm["__GLOBAL__sub_I_Ap4MetaData_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4MetaData_cpp.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4Marlin_cpp = asm["__GLOBAL__sub_I_Ap4Marlin_cpp"]; asm["__GLOBAL__sub_I_Ap4Marlin_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4Marlin_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4Protection_cpp = asm["__GLOBAL__sub_I_Ap4Protection_cpp"]; asm["__GLOBAL__sub_I_Ap4Protection_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4Protection_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_Ap4_cpp = asm["__GLOBAL__sub_I_Ap4_cpp"]; asm["__GLOBAL__sub_I_Ap4_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Ap4_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var __GLOBAL__sub_I_Ap4AtomFactory_cpp = Module["__GLOBAL__sub_I_Ap4AtomFactory_cpp"] = asm["__GLOBAL__sub_I_Ap4AtomFactory_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_Mp4Split_cpp = Module["__GLOBAL__sub_I_Mp4Split_cpp"] = asm["__GLOBAL__sub_I_Mp4Split_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var __GLOBAL__sub_I_Ap4MetaData_cpp = Module["__GLOBAL__sub_I_Ap4MetaData_cpp"] = asm["__GLOBAL__sub_I_Ap4MetaData_cpp"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __GLOBAL__sub_I_Ap4Marlin_cpp = Module["__GLOBAL__sub_I_Ap4Marlin_cpp"] = asm["__GLOBAL__sub_I_Ap4Marlin_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__sub_I_Ap4Protection_cpp = Module["__GLOBAL__sub_I_Ap4Protection_cpp"] = asm["__GLOBAL__sub_I_Ap4Protection_cpp"];
var __GLOBAL__sub_I_Ap4_cpp = Module["__GLOBAL__sub_I_Ap4_cpp"] = asm["__GLOBAL__sub_I_Ap4_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidi = Module["dynCall_viidi"] = asm["dynCall_viidi"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



  return Module['return'];
}

if (typeof(exports) !== 'undefined') {
  mp4split.call(this);
}
